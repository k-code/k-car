   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 18, 4
  12              		.thumb
  13              		.file	"stm32f4xx_dma.c"
  23              	.Ltext0:
  24              		.file 1 "../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c"
 24621              		.align	2
 24622              		.global	DMA_DeInit
 24623              		.thumb
 24624              		.thumb_func
 24626              	DMA_DeInit:
 24627              	.LFB110:
   1:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
   2:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   ******************************************************************************
   3:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @file    stm32f4xx_dma.c
   4:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @author  MCD Application Team
   5:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @version V1.0.0
   6:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @date    30-September-2011
   7:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          functionalities of the Direct Memory Access controller (DMA):           
   9:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           - Initialization and Configuration
  10:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           - Data Counter
  11:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           - Double Buffer mode configuration and command  
  12:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           - Interrupts and flags management
  13:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           
  14:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *  @verbatim
  15:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *      
  16:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          ===================================================================      
  17:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                                 How to use this driver
  18:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          =================================================================== 
  19:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          1. Enable The DMA controller clock using RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_DMA1, E
  20:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             function for DMA1 or using RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_DMA2, ENABLE)
  21:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             function for DMA2.
  22:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *
  23:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          2. Enable and configure the peripheral to be connected to the DMA Stream
  24:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             (except for internal SRAM / FLASH memories: no initialization is 
  25:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             necessary). 
  26:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        
  27:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          3. For a given Stream, program the required configuration through following parameters
  28:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             Source and Destination addresses, Transfer Direction, Transfer size, Source and Des
  29:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             data formats, Circular or Normal mode, Stream Priority level, Source and Destinatio
  30:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             Incrementation mode, FIFO mode and its Threshold (if needed), Burst mode for Source
  31:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             Destination (if needed) using the DMA_Init() function.
  32:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             To avoid filling un-nesecessary fields, you can call DMA_StructInit() function
  33:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             to initialize a given structure with default values (reset values), the modify
  34:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             only necessary fields (ie. Source and Destination addresses, Transfer size and Data
  35:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *
  36:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          4. Enable the NVIC and the corresponding interrupt(s) using the function 
  37:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             DMA_ITConfig() if you need to use DMA interrupts. 
  38:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *
  39:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          5. Optionally, if the Circular mode is enabled, you can use the Double buffer mode by 
  40:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             the second Memory address and the first Memory to be used through the function 
  41:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             DMA_DoubleBufferModeConfig(). Then enable the Double buffer mode through the functi
  42:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             DMA_DoubleBufferModeCmd(). These operations must be done before step 6.
  43:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *    
  44:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          6. Enable the DMA stream using the DMA_Cmd() function. 
  45:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                
  46:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          7. Activate the needed Stream Request using PPP_DMACmd() function for
  47:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             any PPP peripheral except internal SRAM and FLASH (ie. SPI, USART ...)
  48:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             The function allowing this operation is provided in each PPP peripheral
  49:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             driver (ie. SPI_DMACmd for SPI peripheral).
  50:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             Once the Stream is enabled, it is not possible to modify its configuration
  51:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             unless the stream is stopped and disabled.
  52:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             After enabling the Stream, it is advised to monitor the EN bit status using
  53:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             the function DMA_GetCmdStatus(). In case of configuration errors or bus errors
  54:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             this bit will remain reset and all transfers on this Stream will remain on hold.   
  55:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *
  56:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          8. Optionally, you can configure the number of data to be transferred
  57:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             when the Stream is disabled (ie. after each Transfer Complete event
  58:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             or when a Transfer Error occurs) using the function DMA_SetCurrDataCounter().
  59:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             And you can get the number of remaining data to be transferred using 
  60:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             the function DMA_GetCurrDataCounter() at run time (when the DMA Stream is
  61:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             enabled and running).  
  62:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                   
  63:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          9. To control DMA events you can use one of the following 
  64:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              two methods:
  65:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *               a- Check on DMA Stream flags using the function DMA_GetFlagStatus().  
  66:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *               b- Use DMA interrupts through the function DMA_ITConfig() at initialization
  67:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                  phase and DMA_GetITStatus() function into interrupt routines in
  68:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                  communication phase.  
  69:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              After checking on a flag you should clear it using DMA_ClearFlag()
  70:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              function. And after checking on an interrupt event you should 
  71:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              clear it using DMA_ClearITPendingBit() function.    
  72:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              
  73:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          10. Optionally, if Circular mode and Double Buffer mode are enabled, you can modify
  74:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              the Memory Addresses using the function DMA_MemoryTargetConfig(). Make sure that
  75:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              the Memory Address to be modified is not the one currently in use by DMA Stream.
  76:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              This condition can be monitored using the function DMA_GetCurrentMemoryTarget().
  77:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              
  78:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          11. Optionally, Pause-Resume operations may be performed:
  79:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              The DMA_Cmd() function may be used to perform Pause-Resume operation. When a 
  80:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              transfer is ongoing, calling this function to disable the Stream will cause the 
  81:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              transfer to be paused. All configuration registers and the number of remaining 
  82:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              data will be preserved. When calling again this function to re-enable the Stream, 
  83:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              the transfer will be resumed from the point where it was paused.          
  84:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                 
  85:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note   Memory-to-Memory transfer is possible by setting the address of the memory into
  86:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         the Peripheral registers. In this mode, Circular mode and Double Buffer mode
  87:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         are not allowed.
  88:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *  
  89:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note   The FIFO is used mainly to reduce bus usage and to allow data packing/unpacking: it is
  90:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         possible to set different Data Sizes for the Peripheral and the Memory (ie. you can set
  91:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         Half-Word data size for the peripheral to access its data register and set Word data si
  92:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         for the Memory to gain in access time. Each two Half-words will be packed and written i
  93:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         a single access to a Word in the Memory).
  94:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *    
  95:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note  When FIFO is disabled, it is not allowed to configure different Data Sizes for Source
  96:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        and Destination. In this case the Peripheral Data Size will be applied to both Source
  97:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        and Destination.               
  98:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *
  99:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *  @endverbatim
 100:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                                  
 101:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   ******************************************************************************
 102:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @attention
 103:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *
 104:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
 105:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
 106:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
 107:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
 108:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
 109:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
 110:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *
 111:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
 112:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   ******************************************************************************  
 113:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */ 
 114:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 115:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /* Includes ------------------------------------------------------------------*/
 116:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #include "stm32f4xx_dma.h"
 117:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #include "stm32f4xx_rcc.h"
 118:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 119:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
 120:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @{
 121:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 122:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 123:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /** @defgroup DMA 
 124:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief DMA driver modules
 125:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @{
 126:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */ 
 127:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 128:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /* Private typedef -----------------------------------------------------------*/
 129:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /* Private define ------------------------------------------------------------*/
 130:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 131:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /* Masks Definition */
 132:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define TRANSFER_IT_ENABLE_MASK (uint32_t)(DMA_SxCR_TCIE | DMA_SxCR_HTIE | \
 133:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                                            DMA_SxCR_TEIE | DMA_SxCR_DMEIE)
 134:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 135:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define DMA_Stream0_IT_MASK     (uint32_t)(DMA_LISR_FEIF0 | DMA_LISR_DMEIF0 | \
 136:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                                            DMA_LISR_TEIF0 | DMA_LISR_HTIF0 | \
 137:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                                            DMA_LISR_TCIF0)
 138:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 139:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define DMA_Stream1_IT_MASK     (uint32_t)(DMA_Stream0_IT_MASK << 6)
 140:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define DMA_Stream2_IT_MASK     (uint32_t)(DMA_Stream0_IT_MASK << 16)
 141:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define DMA_Stream3_IT_MASK     (uint32_t)(DMA_Stream0_IT_MASK << 22)
 142:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define DMA_Stream4_IT_MASK     (uint32_t)(DMA_Stream0_IT_MASK | (uint32_t)0x20000000)
 143:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define DMA_Stream5_IT_MASK     (uint32_t)(DMA_Stream1_IT_MASK | (uint32_t)0x20000000)
 144:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define DMA_Stream6_IT_MASK     (uint32_t)(DMA_Stream2_IT_MASK | (uint32_t)0x20000000)
 145:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define DMA_Stream7_IT_MASK     (uint32_t)(DMA_Stream3_IT_MASK | (uint32_t)0x20000000)
 146:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define TRANSFER_IT_MASK        (uint32_t)0x0F3C0F3C
 147:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define HIGH_ISR_MASK           (uint32_t)0x20000000
 148:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define RESERVED_MASK           (uint32_t)0x0F7D0F7D  
 149:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 150:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /* Private macro -------------------------------------------------------------*/
 151:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /* Private variables ---------------------------------------------------------*/
 152:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /* Private function prototypes -----------------------------------------------*/
 153:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /* Private functions ---------------------------------------------------------*/
 154:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 155:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 156:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /** @defgroup DMA_Private_Functions
 157:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @{
 158:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 159:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 160:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /** @defgroup DMA_Group1 Initialization and Configuration functions
 161:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  *  @brief   Initialization and Configuration functions
 162:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  *
 163:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** @verbatim   
 164:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  ===============================================================================
 165:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                  Initialization and Configuration functions
 166:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  ===============================================================================  
 167:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 168:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   This subsection provides functions allowing to initialize the DMA Stream source
 169:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   and destination addresses, incrementation and data sizes, transfer direction, 
 170:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   buffer size, circular/normal mode selection, memory-to-memory mode selection 
 171:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   and Stream priority value.
 172:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   
 173:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   The DMA_Init() function follows the DMA configuration procedures as described in
 174:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   reference manual (RM0090) except the first point: waiting on EN bit to be reset.
 175:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   This condition should be checked by user application using the function DMA_GetCmdStatus()
 176:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   before calling the DMA_Init() function.
 177:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 178:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** @endverbatim
 179:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @{
 180:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 181:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 182:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 183:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Deinitialize the DMAy Streamx registers to their default reset values.
 184:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 185:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         to 7 to select the DMA Stream.
 186:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
 187:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 188:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
 189:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 24628              		.loc 1 189 0
 24629              		.cfi_startproc
 24630              		@ args = 0, pretend = 0, frame = 8
 24631              		@ frame_needed = 1, uses_anonymous_args = 0
 24632              		@ link register save eliminated.
 24633 0000 80B4     		push	{r7}
 24634              	.LCFI0:
 24635              		.cfi_def_cfa_offset 4
 24636 0002 83B0     		sub	sp, sp, #12
 24637              	.LCFI1:
 24638              		.cfi_def_cfa_offset 16
 24639 0004 00AF     		add	r7, sp, #0
 24640              		.cfi_offset 7, -4
 24641              	.LCFI2:
 24642              		.cfi_def_cfa_register 7
 24643 0006 7860     		str	r0, [r7, #4]
 190:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 191:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 192:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 193:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Disable the selected DMAy Streamx */
 194:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 24644              		.loc 1 194 0
 24645 0008 7B68     		ldr	r3, [r7, #4]
 24646 000a 1B68     		ldr	r3, [r3, #0]
 24647 000c 23F00102 		bic	r2, r3, #1
 24648 0010 7B68     		ldr	r3, [r7, #4]
 24649 0012 1A60     		str	r2, [r3, #0]
 195:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 196:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Reset DMAy Streamx control register */
 197:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->CR  = 0;
 24650              		.loc 1 197 0
 24651 0014 7B68     		ldr	r3, [r7, #4]
 24652 0016 4FF00002 		mov	r2, #0
 24653 001a 1A60     		str	r2, [r3, #0]
 198:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   
 199:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Reset DMAy Streamx Number of Data to Transfer register */
 200:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->NDTR = 0;
 24654              		.loc 1 200 0
 24655 001c 7B68     		ldr	r3, [r7, #4]
 24656 001e 4FF00002 		mov	r2, #0
 24657 0022 5A60     		str	r2, [r3, #4]
 201:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   
 202:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Reset DMAy Streamx peripheral address register */
 203:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->PAR  = 0;
 24658              		.loc 1 203 0
 24659 0024 7B68     		ldr	r3, [r7, #4]
 24660 0026 4FF00002 		mov	r2, #0
 24661 002a 9A60     		str	r2, [r3, #8]
 204:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   
 205:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Reset DMAy Streamx memory 0 address register */
 206:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->M0AR = 0;
 24662              		.loc 1 206 0
 24663 002c 7B68     		ldr	r3, [r7, #4]
 24664 002e 4FF00002 		mov	r2, #0
 24665 0032 DA60     		str	r2, [r3, #12]
 207:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 208:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Reset DMAy Streamx memory 1 address register */
 209:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->M1AR = 0;
 24666              		.loc 1 209 0
 24667 0034 7B68     		ldr	r3, [r7, #4]
 24668 0036 4FF00002 		mov	r2, #0
 24669 003a 1A61     		str	r2, [r3, #16]
 210:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 211:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Reset DMAy Streamx FIFO control register */
 212:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 24670              		.loc 1 212 0
 24671 003c 7B68     		ldr	r3, [r7, #4]
 24672 003e 4FF02102 		mov	r2, #33
 24673 0042 5A61     		str	r2, [r3, #20]
 213:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 214:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Reset interrupt pending bits for the selected stream */
 215:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if (DMAy_Streamx == DMA1_Stream0)
 24674              		.loc 1 215 0
 24675 0044 7A68     		ldr	r2, [r7, #4]
 24676 0046 464B     		ldr	r3, .L18
 24677 0048 9A42     		cmp	r2, r3
 24678 004a 04D1     		bne	.L2
 216:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 217:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream0 */
 218:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA1->LIFCR = DMA_Stream0_IT_MASK;
 24679              		.loc 1 218 0
 24680 004c 454B     		ldr	r3, .L18+4
 24681 004e 4FF03D02 		mov	r2, #61
 24682 0052 9A60     		str	r2, [r3, #8]
 24683 0054 7FE0     		b	.L1
 24684              	.L2:
 219:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 220:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA1_Stream1)
 24685              		.loc 1 220 0
 24686 0056 7A68     		ldr	r2, [r7, #4]
 24687 0058 434B     		ldr	r3, .L18+8
 24688 005a 9A42     		cmp	r2, r3
 24689 005c 04D1     		bne	.L4
 221:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 222:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream1 */
 223:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA1->LIFCR = DMA_Stream1_IT_MASK;
 24690              		.loc 1 223 0
 24691 005e 414B     		ldr	r3, .L18+4
 24692 0060 4FF47462 		mov	r2, #3904
 24693 0064 9A60     		str	r2, [r3, #8]
 24694 0066 76E0     		b	.L1
 24695              	.L4:
 224:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 225:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA1_Stream2)
 24696              		.loc 1 225 0
 24697 0068 7A68     		ldr	r2, [r7, #4]
 24698 006a 404B     		ldr	r3, .L18+12
 24699 006c 9A42     		cmp	r2, r3
 24700 006e 04D1     		bne	.L5
 226:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 227:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream2 */
 228:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA1->LIFCR = DMA_Stream2_IT_MASK;
 24701              		.loc 1 228 0
 24702 0070 3C4B     		ldr	r3, .L18+4
 24703 0072 4FF47412 		mov	r2, #3997696
 24704 0076 9A60     		str	r2, [r3, #8]
 24705 0078 6DE0     		b	.L1
 24706              	.L5:
 229:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 230:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA1_Stream3)
 24707              		.loc 1 230 0
 24708 007a 7A68     		ldr	r2, [r7, #4]
 24709 007c 3C4B     		ldr	r3, .L18+16
 24710 007e 9A42     		cmp	r2, r3
 24711 0080 04D1     		bne	.L6
 231:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 232:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream3 */
 233:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA1->LIFCR = DMA_Stream3_IT_MASK;
 24712              		.loc 1 233 0
 24713 0082 384B     		ldr	r3, .L18+4
 24714 0084 4FF07462 		mov	r2, #255852544
 24715 0088 9A60     		str	r2, [r3, #8]
 24716 008a 64E0     		b	.L1
 24717              	.L6:
 234:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 235:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA1_Stream4)
 24718              		.loc 1 235 0
 24719 008c 7A68     		ldr	r2, [r7, #4]
 24720 008e 394B     		ldr	r3, .L18+20
 24721 0090 9A42     		cmp	r2, r3
 24722 0092 03D1     		bne	.L7
 236:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 237:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream4 */
 238:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA1->HIFCR = DMA_Stream4_IT_MASK;
 24723              		.loc 1 238 0
 24724 0094 334B     		ldr	r3, .L18+4
 24725 0096 384A     		ldr	r2, .L18+24
 24726 0098 DA60     		str	r2, [r3, #12]
 24727 009a 5CE0     		b	.L1
 24728              	.L7:
 239:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 240:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA1_Stream5)
 24729              		.loc 1 240 0
 24730 009c 7A68     		ldr	r2, [r7, #4]
 24731 009e 374B     		ldr	r3, .L18+28
 24732 00a0 9A42     		cmp	r2, r3
 24733 00a2 03D1     		bne	.L8
 241:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 242:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream5 */
 243:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA1->HIFCR = DMA_Stream5_IT_MASK;
 24734              		.loc 1 243 0
 24735 00a4 2F4B     		ldr	r3, .L18+4
 24736 00a6 364A     		ldr	r2, .L18+32
 24737 00a8 DA60     		str	r2, [r3, #12]
 24738 00aa 54E0     		b	.L1
 24739              	.L8:
 244:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 245:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA1_Stream6)
 24740              		.loc 1 245 0
 24741 00ac 7A68     		ldr	r2, [r7, #4]
 24742 00ae 354B     		ldr	r3, .L18+36
 24743 00b0 9A42     		cmp	r2, r3
 24744 00b2 03D1     		bne	.L9
 246:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 247:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream6 */
 248:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
 24745              		.loc 1 248 0
 24746 00b4 2B4B     		ldr	r3, .L18+4
 24747 00b6 344A     		ldr	r2, .L18+40
 24748 00b8 DA60     		str	r2, [r3, #12]
 24749 00ba 4CE0     		b	.L1
 24750              	.L9:
 249:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 250:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA1_Stream7)
 24751              		.loc 1 250 0
 24752 00bc 7A68     		ldr	r2, [r7, #4]
 24753 00be 334B     		ldr	r3, .L18+44
 24754 00c0 9A42     		cmp	r2, r3
 24755 00c2 04D1     		bne	.L10
 251:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 252:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream7 */
 253:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA1->HIFCR = DMA_Stream7_IT_MASK;
 24756              		.loc 1 253 0
 24757 00c4 274B     		ldr	r3, .L18+4
 24758 00c6 4FF03D52 		mov	r2, #792723456
 24759 00ca DA60     		str	r2, [r3, #12]
 24760 00cc 43E0     		b	.L1
 24761              	.L10:
 254:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 255:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA2_Stream0)
 24762              		.loc 1 255 0
 24763 00ce 7A68     		ldr	r2, [r7, #4]
 24764 00d0 2F4B     		ldr	r3, .L18+48
 24765 00d2 9A42     		cmp	r2, r3
 24766 00d4 04D1     		bne	.L11
 256:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 257:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA2 Stream0 */
 258:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA2->LIFCR = DMA_Stream0_IT_MASK;
 24767              		.loc 1 258 0
 24768 00d6 2F4B     		ldr	r3, .L18+52
 24769 00d8 4FF03D02 		mov	r2, #61
 24770 00dc 9A60     		str	r2, [r3, #8]
 24771 00de 3AE0     		b	.L1
 24772              	.L11:
 259:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 260:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA2_Stream1)
 24773              		.loc 1 260 0
 24774 00e0 7A68     		ldr	r2, [r7, #4]
 24775 00e2 2D4B     		ldr	r3, .L18+56
 24776 00e4 9A42     		cmp	r2, r3
 24777 00e6 04D1     		bne	.L12
 261:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 262:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA2 Stream1 */
 263:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA2->LIFCR = DMA_Stream1_IT_MASK;
 24778              		.loc 1 263 0
 24779 00e8 2A4B     		ldr	r3, .L18+52
 24780 00ea 4FF47462 		mov	r2, #3904
 24781 00ee 9A60     		str	r2, [r3, #8]
 24782 00f0 31E0     		b	.L1
 24783              	.L12:
 264:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 265:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA2_Stream2)
 24784              		.loc 1 265 0
 24785 00f2 7A68     		ldr	r2, [r7, #4]
 24786 00f4 294B     		ldr	r3, .L18+60
 24787 00f6 9A42     		cmp	r2, r3
 24788 00f8 04D1     		bne	.L13
 266:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 267:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA2 Stream2 */
 268:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA2->LIFCR = DMA_Stream2_IT_MASK;
 24789              		.loc 1 268 0
 24790 00fa 264B     		ldr	r3, .L18+52
 24791 00fc 4FF47412 		mov	r2, #3997696
 24792 0100 9A60     		str	r2, [r3, #8]
 24793 0102 28E0     		b	.L1
 24794              	.L13:
 269:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 270:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA2_Stream3)
 24795              		.loc 1 270 0
 24796 0104 7A68     		ldr	r2, [r7, #4]
 24797 0106 264B     		ldr	r3, .L18+64
 24798 0108 9A42     		cmp	r2, r3
 24799 010a 04D1     		bne	.L14
 271:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 272:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA2 Stream3 */
 273:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA2->LIFCR = DMA_Stream3_IT_MASK;
 24800              		.loc 1 273 0
 24801 010c 214B     		ldr	r3, .L18+52
 24802 010e 4FF07462 		mov	r2, #255852544
 24803 0112 9A60     		str	r2, [r3, #8]
 24804 0114 1FE0     		b	.L1
 24805              	.L14:
 274:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 275:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA2_Stream4)
 24806              		.loc 1 275 0
 24807 0116 7A68     		ldr	r2, [r7, #4]
 24808 0118 224B     		ldr	r3, .L18+68
 24809 011a 9A42     		cmp	r2, r3
 24810 011c 03D1     		bne	.L15
 276:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 277:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA2 Stream4 */
 278:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA2->HIFCR = DMA_Stream4_IT_MASK;
 24811              		.loc 1 278 0
 24812 011e 1D4B     		ldr	r3, .L18+52
 24813 0120 154A     		ldr	r2, .L18+24
 24814 0122 DA60     		str	r2, [r3, #12]
 24815 0124 17E0     		b	.L1
 24816              	.L15:
 279:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 280:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA2_Stream5)
 24817              		.loc 1 280 0
 24818 0126 7A68     		ldr	r2, [r7, #4]
 24819 0128 1F4B     		ldr	r3, .L18+72
 24820 012a 9A42     		cmp	r2, r3
 24821 012c 03D1     		bne	.L16
 281:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 282:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA2 Stream5 */
 283:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA2->HIFCR = DMA_Stream5_IT_MASK;
 24822              		.loc 1 283 0
 24823 012e 194B     		ldr	r3, .L18+52
 24824 0130 134A     		ldr	r2, .L18+32
 24825 0132 DA60     		str	r2, [r3, #12]
 24826 0134 0FE0     		b	.L1
 24827              	.L16:
 284:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 285:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA2_Stream6)
 24828              		.loc 1 285 0
 24829 0136 7A68     		ldr	r2, [r7, #4]
 24830 0138 1C4B     		ldr	r3, .L18+76
 24831 013a 9A42     		cmp	r2, r3
 24832 013c 03D1     		bne	.L17
 286:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 287:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA2 Stream6 */
 288:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA2->HIFCR = DMA_Stream6_IT_MASK;
 24833              		.loc 1 288 0
 24834 013e 154B     		ldr	r3, .L18+52
 24835 0140 114A     		ldr	r2, .L18+40
 24836 0142 DA60     		str	r2, [r3, #12]
 24837 0144 07E0     		b	.L1
 24838              	.L17:
 289:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 290:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else 
 291:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 292:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     if (DMAy_Streamx == DMA2_Stream7)
 24839              		.loc 1 292 0
 24840 0146 7A68     		ldr	r2, [r7, #4]
 24841 0148 194B     		ldr	r3, .L18+80
 24842 014a 9A42     		cmp	r2, r3
 24843 014c 03D1     		bne	.L1
 293:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     {
 294:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       /* Reset interrupt pending bits for DMA2 Stream7 */
 295:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       DMA2->HIFCR = DMA_Stream7_IT_MASK;
 24844              		.loc 1 295 0
 24845 014e 114B     		ldr	r3, .L18+52
 24846 0150 4FF03D52 		mov	r2, #792723456
 24847 0154 DA60     		str	r2, [r3, #12]
 24848              	.L1:
 296:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     }
 297:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 298:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 24849              		.loc 1 298 0
 24850 0156 07F10C07 		add	r7, r7, #12
 24851 015a BD46     		mov	sp, r7
 24852 015c 80BC     		pop	{r7}
 24853 015e 7047     		bx	lr
 24854              	.L19:
 24855              		.align	2
 24856              	.L18:
 24857 0160 10600240 		.word	1073897488
 24858 0164 00600240 		.word	1073897472
 24859 0168 28600240 		.word	1073897512
 24860 016c 40600240 		.word	1073897536
 24861 0170 58600240 		.word	1073897560
 24862 0174 70600240 		.word	1073897584
 24863 0178 3D000020 		.word	536870973
 24864 017c 88600240 		.word	1073897608
 24865 0180 400F0020 		.word	536874816
 24866 0184 A0600240 		.word	1073897632
 24867 0188 00003D20 		.word	540868608
 24868 018c B8600240 		.word	1073897656
 24869 0190 10640240 		.word	1073898512
 24870 0194 00640240 		.word	1073898496
 24871 0198 28640240 		.word	1073898536
 24872 019c 40640240 		.word	1073898560
 24873 01a0 58640240 		.word	1073898584
 24874 01a4 70640240 		.word	1073898608
 24875 01a8 88640240 		.word	1073898632
 24876 01ac A0640240 		.word	1073898656
 24877 01b0 B8640240 		.word	1073898680
 24878              		.cfi_endproc
 24879              	.LFE110:
 24881              		.section	.text.DMA_Init,"ax",%progbits
 24882              		.align	2
 24883              		.global	DMA_Init
 24884              		.thumb
 24885              		.thumb_func
 24887              	DMA_Init:
 24888              	.LFB111:
 299:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 300:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 301:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Initializes the DMAy Streamx according to the specified parameters in 
 302:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         the DMA_InitStruct structure.
 303:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note   Before calling this function, it is recommended to check that the Stream 
 304:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         is actually disabled using the function DMA_GetCmdStatus().  
 305:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 306:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         to 7 to select the DMA Stream.
 307:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
 308:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         the configuration information for the specified DMA Stream.  
 309:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
 310:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 311:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
 312:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 24889              		.loc 1 312 0
 24890              		.cfi_startproc
 24891              		@ args = 0, pretend = 0, frame = 16
 24892              		@ frame_needed = 1, uses_anonymous_args = 0
 24893              		@ link register save eliminated.
 24894 0000 80B4     		push	{r7}
 24895              	.LCFI3:
 24896              		.cfi_def_cfa_offset 4
 24897 0002 85B0     		sub	sp, sp, #20
 24898              	.LCFI4:
 24899              		.cfi_def_cfa_offset 24
 24900 0004 00AF     		add	r7, sp, #0
 24901              		.cfi_offset 7, -4
 24902              	.LCFI5:
 24903              		.cfi_def_cfa_register 7
 24904 0006 7860     		str	r0, [r7, #4]
 24905 0008 3960     		str	r1, [r7, #0]
 313:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   uint32_t tmpreg = 0;
 24906              		.loc 1 313 0
 24907 000a 4FF00003 		mov	r3, #0
 24908 000e FB60     		str	r3, [r7, #12]
 314:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 315:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 316:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 317:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_CHANNEL(DMA_InitStruct->DMA_Channel));
 318:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_DIRECTION(DMA_InitStruct->DMA_DIR));
 319:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_BUFFER_SIZE(DMA_InitStruct->DMA_BufferSize));
 320:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_PERIPHERAL_INC_STATE(DMA_InitStruct->DMA_PeripheralInc));
 321:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_MEMORY_INC_STATE(DMA_InitStruct->DMA_MemoryInc));
 322:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(DMA_InitStruct->DMA_PeripheralDataSize));
 323:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_MEMORY_DATA_SIZE(DMA_InitStruct->DMA_MemoryDataSize));
 324:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_MODE(DMA_InitStruct->DMA_Mode));
 325:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
 326:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_FIFO_MODE_STATE(DMA_InitStruct->DMA_FIFOMode));
 327:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_FIFO_THRESHOLD(DMA_InitStruct->DMA_FIFOThreshold));
 328:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
 329:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));
 330:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 331:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /*------------------------- DMAy Streamx CR Configuration ------------------*/
 332:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Get the DMAy_Streamx CR value */
 333:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   tmpreg = DMAy_Streamx->CR;
 24909              		.loc 1 333 0
 24910 0010 7B68     		ldr	r3, [r7, #4]
 24911 0012 1B68     		ldr	r3, [r3, #0]
 24912 0014 FB60     		str	r3, [r7, #12]
 334:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 335:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
 336:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 24913              		.loc 1 336 0
 24914 0016 FA68     		ldr	r2, [r7, #12]
 24915 0018 264B     		ldr	r3, .L21
 24916 001a 02EA0303 		and	r3, r2, r3
 24917 001e FB60     		str	r3, [r7, #12]
 337:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                          DMA_SxCR_PL | DMA_SxCR_MSIZE | DMA_SxCR_PSIZE | \
 338:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                          DMA_SxCR_MINC | DMA_SxCR_PINC | DMA_SxCR_CIRC | \
 339:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                          DMA_SxCR_DIR));
 340:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 341:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Configure DMAy Streamx: */
 342:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Set CHSEL bits according to DMA_CHSEL value */
 343:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Set DIR bits according to DMA_DIR value */
 344:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Set PINC bit according to DMA_PeripheralInc value */
 345:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Set MINC bit according to DMA_MemoryInc value */
 346:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Set PSIZE bits according to DMA_PeripheralDataSize value */
 347:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Set MSIZE bits according to DMA_MemoryDataSize value */
 348:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Set CIRC bit according to DMA_Mode value */
 349:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Set PL bits according to DMA_Priority value */
 350:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Set MBURST bits according to DMA_MemoryBurst value */
 351:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Set PBURST bits according to DMA_PeripheralBurst value */
 352:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 24918              		.loc 1 352 0
 24919 0020 3B68     		ldr	r3, [r7, #0]
 24920 0022 1A68     		ldr	r2, [r3, #0]
 24921 0024 3B68     		ldr	r3, [r7, #0]
 24922 0026 DB68     		ldr	r3, [r3, #12]
 24923 0028 1A43     		orrs	r2, r2, r3
 353:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****             DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 24924              		.loc 1 353 0
 24925 002a 3B68     		ldr	r3, [r7, #0]
 24926 002c 5B69     		ldr	r3, [r3, #20]
 352:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 24927              		.loc 1 352 0
 24928 002e 1A43     		orrs	r2, r2, r3
 24929              		.loc 1 353 0
 24930 0030 3B68     		ldr	r3, [r7, #0]
 24931 0032 9B69     		ldr	r3, [r3, #24]
 24932 0034 1A43     		orrs	r2, r2, r3
 354:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****             DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 24933              		.loc 1 354 0
 24934 0036 3B68     		ldr	r3, [r7, #0]
 24935 0038 DB69     		ldr	r3, [r3, #28]
 353:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****             DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 24936              		.loc 1 353 0
 24937 003a 1A43     		orrs	r2, r2, r3
 24938              		.loc 1 354 0
 24939 003c 3B68     		ldr	r3, [r7, #0]
 24940 003e 1B6A     		ldr	r3, [r3, #32]
 24941 0040 1A43     		orrs	r2, r2, r3
 355:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****             DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 24942              		.loc 1 355 0
 24943 0042 3B68     		ldr	r3, [r7, #0]
 24944 0044 5B6A     		ldr	r3, [r3, #36]
 354:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****             DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 24945              		.loc 1 354 0
 24946 0046 1A43     		orrs	r2, r2, r3
 24947              		.loc 1 355 0
 24948 0048 3B68     		ldr	r3, [r7, #0]
 24949 004a 9B6A     		ldr	r3, [r3, #40]
 24950 004c 1A43     		orrs	r2, r2, r3
 356:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****             DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 24951              		.loc 1 356 0
 24952 004e 3B68     		ldr	r3, [r7, #0]
 24953 0050 5B6B     		ldr	r3, [r3, #52]
 355:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****             DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 24954              		.loc 1 355 0
 24955 0052 1A43     		orrs	r2, r2, r3
 24956              		.loc 1 356 0
 24957 0054 3B68     		ldr	r3, [r7, #0]
 24958 0056 9B6B     		ldr	r3, [r3, #56]
 24959 0058 42EA0303 		orr	r3, r2, r3
 352:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 24960              		.loc 1 352 0
 24961 005c FA68     		ldr	r2, [r7, #12]
 24962 005e 42EA0303 		orr	r3, r2, r3
 24963 0062 FB60     		str	r3, [r7, #12]
 357:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 358:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Write to DMAy Streamx CR register */
 359:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->CR = tmpreg;
 24964              		.loc 1 359 0
 24965 0064 7B68     		ldr	r3, [r7, #4]
 24966 0066 FA68     		ldr	r2, [r7, #12]
 24967 0068 1A60     		str	r2, [r3, #0]
 360:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 361:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /*------------------------- DMAy Streamx FCR Configuration -----------------*/
 362:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Get the DMAy_Streamx FCR value */
 363:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   tmpreg = DMAy_Streamx->FCR;
 24968              		.loc 1 363 0
 24969 006a 7B68     		ldr	r3, [r7, #4]
 24970 006c 5B69     		ldr	r3, [r3, #20]
 24971 006e FB60     		str	r3, [r7, #12]
 364:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 365:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Clear DMDIS and FTH bits */
 366:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 24972              		.loc 1 366 0
 24973 0070 FB68     		ldr	r3, [r7, #12]
 24974 0072 23F00703 		bic	r3, r3, #7
 24975 0076 FB60     		str	r3, [r7, #12]
 367:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 368:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Configure DMAy Streamx FIFO: 
 369:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     Set DMDIS bits according to DMA_FIFOMode value 
 370:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     Set FTH bits according to DMA_FIFOThreshold value */
 371:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 24976              		.loc 1 371 0
 24977 0078 3B68     		ldr	r3, [r7, #0]
 24978 007a DA6A     		ldr	r2, [r3, #44]
 24979 007c 3B68     		ldr	r3, [r7, #0]
 24980 007e 1B6B     		ldr	r3, [r3, #48]
 24981 0080 42EA0303 		orr	r3, r2, r3
 24982 0084 FA68     		ldr	r2, [r7, #12]
 24983 0086 42EA0303 		orr	r3, r2, r3
 24984 008a FB60     		str	r3, [r7, #12]
 372:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 373:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Write to DMAy Streamx CR */
 374:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->FCR = tmpreg;
 24985              		.loc 1 374 0
 24986 008c 7B68     		ldr	r3, [r7, #4]
 24987 008e FA68     		ldr	r2, [r7, #12]
 24988 0090 5A61     		str	r2, [r3, #20]
 375:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 376:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
 377:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Write to DMAy Streamx NDTR register */
 378:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 24989              		.loc 1 378 0
 24990 0092 3B68     		ldr	r3, [r7, #0]
 24991 0094 1A69     		ldr	r2, [r3, #16]
 24992 0096 7B68     		ldr	r3, [r7, #4]
 24993 0098 5A60     		str	r2, [r3, #4]
 379:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 380:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /*------------------------- DMAy Streamx PAR Configuration -----------------*/
 381:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Write to DMAy Streamx PAR */
 382:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 24994              		.loc 1 382 0
 24995 009a 3B68     		ldr	r3, [r7, #0]
 24996 009c 5A68     		ldr	r2, [r3, #4]
 24997 009e 7B68     		ldr	r3, [r7, #4]
 24998 00a0 9A60     		str	r2, [r3, #8]
 383:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 384:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
 385:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Write to DMAy Streamx M0AR */
 386:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 24999              		.loc 1 386 0
 25000 00a2 3B68     		ldr	r3, [r7, #0]
 25001 00a4 9A68     		ldr	r2, [r3, #8]
 25002 00a6 7B68     		ldr	r3, [r7, #4]
 25003 00a8 DA60     		str	r2, [r3, #12]
 387:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 25004              		.loc 1 387 0
 25005 00aa 07F11407 		add	r7, r7, #20
 25006 00ae BD46     		mov	sp, r7
 25007 00b0 80BC     		pop	{r7}
 25008 00b2 7047     		bx	lr
 25009              	.L22:
 25010              		.align	2
 25011              	.L21:
 25012 00b4 3F801CF0 		.word	-266567617
 25013              		.cfi_endproc
 25014              	.LFE111:
 25016              		.section	.text.DMA_StructInit,"ax",%progbits
 25017              		.align	2
 25018              		.global	DMA_StructInit
 25019              		.thumb
 25020              		.thumb_func
 25022              	DMA_StructInit:
 25023              	.LFB112:
 388:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 389:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 390:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Fills each DMA_InitStruct member with its default value.
 391:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMA_InitStruct : pointer to a DMA_InitTypeDef structure which will 
 392:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         be initialized.
 393:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
 394:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 395:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
 396:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 25024              		.loc 1 396 0
 25025              		.cfi_startproc
 25026              		@ args = 0, pretend = 0, frame = 8
 25027              		@ frame_needed = 1, uses_anonymous_args = 0
 25028              		@ link register save eliminated.
 25029 0000 80B4     		push	{r7}
 25030              	.LCFI6:
 25031              		.cfi_def_cfa_offset 4
 25032 0002 83B0     		sub	sp, sp, #12
 25033              	.LCFI7:
 25034              		.cfi_def_cfa_offset 16
 25035 0004 00AF     		add	r7, sp, #0
 25036              		.cfi_offset 7, -4
 25037              	.LCFI8:
 25038              		.cfi_def_cfa_register 7
 25039 0006 7860     		str	r0, [r7, #4]
 397:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /*-------------- Reset DMA init structure parameters values ----------------*/
 398:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_Channel member */
 399:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_Channel = 0;
 25040              		.loc 1 399 0
 25041 0008 7B68     		ldr	r3, [r7, #4]
 25042 000a 4FF00002 		mov	r2, #0
 25043 000e 1A60     		str	r2, [r3, #0]
 400:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 401:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_PeripheralBaseAddr member */
 402:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 25044              		.loc 1 402 0
 25045 0010 7B68     		ldr	r3, [r7, #4]
 25046 0012 4FF00002 		mov	r2, #0
 25047 0016 5A60     		str	r2, [r3, #4]
 403:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 404:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_Memory0BaseAddr member */
 405:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_Memory0BaseAddr = 0;
 25048              		.loc 1 405 0
 25049 0018 7B68     		ldr	r3, [r7, #4]
 25050 001a 4FF00002 		mov	r2, #0
 25051 001e 9A60     		str	r2, [r3, #8]
 406:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 407:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_DIR member */
 408:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralToMemory;
 25052              		.loc 1 408 0
 25053 0020 7B68     		ldr	r3, [r7, #4]
 25054 0022 4FF00002 		mov	r2, #0
 25055 0026 DA60     		str	r2, [r3, #12]
 409:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 410:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_BufferSize member */
 411:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_BufferSize = 0;
 25056              		.loc 1 411 0
 25057 0028 7B68     		ldr	r3, [r7, #4]
 25058 002a 4FF00002 		mov	r2, #0
 25059 002e 1A61     		str	r2, [r3, #16]
 412:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 413:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_PeripheralInc member */
 414:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 25060              		.loc 1 414 0
 25061 0030 7B68     		ldr	r3, [r7, #4]
 25062 0032 4FF00002 		mov	r2, #0
 25063 0036 5A61     		str	r2, [r3, #20]
 415:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 416:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_MemoryInc member */
 417:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 25064              		.loc 1 417 0
 25065 0038 7B68     		ldr	r3, [r7, #4]
 25066 003a 4FF00002 		mov	r2, #0
 25067 003e 9A61     		str	r2, [r3, #24]
 418:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 419:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_PeripheralDataSize member */
 420:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 25068              		.loc 1 420 0
 25069 0040 7B68     		ldr	r3, [r7, #4]
 25070 0042 4FF00002 		mov	r2, #0
 25071 0046 DA61     		str	r2, [r3, #28]
 421:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 422:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_MemoryDataSize member */
 423:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 25072              		.loc 1 423 0
 25073 0048 7B68     		ldr	r3, [r7, #4]
 25074 004a 4FF00002 		mov	r2, #0
 25075 004e 1A62     		str	r2, [r3, #32]
 424:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 425:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_Mode member */
 426:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 25076              		.loc 1 426 0
 25077 0050 7B68     		ldr	r3, [r7, #4]
 25078 0052 4FF00002 		mov	r2, #0
 25079 0056 5A62     		str	r2, [r3, #36]
 427:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 428:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_Priority member */
 429:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 25080              		.loc 1 429 0
 25081 0058 7B68     		ldr	r3, [r7, #4]
 25082 005a 4FF00002 		mov	r2, #0
 25083 005e 9A62     		str	r2, [r3, #40]
 430:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 431:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_FIFOMode member */
 432:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_FIFOMode = DMA_FIFOMode_Disable;
 25084              		.loc 1 432 0
 25085 0060 7B68     		ldr	r3, [r7, #4]
 25086 0062 4FF00002 		mov	r2, #0
 25087 0066 DA62     		str	r2, [r3, #44]
 433:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 434:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_FIFOThreshold member */
 435:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 25088              		.loc 1 435 0
 25089 0068 7B68     		ldr	r3, [r7, #4]
 25090 006a 4FF00002 		mov	r2, #0
 25091 006e 1A63     		str	r2, [r3, #48]
 436:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 437:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_MemoryBurst member */
 438:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_MemoryBurst = DMA_MemoryBurst_Single;
 25092              		.loc 1 438 0
 25093 0070 7B68     		ldr	r3, [r7, #4]
 25094 0072 4FF00002 		mov	r2, #0
 25095 0076 5A63     		str	r2, [r3, #52]
 439:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 440:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_PeripheralBurst member */
 441:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 25096              		.loc 1 441 0
 25097 0078 7B68     		ldr	r3, [r7, #4]
 25098 007a 4FF00002 		mov	r2, #0
 25099 007e 9A63     		str	r2, [r3, #56]
 442:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 25100              		.loc 1 442 0
 25101 0080 07F10C07 		add	r7, r7, #12
 25102 0084 BD46     		mov	sp, r7
 25103 0086 80BC     		pop	{r7}
 25104 0088 7047     		bx	lr
 25105              		.cfi_endproc
 25106              	.LFE112:
 25108 008a 00BF     		.section	.text.DMA_Cmd,"ax",%progbits
 25109              		.align	2
 25110              		.global	DMA_Cmd
 25111              		.thumb
 25112              		.thumb_func
 25114              	DMA_Cmd:
 25115              	.LFB113:
 443:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 444:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 445:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Enables or disables the specified DMAy Streamx.
 446:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 447:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         to 7 to select the DMA Stream.
 448:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  NewState: new state of the DMAy Streamx. 
 449:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          This parameter can be: ENABLE or DISABLE.
 450:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *
 451:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note  This function may be used to perform Pause-Resume operation. When a
 452:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        transfer is ongoing, calling this function to disable the Stream will
 453:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        cause the transfer to be paused. All configuration registers and the
 454:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        number of remaining data will be preserved. When calling again this
 455:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        function to re-enable the Stream, the transfer will be resumed from
 456:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        the point where it was paused.          
 457:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *    
 458:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note  After configuring the DMA Stream (DMA_Init() function) and enabling the
 459:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        stream, it is recommended to check (or wait until) the DMA Stream is
 460:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        effectively enabled. A Stream may remain disabled if a configuration 
 461:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        parameter is wrong.
 462:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        After disabling a DMA Stream, it is also recommended to check (or wait
 463:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        until) the DMA Stream is effectively disabled. If a Stream is disabled 
 464:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        while a data transfer is ongoing, the current data will be transferred
 465:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        and the Stream will be effectively disabled only after the transfer of
 466:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        this single data is finished.            
 467:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *    
 468:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
 469:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 470:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
 471:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 25116              		.loc 1 471 0
 25117              		.cfi_startproc
 25118              		@ args = 0, pretend = 0, frame = 8
 25119              		@ frame_needed = 1, uses_anonymous_args = 0
 25120              		@ link register save eliminated.
 25121 0000 80B4     		push	{r7}
 25122              	.LCFI9:
 25123              		.cfi_def_cfa_offset 4
 25124 0002 83B0     		sub	sp, sp, #12
 25125              	.LCFI10:
 25126              		.cfi_def_cfa_offset 16
 25127 0004 00AF     		add	r7, sp, #0
 25128              		.cfi_offset 7, -4
 25129              	.LCFI11:
 25130              		.cfi_def_cfa_register 7
 25131 0006 7860     		str	r0, [r7, #4]
 25132 0008 0B46     		mov	r3, r1
 25133 000a FB70     		strb	r3, [r7, #3]
 472:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 473:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 474:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 475:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 476:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if (NewState != DISABLE)
 25134              		.loc 1 476 0
 25135 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 25136 000e 002B     		cmp	r3, #0
 25137 0010 06D0     		beq	.L25
 477:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 478:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Enable the selected DMAy Streamx by setting EN bit */
 479:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 25138              		.loc 1 479 0
 25139 0012 7B68     		ldr	r3, [r7, #4]
 25140 0014 1B68     		ldr	r3, [r3, #0]
 25141 0016 43F00102 		orr	r2, r3, #1
 25142 001a 7B68     		ldr	r3, [r7, #4]
 25143 001c 1A60     		str	r2, [r3, #0]
 25144 001e 05E0     		b	.L24
 25145              	.L25:
 480:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 481:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
 482:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 483:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Disable the selected DMAy Streamx by clearing EN bit */
 484:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 25146              		.loc 1 484 0
 25147 0020 7B68     		ldr	r3, [r7, #4]
 25148 0022 1B68     		ldr	r3, [r3, #0]
 25149 0024 23F00102 		bic	r2, r3, #1
 25150 0028 7B68     		ldr	r3, [r7, #4]
 25151 002a 1A60     		str	r2, [r3, #0]
 25152              	.L24:
 485:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 486:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 25153              		.loc 1 486 0
 25154 002c 07F10C07 		add	r7, r7, #12
 25155 0030 BD46     		mov	sp, r7
 25156 0032 80BC     		pop	{r7}
 25157 0034 7047     		bx	lr
 25158              		.cfi_endproc
 25159              	.LFE113:
 25161 0036 00BF     		.section	.text.DMA_PeriphIncOffsetSizeConfig,"ax",%progbits
 25162              		.align	2
 25163              		.global	DMA_PeriphIncOffsetSizeConfig
 25164              		.thumb
 25165              		.thumb_func
 25167              	DMA_PeriphIncOffsetSizeConfig:
 25168              	.LFB114:
 487:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 488:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 489:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Configures, when the PINC (Peripheral Increment address mode) bit is
 490:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         set, if the peripheral address should be incremented with the data 
 491:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         size (configured with PSIZE bits) or by a fixed offset equal to 4
 492:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         (32-bit aligned addresses).
 493:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *   
 494:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note   This function has no effect if the Peripheral Increment mode is disabled.
 495:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *     
 496:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 497:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 498:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMA_Pincos: specifies the Peripheral increment offset size.
 499:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          This parameter can be one of the following values:
 500:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_PINCOS_Psize: Peripheral address increment is done  
 501:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                                   accordingly to PSIZE parameter.
 502:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_PINCOS_WordAligned: Peripheral address increment offset is 
 503:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                                         fixed to 4 (32-bit aligned addresses). 
 504:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
 505:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 506:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_PeriphIncOffsetSizeConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_Pincos)
 507:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 25169              		.loc 1 507 0
 25170              		.cfi_startproc
 25171              		@ args = 0, pretend = 0, frame = 8
 25172              		@ frame_needed = 1, uses_anonymous_args = 0
 25173              		@ link register save eliminated.
 25174 0000 80B4     		push	{r7}
 25175              	.LCFI12:
 25176              		.cfi_def_cfa_offset 4
 25177 0002 83B0     		sub	sp, sp, #12
 25178              	.LCFI13:
 25179              		.cfi_def_cfa_offset 16
 25180 0004 00AF     		add	r7, sp, #0
 25181              		.cfi_offset 7, -4
 25182              	.LCFI14:
 25183              		.cfi_def_cfa_register 7
 25184 0006 7860     		str	r0, [r7, #4]
 25185 0008 3960     		str	r1, [r7, #0]
 508:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 509:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 510:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_PINCOS_SIZE(DMA_Pincos));
 511:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 512:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the needed Peripheral increment offset */
 513:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if(DMA_Pincos != DMA_PINCOS_Psize)
 25186              		.loc 1 513 0
 25187 000a 3B68     		ldr	r3, [r7, #0]
 25188 000c 002B     		cmp	r3, #0
 25189 000e 06D0     		beq	.L28
 514:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 515:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Configure DMA_SxCR_PINCOS bit with the input parameter */
 516:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PINCOS;     
 25190              		.loc 1 516 0
 25191 0010 7B68     		ldr	r3, [r7, #4]
 25192 0012 1B68     		ldr	r3, [r3, #0]
 25193 0014 43F40042 		orr	r2, r3, #32768
 25194 0018 7B68     		ldr	r3, [r7, #4]
 25195 001a 1A60     		str	r2, [r3, #0]
 25196 001c 05E0     		b	.L27
 25197              	.L28:
 517:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 518:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
 519:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 520:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Clear the PINCOS bit: Peripheral address incremented according to PSIZE */
 521:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PINCOS;    
 25198              		.loc 1 521 0
 25199 001e 7B68     		ldr	r3, [r7, #4]
 25200 0020 1B68     		ldr	r3, [r3, #0]
 25201 0022 23F40042 		bic	r2, r3, #32768
 25202 0026 7B68     		ldr	r3, [r7, #4]
 25203 0028 1A60     		str	r2, [r3, #0]
 25204              	.L27:
 522:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 523:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 25205              		.loc 1 523 0
 25206 002a 07F10C07 		add	r7, r7, #12
 25207 002e BD46     		mov	sp, r7
 25208 0030 80BC     		pop	{r7}
 25209 0032 7047     		bx	lr
 25210              		.cfi_endproc
 25211              	.LFE114:
 25213              		.section	.text.DMA_FlowControllerConfig,"ax",%progbits
 25214              		.align	2
 25215              		.global	DMA_FlowControllerConfig
 25216              		.thumb
 25217              		.thumb_func
 25219              	DMA_FlowControllerConfig:
 25220              	.LFB115:
 524:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 525:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 526:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Configures, when the DMAy Streamx is disabled, the flow controller for
 527:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         the next transactions (Peripheral or Memory).
 528:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *       
 529:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note   Before enabling this feature, check if the used peripheral supports 
 530:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         the Flow Controller mode or not.    
 531:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *  
 532:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 533:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 534:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMA_FlowCtrl: specifies the DMA flow controller.
 535:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          This parameter can be one of the following values:
 536:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FlowCtrl_Memory: DMAy_Streamx transactions flow controller is 
 537:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                                      the DMA controller.
 538:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FlowCtrl_Peripheral: DMAy_Streamx transactions flow controller 
 539:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                                          is the peripheral.    
 540:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
 541:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 542:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_FlowControllerConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FlowCtrl)
 543:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 25221              		.loc 1 543 0
 25222              		.cfi_startproc
 25223              		@ args = 0, pretend = 0, frame = 8
 25224              		@ frame_needed = 1, uses_anonymous_args = 0
 25225              		@ link register save eliminated.
 25226 0000 80B4     		push	{r7}
 25227              	.LCFI15:
 25228              		.cfi_def_cfa_offset 4
 25229 0002 83B0     		sub	sp, sp, #12
 25230              	.LCFI16:
 25231              		.cfi_def_cfa_offset 16
 25232 0004 00AF     		add	r7, sp, #0
 25233              		.cfi_offset 7, -4
 25234              	.LCFI17:
 25235              		.cfi_def_cfa_register 7
 25236 0006 7860     		str	r0, [r7, #4]
 25237 0008 3960     		str	r1, [r7, #0]
 544:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 545:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 546:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_FLOW_CTRL(DMA_FlowCtrl));
 547:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 548:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the needed flow controller  */
 549:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if(DMA_FlowCtrl != DMA_FlowCtrl_Memory)
 25238              		.loc 1 549 0
 25239 000a 3B68     		ldr	r3, [r7, #0]
 25240 000c 002B     		cmp	r3, #0
 25241 000e 06D0     		beq	.L31
 550:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 551:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Configure DMA_SxCR_PFCTRL bit with the input parameter */
 552:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PFCTRL;   
 25242              		.loc 1 552 0
 25243 0010 7B68     		ldr	r3, [r7, #4]
 25244 0012 1B68     		ldr	r3, [r3, #0]
 25245 0014 43F02002 		orr	r2, r3, #32
 25246 0018 7B68     		ldr	r3, [r7, #4]
 25247 001a 1A60     		str	r2, [r3, #0]
 25248 001c 05E0     		b	.L30
 25249              	.L31:
 553:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 554:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
 555:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 556:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Clear the PFCTRL bit: Memory is the flow controller */
 557:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PFCTRL;    
 25250              		.loc 1 557 0
 25251 001e 7B68     		ldr	r3, [r7, #4]
 25252 0020 1B68     		ldr	r3, [r3, #0]
 25253 0022 23F02002 		bic	r2, r3, #32
 25254 0026 7B68     		ldr	r3, [r7, #4]
 25255 0028 1A60     		str	r2, [r3, #0]
 25256              	.L30:
 558:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 559:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 25257              		.loc 1 559 0
 25258 002a 07F10C07 		add	r7, r7, #12
 25259 002e BD46     		mov	sp, r7
 25260 0030 80BC     		pop	{r7}
 25261 0032 7047     		bx	lr
 25262              		.cfi_endproc
 25263              	.LFE115:
 25265              		.section	.text.DMA_SetCurrDataCounter,"ax",%progbits
 25266              		.align	2
 25267              		.global	DMA_SetCurrDataCounter
 25268              		.thumb
 25269              		.thumb_func
 25271              	DMA_SetCurrDataCounter:
 25272              	.LFB116:
 560:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 561:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @}
 562:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 563:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 564:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /** @defgroup DMA_Group2 Data Counter functions
 565:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  *  @brief   Data Counter functions 
 566:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  *
 567:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** @verbatim   
 568:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  ===============================================================================
 569:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                            Data Counter functions
 570:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  ===============================================================================  
 571:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 572:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   This subsection provides function allowing to configure and read the buffer size
 573:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   (number of data to be transferred). 
 574:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 575:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   The DMA data counter can be written only when the DMA Stream is disabled 
 576:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   (ie. after transfer complete event).
 577:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 578:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   The following function can be used to write the Stream data counter value:
 579:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     - void DMA_SetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx, uint16_t Counter);
 580:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 581:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** @note It is advised to use this function rather than DMA_Init() in situations where
 582:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       only the Data buffer needs to be reloaded.
 583:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 584:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** @note If the Source and Destination Data Sizes are different, then the value written in
 585:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       data counter, expressing the number of transfers, is relative to the number of 
 586:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       transfers from the Peripheral point of view.
 587:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       ie. If Memory data size is Word, Peripheral data size is Half-Words, then the value
 588:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       to be configured in the data counter is the number of Half-Words to be transferred
 589:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       from/to the peripheral.
 590:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 591:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   The DMA data counter can be read to indicate the number of remaining transfers for
 592:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   the relative DMA Stream. This counter is decremented at the end of each data 
 593:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   transfer and when the transfer is complete: 
 594:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    - If Normal mode is selected: the counter is set to 0.
 595:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    - If Circular mode is selected: the counter is reloaded with the initial value
 596:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****      (configured before enabling the DMA Stream)
 597:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    
 598:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   The following function can be used to read the Stream data counter value:
 599:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****      - uint16_t DMA_GetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx);
 600:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 601:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** @endverbatim
 602:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @{
 603:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 604:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 605:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 606:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Writes the number of data units to be transferred on the DMAy Streamx.
 607:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 608:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 609:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  Counter: Number of data units to be transferred (from 0 to 65535) 
 610:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          Number of data items depends only on the Peripheral data format.
 611:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            
 612:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note   If Peripheral data format is Bytes: number of data units is equal 
 613:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         to total number of bytes to be transferred.
 614:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           
 615:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note   If Peripheral data format is Half-Word: number of data units is  
 616:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         equal to total number of bytes to be transferred / 2.
 617:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           
 618:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note   If Peripheral data format is Word: number of data units is equal 
 619:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         to total  number of bytes to be transferred / 4.
 620:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *      
 621:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note   In Memory-to-Memory transfer mode, the memory buffer pointed by 
 622:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         DMAy_SxPAR register is considered as Peripheral.
 623:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *      
 624:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval The number of remaining data units in the current DMAy Streamx transfer.
 625:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 626:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_SetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx, uint16_t Counter)
 627:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 25273              		.loc 1 627 0
 25274              		.cfi_startproc
 25275              		@ args = 0, pretend = 0, frame = 8
 25276              		@ frame_needed = 1, uses_anonymous_args = 0
 25277              		@ link register save eliminated.
 25278 0000 80B4     		push	{r7}
 25279              	.LCFI18:
 25280              		.cfi_def_cfa_offset 4
 25281 0002 83B0     		sub	sp, sp, #12
 25282              	.LCFI19:
 25283              		.cfi_def_cfa_offset 16
 25284 0004 00AF     		add	r7, sp, #0
 25285              		.cfi_offset 7, -4
 25286              	.LCFI20:
 25287              		.cfi_def_cfa_register 7
 25288 0006 7860     		str	r0, [r7, #4]
 25289 0008 0B46     		mov	r3, r1
 25290 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 628:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 629:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 630:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 631:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Write the number of data units to be transferred */
 632:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->NDTR = (uint16_t)Counter;
 25291              		.loc 1 632 0
 25292 000c 7A88     		ldrh	r2, [r7, #2]
 25293 000e 7B68     		ldr	r3, [r7, #4]
 25294 0010 5A60     		str	r2, [r3, #4]
 633:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 25295              		.loc 1 633 0
 25296 0012 07F10C07 		add	r7, r7, #12
 25297 0016 BD46     		mov	sp, r7
 25298 0018 80BC     		pop	{r7}
 25299 001a 7047     		bx	lr
 25300              		.cfi_endproc
 25301              	.LFE116:
 25303              		.section	.text.DMA_GetCurrDataCounter,"ax",%progbits
 25304              		.align	2
 25305              		.global	DMA_GetCurrDataCounter
 25306              		.thumb
 25307              		.thumb_func
 25309              	DMA_GetCurrDataCounter:
 25310              	.LFB117:
 634:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 635:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 636:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Returns the number of remaining data units in the current DMAy Streamx transfer.
 637:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 638:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 639:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval The number of remaining data units in the current DMAy Streamx transfer.
 640:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 641:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** uint16_t DMA_GetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx)
 642:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 25311              		.loc 1 642 0
 25312              		.cfi_startproc
 25313              		@ args = 0, pretend = 0, frame = 8
 25314              		@ frame_needed = 1, uses_anonymous_args = 0
 25315              		@ link register save eliminated.
 25316 0000 80B4     		push	{r7}
 25317              	.LCFI21:
 25318              		.cfi_def_cfa_offset 4
 25319 0002 83B0     		sub	sp, sp, #12
 25320              	.LCFI22:
 25321              		.cfi_def_cfa_offset 16
 25322 0004 00AF     		add	r7, sp, #0
 25323              		.cfi_offset 7, -4
 25324              	.LCFI23:
 25325              		.cfi_def_cfa_register 7
 25326 0006 7860     		str	r0, [r7, #4]
 643:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 644:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 645:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 646:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Return the number of remaining data units for DMAy Streamx */
 647:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   return ((uint16_t)(DMAy_Streamx->NDTR));
 25327              		.loc 1 647 0
 25328 0008 7B68     		ldr	r3, [r7, #4]
 25329 000a 5B68     		ldr	r3, [r3, #4]
 25330 000c 9BB2     		uxth	r3, r3
 648:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 25331              		.loc 1 648 0
 25332 000e 1846     		mov	r0, r3
 25333 0010 07F10C07 		add	r7, r7, #12
 25334 0014 BD46     		mov	sp, r7
 25335 0016 80BC     		pop	{r7}
 25336 0018 7047     		bx	lr
 25337              		.cfi_endproc
 25338              	.LFE117:
 25340 001a 00BF     		.section	.text.DMA_DoubleBufferModeConfig,"ax",%progbits
 25341              		.align	2
 25342              		.global	DMA_DoubleBufferModeConfig
 25343              		.thumb
 25344              		.thumb_func
 25346              	DMA_DoubleBufferModeConfig:
 25347              	.LFB118:
 649:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 650:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @}
 651:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 652:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 653:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /** @defgroup DMA_Group3 Double Buffer mode functions
 654:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  *  @brief   Double Buffer mode functions 
 655:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  *
 656:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** @verbatim   
 657:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  ===============================================================================
 658:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                          Double Buffer mode functions
 659:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  ===============================================================================  
 660:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 661:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   This subsection provides function allowing to configure and control the double 
 662:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   buffer mode parameters.
 663:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   
 664:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   The Double Buffer mode can be used only when Circular mode is enabled.
 665:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   The Double Buffer mode cannot be used when transferring data from Memory to Memory.
 666:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   
 667:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   The Double Buffer mode allows to set two different Memory addresses from/to which
 668:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   the DMA controller will access alternatively (after completing transfer to/from target
 669:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   memory 0, it will start transfer to/from target memory 1).
 670:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   This allows to reduce software overhead for double buffering and reduce the CPU
 671:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   access time.
 672:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 673:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   Two functions must be called before calling the DMA_Init() function:
 674:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    - void DMA_DoubleBufferModeConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t Memory1BaseAddr,
 675:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                                 uint32_t DMA_CurrentMemory);
 676:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    - void DMA_DoubleBufferModeCmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState);
 677:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    
 678:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_DoubleBufferModeConfig() is called to configure the Memory 1 base address and the first
 679:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   Memory target from/to which the transfer will start after enabling the DMA Stream.
 680:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   Then DMA_DoubleBufferModeCmd() must be called to enable the Double Buffer mode (or disable 
 681:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   it when it should not be used).
 682:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   
 683:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    
 684:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   Two functions can be called dynamically when the transfer is ongoing (or when the DMA Stream is 
 685:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   stopped) to modify on of the target Memories addresses or to check wich Memory target is currentl
 686:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    used:
 687:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     - void DMA_MemoryTargetConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t MemoryBaseAddr,
 688:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                             uint32_t DMA_MemoryTarget);
 689:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     - uint32_t DMA_GetCurrentMemoryTarget(DMA_Stream_TypeDef* DMAy_Streamx);
 690:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 691:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_MemoryTargetConfig() can be called to modify the base address of one of the two target Memori
 692:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   The Memory of which the base address will be modified must not be currently be used by the DMA St
 693:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   (ie. if the DMA Stream is currently transferring from Memory 1 then you can only modify base addr
 694:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   of target Memory 0 and vice versa).
 695:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   To check this condition, it is recommended to use the function DMA_GetCurrentMemoryTarget() which
 696:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   returns the index of the Memory target currently in use by the DMA Stream.
 697:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 698:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** @endverbatim
 699:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @{
 700:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 701:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   
 702:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 703:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Configures, when the DMAy Streamx is disabled, the double buffer mode 
 704:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         and the current memory target.
 705:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 706:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 707:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  Memory1BaseAddr: the base address of the second buffer (Memory 1)  
 708:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMA_CurrentMemory: specifies which memory will be first buffer for
 709:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         the transactions when the Stream will be enabled. 
 710:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          This parameter can be one of the following values:
 711:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_Memory_0: Memory 0 is the current buffer.
 712:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_Memory_1: Memory 1 is the current buffer.  
 713:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *       
 714:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note   Memory0BaseAddr is set by the DMA structure configuration in DMA_Init().
 715:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *   
 716:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
 717:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 718:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_DoubleBufferModeConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t Memory1BaseAddr,
 719:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                                 uint32_t DMA_CurrentMemory)
 720:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {  
 25348              		.loc 1 720 0
 25349              		.cfi_startproc
 25350              		@ args = 0, pretend = 0, frame = 16
 25351              		@ frame_needed = 1, uses_anonymous_args = 0
 25352              		@ link register save eliminated.
 25353 0000 80B4     		push	{r7}
 25354              	.LCFI24:
 25355              		.cfi_def_cfa_offset 4
 25356 0002 85B0     		sub	sp, sp, #20
 25357              	.LCFI25:
 25358              		.cfi_def_cfa_offset 24
 25359 0004 00AF     		add	r7, sp, #0
 25360              		.cfi_offset 7, -4
 25361              	.LCFI26:
 25362              		.cfi_def_cfa_register 7
 25363 0006 F860     		str	r0, [r7, #12]
 25364 0008 B960     		str	r1, [r7, #8]
 25365 000a 7A60     		str	r2, [r7, #4]
 721:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 722:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 723:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_CURRENT_MEM(DMA_CurrentMemory));
 724:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 725:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if (DMA_CurrentMemory != DMA_Memory_0)
 25366              		.loc 1 725 0
 25367 000c 7B68     		ldr	r3, [r7, #4]
 25368 000e 002B     		cmp	r3, #0
 25369 0010 06D0     		beq	.L36
 726:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 727:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Set Memory 1 as current memory address */
 728:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->CR |= (uint32_t)(DMA_SxCR_CT);    
 25370              		.loc 1 728 0
 25371 0012 FB68     		ldr	r3, [r7, #12]
 25372 0014 1B68     		ldr	r3, [r3, #0]
 25373 0016 43F40022 		orr	r2, r3, #524288
 25374 001a FB68     		ldr	r3, [r7, #12]
 25375 001c 1A60     		str	r2, [r3, #0]
 25376 001e 05E0     		b	.L37
 25377              	.L36:
 729:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 730:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
 731:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 732:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Set Memory 0 as current memory address */
 733:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->CR &= ~(uint32_t)(DMA_SxCR_CT);    
 25378              		.loc 1 733 0
 25379 0020 FB68     		ldr	r3, [r7, #12]
 25380 0022 1B68     		ldr	r3, [r3, #0]
 25381 0024 23F40022 		bic	r2, r3, #524288
 25382 0028 FB68     		ldr	r3, [r7, #12]
 25383 002a 1A60     		str	r2, [r3, #0]
 25384              	.L37:
 734:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 735:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 736:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Write to DMAy Streamx M1AR */
 737:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->M1AR = Memory1BaseAddr;
 25385              		.loc 1 737 0
 25386 002c FB68     		ldr	r3, [r7, #12]
 25387 002e BA68     		ldr	r2, [r7, #8]
 25388 0030 1A61     		str	r2, [r3, #16]
 738:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 25389              		.loc 1 738 0
 25390 0032 07F11407 		add	r7, r7, #20
 25391 0036 BD46     		mov	sp, r7
 25392 0038 80BC     		pop	{r7}
 25393 003a 7047     		bx	lr
 25394              		.cfi_endproc
 25395              	.LFE118:
 25397              		.section	.text.DMA_DoubleBufferModeCmd,"ax",%progbits
 25398              		.align	2
 25399              		.global	DMA_DoubleBufferModeCmd
 25400              		.thumb
 25401              		.thumb_func
 25403              	DMA_DoubleBufferModeCmd:
 25404              	.LFB119:
 739:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 740:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 741:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Enables or disables the double buffer mode for the selected DMA stream.
 742:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note   This function can be called only when the DMA Stream is disabled.  
 743:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 744:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 745:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  NewState: new state of the DMAy Streamx double buffer mode. 
 746:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          This parameter can be: ENABLE or DISABLE.
 747:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
 748:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 749:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_DoubleBufferModeCmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
 750:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {  
 25405              		.loc 1 750 0
 25406              		.cfi_startproc
 25407              		@ args = 0, pretend = 0, frame = 8
 25408              		@ frame_needed = 1, uses_anonymous_args = 0
 25409              		@ link register save eliminated.
 25410 0000 80B4     		push	{r7}
 25411              	.LCFI27:
 25412              		.cfi_def_cfa_offset 4
 25413 0002 83B0     		sub	sp, sp, #12
 25414              	.LCFI28:
 25415              		.cfi_def_cfa_offset 16
 25416 0004 00AF     		add	r7, sp, #0
 25417              		.cfi_offset 7, -4
 25418              	.LCFI29:
 25419              		.cfi_def_cfa_register 7
 25420 0006 7860     		str	r0, [r7, #4]
 25421 0008 0B46     		mov	r3, r1
 25422 000a FB70     		strb	r3, [r7, #3]
 751:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 752:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 753:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 754:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 755:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Configure the Double Buffer mode */
 756:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if (NewState != DISABLE)
 25423              		.loc 1 756 0
 25424 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 25425 000e 002B     		cmp	r3, #0
 25426 0010 06D0     		beq	.L39
 757:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 758:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Enable the Double buffer mode */
 759:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_DBM;
 25427              		.loc 1 759 0
 25428 0012 7B68     		ldr	r3, [r7, #4]
 25429 0014 1B68     		ldr	r3, [r3, #0]
 25430 0016 43F48022 		orr	r2, r3, #262144
 25431 001a 7B68     		ldr	r3, [r7, #4]
 25432 001c 1A60     		str	r2, [r3, #0]
 25433 001e 05E0     		b	.L38
 25434              	.L39:
 760:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 761:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
 762:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 763:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Disable the Double buffer mode */
 764:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_DBM;
 25435              		.loc 1 764 0
 25436 0020 7B68     		ldr	r3, [r7, #4]
 25437 0022 1B68     		ldr	r3, [r3, #0]
 25438 0024 23F48022 		bic	r2, r3, #262144
 25439 0028 7B68     		ldr	r3, [r7, #4]
 25440 002a 1A60     		str	r2, [r3, #0]
 25441              	.L38:
 765:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 766:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 25442              		.loc 1 766 0
 25443 002c 07F10C07 		add	r7, r7, #12
 25444 0030 BD46     		mov	sp, r7
 25445 0032 80BC     		pop	{r7}
 25446 0034 7047     		bx	lr
 25447              		.cfi_endproc
 25448              	.LFE119:
 25450 0036 00BF     		.section	.text.DMA_MemoryTargetConfig,"ax",%progbits
 25451              		.align	2
 25452              		.global	DMA_MemoryTargetConfig
 25453              		.thumb
 25454              		.thumb_func
 25456              	DMA_MemoryTargetConfig:
 25457              	.LFB120:
 767:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 768:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 769:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Configures the Memory address for the next buffer transfer in double
 770:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         buffer mode (for dynamic use). This function can be called when the
 771:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         DMA Stream is enabled and when the transfer is ongoing.  
 772:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 773:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 774:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  MemoryBaseAddr: The base address of the target memory buffer
 775:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMA_MemoryTarget: Next memory target to be used. 
 776:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         This parameter can be one of the following values:
 777:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_Memory_0: To use the memory address 0
 778:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_Memory_1: To use the memory address 1
 779:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * 
 780:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note    It is not allowed to modify the Base Address of a target Memory when
 781:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          this target is involved in the current transfer. ie. If the DMA Stream
 782:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          is currently transferring to/from Memory 1, then it not possible to
 783:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          modify Base address of Memory 1, but it is possible to modify Base
 784:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          address of Memory 0.
 785:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          To know which Memory is currently used, you can use the function
 786:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          DMA_GetCurrentMemoryTarget().             
 787:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *  
 788:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
 789:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 790:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_MemoryTargetConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t MemoryBaseAddr,
 791:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                            uint32_t DMA_MemoryTarget)
 792:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 25458              		.loc 1 792 0
 25459              		.cfi_startproc
 25460              		@ args = 0, pretend = 0, frame = 16
 25461              		@ frame_needed = 1, uses_anonymous_args = 0
 25462              		@ link register save eliminated.
 25463 0000 80B4     		push	{r7}
 25464              	.LCFI30:
 25465              		.cfi_def_cfa_offset 4
 25466 0002 85B0     		sub	sp, sp, #20
 25467              	.LCFI31:
 25468              		.cfi_def_cfa_offset 24
 25469 0004 00AF     		add	r7, sp, #0
 25470              		.cfi_offset 7, -4
 25471              	.LCFI32:
 25472              		.cfi_def_cfa_register 7
 25473 0006 F860     		str	r0, [r7, #12]
 25474 0008 B960     		str	r1, [r7, #8]
 25475 000a 7A60     		str	r2, [r7, #4]
 793:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 794:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 795:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_CURRENT_MEM(DMA_MemoryTarget));
 796:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     
 797:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the Memory target to be configured */
 798:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if (DMA_MemoryTarget != DMA_Memory_0)
 25476              		.loc 1 798 0
 25477 000c 7B68     		ldr	r3, [r7, #4]
 25478 000e 002B     		cmp	r3, #0
 25479 0010 03D0     		beq	.L42
 799:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 800:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Write to DMAy Streamx M1AR */
 801:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->M1AR = MemoryBaseAddr;    
 25480              		.loc 1 801 0
 25481 0012 FB68     		ldr	r3, [r7, #12]
 25482 0014 BA68     		ldr	r2, [r7, #8]
 25483 0016 1A61     		str	r2, [r3, #16]
 25484 0018 02E0     		b	.L41
 25485              	.L42:
 802:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }  
 803:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
 804:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 805:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Write to DMAy Streamx M0AR */
 806:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->M0AR = MemoryBaseAddr;  
 25486              		.loc 1 806 0
 25487 001a FB68     		ldr	r3, [r7, #12]
 25488 001c BA68     		ldr	r2, [r7, #8]
 25489 001e DA60     		str	r2, [r3, #12]
 25490              	.L41:
 807:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 808:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 25491              		.loc 1 808 0
 25492 0020 07F11407 		add	r7, r7, #20
 25493 0024 BD46     		mov	sp, r7
 25494 0026 80BC     		pop	{r7}
 25495 0028 7047     		bx	lr
 25496              		.cfi_endproc
 25497              	.LFE120:
 25499 002a 00BF     		.section	.text.DMA_GetCurrentMemoryTarget,"ax",%progbits
 25500              		.align	2
 25501              		.global	DMA_GetCurrentMemoryTarget
 25502              		.thumb
 25503              		.thumb_func
 25505              	DMA_GetCurrentMemoryTarget:
 25506              	.LFB121:
 809:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 810:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 811:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Returns the current memory target used by double buffer transfer.
 812:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 813:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 814:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval The memory target number: 0 for Memory0 or 1 for Memory1. 
 815:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 816:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** uint32_t DMA_GetCurrentMemoryTarget(DMA_Stream_TypeDef* DMAy_Streamx)
 817:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 25507              		.loc 1 817 0
 25508              		.cfi_startproc
 25509              		@ args = 0, pretend = 0, frame = 16
 25510              		@ frame_needed = 1, uses_anonymous_args = 0
 25511              		@ link register save eliminated.
 25512 0000 80B4     		push	{r7}
 25513              	.LCFI33:
 25514              		.cfi_def_cfa_offset 4
 25515 0002 85B0     		sub	sp, sp, #20
 25516              	.LCFI34:
 25517              		.cfi_def_cfa_offset 24
 25518 0004 00AF     		add	r7, sp, #0
 25519              		.cfi_offset 7, -4
 25520              	.LCFI35:
 25521              		.cfi_def_cfa_register 7
 25522 0006 7860     		str	r0, [r7, #4]
 818:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   uint32_t tmp = 0;
 25523              		.loc 1 818 0
 25524 0008 4FF00003 		mov	r3, #0
 25525 000c FB60     		str	r3, [r7, #12]
 819:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   
 820:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 821:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 822:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 823:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Get the current memory target */
 824:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if ((DMAy_Streamx->CR & DMA_SxCR_CT) != 0)
 25526              		.loc 1 824 0
 25527 000e 7B68     		ldr	r3, [r7, #4]
 25528 0010 1B68     		ldr	r3, [r3, #0]
 25529 0012 03F40023 		and	r3, r3, #524288
 25530 0016 002B     		cmp	r3, #0
 25531 0018 03D0     		beq	.L45
 825:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 826:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Current memory buffer used is Memory 1 */
 827:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     tmp = 1;
 25532              		.loc 1 827 0
 25533 001a 4FF00103 		mov	r3, #1
 25534 001e FB60     		str	r3, [r7, #12]
 25535 0020 02E0     		b	.L46
 25536              	.L45:
 828:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }  
 829:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
 830:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 831:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Current memory buffer used is Memory 0 */
 832:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     tmp = 0;    
 25537              		.loc 1 832 0
 25538 0022 4FF00003 		mov	r3, #0
 25539 0026 FB60     		str	r3, [r7, #12]
 25540              	.L46:
 833:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 834:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   return tmp;
 25541              		.loc 1 834 0
 25542 0028 FB68     		ldr	r3, [r7, #12]
 835:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 25543              		.loc 1 835 0
 25544 002a 1846     		mov	r0, r3
 25545 002c 07F11407 		add	r7, r7, #20
 25546 0030 BD46     		mov	sp, r7
 25547 0032 80BC     		pop	{r7}
 25548 0034 7047     		bx	lr
 25549              		.cfi_endproc
 25550              	.LFE121:
 25552 0036 00BF     		.section	.text.DMA_GetCmdStatus,"ax",%progbits
 25553              		.align	2
 25554              		.global	DMA_GetCmdStatus
 25555              		.thumb
 25556              		.thumb_func
 25558              	DMA_GetCmdStatus:
 25559              	.LFB122:
 836:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 837:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @}
 838:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 839:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 840:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /** @defgroup DMA_Group4 Interrupts and flags management functions
 841:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  *  @brief   Interrupts and flags management functions 
 842:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  *
 843:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** @verbatim   
 844:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  ===============================================================================
 845:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                   Interrupts and flags management functions
 846:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  ===============================================================================  
 847:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 848:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   This subsection provides functions allowing to
 849:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    - Check the DMA enable status
 850:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    - Check the FIFO status 
 851:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    - Configure the DMA Interrupts sources and check or clear the flags or pending bits status.   
 852:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    
 853:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  1. DMA Enable status:
 854:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    After configuring the DMA Stream (DMA_Init() function) and enabling the stream,
 855:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    it is recommended to check (or wait until) the DMA Stream is effectively enabled.
 856:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    A Stream may remain disabled if a configuration parameter is wrong.
 857:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    After disabling a DMA Stream, it is also recommended to check (or wait until) the DMA
 858:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    Stream is effectively disabled. If a Stream is disabled while a data transfer is ongoing, 
 859:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    the current data will be transferred and the Stream will be effectively disabled only after
 860:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    this data transfer completion.
 861:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    To monitor this state it is possible to use the following function:
 862:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****      - FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx); 
 863:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  
 864:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  2. FIFO Status:
 865:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    It is possible to monitor the FIFO status when a transfer is ongoing using the following 
 866:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    function:
 867:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****      - uint32_t DMA_GetFIFOStatus(DMA_Stream_TypeDef* DMAy_Streamx); 
 868:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  
 869:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  3. DMA Interrupts and Flags:
 870:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   The user should identify which mode will be used in his application to manage the
 871:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA controller events: Polling mode or Interrupt mode. 
 872:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     
 873:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   Polling Mode
 874:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   =============
 875:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     Each DMA stream can be managed through 4 event Flags:
 876:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     (x : DMA Stream number )
 877:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****        1. DMA_FLAG_FEIFx  : to indicate that a FIFO Mode Transfer Error event occurred.
 878:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****        2. DMA_FLAG_DMEIFx : to indicate that a Direct Mode Transfer Error event occurred.
 879:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****        3. DMA_FLAG_TEIFx  : to indicate that a Transfer Error event occurred.
 880:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****        4. DMA_FLAG_HTIFx  : to indicate that a Half-Transfer Complete event occurred.
 881:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****        5. DMA_FLAG_TCIFx  : to indicate that a Transfer Complete event occurred .       
 882:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 883:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    In this Mode it is advised to use the following functions:
 884:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       - FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG);
 885:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       - void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG);
 886:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 887:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   Interrupt Mode
 888:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   ===============
 889:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     Each DMA Stream can be managed through 4 Interrupts:
 890:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 891:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     Interrupt Source
 892:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     ----------------
 893:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****        1. DMA_IT_FEIFx  : specifies the interrupt source for the  FIFO Mode Transfer Error event.
 894:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****        2. DMA_IT_DMEIFx : specifies the interrupt source for the Direct Mode Transfer Error event.
 895:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****        3. DMA_IT_TEIFx  : specifies the interrupt source for the Transfer Error event.
 896:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****        4. DMA_IT_HTIFx  : specifies the interrupt source for the Half-Transfer Complete event.
 897:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****        5. DMA_IT_TCIFx  : specifies the interrupt source for the a Transfer Complete event. 
 898:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****      
 899:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   In this Mode it is advised to use the following functions:
 900:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****      - void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewStat
 901:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****      - ITStatus DMA_GetITStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT);
 902:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****      - void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT);
 903:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 904:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** @endverbatim
 905:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @{
 906:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 907:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 908:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 909:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Returns the status of EN bit for the specified DMAy Streamx.
 910:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 911:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 912:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *   
 913:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note    After configuring the DMA Stream (DMA_Init() function) and enabling
 914:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          the stream, it is recommended to check (or wait until) the DMA Stream
 915:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          is effectively enabled. A Stream may remain disabled if a configuration
 916:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          parameter is wrong.
 917:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          After disabling a DMA Stream, it is also recommended to check (or wait 
 918:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          until) the DMA Stream is effectively disabled. If a Stream is disabled
 919:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          while a data transfer is ongoing, the current data will be transferred
 920:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          and the Stream will be effectively disabled only after the transfer
 921:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          of this single data is finished.  
 922:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *      
 923:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
 924:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 925:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
 926:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 25560              		.loc 1 926 0
 25561              		.cfi_startproc
 25562              		@ args = 0, pretend = 0, frame = 16
 25563              		@ frame_needed = 1, uses_anonymous_args = 0
 25564              		@ link register save eliminated.
 25565 0000 80B4     		push	{r7}
 25566              	.LCFI36:
 25567              		.cfi_def_cfa_offset 4
 25568 0002 85B0     		sub	sp, sp, #20
 25569              	.LCFI37:
 25570              		.cfi_def_cfa_offset 24
 25571 0004 00AF     		add	r7, sp, #0
 25572              		.cfi_offset 7, -4
 25573              	.LCFI38:
 25574              		.cfi_def_cfa_register 7
 25575 0006 7860     		str	r0, [r7, #4]
 927:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   FunctionalState state = DISABLE;
 25576              		.loc 1 927 0
 25577 0008 4FF00003 		mov	r3, #0
 25578 000c FB73     		strb	r3, [r7, #15]
 928:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 929:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 930:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 931:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 932:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 25579              		.loc 1 932 0
 25580 000e 7B68     		ldr	r3, [r7, #4]
 25581 0010 1B68     		ldr	r3, [r3, #0]
 25582 0012 03F00103 		and	r3, r3, #1
 25583 0016 DBB2     		uxtb	r3, r3
 25584 0018 002B     		cmp	r3, #0
 25585 001a 03D0     		beq	.L48
 933:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 934:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
 935:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     state = ENABLE;
 25586              		.loc 1 935 0
 25587 001c 4FF00103 		mov	r3, #1
 25588 0020 FB73     		strb	r3, [r7, #15]
 25589 0022 02E0     		b	.L49
 25590              	.L48:
 936:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 937:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
 938:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 939:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
 940:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****         all transfers are complete) */
 941:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     state = DISABLE;
 25591              		.loc 1 941 0
 25592 0024 4FF00003 		mov	r3, #0
 25593 0028 FB73     		strb	r3, [r7, #15]
 25594              	.L49:
 942:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 943:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   return state;
 25595              		.loc 1 943 0
 25596 002a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 944:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 25597              		.loc 1 944 0
 25598 002c 1846     		mov	r0, r3
 25599 002e 07F11407 		add	r7, r7, #20
 25600 0032 BD46     		mov	sp, r7
 25601 0034 80BC     		pop	{r7}
 25602 0036 7047     		bx	lr
 25603              		.cfi_endproc
 25604              	.LFE122:
 25606              		.section	.text.DMA_GetFIFOStatus,"ax",%progbits
 25607              		.align	2
 25608              		.global	DMA_GetFIFOStatus
 25609              		.thumb
 25610              		.thumb_func
 25612              	DMA_GetFIFOStatus:
 25613              	.LFB123:
 945:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 946:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 947:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Returns the current DMAy Streamx FIFO filled level.
 948:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0 
 949:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         to 7 to select the DMA Stream.
 950:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval The FIFO filling state.
 951:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           - DMA_FIFOStatus_Less1QuarterFull: when FIFO is less than 1 quarter-full 
 952:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                                               and not empty.
 953:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           - DMA_FIFOStatus_1QuarterFull: if more than 1 quarter-full.
 954:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           - DMA_FIFOStatus_HalfFull: if more than 1 half-full.
 955:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           - DMA_FIFOStatus_3QuartersFull: if more than 3 quarters-full.
 956:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           - DMA_FIFOStatus_Empty: when FIFO is empty
 957:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           - DMA_FIFOStatus_Full: when FIFO is full
 958:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 959:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** uint32_t DMA_GetFIFOStatus(DMA_Stream_TypeDef* DMAy_Streamx)
 960:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 25614              		.loc 1 960 0
 25615              		.cfi_startproc
 25616              		@ args = 0, pretend = 0, frame = 16
 25617              		@ frame_needed = 1, uses_anonymous_args = 0
 25618              		@ link register save eliminated.
 25619 0000 80B4     		push	{r7}
 25620              	.LCFI39:
 25621              		.cfi_def_cfa_offset 4
 25622 0002 85B0     		sub	sp, sp, #20
 25623              	.LCFI40:
 25624              		.cfi_def_cfa_offset 24
 25625 0004 00AF     		add	r7, sp, #0
 25626              		.cfi_offset 7, -4
 25627              	.LCFI41:
 25628              		.cfi_def_cfa_register 7
 25629 0006 7860     		str	r0, [r7, #4]
 961:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   uint32_t tmpreg = 0;
 25630              		.loc 1 961 0
 25631 0008 4FF00003 		mov	r3, #0
 25632 000c FB60     		str	r3, [r7, #12]
 962:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  
 963:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 964:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 965:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   
 966:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Get the FIFO level bits */
 967:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   tmpreg = (uint32_t)((DMAy_Streamx->FCR & DMA_SxFCR_FS));
 25633              		.loc 1 967 0
 25634 000e 7B68     		ldr	r3, [r7, #4]
 25635 0010 5B69     		ldr	r3, [r3, #20]
 25636 0012 03F03803 		and	r3, r3, #56
 25637 0016 FB60     		str	r3, [r7, #12]
 968:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   
 969:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   return tmpreg;
 25638              		.loc 1 969 0
 25639 0018 FB68     		ldr	r3, [r7, #12]
 970:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 25640              		.loc 1 970 0
 25641 001a 1846     		mov	r0, r3
 25642 001c 07F11407 		add	r7, r7, #20
 25643 0020 BD46     		mov	sp, r7
 25644 0022 80BC     		pop	{r7}
 25645 0024 7047     		bx	lr
 25646              		.cfi_endproc
 25647              	.LFE123:
 25649 0026 00BF     		.section	.text.DMA_GetFlagStatus,"ax",%progbits
 25650              		.align	2
 25651              		.global	DMA_GetFlagStatus
 25652              		.thumb
 25653              		.thumb_func
 25655              	DMA_GetFlagStatus:
 25656              	.LFB124:
 971:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 972:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 973:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Checks whether the specified DMAy Streamx flag is set or not.
 974:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 975:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 976:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMA_FLAG: specifies the flag to check.
 977:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          This parameter can be one of the following values:
 978:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_TCIFx:  Streamx transfer complete flag
 979:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_HTIFx:  Streamx half transfer complete flag
 980:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_TEIFx:  Streamx transfer error flag
 981:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_DMEIFx: Streamx direct mode error flag
 982:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
 983:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         Where x can be 0 to 7 to select the DMA Stream.
 984:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval The new state of DMA_FLAG (SET or RESET).
 985:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 986:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
 987:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 25657              		.loc 1 987 0
 25658              		.cfi_startproc
 25659              		@ args = 0, pretend = 0, frame = 24
 25660              		@ frame_needed = 1, uses_anonymous_args = 0
 25661              		@ link register save eliminated.
 25662 0000 80B4     		push	{r7}
 25663              	.LCFI42:
 25664              		.cfi_def_cfa_offset 4
 25665 0002 87B0     		sub	sp, sp, #28
 25666              	.LCFI43:
 25667              		.cfi_def_cfa_offset 32
 25668 0004 00AF     		add	r7, sp, #0
 25669              		.cfi_offset 7, -4
 25670              	.LCFI44:
 25671              		.cfi_def_cfa_register 7
 25672 0006 7860     		str	r0, [r7, #4]
 25673 0008 3960     		str	r1, [r7, #0]
 988:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   FlagStatus bitstatus = RESET;
 25674              		.loc 1 988 0
 25675 000a 4FF00003 		mov	r3, #0
 25676 000e FB75     		strb	r3, [r7, #23]
 989:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_TypeDef* DMAy;
 990:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   uint32_t tmpreg = 0;
 25677              		.loc 1 990 0
 25678 0010 4FF00003 		mov	r3, #0
 25679 0014 FB60     		str	r3, [r7, #12]
 991:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 992:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 993:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 994:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_GET_FLAG(DMA_FLAG));
 995:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 996:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Determine the DMA to which belongs the stream */
 997:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if (DMAy_Streamx < DMA2_Stream0)
 25680              		.loc 1 997 0
 25681 0016 7A68     		ldr	r2, [r7, #4]
 25682 0018 164B     		ldr	r3, .L58
 25683 001a 9A42     		cmp	r2, r3
 25684 001c 02D8     		bhi	.L52
 998:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 999:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMAy_Streamx belongs to DMA1 */
1000:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy = DMA1; 
 25685              		.loc 1 1000 0
 25686 001e 164B     		ldr	r3, .L58+4
 25687 0020 3B61     		str	r3, [r7, #16]
 25688 0022 01E0     		b	.L53
 25689              	.L52:
1001:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   } 
1002:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else 
1003:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1004:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMAy_Streamx belongs to DMA2 */
1005:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy = DMA2; 
 25690              		.loc 1 1005 0
 25691 0024 154B     		ldr	r3, .L58+8
 25692 0026 3B61     		str	r3, [r7, #16]
 25693              	.L53:
1006:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1007:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1008:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check if the flag is in HISR or LISR */
1009:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 25694              		.loc 1 1009 0
 25695 0028 3B68     		ldr	r3, [r7, #0]
 25696 002a 03F00053 		and	r3, r3, #536870912
 25697 002e 002B     		cmp	r3, #0
 25698 0030 03D0     		beq	.L54
1010:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1011:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Get DMAy HISR register value */
1012:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     tmpreg = DMAy->HISR;
 25699              		.loc 1 1012 0
 25700 0032 3B69     		ldr	r3, [r7, #16]
 25701 0034 5B68     		ldr	r3, [r3, #4]
 25702 0036 FB60     		str	r3, [r7, #12]
 25703 0038 02E0     		b	.L55
 25704              	.L54:
1013:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1014:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
1015:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1016:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Get DMAy LISR register value */
1017:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     tmpreg = DMAy->LISR;
 25705              		.loc 1 1017 0
 25706 003a 3B69     		ldr	r3, [r7, #16]
 25707 003c 1B68     		ldr	r3, [r3, #0]
 25708 003e FB60     		str	r3, [r7, #12]
 25709              	.L55:
1018:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }   
1019:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  
1020:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Mask the reserved bits */
1021:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   tmpreg &= (uint32_t)RESERVED_MASK;
 25710              		.loc 1 1021 0
 25711 0040 FA68     		ldr	r2, [r7, #12]
 25712 0042 0F4B     		ldr	r3, .L58+12
 25713 0044 02EA0303 		and	r3, r2, r3
 25714 0048 FB60     		str	r3, [r7, #12]
1022:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1023:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the status of the specified DMA flag */
1024:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 25715              		.loc 1 1024 0
 25716 004a FA68     		ldr	r2, [r7, #12]
 25717 004c 3B68     		ldr	r3, [r7, #0]
 25718 004e 02EA0303 		and	r3, r2, r3
 25719 0052 002B     		cmp	r3, #0
 25720 0054 03D0     		beq	.L56
1025:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1026:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMA_FLAG is set */
1027:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     bitstatus = SET;
 25721              		.loc 1 1027 0
 25722 0056 4FF00103 		mov	r3, #1
 25723 005a FB75     		strb	r3, [r7, #23]
 25724 005c 02E0     		b	.L57
 25725              	.L56:
1028:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1029:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
1030:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1031:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMA_FLAG is reset */
1032:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     bitstatus = RESET;
 25726              		.loc 1 1032 0
 25727 005e 4FF00003 		mov	r3, #0
 25728 0062 FB75     		strb	r3, [r7, #23]
 25729              	.L57:
1033:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1034:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1035:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Return the DMA_FLAG status */
1036:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   return  bitstatus;
 25730              		.loc 1 1036 0
 25731 0064 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1037:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 25732              		.loc 1 1037 0
 25733 0066 1846     		mov	r0, r3
 25734 0068 07F11C07 		add	r7, r7, #28
 25735 006c BD46     		mov	sp, r7
 25736 006e 80BC     		pop	{r7}
 25737 0070 7047     		bx	lr
 25738              	.L59:
 25739 0072 00BF     		.align	2
 25740              	.L58:
 25741 0074 0F640240 		.word	1073898511
 25742 0078 00600240 		.word	1073897472
 25743 007c 00640240 		.word	1073898496
 25744 0080 7D0F7D0F 		.word	259854205
 25745              		.cfi_endproc
 25746              	.LFE124:
 25748              		.section	.text.DMA_ClearFlag,"ax",%progbits
 25749              		.align	2
 25750              		.global	DMA_ClearFlag
 25751              		.thumb
 25752              		.thumb_func
 25754              	DMA_ClearFlag:
 25755              	.LFB125:
1038:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1039:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
1040:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Clears the DMAy Streamx's pending flags.
1041:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
1042:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
1043:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMA_FLAG: specifies the flag to clear.
1044:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          This parameter can be any combination of the following values:
1045:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_TCIFx:  Streamx transfer complete flag
1046:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_HTIFx:  Streamx half transfer complete flag
1047:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_TEIFx:  Streamx transfer error flag
1048:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_DMEIFx: Streamx direct mode error flag
1049:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
1050:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         Where x can be 0 to 7 to select the DMA Stream.   
1051:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
1052:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
1053:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
1054:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 25756              		.loc 1 1054 0
 25757              		.cfi_startproc
 25758              		@ args = 0, pretend = 0, frame = 16
 25759              		@ frame_needed = 1, uses_anonymous_args = 0
 25760              		@ link register save eliminated.
 25761 0000 80B4     		push	{r7}
 25762              	.LCFI45:
 25763              		.cfi_def_cfa_offset 4
 25764 0002 85B0     		sub	sp, sp, #20
 25765              	.LCFI46:
 25766              		.cfi_def_cfa_offset 24
 25767 0004 00AF     		add	r7, sp, #0
 25768              		.cfi_offset 7, -4
 25769              	.LCFI47:
 25770              		.cfi_def_cfa_register 7
 25771 0006 7860     		str	r0, [r7, #4]
 25772 0008 3960     		str	r1, [r7, #0]
1055:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_TypeDef* DMAy;
1056:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1057:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
1058:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
1059:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));
1060:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1061:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Determine the DMA to which belongs the stream */
1062:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if (DMAy_Streamx < DMA2_Stream0)
 25773              		.loc 1 1062 0
 25774 000a 7A68     		ldr	r2, [r7, #4]
 25775 000c 0F4B     		ldr	r3, .L65
 25776 000e 9A42     		cmp	r2, r3
 25777 0010 02D8     		bhi	.L61
1063:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1064:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMAy_Streamx belongs to DMA1 */
1065:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy = DMA1; 
 25778              		.loc 1 1065 0
 25779 0012 0F4B     		ldr	r3, .L65+4
 25780 0014 FB60     		str	r3, [r7, #12]
 25781 0016 01E0     		b	.L62
 25782              	.L61:
1066:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   } 
1067:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else 
1068:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1069:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMAy_Streamx belongs to DMA2 */
1070:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy = DMA2; 
 25783              		.loc 1 1070 0
 25784 0018 0E4B     		ldr	r3, .L65+8
 25785 001a FB60     		str	r3, [r7, #12]
 25786              	.L62:
1071:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1072:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1073:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check if LIFCR or HIFCR register is targeted */
1074:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 25787              		.loc 1 1074 0
 25788 001c 3B68     		ldr	r3, [r7, #0]
 25789 001e 03F00053 		and	r3, r3, #536870912
 25790 0022 002B     		cmp	r3, #0
 25791 0024 06D0     		beq	.L63
1075:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1076:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Set DMAy HIFCR register clear flag bits */
1077:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 25792              		.loc 1 1077 0
 25793 0026 3A68     		ldr	r2, [r7, #0]
 25794 0028 0B4B     		ldr	r3, .L65+12
 25795 002a 02EA0303 		and	r3, r2, r3
 25796 002e FA68     		ldr	r2, [r7, #12]
 25797 0030 D360     		str	r3, [r2, #12]
 25798 0032 05E0     		b	.L60
 25799              	.L63:
1078:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1079:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else 
1080:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1081:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Set DMAy LIFCR register clear flag bits */
1082:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 25800              		.loc 1 1082 0
 25801 0034 3A68     		ldr	r2, [r7, #0]
 25802 0036 084B     		ldr	r3, .L65+12
 25803 0038 02EA0303 		and	r3, r2, r3
 25804 003c FA68     		ldr	r2, [r7, #12]
 25805 003e 9360     		str	r3, [r2, #8]
 25806              	.L60:
1083:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }    
1084:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 25807              		.loc 1 1084 0
 25808 0040 07F11407 		add	r7, r7, #20
 25809 0044 BD46     		mov	sp, r7
 25810 0046 80BC     		pop	{r7}
 25811 0048 7047     		bx	lr
 25812              	.L66:
 25813 004a 00BF     		.align	2
 25814              	.L65:
 25815 004c 0F640240 		.word	1073898511
 25816 0050 00600240 		.word	1073897472
 25817 0054 00640240 		.word	1073898496
 25818 0058 7D0F7D0F 		.word	259854205
 25819              		.cfi_endproc
 25820              	.LFE125:
 25822              		.section	.text.DMA_ITConfig,"ax",%progbits
 25823              		.align	2
 25824              		.global	DMA_ITConfig
 25825              		.thumb
 25826              		.thumb_func
 25828              	DMA_ITConfig:
 25829              	.LFB126:
1085:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1086:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
1087:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Enables or disables the specified DMAy Streamx interrupts.
1088:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
1089:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
1090:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param DMA_IT: specifies the DMA interrupt sources to be enabled or disabled. 
1091:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          This parameter can be any combination of the following values:
1092:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_TC:  Transfer complete interrupt mask
1093:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_HT:  Half transfer complete interrupt mask
1094:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_TE:  Transfer error interrupt mask
1095:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_FE:  FIFO error interrupt mask
1096:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  NewState: new state of the specified DMA interrupts.
1097:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          This parameter can be: ENABLE or DISABLE.
1098:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
1099:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
1100:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
1101:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 25830              		.loc 1 1101 0
 25831              		.cfi_startproc
 25832              		@ args = 0, pretend = 0, frame = 16
 25833              		@ frame_needed = 1, uses_anonymous_args = 0
 25834              		@ link register save eliminated.
 25835 0000 80B4     		push	{r7}
 25836              	.LCFI48:
 25837              		.cfi_def_cfa_offset 4
 25838 0002 85B0     		sub	sp, sp, #20
 25839              	.LCFI49:
 25840              		.cfi_def_cfa_offset 24
 25841 0004 00AF     		add	r7, sp, #0
 25842              		.cfi_offset 7, -4
 25843              	.LCFI50:
 25844              		.cfi_def_cfa_register 7
 25845 0006 F860     		str	r0, [r7, #12]
 25846 0008 B960     		str	r1, [r7, #8]
 25847 000a 1346     		mov	r3, r2
 25848 000c FB71     		strb	r3, [r7, #7]
1102:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
1103:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
1104:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_CONFIG_IT(DMA_IT));
1105:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1106:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1107:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check if the DMA_IT parameter contains a FIFO interrupt */
1108:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if ((DMA_IT & DMA_IT_FE) != 0)
 25849              		.loc 1 1108 0
 25850 000e BB68     		ldr	r3, [r7, #8]
 25851 0010 03F08003 		and	r3, r3, #128
 25852 0014 002B     		cmp	r3, #0
 25853 0016 0FD0     		beq	.L68
1109:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1110:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     if (NewState != DISABLE)
 25854              		.loc 1 1110 0
 25855 0018 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 25856 001a 002B     		cmp	r3, #0
 25857 001c 06D0     		beq	.L69
1111:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     {
1112:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       /* Enable the selected DMA FIFO interrupts */
1113:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 25858              		.loc 1 1113 0
 25859 001e FB68     		ldr	r3, [r7, #12]
 25860 0020 5B69     		ldr	r3, [r3, #20]
 25861 0022 43F08002 		orr	r2, r3, #128
 25862 0026 FB68     		ldr	r3, [r7, #12]
 25863 0028 5A61     		str	r2, [r3, #20]
 25864 002a 05E0     		b	.L68
 25865              	.L69:
1114:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     }    
1115:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     else 
1116:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     {
1117:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       /* Disable the selected DMA FIFO interrupts */
1118:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 25866              		.loc 1 1118 0
 25867 002c FB68     		ldr	r3, [r7, #12]
 25868 002e 5B69     		ldr	r3, [r3, #20]
 25869 0030 23F08002 		bic	r2, r3, #128
 25870 0034 FB68     		ldr	r3, [r7, #12]
 25871 0036 5A61     		str	r2, [r3, #20]
 25872              	.L68:
1119:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     }
1120:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1121:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1122:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check if the DMA_IT parameter contains a Transfer interrupt */
1123:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if (DMA_IT != DMA_IT_FE)
 25873              		.loc 1 1123 0
 25874 0038 BB68     		ldr	r3, [r7, #8]
 25875 003a 802B     		cmp	r3, #128
 25876 003c 15D0     		beq	.L67
1124:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1125:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     if (NewState != DISABLE)
 25877              		.loc 1 1125 0
 25878 003e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 25879 0040 002B     		cmp	r3, #0
 25880 0042 08D0     		beq	.L71
1126:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     {
1127:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       /* Enable the selected DMA transfer interrupts */
1128:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 25881              		.loc 1 1128 0
 25882 0044 FB68     		ldr	r3, [r7, #12]
 25883 0046 1A68     		ldr	r2, [r3, #0]
 25884 0048 BB68     		ldr	r3, [r7, #8]
 25885 004a 03F01E03 		and	r3, r3, #30
 25886 004e 1A43     		orrs	r2, r2, r3
 25887 0050 FB68     		ldr	r3, [r7, #12]
 25888 0052 1A60     		str	r2, [r3, #0]
 25889 0054 09E0     		b	.L67
 25890              	.L71:
1129:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     }
1130:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     else
1131:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     {
1132:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       /* Disable the selected DMA transfer interrupts */
1133:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 25891              		.loc 1 1133 0
 25892 0056 FB68     		ldr	r3, [r7, #12]
 25893 0058 1A68     		ldr	r2, [r3, #0]
 25894 005a BB68     		ldr	r3, [r7, #8]
 25895 005c 03F01E03 		and	r3, r3, #30
 25896 0060 6FEA0303 		mvn	r3, r3
 25897 0064 1A40     		ands	r2, r2, r3
 25898 0066 FB68     		ldr	r3, [r7, #12]
 25899 0068 1A60     		str	r2, [r3, #0]
 25900              	.L67:
1134:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     }    
1135:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1136:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 25901              		.loc 1 1136 0
 25902 006a 07F11407 		add	r7, r7, #20
 25903 006e BD46     		mov	sp, r7
 25904 0070 80BC     		pop	{r7}
 25905 0072 7047     		bx	lr
 25906              		.cfi_endproc
 25907              	.LFE126:
 25909              		.section	.text.DMA_GetITStatus,"ax",%progbits
 25910              		.align	2
 25911              		.global	DMA_GetITStatus
 25912              		.thumb
 25913              		.thumb_func
 25915              	DMA_GetITStatus:
 25916              	.LFB127:
1137:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1138:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
1139:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Checks whether the specified DMAy Streamx interrupt has occurred or not.
1140:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
1141:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
1142:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMA_IT: specifies the DMA interrupt source to check.
1143:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          This parameter can be one of the following values:
1144:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_TCIFx:  Streamx transfer complete interrupt
1145:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_HTIFx:  Streamx half transfer complete interrupt
1146:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_TEIFx:  Streamx transfer error interrupt
1147:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_DMEIFx: Streamx direct mode error interrupt
1148:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
1149:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         Where x can be 0 to 7 to select the DMA Stream.
1150:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval The new state of DMA_IT (SET or RESET).
1151:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
1152:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** ITStatus DMA_GetITStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
1153:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 25917              		.loc 1 1153 0
 25918              		.cfi_startproc
 25919              		@ args = 0, pretend = 0, frame = 24
 25920              		@ frame_needed = 1, uses_anonymous_args = 0
 25921              		@ link register save eliminated.
 25922 0000 80B4     		push	{r7}
 25923              	.LCFI51:
 25924              		.cfi_def_cfa_offset 4
 25925 0002 87B0     		sub	sp, sp, #28
 25926              	.LCFI52:
 25927              		.cfi_def_cfa_offset 32
 25928 0004 00AF     		add	r7, sp, #0
 25929              		.cfi_offset 7, -4
 25930              	.LCFI53:
 25931              		.cfi_def_cfa_register 7
 25932 0006 7860     		str	r0, [r7, #4]
 25933 0008 3960     		str	r1, [r7, #0]
1154:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   ITStatus bitstatus = RESET;
 25934              		.loc 1 1154 0
 25935 000a 4FF00003 		mov	r3, #0
 25936 000e FB75     		strb	r3, [r7, #23]
1155:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_TypeDef* DMAy;
1156:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   uint32_t tmpreg = 0, enablestatus = 0;
 25937              		.loc 1 1156 0
 25938 0010 4FF00003 		mov	r3, #0
 25939 0014 FB60     		str	r3, [r7, #12]
 25940 0016 4FF00003 		mov	r3, #0
 25941 001a BB60     		str	r3, [r7, #8]
1157:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1158:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
1159:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
1160:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_GET_IT(DMA_IT));
1161:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  
1162:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Determine the DMA to which belongs the stream */
1163:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if (DMAy_Streamx < DMA2_Stream0)
 25942              		.loc 1 1163 0
 25943 001c 7A68     		ldr	r2, [r7, #4]
 25944 001e 244B     		ldr	r3, .L81
 25945 0020 9A42     		cmp	r2, r3
 25946 0022 02D8     		bhi	.L73
1164:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1165:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMAy_Streamx belongs to DMA1 */
1166:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy = DMA1; 
 25947              		.loc 1 1166 0
 25948 0024 234B     		ldr	r3, .L81+4
 25949 0026 3B61     		str	r3, [r7, #16]
 25950 0028 01E0     		b	.L74
 25951              	.L73:
1167:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   } 
1168:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else 
1169:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1170:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMAy_Streamx belongs to DMA2 */
1171:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy = DMA2; 
 25952              		.loc 1 1171 0
 25953 002a 234B     		ldr	r3, .L81+8
 25954 002c 3B61     		str	r3, [r7, #16]
 25955              	.L74:
1172:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1173:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1174:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check if the interrupt enable bit is in the CR or FCR register */
1175:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
 25956              		.loc 1 1175 0
 25957 002e 3A68     		ldr	r2, [r7, #0]
 25958 0030 224B     		ldr	r3, .L81+12
 25959 0032 02EA0303 		and	r3, r2, r3
 25960 0036 002B     		cmp	r3, #0
 25961 0038 0CD0     		beq	.L75
1176:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1177:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Get the interrupt enable position mask in CR register */
1178:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     tmpreg = (uint32_t)((DMA_IT >> 11) & TRANSFER_IT_ENABLE_MASK);   
 25962              		.loc 1 1178 0
 25963 003a 3B68     		ldr	r3, [r7, #0]
 25964 003c 4FEAD323 		lsr	r3, r3, #11
 25965 0040 03F01E03 		and	r3, r3, #30
 25966 0044 FB60     		str	r3, [r7, #12]
1179:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     
1180:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Check the enable bit in CR register */
1181:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     enablestatus = (uint32_t)(DMAy_Streamx->CR & tmpreg);
 25967              		.loc 1 1181 0
 25968 0046 7B68     		ldr	r3, [r7, #4]
 25969 0048 1A68     		ldr	r2, [r3, #0]
 25970 004a FB68     		ldr	r3, [r7, #12]
 25971 004c 02EA0303 		and	r3, r2, r3
 25972 0050 BB60     		str	r3, [r7, #8]
 25973 0052 04E0     		b	.L76
 25974              	.L75:
1182:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1183:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else 
1184:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1185:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Check the enable bit in FCR register */
1186:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     enablestatus = (uint32_t)(DMAy_Streamx->FCR & DMA_IT_FE); 
 25975              		.loc 1 1186 0
 25976 0054 7B68     		ldr	r3, [r7, #4]
 25977 0056 5B69     		ldr	r3, [r3, #20]
 25978 0058 03F08003 		and	r3, r3, #128
 25979 005c BB60     		str	r3, [r7, #8]
 25980              	.L76:
1187:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1188:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  
1189:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check if the interrupt pending flag is in LISR or HISR */
1190:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 25981              		.loc 1 1190 0
 25982 005e 3B68     		ldr	r3, [r7, #0]
 25983 0060 03F00053 		and	r3, r3, #536870912
 25984 0064 002B     		cmp	r3, #0
 25985 0066 03D0     		beq	.L77
1191:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1192:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Get DMAy HISR register value */
1193:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     tmpreg = DMAy->HISR ;
 25986              		.loc 1 1193 0
 25987 0068 3B69     		ldr	r3, [r7, #16]
 25988 006a 5B68     		ldr	r3, [r3, #4]
 25989 006c FB60     		str	r3, [r7, #12]
 25990 006e 02E0     		b	.L78
 25991              	.L77:
1194:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1195:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
1196:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1197:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Get DMAy LISR register value */
1198:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     tmpreg = DMAy->LISR ;
 25992              		.loc 1 1198 0
 25993 0070 3B69     		ldr	r3, [r7, #16]
 25994 0072 1B68     		ldr	r3, [r3, #0]
 25995 0074 FB60     		str	r3, [r7, #12]
 25996              	.L78:
1199:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   } 
1200:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1201:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* mask all reserved bits */
1202:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   tmpreg &= (uint32_t)RESERVED_MASK;
 25997              		.loc 1 1202 0
 25998 0076 FA68     		ldr	r2, [r7, #12]
 25999 0078 114B     		ldr	r3, .L81+16
 26000 007a 02EA0303 		and	r3, r2, r3
 26001 007e FB60     		str	r3, [r7, #12]
1203:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1204:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the status of the specified DMA interrupt */
1205:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if (((tmpreg & DMA_IT) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 26002              		.loc 1 1205 0
 26003 0080 FA68     		ldr	r2, [r7, #12]
 26004 0082 3B68     		ldr	r3, [r7, #0]
 26005 0084 02EA0303 		and	r3, r2, r3
 26006 0088 002B     		cmp	r3, #0
 26007 008a 06D0     		beq	.L79
 26008              		.loc 1 1205 0 is_stmt 0 discriminator 1
 26009 008c BB68     		ldr	r3, [r7, #8]
 26010 008e 002B     		cmp	r3, #0
 26011 0090 03D0     		beq	.L79
1206:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1207:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMA_IT is set */
1208:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     bitstatus = SET;
 26012              		.loc 1 1208 0 is_stmt 1
 26013 0092 4FF00103 		mov	r3, #1
 26014 0096 FB75     		strb	r3, [r7, #23]
 26015 0098 02E0     		b	.L80
 26016              	.L79:
1209:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1210:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
1211:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1212:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMA_IT is reset */
1213:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     bitstatus = RESET;
 26017              		.loc 1 1213 0
 26018 009a 4FF00003 		mov	r3, #0
 26019 009e FB75     		strb	r3, [r7, #23]
 26020              	.L80:
1214:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1215:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1216:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Return the DMA_IT status */
1217:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   return  bitstatus;
 26021              		.loc 1 1217 0
 26022 00a0 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1218:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 26023              		.loc 1 1218 0
 26024 00a2 1846     		mov	r0, r3
 26025 00a4 07F11C07 		add	r7, r7, #28
 26026 00a8 BD46     		mov	sp, r7
 26027 00aa 80BC     		pop	{r7}
 26028 00ac 7047     		bx	lr
 26029              	.L82:
 26030 00ae 00BF     		.align	2
 26031              	.L81:
 26032 00b0 0F640240 		.word	1073898511
 26033 00b4 00600240 		.word	1073897472
 26034 00b8 00640240 		.word	1073898496
 26035 00bc 3C0F3C0F 		.word	255594300
 26036 00c0 7D0F7D0F 		.word	259854205
 26037              		.cfi_endproc
 26038              	.LFE127:
 26040              		.section	.text.DMA_ClearITPendingBit,"ax",%progbits
 26041              		.align	2
 26042              		.global	DMA_ClearITPendingBit
 26043              		.thumb
 26044              		.thumb_func
 26046              	DMA_ClearITPendingBit:
 26047              	.LFB128:
1219:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1220:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
1221:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Clears the DMAy Streamx's interrupt pending bits.
1222:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
1223:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
1224:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMA_IT: specifies the DMA interrupt pending bit to clear.
1225:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          This parameter can be any combination of the following values:
1226:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_TCIFx:  Streamx transfer complete interrupt
1227:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_HTIFx:  Streamx half transfer complete interrupt
1228:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_TEIFx:  Streamx transfer error interrupt
1229:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_DMEIFx: Streamx direct mode error interrupt
1230:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
1231:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         Where x can be 0 to 7 to select the DMA Stream.
1232:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
1233:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
1234:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
1235:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 26048              		.loc 1 1235 0
 26049              		.cfi_startproc
 26050              		@ args = 0, pretend = 0, frame = 16
 26051              		@ frame_needed = 1, uses_anonymous_args = 0
 26052              		@ link register save eliminated.
 26053 0000 80B4     		push	{r7}
 26054              	.LCFI54:
 26055              		.cfi_def_cfa_offset 4
 26056 0002 85B0     		sub	sp, sp, #20
 26057              	.LCFI55:
 26058              		.cfi_def_cfa_offset 24
 26059 0004 00AF     		add	r7, sp, #0
 26060              		.cfi_offset 7, -4
 26061              	.LCFI56:
 26062              		.cfi_def_cfa_register 7
 26063 0006 7860     		str	r0, [r7, #4]
 26064 0008 3960     		str	r1, [r7, #0]
1236:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_TypeDef* DMAy;
1237:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1238:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
1239:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
1240:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_CLEAR_IT(DMA_IT));
1241:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1242:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Determine the DMA to which belongs the stream */
1243:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if (DMAy_Streamx < DMA2_Stream0)
 26065              		.loc 1 1243 0
 26066 000a 7A68     		ldr	r2, [r7, #4]
 26067 000c 0F4B     		ldr	r3, .L88
 26068 000e 9A42     		cmp	r2, r3
 26069 0010 02D8     		bhi	.L84
1244:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1245:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMAy_Streamx belongs to DMA1 */
1246:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy = DMA1; 
 26070              		.loc 1 1246 0
 26071 0012 0F4B     		ldr	r3, .L88+4
 26072 0014 FB60     		str	r3, [r7, #12]
 26073 0016 01E0     		b	.L85
 26074              	.L84:
1247:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   } 
1248:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else 
1249:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1250:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMAy_Streamx belongs to DMA2 */
1251:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy = DMA2; 
 26075              		.loc 1 1251 0
 26076 0018 0E4B     		ldr	r3, .L88+8
 26077 001a FB60     		str	r3, [r7, #12]
 26078              	.L85:
1252:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1253:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1254:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check if LIFCR or HIFCR register is targeted */
1255:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 26079              		.loc 1 1255 0
 26080 001c 3B68     		ldr	r3, [r7, #0]
 26081 001e 03F00053 		and	r3, r3, #536870912
 26082 0022 002B     		cmp	r3, #0
 26083 0024 06D0     		beq	.L86
1256:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1257:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Set DMAy HIFCR register clear interrupt bits */
1258:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 26084              		.loc 1 1258 0
 26085 0026 3A68     		ldr	r2, [r7, #0]
 26086 0028 0B4B     		ldr	r3, .L88+12
 26087 002a 02EA0303 		and	r3, r2, r3
 26088 002e FA68     		ldr	r2, [r7, #12]
 26089 0030 D360     		str	r3, [r2, #12]
 26090 0032 05E0     		b	.L83
 26091              	.L86:
1259:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1260:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else 
1261:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1262:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Set DMAy LIFCR register clear interrupt bits */
1263:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 26092              		.loc 1 1263 0
 26093 0034 3A68     		ldr	r2, [r7, #0]
 26094 0036 084B     		ldr	r3, .L88+12
 26095 0038 02EA0303 		and	r3, r2, r3
 26096 003c FA68     		ldr	r2, [r7, #12]
 26097 003e 9360     		str	r3, [r2, #8]
 26098              	.L83:
1264:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }   
1265:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 26099              		.loc 1 1265 0
 26100 0040 07F11407 		add	r7, r7, #20
 26101 0044 BD46     		mov	sp, r7
 26102 0046 80BC     		pop	{r7}
 26103 0048 7047     		bx	lr
 26104              	.L89:
 26105 004a 00BF     		.align	2
 26106              	.L88:
 26107 004c 0F640240 		.word	1073898511
 26108 0050 00600240 		.word	1073897472
 26109 0054 00640240 		.word	1073898496
 26110 0058 7D0F7D0F 		.word	259854205
 26111              		.cfi_endproc
 26112              	.LFE128:
 26114              		.text
 26115              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_dma.c
     /tmp/ccPVXNIr.s:24621  .text.DMA_DeInit:00000000 $t
     /tmp/ccPVXNIr.s:24626  .text.DMA_DeInit:00000000 DMA_DeInit
     /tmp/ccPVXNIr.s:24857  .text.DMA_DeInit:00000160 $d
     /tmp/ccPVXNIr.s:24882  .text.DMA_Init:00000000 $t
     /tmp/ccPVXNIr.s:24887  .text.DMA_Init:00000000 DMA_Init
     /tmp/ccPVXNIr.s:25012  .text.DMA_Init:000000b4 $d
     /tmp/ccPVXNIr.s:25017  .text.DMA_StructInit:00000000 $t
     /tmp/ccPVXNIr.s:25022  .text.DMA_StructInit:00000000 DMA_StructInit
     /tmp/ccPVXNIr.s:25109  .text.DMA_Cmd:00000000 $t
     /tmp/ccPVXNIr.s:25114  .text.DMA_Cmd:00000000 DMA_Cmd
     /tmp/ccPVXNIr.s:25162  .text.DMA_PeriphIncOffsetSizeConfig:00000000 $t
     /tmp/ccPVXNIr.s:25167  .text.DMA_PeriphIncOffsetSizeConfig:00000000 DMA_PeriphIncOffsetSizeConfig
     /tmp/ccPVXNIr.s:25214  .text.DMA_FlowControllerConfig:00000000 $t
     /tmp/ccPVXNIr.s:25219  .text.DMA_FlowControllerConfig:00000000 DMA_FlowControllerConfig
     /tmp/ccPVXNIr.s:25266  .text.DMA_SetCurrDataCounter:00000000 $t
     /tmp/ccPVXNIr.s:25271  .text.DMA_SetCurrDataCounter:00000000 DMA_SetCurrDataCounter
     /tmp/ccPVXNIr.s:25304  .text.DMA_GetCurrDataCounter:00000000 $t
     /tmp/ccPVXNIr.s:25309  .text.DMA_GetCurrDataCounter:00000000 DMA_GetCurrDataCounter
     /tmp/ccPVXNIr.s:25341  .text.DMA_DoubleBufferModeConfig:00000000 $t
     /tmp/ccPVXNIr.s:25346  .text.DMA_DoubleBufferModeConfig:00000000 DMA_DoubleBufferModeConfig
     /tmp/ccPVXNIr.s:25398  .text.DMA_DoubleBufferModeCmd:00000000 $t
     /tmp/ccPVXNIr.s:25403  .text.DMA_DoubleBufferModeCmd:00000000 DMA_DoubleBufferModeCmd
     /tmp/ccPVXNIr.s:25451  .text.DMA_MemoryTargetConfig:00000000 $t
     /tmp/ccPVXNIr.s:25456  .text.DMA_MemoryTargetConfig:00000000 DMA_MemoryTargetConfig
     /tmp/ccPVXNIr.s:25500  .text.DMA_GetCurrentMemoryTarget:00000000 $t
     /tmp/ccPVXNIr.s:25505  .text.DMA_GetCurrentMemoryTarget:00000000 DMA_GetCurrentMemoryTarget
     /tmp/ccPVXNIr.s:25553  .text.DMA_GetCmdStatus:00000000 $t
     /tmp/ccPVXNIr.s:25558  .text.DMA_GetCmdStatus:00000000 DMA_GetCmdStatus
     /tmp/ccPVXNIr.s:25607  .text.DMA_GetFIFOStatus:00000000 $t
     /tmp/ccPVXNIr.s:25612  .text.DMA_GetFIFOStatus:00000000 DMA_GetFIFOStatus
     /tmp/ccPVXNIr.s:25650  .text.DMA_GetFlagStatus:00000000 $t
     /tmp/ccPVXNIr.s:25655  .text.DMA_GetFlagStatus:00000000 DMA_GetFlagStatus
     /tmp/ccPVXNIr.s:25741  .text.DMA_GetFlagStatus:00000074 $d
     /tmp/ccPVXNIr.s:25749  .text.DMA_ClearFlag:00000000 $t
     /tmp/ccPVXNIr.s:25754  .text.DMA_ClearFlag:00000000 DMA_ClearFlag
     /tmp/ccPVXNIr.s:25815  .text.DMA_ClearFlag:0000004c $d
     /tmp/ccPVXNIr.s:25823  .text.DMA_ITConfig:00000000 $t
     /tmp/ccPVXNIr.s:25828  .text.DMA_ITConfig:00000000 DMA_ITConfig
     /tmp/ccPVXNIr.s:25910  .text.DMA_GetITStatus:00000000 $t
     /tmp/ccPVXNIr.s:25915  .text.DMA_GetITStatus:00000000 DMA_GetITStatus
     /tmp/ccPVXNIr.s:26032  .text.DMA_GetITStatus:000000b0 $d
     /tmp/ccPVXNIr.s:26041  .text.DMA_ClearITPendingBit:00000000 $t
     /tmp/ccPVXNIr.s:26046  .text.DMA_ClearITPendingBit:00000000 DMA_ClearITPendingBit
     /tmp/ccPVXNIr.s:26107  .text.DMA_ClearITPendingBit:0000004c $d
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
