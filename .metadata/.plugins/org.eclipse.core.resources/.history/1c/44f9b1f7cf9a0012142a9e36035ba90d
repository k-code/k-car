   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 18, 4
  12              		.thumb
  13              		.file	"stm32f4xx_spi.c"
  23              	.Ltext0:
  24              		.file 1 "../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c"
 24593              		.align	2
 24594              		.global	SPI_I2S_DeInit
 24595              		.thumb
 24596              		.thumb_func
 24598              	SPI_I2S_DeInit:
 24599              	.LFB110:
   1:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
   2:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   ******************************************************************************
   3:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @file    stm32f4xx_spi.c
   4:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @author  MCD Application Team
   5:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @version V1.0.0
   6:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @date    30-September-2011
   7:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          functionalities of the Serial peripheral interface (SPI):
   9:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *           - Initialization and Configuration
  10:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *           - Data transfers functions
  11:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *           - Hardware CRC Calculation
  12:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *           - DMA transfers management
  13:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *           - Interrupts and flags management 
  14:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *           
  15:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *  @verbatim
  16:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          
  17:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                    
  18:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          ===================================================================
  19:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                                 How to use this driver
  20:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          ===================================================================
  21:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *    
  22:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          1. Enable peripheral clock using the following functions 
  23:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE) for SPI1
  24:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2, ENABLE) for SPI2
  25:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE) for SPI3.
  26:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *
  27:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          2. Enable SCK, MOSI, MISO and NSS GPIO clocks using RCC_AHB1PeriphClockCmd()
  28:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             function.
  29:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             In I2S mode, if an external clock source is used then the I2S CKIN pin GPIO
  30:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             clock should also be enabled.
  31:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *
  32:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          3. Peripherals alternate function: 
  33:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                 - Connect the pin to the desired peripherals' Alternate 
  34:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                   Function (AF) using GPIO_PinAFConfig() function
  35:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                 - Configure the desired pin in alternate function by:
  36:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                   GPIO_InitStruct->GPIO_Mode = GPIO_Mode_AF
  37:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                 - Select the type, pull-up/pull-down and output speed via 
  38:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                   GPIO_PuPd, GPIO_OType and GPIO_Speed members
  39:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                 - Call GPIO_Init() function
  40:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *              In I2S mode, if an external clock source is used then the I2S CKIN pin
  41:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *              should be also configured in Alternate function Push-pull pull-up mode. 
  42:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *        
  43:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          4. Program the Polarity, Phase, First Data, Baud Rate Prescaler, Slave 
  44:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             Management, Peripheral Mode and CRC Polynomial values using the SPI_Init()
  45:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             function.
  46:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             In I2S mode, program the Mode, Standard, Data Format, MCLK Output, Audio 
  47:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             frequency and Polarity using I2S_Init() function.
  48:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             For I2S mode, make sure that either:
  49:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *              - I2S PLL is configured using the functions RCC_I2SCLKConfig(RCC_I2S2CLKSource_PLL
  50:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                RCC_PLLI2SCmd(ENABLE) and RCC_GetFlagStatus(RCC_FLAG_PLLI2SRDY).
  51:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *              or 
  52:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *              - External clock source is configured using the function 
  53:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                RCC_I2SCLKConfig(RCC_I2S2CLKSource_Ext) and after setting correctly the define c
  54:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                I2S_EXTERNAL_CLOCK_VAL in the stm32f4xx_conf.h file. 
  55:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *
  56:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          5. Enable the NVIC and the corresponding interrupt using the function 
  57:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             SPI_ITConfig() if you need to use interrupt mode. 
  58:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *
  59:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          6. When using the DMA mode 
  60:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                   - Configure the DMA using DMA_Init() function
  61:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                   - Active the needed channel Request using SPI_I2S_DMACmd() function
  62:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * 
  63:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          7. Enable the SPI using the SPI_Cmd() function or enable the I2S using
  64:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             I2S_Cmd().
  65:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * 
  66:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          8. Enable the DMA using the DMA_Cmd() function when using DMA mode. 
  67:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *
  68:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          9. Optionally, you can enable/configure the following parameters without
  69:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             re-initialization (i.e there is no need to call again SPI_Init() function):
  70:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *              - When bidirectional mode (SPI_Direction_1Line_Rx or SPI_Direction_1Line_Tx)
  71:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                is programmed as Data direction parameter using the SPI_Init() function
  72:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                it can be possible to switch between SPI_Direction_Tx or SPI_Direction_Rx
  73:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                using the SPI_BiDirectionalLineConfig() function.
  74:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *              - When SPI_NSS_Soft is selected as Slave Select Management parameter 
  75:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                using the SPI_Init() function it can be possible to manage the 
  76:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                NSS internal signal using the SPI_NSSInternalSoftwareConfig() function.
  77:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *              - Reconfigure the data size using the SPI_DataSizeConfig() function  
  78:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *              - Enable or disable the SS output using the SPI_SSOutputCmd() function  
  79:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          
  80:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          10. To use the CRC Hardware calculation feature refer to the Peripheral 
  81:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *              CRC hardware Calculation subsection.
  82:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *   
  83:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *
  84:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          It is possible to use SPI in I2S full duplex mode, in this case, each SPI 
  85:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          peripheral is able to manage sending and receiving data simultaneously
  86:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          using two data lines. Each SPI peripheral has an extended block called I2Sxext
  87:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          (ie. I2S2ext for SPI2 and I2S3ext for SPI3).
  88:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          The extension block is not a full SPI IP, it is used only as I2S slave to
  89:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          implement full duplex mode. The extension block uses the same clock sources
  90:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          as its master.          
  91:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          To configure I2S full duplex you have to:
  92:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            
  93:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          1. Configure SPIx in I2S mode (I2S_Init() function) as described above. 
  94:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *           
  95:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          2. Call the I2S_FullDuplexConfig() function using the same strucutre passed to  
  96:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             I2S_Init() function.
  97:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            
  98:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          3. Call I2S_Cmd() for SPIx then for its extended block.
  99:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          
 100:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          4. To configure interrupts or DMA requests and to get/clear flag status, 
 101:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             use I2Sxext instance for the extension block.
 102:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             
 103:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          Functions that can be called with I2Sxext instances are:
 104:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          I2S_Cmd(), I2S_FullDuplexConfig(), SPI_I2S_ReceiveData(), SPI_I2S_SendData(), 
 105:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          SPI_I2S_DMACmd(), SPI_I2S_ITConfig(), SPI_I2S_GetFlagStatus(), SPI_I2S_ClearFlag(),
 106:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          SPI_I2S_GetITStatus() and SPI_I2S_ClearITPendingBit().
 107:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                 
 108:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          Example: To use SPI3 in Full duplex mode (SPI3 is Master Tx, I2S3ext is Slave Rx):
 109:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            
 110:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI3, ENABLE);   
 111:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          I2S_StructInit(&I2SInitStruct);
 112:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          I2SInitStruct.Mode = I2S_Mode_MasterTx;     
 113:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          I2S_Init(SPI3, &I2SInitStruct);
 114:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          I2S_FullDuplexConfig(SPI3ext, &I2SInitStruct)
 115:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          I2S_Cmd(SPI3, ENABLE);
 116:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          I2S_Cmd(SPI3ext, ENABLE);
 117:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          ...
 118:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          while (SPI_I2S_GetFlagStatus(SPI2, SPI_FLAG_TXE) == RESET)
 119:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          {}
 120:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          SPI_I2S_SendData(SPI3, txdata[i]);
 121:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          ...  
 122:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          while (SPI_I2S_GetFlagStatus(I2S3ext, SPI_FLAG_RXNE) == RESET)
 123:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          {}
 124:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          rxdata[i] = SPI_I2S_ReceiveData(I2S3ext);
 125:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          ...          
 126:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *              
 127:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *     
 128:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note    In I2S mode: if an external clock is used as source clock for the I2S,  
 129:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          then the define I2S_EXTERNAL_CLOCK_VAL in file stm32f4xx_conf.h should 
 130:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          be enabled and set to the value of the source clock frequency (in Hz).
 131:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * 
 132:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note    In SPI mode: To use the SPI TI mode, call the function SPI_TIModeCmd() 
 133:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          just after calling the function SPI_Init().
 134:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *
 135:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *  @endverbatim  
 136:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                                  
 137:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   ******************************************************************************
 138:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @attention
 139:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *
 140:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
 141:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
 142:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
 143:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
 144:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
 145:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
 146:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *
 147:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
 148:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   ******************************************************************************  
 149:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */ 
 150:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 151:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /* Includes ------------------------------------------------------------------*/
 152:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** #include "stm32f4xx_spi.h"
 153:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** #include "stm32f4xx_rcc.h"
 154:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 155:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
 156:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @{
 157:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 158:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 159:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /** @defgroup SPI 
 160:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief SPI driver modules
 161:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @{
 162:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */ 
 163:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 164:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /* Private typedef -----------------------------------------------------------*/
 165:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /* Private define ------------------------------------------------------------*/
 166:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 167:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /* SPI registers Masks */
 168:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** #define CR1_CLEAR_MASK            ((uint16_t)0x3040)
 169:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** #define I2SCFGR_CLEAR_MASK        ((uint16_t)0xF040)
 170:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 171:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /* RCC PLLs masks */
 172:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** #define PLLCFGR_PPLR_MASK         ((uint32_t)0x70000000)
 173:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** #define PLLCFGR_PPLN_MASK         ((uint32_t)0x00007FC0)
 174:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 175:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** #define SPI_CR2_FRF               ((uint16_t)0x0010)
 176:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** #define SPI_SR_TIFRFE             ((uint16_t)0x0100)
 177:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 178:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /* Private macro -------------------------------------------------------------*/
 179:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /* Private variables ---------------------------------------------------------*/
 180:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /* Private function prototypes -----------------------------------------------*/
 181:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /* Private functions ---------------------------------------------------------*/
 182:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 183:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /** @defgroup SPI_Private_Functions
 184:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @{
 185:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 186:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 187:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /** @defgroup SPI_Group1 Initialization and Configuration functions
 188:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  *  @brief   Initialization and Configuration functions 
 189:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  *
 190:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @verbatim   
 191:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  ===============================================================================
 192:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                   Initialization and Configuration functions
 193:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  ===============================================================================  
 194:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 195:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   This section provides a set of functions allowing to initialize the SPI Direction,
 196:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPI Mode, SPI Data Size, SPI Polarity, SPI Phase, SPI NSS Management, SPI Baud
 197:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   Rate Prescaler, SPI First Bit and SPI CRC Polynomial.
 198:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 199:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   The SPI_Init() function follows the SPI configuration procedures for Master mode
 200:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   and Slave mode (details for these procedures are available in reference manual
 201:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   (RM0090)).
 202:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 203:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @endverbatim
 204:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @{
 205:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 206:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 207:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 208:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Deinitialize the SPIx peripheral registers to their default reset values.
 209:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
 210:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode.   
 211:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         
 212:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   The extended I2S blocks (ie. I2S2ext and I2S3ext blocks) are deinitialized
 213:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         when the relative I2S peripheral is deinitialized (the extended block's clock
 214:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         is managed by the I2S peripheral clock).
 215:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             
 216:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 217:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 218:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
 219:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 24600              		.loc 1 219 0
 24601              		.cfi_startproc
 24602              		@ args = 0, pretend = 0, frame = 8
 24603              		@ frame_needed = 1, uses_anonymous_args = 0
 24604 0000 80B5     		push	{r7, lr}
 24605              	.LCFI0:
 24606              		.cfi_def_cfa_offset 8
 24607 0002 82B0     		sub	sp, sp, #8
 24608              	.LCFI1:
 24609              		.cfi_def_cfa_offset 16
 24610 0004 00AF     		add	r7, sp, #0
 24611              		.cfi_offset 14, -4
 24612              		.cfi_offset 7, -8
 24613              	.LCFI2:
 24614              		.cfi_def_cfa_register 7
 24615 0006 7860     		str	r0, [r7, #4]
 220:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 221:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 222:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 223:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (SPIx == SPI1)
 24616              		.loc 1 223 0
 24617 0008 7A68     		ldr	r2, [r7, #4]
 24618 000a 1A4B     		ldr	r3, .L5
 24619 000c 9A42     		cmp	r2, r3
 24620 000e 0CD1     		bne	.L2
 224:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 225:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Enable SPI1 reset state */
 226:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 24621              		.loc 1 226 0
 24622 0010 4FF48050 		mov	r0, #4096
 24623 0014 4FF00101 		mov	r1, #1
 24624 0018 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 227:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Release SPI1 from reset state */
 228:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 24625              		.loc 1 228 0
 24626 001c 4FF48050 		mov	r0, #4096
 24627 0020 4FF00001 		mov	r1, #0
 24628 0024 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 24629 0028 20E0     		b	.L1
 24630              	.L2:
 229:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 230:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else if (SPIx == SPI2)
 24631              		.loc 1 230 0
 24632 002a 7A68     		ldr	r2, [r7, #4]
 24633 002c 124B     		ldr	r3, .L5+4
 24634 002e 9A42     		cmp	r2, r3
 24635 0030 0CD1     		bne	.L4
 231:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 232:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Enable SPI2 reset state */
 233:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 24636              		.loc 1 233 0
 24637 0032 4FF48040 		mov	r0, #16384
 24638 0036 4FF00101 		mov	r1, #1
 24639 003a FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 234:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Release SPI2 from reset state */
 235:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 24640              		.loc 1 235 0
 24641 003e 4FF48040 		mov	r0, #16384
 24642 0042 4FF00001 		mov	r1, #0
 24643 0046 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 24644 004a 0FE0     		b	.L1
 24645              	.L4:
 236:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     }
 237:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 238:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 239:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     if (SPIx == SPI3)
 24646              		.loc 1 239 0
 24647 004c 7A68     		ldr	r2, [r7, #4]
 24648 004e 0B4B     		ldr	r3, .L5+8
 24649 0050 9A42     		cmp	r2, r3
 24650 0052 0BD1     		bne	.L1
 240:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     {
 241:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       /* Enable SPI3 reset state */
 242:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 24651              		.loc 1 242 0
 24652 0054 4FF40040 		mov	r0, #32768
 24653 0058 4FF00101 		mov	r1, #1
 24654 005c FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 243:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       /* Release SPI3 from reset state */
 244:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 24655              		.loc 1 244 0
 24656 0060 4FF40040 		mov	r0, #32768
 24657 0064 4FF00001 		mov	r1, #0
 24658 0068 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 24659              	.L1:
 245:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     }
 246:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 247:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 24660              		.loc 1 247 0
 24661 006c 07F10807 		add	r7, r7, #8
 24662 0070 BD46     		mov	sp, r7
 24663 0072 80BD     		pop	{r7, pc}
 24664              	.L6:
 24665              		.align	2
 24666              	.L5:
 24667 0074 00300140 		.word	1073819648
 24668 0078 00380040 		.word	1073756160
 24669 007c 003C0040 		.word	1073757184
 24670              		.cfi_endproc
 24671              	.LFE110:
 24673              		.section	.text.SPI_Init,"ax",%progbits
 24674              		.align	2
 24675              		.global	SPI_Init
 24676              		.thumb
 24677              		.thumb_func
 24679              	SPI_Init:
 24680              	.LFB111:
 248:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 249:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 250:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Initializes the SPIx peripheral according to the specified 
 251:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         parameters in the SPI_InitStruct.
 252:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 253:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
 254:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         contains the configuration information for the specified SPI peripheral.
 255:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 256:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 257:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
 258:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 24681              		.loc 1 258 0
 24682              		.cfi_startproc
 24683              		@ args = 0, pretend = 0, frame = 16
 24684              		@ frame_needed = 1, uses_anonymous_args = 0
 24685              		@ link register save eliminated.
 24686 0000 80B4     		push	{r7}
 24687              	.LCFI3:
 24688              		.cfi_def_cfa_offset 4
 24689 0002 85B0     		sub	sp, sp, #20
 24690              	.LCFI4:
 24691              		.cfi_def_cfa_offset 24
 24692 0004 00AF     		add	r7, sp, #0
 24693              		.cfi_offset 7, -4
 24694              	.LCFI5:
 24695              		.cfi_def_cfa_register 7
 24696 0006 7860     		str	r0, [r7, #4]
 24697 0008 3960     		str	r1, [r7, #0]
 259:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   uint16_t tmpreg = 0;
 24698              		.loc 1 259 0
 24699 000a 4FF00003 		mov	r3, #0
 24700 000e FB81     		strh	r3, [r7, #14]	@ movhi
 260:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 261:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* check the parameters */
 262:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 263:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 264:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the SPI parameters */
 265:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_DIRECTION_MODE(SPI_InitStruct->SPI_Direction));
 266:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_MODE(SPI_InitStruct->SPI_Mode));
 267:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_DATASIZE(SPI_InitStruct->SPI_DataSize));
 268:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_CPOL(SPI_InitStruct->SPI_CPOL));
 269:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_CPHA(SPI_InitStruct->SPI_CPHA));
 270:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_NSS(SPI_InitStruct->SPI_NSS));
 271:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_BAUDRATE_PRESCALER(SPI_InitStruct->SPI_BaudRatePrescaler));
 272:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
 273:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));
 274:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 275:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /*---------------------------- SPIx CR1 Configuration ------------------------*/
 276:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Get the SPIx CR1 value */
 277:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg = SPIx->CR1;
 24701              		.loc 1 277 0
 24702 0010 7B68     		ldr	r3, [r7, #4]
 24703 0012 1B88     		ldrh	r3, [r3, #0]	@ movhi
 24704 0014 FB81     		strh	r3, [r7, #14]	@ movhi
 278:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
 279:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg &= CR1_CLEAR_MASK;
 24705              		.loc 1 279 0
 24706 0016 FB89     		ldrh	r3, [r7, #14]	@ movhi
 24707 0018 03F44153 		and	r3, r3, #12352
 24708 001c FB81     		strh	r3, [r7, #14]	@ movhi
 280:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Configure SPIx: direction, NSS management, first transmitted bit, BaudRate prescaler
 281:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      master/salve mode, CPOL and CPHA */
 282:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Set BIDImode, BIDIOE and RxONLY bits according to SPI_Direction value */
 283:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
 284:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Set LSBFirst bit according to SPI_FirstBit value */
 285:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Set BR bits according to SPI_BaudRatePrescaler value */
 286:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Set CPOL bit according to SPI_CPOL value */
 287:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Set CPHA bit according to SPI_CPHA value */
 288:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 24709              		.loc 1 288 0
 24710 001e 3B68     		ldr	r3, [r7, #0]
 24711 0020 1A88     		ldrh	r2, [r3, #0]
 24712 0022 3B68     		ldr	r3, [r7, #0]
 24713 0024 5B88     		ldrh	r3, [r3, #2]
 24714 0026 42EA0303 		orr	r3, r2, r3
 24715 002a 9AB2     		uxth	r2, r3
 289:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                   SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 24716              		.loc 1 289 0
 24717 002c 3B68     		ldr	r3, [r7, #0]
 24718 002e 9B88     		ldrh	r3, [r3, #4]
 288:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 24719              		.loc 1 288 0
 24720 0030 42EA0303 		orr	r3, r2, r3
 24721 0034 9AB2     		uxth	r2, r3
 24722              		.loc 1 289 0
 24723 0036 3B68     		ldr	r3, [r7, #0]
 24724 0038 DB88     		ldrh	r3, [r3, #6]
 288:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 24725              		.loc 1 288 0
 24726 003a 42EA0303 		orr	r3, r2, r3
 24727 003e 9AB2     		uxth	r2, r3
 290:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                   SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 24728              		.loc 1 290 0
 24729 0040 3B68     		ldr	r3, [r7, #0]
 24730 0042 1B89     		ldrh	r3, [r3, #8]
 288:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 24731              		.loc 1 288 0
 24732 0044 42EA0303 		orr	r3, r2, r3
 24733 0048 9AB2     		uxth	r2, r3
 24734              		.loc 1 290 0
 24735 004a 3B68     		ldr	r3, [r7, #0]
 24736 004c 5B89     		ldrh	r3, [r3, #10]
 288:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 24737              		.loc 1 288 0
 24738 004e 42EA0303 		orr	r3, r2, r3
 24739 0052 9AB2     		uxth	r2, r3
 291:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                   SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 24740              		.loc 1 291 0
 24741 0054 3B68     		ldr	r3, [r7, #0]
 24742 0056 9B89     		ldrh	r3, [r3, #12]
 288:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 24743              		.loc 1 288 0
 24744 0058 42EA0303 		orr	r3, r2, r3
 24745 005c 9AB2     		uxth	r2, r3
 24746              		.loc 1 291 0
 24747 005e 3B68     		ldr	r3, [r7, #0]
 24748 0060 DB89     		ldrh	r3, [r3, #14]
 288:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 24749              		.loc 1 288 0
 24750 0062 42EA0303 		orr	r3, r2, r3
 24751 0066 9AB2     		uxth	r2, r3
 24752 0068 FB89     		ldrh	r3, [r7, #14]	@ movhi
 24753 006a 42EA0303 		orr	r3, r2, r3
 24754 006e FB81     		strh	r3, [r7, #14]	@ movhi
 292:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Write to SPIx CR1 */
 293:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->CR1 = tmpreg;
 24755              		.loc 1 293 0
 24756 0070 7B68     		ldr	r3, [r7, #4]
 24757 0072 FA89     		ldrh	r2, [r7, #14]	@ movhi
 24758 0074 1A80     		strh	r2, [r3, #0]	@ movhi
 294:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 295:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
 296:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 24759              		.loc 1 296 0
 24760 0076 7B68     		ldr	r3, [r7, #4]
 24761 0078 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 24762 007a 9BB2     		uxth	r3, r3
 24763 007c 23F40063 		bic	r3, r3, #2048
 24764 0080 9AB2     		uxth	r2, r3
 24765 0082 7B68     		ldr	r3, [r7, #4]
 24766 0084 9A83     		strh	r2, [r3, #28]	@ movhi
 297:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /*---------------------------- SPIx CRCPOLY Configuration --------------------*/
 298:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Write to SPIx CRCPOLY */
 299:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 24767              		.loc 1 299 0
 24768 0086 3B68     		ldr	r3, [r7, #0]
 24769 0088 1A8A     		ldrh	r2, [r3, #16]
 24770 008a 7B68     		ldr	r3, [r7, #4]
 24771 008c 1A82     		strh	r2, [r3, #16]	@ movhi
 300:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 24772              		.loc 1 300 0
 24773 008e 07F11407 		add	r7, r7, #20
 24774 0092 BD46     		mov	sp, r7
 24775 0094 80BC     		pop	{r7}
 24776 0096 7047     		bx	lr
 24777              		.cfi_endproc
 24778              	.LFE111:
 24780              		.section	.text.I2S_Init,"ax",%progbits
 24781              		.align	2
 24782              		.global	I2S_Init
 24783              		.thumb
 24784              		.thumb_func
 24786              	I2S_Init:
 24787              	.LFB112:
 301:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 302:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 303:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Initializes the SPIx peripheral according to the specified 
 304:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         parameters in the I2S_InitStruct.
 305:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be  2 or 3 to select the SPI peripheral (configured in I2S mode).
 306:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  I2S_InitStruct: pointer to an I2S_InitTypeDef structure that
 307:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         contains the configuration information for the specified SPI peripheral
 308:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         configured in I2S mode.
 309:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *           
 310:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   The function calculates the optimal prescaler needed to obtain the most 
 311:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         accurate audio frequency (depending on the I2S clock source, the PLL values 
 312:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         and the product configuration). But in case the prescaler value is greater 
 313:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         than 511, the default value (0x02) will be configured instead.    
 314:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * 
 315:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   if an external clock is used as source clock for the I2S, then the define
 316:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         I2S_EXTERNAL_CLOCK_VAL in file stm32f4xx_conf.h should be enabled and set
 317:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         to the value of the the source clock frequency (in Hz).
 318:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *  
 319:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 320:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 321:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
 322:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 24788              		.loc 1 322 0
 24789              		.cfi_startproc
 24790              		@ args = 0, pretend = 0, frame = 40
 24791              		@ frame_needed = 1, uses_anonymous_args = 0
 24792              		@ link register save eliminated.
 24793 0000 80B4     		push	{r7}
 24794              	.LCFI6:
 24795              		.cfi_def_cfa_offset 4
 24796 0002 8BB0     		sub	sp, sp, #44
 24797              	.LCFI7:
 24798              		.cfi_def_cfa_offset 48
 24799 0004 00AF     		add	r7, sp, #0
 24800              		.cfi_offset 7, -4
 24801              	.LCFI8:
 24802              		.cfi_def_cfa_register 7
 24803 0006 7860     		str	r0, [r7, #4]
 24804 0008 3960     		str	r1, [r7, #0]
 323:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   uint16_t tmpreg = 0, i2sdiv = 2, i2sodd = 0, packetlength = 1;
 24805              		.loc 1 323 0
 24806 000a 4FF00003 		mov	r3, #0
 24807 000e 7B83     		strh	r3, [r7, #26]	@ movhi
 24808 0010 4FF00203 		mov	r3, #2
 24809 0014 FB84     		strh	r3, [r7, #38]	@ movhi
 24810 0016 4FF00003 		mov	r3, #0
 24811 001a BB84     		strh	r3, [r7, #36]	@ movhi
 24812 001c 4FF00103 		mov	r3, #1
 24813 0020 7B84     		strh	r3, [r7, #34]	@ movhi
 324:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   uint32_t tmp = 0, i2sclk = 0;
 24814              		.loc 1 324 0
 24815 0022 4FF00003 		mov	r3, #0
 24816 0026 FB61     		str	r3, [r7, #28]
 24817 0028 4FF00003 		mov	r3, #0
 24818 002c 7B61     		str	r3, [r7, #20]
 325:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** #ifndef I2S_EXTERNAL_CLOCK_VAL
 326:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   uint32_t pllm = 0, plln = 0, pllr = 0;
 24819              		.loc 1 326 0
 24820 002e 4FF00003 		mov	r3, #0
 24821 0032 3B61     		str	r3, [r7, #16]
 24822 0034 4FF00003 		mov	r3, #0
 24823 0038 FB60     		str	r3, [r7, #12]
 24824 003a 4FF00003 		mov	r3, #0
 24825 003e BB60     		str	r3, [r7, #8]
 327:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** #endif /* I2S_EXTERNAL_CLOCK_VAL */
 328:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 329:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the I2S parameters */
 330:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_23_PERIPH(SPIx));
 331:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_MODE(I2S_InitStruct->I2S_Mode));
 332:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_STANDARD(I2S_InitStruct->I2S_Standard));
 333:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
 334:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_MCLK_OUTPUT(I2S_InitStruct->I2S_MCLKOutput));
 335:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
 336:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  
 337:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 338:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
 339:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
 340:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 24826              		.loc 1 340 0
 24827 0040 7B68     		ldr	r3, [r7, #4]
 24828 0042 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 24829 0044 9BB2     		uxth	r3, r3
 24830 0046 23F47A63 		bic	r3, r3, #4000
 24831 004a 23F01F03 		bic	r3, r3, #31
 24832 004e 9AB2     		uxth	r2, r3
 24833 0050 7B68     		ldr	r3, [r7, #4]
 24834 0052 9A83     		strh	r2, [r3, #28]	@ movhi
 341:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->I2SPR = 0x0002;
 24835              		.loc 1 341 0
 24836 0054 7B68     		ldr	r3, [r7, #4]
 24837 0056 4FF00202 		mov	r2, #2
 24838 005a 1A84     		strh	r2, [r3, #32]	@ movhi
 342:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 343:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Get the I2SCFGR register value */
 344:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg = SPIx->I2SCFGR;
 24839              		.loc 1 344 0
 24840 005c 7B68     		ldr	r3, [r7, #4]
 24841 005e 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 24842 0060 7B83     		strh	r3, [r7, #26]	@ movhi
 345:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 346:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
 347:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 24843              		.loc 1 347 0
 24844 0062 3B68     		ldr	r3, [r7, #0]
 24845 0064 9B68     		ldr	r3, [r3, #8]
 24846 0066 022B     		cmp	r3, #2
 24847 0068 06D1     		bne	.L9
 348:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 349:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     i2sodd = (uint16_t)0;
 24848              		.loc 1 349 0
 24849 006a 4FF00003 		mov	r3, #0
 24850 006e BB84     		strh	r3, [r7, #36]	@ movhi
 350:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     i2sdiv = (uint16_t)2;   
 24851              		.loc 1 350 0
 24852 0070 4FF00203 		mov	r3, #2
 24853 0074 FB84     		strh	r3, [r7, #38]	@ movhi
 24854 0076 83E0     		b	.L10
 24855              	.L9:
 351:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 352:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* If the requested audio frequency is not the default, compute the prescaler */
 353:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 354:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 355:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Check the frame length (For the Prescaler computing) *******************/
 356:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
 24856              		.loc 1 356 0
 24857 0078 3B68     		ldr	r3, [r7, #0]
 24858 007a 9B88     		ldrh	r3, [r3, #4]
 24859 007c 002B     		cmp	r3, #0
 24860 007e 03D1     		bne	.L11
 357:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     {
 358:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       /* Packet length is 16 bits */
 359:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       packetlength = 1;
 24861              		.loc 1 359 0
 24862 0080 4FF00103 		mov	r3, #1
 24863 0084 7B84     		strh	r3, [r7, #34]	@ movhi
 24864 0086 02E0     		b	.L12
 24865              	.L11:
 360:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     }
 361:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     else
 362:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     {
 363:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       /* Packet length is 32 bits */
 364:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       packetlength = 2;
 24866              		.loc 1 364 0
 24867 0088 4FF00203 		mov	r3, #2
 24868 008c 7B84     		strh	r3, [r7, #34]	@ movhi
 24869              	.L12:
 365:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     }
 366:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 367:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Get I2S source Clock frequency  ****************************************/
 368:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       
 369:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* If an external I2S clock has to be used, this define should be set  
 370:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****        in the project configuration or in the stm32f4xx_conf.h file */
 371:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   #ifdef I2S_EXTERNAL_CLOCK_VAL     
 372:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Set external clock as I2S clock source */
 373:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     if ((RCC->CFGR & RCC_CFGR_I2SSRC) == 0)
 374:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     {
 375:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       RCC->CFGR |= (uint32_t)RCC_CFGR_I2SSRC;
 376:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     }
 377:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     
 378:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Set the I2S clock to the external clock  value */
 379:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     i2sclk = I2S_EXTERNAL_CLOCK_VAL;
 380:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 381:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   #else /* There is no define for External I2S clock source */
 382:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Set PLLI2S as I2S clock source */
 383:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 24870              		.loc 1 383 0
 24871 008e 584B     		ldr	r3, .L18
 24872 0090 9B68     		ldr	r3, [r3, #8]
 24873 0092 03F40003 		and	r3, r3, #8388608
 24874 0096 002B     		cmp	r3, #0
 24875 0098 05D0     		beq	.L13
 384:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     {
 385:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
 24876              		.loc 1 385 0
 24877 009a 554B     		ldr	r3, .L18
 24878 009c 544A     		ldr	r2, .L18
 24879 009e 9268     		ldr	r2, [r2, #8]
 24880 00a0 22F40002 		bic	r2, r2, #8388608
 24881 00a4 9A60     		str	r2, [r3, #8]
 24882              	.L13:
 386:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     }    
 387:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     
 388:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Get the PLLI2SN value */
 389:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 24883              		.loc 1 389 0
 24884 00a6 524B     		ldr	r3, .L18
 24885 00a8 D3F88420 		ldr	r2, [r3, #132]
 24886 00ac 47F6C073 		movw	r3, #32704
 24887 00b0 02EA0303 		and	r3, r2, r3
 24888 00b4 4FEA9313 		lsr	r3, r3, #6
 24889 00b8 4FEAC353 		lsl	r3, r3, #23
 24890 00bc 4FEAD353 		lsr	r3, r3, #23
 24891 00c0 FB60     		str	r3, [r7, #12]
 390:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                       (RCC_PLLI2SCFGR_PLLI2SN >> 6));
 391:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     
 392:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Get the PLLI2SR value */
 393:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
 24892              		.loc 1 393 0
 24893 00c2 4B4B     		ldr	r3, .L18
 24894 00c4 D3F88430 		ldr	r3, [r3, #132]
 24895 00c8 03F0E043 		and	r3, r3, #1879048192
 24896 00cc 4FEA1373 		lsr	r3, r3, #28
 24897 00d0 03F00703 		and	r3, r3, #7
 24898 00d4 BB60     		str	r3, [r7, #8]
 394:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                       (RCC_PLLI2SCFGR_PLLI2SR >> 28));
 395:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     
 396:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Get the PLLM value */
 397:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
 24899              		.loc 1 397 0
 24900 00d6 464B     		ldr	r3, .L18
 24901 00d8 5B68     		ldr	r3, [r3, #4]
 24902 00da 03F03F03 		and	r3, r3, #63
 24903 00de 3B61     		str	r3, [r7, #16]
 398:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     
 399:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Get the I2S source clock value */
 400:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 24904              		.loc 1 400 0
 24905 00e0 444A     		ldr	r2, .L18+4
 24906 00e2 3B69     		ldr	r3, [r7, #16]
 24907 00e4 B2FBF3F3 		udiv	r3, r2, r3
 24908 00e8 FA68     		ldr	r2, [r7, #12]
 24909 00ea 02FB03F2 		mul	r2, r2, r3
 24910 00ee BB68     		ldr	r3, [r7, #8]
 24911 00f0 B2FBF3F3 		udiv	r3, r2, r3
 24912 00f4 7B61     		str	r3, [r7, #20]
 401:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   #endif /* I2S_EXTERNAL_CLOCK_VAL */
 402:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     
 403:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Compute the Real divider depending on the MCLK output state, with a floating point */
 404:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 24913              		.loc 1 404 0
 24914 00f6 3B68     		ldr	r3, [r7, #0]
 24915 00f8 DB88     		ldrh	r3, [r3, #6]
 24916 00fa B3F5007F 		cmp	r3, #512
 24917 00fe 13D1     		bne	.L14
 405:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     {
 406:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       /* MCLK output is enabled */
 407:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 24918              		.loc 1 407 0
 24919 0100 7B69     		ldr	r3, [r7, #20]
 24920 0102 4FEA1322 		lsr	r2, r3, #8
 24921 0106 1346     		mov	r3, r2
 24922 0108 4FEA8303 		lsl	r3, r3, #2
 24923 010c 9B18     		adds	r3, r3, r2
 24924 010e 4FEA4303 		lsl	r3, r3, #1
 24925 0112 1A46     		mov	r2, r3
 24926 0114 3B68     		ldr	r3, [r7, #0]
 24927 0116 9B68     		ldr	r3, [r3, #8]
 24928 0118 B2FBF3F3 		udiv	r3, r2, r3
 24929 011c 9BB2     		uxth	r3, r3
 24930 011e 03F10503 		add	r3, r3, #5
 24931 0122 9BB2     		uxth	r3, r3
 24932 0124 FB61     		str	r3, [r7, #28]
 24933 0126 15E0     		b	.L15
 24934              	.L14:
 408:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     }
 409:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     else
 410:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     {
 411:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       /* MCLK output is disabled */
 412:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 
 24935              		.loc 1 412 0
 24936 0128 7B8C     		ldrh	r3, [r7, #34]
 24937 012a 4FEA4313 		lsl	r3, r3, #5
 24938 012e 7A69     		ldr	r2, [r7, #20]
 24939 0130 B2FBF3F2 		udiv	r2, r2, r3
 24940 0134 1346     		mov	r3, r2
 24941 0136 4FEA8303 		lsl	r3, r3, #2
 24942 013a 9B18     		adds	r3, r3, r2
 24943 013c 4FEA4303 		lsl	r3, r3, #1
 24944 0140 1A46     		mov	r2, r3
 24945 0142 3B68     		ldr	r3, [r7, #0]
 24946 0144 9B68     		ldr	r3, [r3, #8]
 24947 0146 B2FBF3F3 		udiv	r3, r2, r3
 24948 014a 9BB2     		uxth	r3, r3
 24949 014c 03F10503 		add	r3, r3, #5
 24950 0150 9BB2     		uxth	r3, r3
 24951 0152 FB61     		str	r3, [r7, #28]
 24952              	.L15:
 413:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     }
 414:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     
 415:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Remove the flatting point */
 416:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     tmp = tmp / 10;  
 24953              		.loc 1 416 0
 24954 0154 FA69     		ldr	r2, [r7, #28]
 24955 0156 284B     		ldr	r3, .L18+8
 24956 0158 A3FB0213 		umull	r1, r3, r3, r2
 24957 015c 4FEAD303 		lsr	r3, r3, #3
 24958 0160 FB61     		str	r3, [r7, #28]
 417:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       
 418:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Check the parity of the divider */
 419:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
 24959              		.loc 1 419 0
 24960 0162 FB69     		ldr	r3, [r7, #28]
 24961 0164 9BB2     		uxth	r3, r3
 24962 0166 03F00103 		and	r3, r3, #1
 24963 016a BB84     		strh	r3, [r7, #36]	@ movhi
 420:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****    
 421:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Compute the i2sdiv prescaler */
 422:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 24964              		.loc 1 422 0
 24965 016c BB8C     		ldrh	r3, [r7, #36]
 24966 016e FA69     		ldr	r2, [r7, #28]
 24967 0170 D31A     		subs	r3, r2, r3
 24968 0172 4FEA5303 		lsr	r3, r3, #1
 24969 0176 FB84     		strh	r3, [r7, #38]	@ movhi
 423:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****    
 424:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
 425:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     i2sodd = (uint16_t) (i2sodd << 8);
 24970              		.loc 1 425 0
 24971 0178 BB8C     		ldrh	r3, [r7, #36]	@ movhi
 24972 017a 4FEA0323 		lsl	r3, r3, #8
 24973 017e BB84     		strh	r3, [r7, #36]	@ movhi
 24974              	.L10:
 426:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 427:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 428:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Test if the divider is 1 or 0 or greater than 0xFF */
 429:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 24975              		.loc 1 429 0
 24976 0180 FB8C     		ldrh	r3, [r7, #38]
 24977 0182 012B     		cmp	r3, #1
 24978 0184 02D9     		bls	.L16
 24979              		.loc 1 429 0 is_stmt 0 discriminator 1
 24980 0186 FB8C     		ldrh	r3, [r7, #38]
 24981 0188 FF2B     		cmp	r3, #255
 24982 018a 05D9     		bls	.L17
 24983              	.L16:
 430:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 431:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Set the default values */
 432:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     i2sdiv = 2;
 24984              		.loc 1 432 0 is_stmt 1
 24985 018c 4FF00203 		mov	r3, #2
 24986 0190 FB84     		strh	r3, [r7, #38]	@ movhi
 433:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     i2sodd = 0;
 24987              		.loc 1 433 0
 24988 0192 4FF00003 		mov	r3, #0
 24989 0196 BB84     		strh	r3, [r7, #36]	@ movhi
 24990              	.L17:
 434:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 435:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 436:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Write to SPIx I2SPR register the computed value */
 437:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCL
 24991              		.loc 1 437 0
 24992 0198 3B68     		ldr	r3, [r7, #0]
 24993 019a DA88     		ldrh	r2, [r3, #6]
 24994 019c BB8C     		ldrh	r3, [r7, #36]	@ movhi
 24995 019e 42EA0303 		orr	r3, r2, r3
 24996 01a2 9AB2     		uxth	r2, r3
 24997 01a4 FB8C     		ldrh	r3, [r7, #38]	@ movhi
 24998 01a6 42EA0303 		orr	r3, r2, r3
 24999 01aa 9AB2     		uxth	r2, r3
 25000 01ac 7B68     		ldr	r3, [r7, #4]
 25001 01ae 1A84     		strh	r2, [r3, #32]	@ movhi
 438:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  
 439:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Configure the I2S with the SPI_InitStruct values */
 440:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 25002              		.loc 1 440 0
 25003 01b0 3B68     		ldr	r3, [r7, #0]
 25004 01b2 1A88     		ldrh	r2, [r3, #0]
 441:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                   (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataForm
 25005              		.loc 1 441 0
 25006 01b4 3B68     		ldr	r3, [r7, #0]
 25007 01b6 5988     		ldrh	r1, [r3, #2]
 25008 01b8 3B68     		ldr	r3, [r7, #0]
 25009 01ba 9888     		ldrh	r0, [r3, #4]
 442:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                   (uint16_t)I2S_InitStruct->I2S_CPOL))));
 25010              		.loc 1 442 0
 25011 01bc 3B68     		ldr	r3, [r7, #0]
 25012 01be 9B89     		ldrh	r3, [r3, #12]
 441:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                   (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataForm
 25013              		.loc 1 441 0
 25014 01c0 40EA0303 		orr	r3, r0, r3
 25015 01c4 9BB2     		uxth	r3, r3
 25016 01c6 41EA0303 		orr	r3, r1, r3
 25017 01ca 9BB2     		uxth	r3, r3
 440:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 25018              		.loc 1 440 0
 25019 01cc 42EA0303 		orr	r3, r2, r3
 25020 01d0 9AB2     		uxth	r2, r3
 25021 01d2 7B8B     		ldrh	r3, [r7, #26]	@ movhi
 25022 01d4 42EA0303 		orr	r3, r2, r3
 25023 01d8 9BB2     		uxth	r3, r3
 25024 01da 43F40063 		orr	r3, r3, #2048
 25025 01de 7B83     		strh	r3, [r7, #26]	@ movhi
 443:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  
 444:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Write to SPIx I2SCFGR */  
 445:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->I2SCFGR = tmpreg;
 25026              		.loc 1 445 0
 25027 01e0 7B68     		ldr	r3, [r7, #4]
 25028 01e2 7A8B     		ldrh	r2, [r7, #26]	@ movhi
 25029 01e4 9A83     		strh	r2, [r3, #28]	@ movhi
 446:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 25030              		.loc 1 446 0
 25031 01e6 07F12C07 		add	r7, r7, #44
 25032 01ea BD46     		mov	sp, r7
 25033 01ec 80BC     		pop	{r7}
 25034 01ee 7047     		bx	lr
 25035              	.L19:
 25036              		.align	2
 25037              	.L18:
 25038 01f0 00380240 		.word	1073887232
 25039 01f4 00127A00 		.word	8000000
 25040 01f8 CDCCCCCC 		.word	-858993459
 25041              		.cfi_endproc
 25042              	.LFE112:
 25044              		.section	.text.SPI_StructInit,"ax",%progbits
 25045              		.align	2
 25046              		.global	SPI_StructInit
 25047              		.thumb
 25048              		.thumb_func
 25050              	SPI_StructInit:
 25051              	.LFB113:
 447:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 448:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 449:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Fills each SPI_InitStruct member with its default value.
 450:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure which will be initialized.
 451:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 452:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 453:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
 454:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 25052              		.loc 1 454 0
 25053              		.cfi_startproc
 25054              		@ args = 0, pretend = 0, frame = 8
 25055              		@ frame_needed = 1, uses_anonymous_args = 0
 25056              		@ link register save eliminated.
 25057 0000 80B4     		push	{r7}
 25058              	.LCFI9:
 25059              		.cfi_def_cfa_offset 4
 25060 0002 83B0     		sub	sp, sp, #12
 25061              	.LCFI10:
 25062              		.cfi_def_cfa_offset 16
 25063 0004 00AF     		add	r7, sp, #0
 25064              		.cfi_offset 7, -4
 25065              	.LCFI11:
 25066              		.cfi_def_cfa_register 7
 25067 0006 7860     		str	r0, [r7, #4]
 455:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /*--------------- Reset SPI init structure parameters values -----------------*/
 456:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the SPI_Direction member */
 457:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 25068              		.loc 1 457 0
 25069 0008 7B68     		ldr	r3, [r7, #4]
 25070 000a 4FF00002 		mov	r2, #0
 25071 000e 1A80     		strh	r2, [r3, #0]	@ movhi
 458:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* initialize the SPI_Mode member */
 459:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 25072              		.loc 1 459 0
 25073 0010 7B68     		ldr	r3, [r7, #4]
 25074 0012 4FF00002 		mov	r2, #0
 25075 0016 5A80     		strh	r2, [r3, #2]	@ movhi
 460:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* initialize the SPI_DataSize member */
 461:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 25076              		.loc 1 461 0
 25077 0018 7B68     		ldr	r3, [r7, #4]
 25078 001a 4FF00002 		mov	r2, #0
 25079 001e 9A80     		strh	r2, [r3, #4]	@ movhi
 462:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the SPI_CPOL member */
 463:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 25080              		.loc 1 463 0
 25081 0020 7B68     		ldr	r3, [r7, #4]
 25082 0022 4FF00002 		mov	r2, #0
 25083 0026 DA80     		strh	r2, [r3, #6]	@ movhi
 464:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the SPI_CPHA member */
 465:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 25084              		.loc 1 465 0
 25085 0028 7B68     		ldr	r3, [r7, #4]
 25086 002a 4FF00002 		mov	r2, #0
 25087 002e 1A81     		strh	r2, [r3, #8]	@ movhi
 466:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the SPI_NSS member */
 467:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 25088              		.loc 1 467 0
 25089 0030 7B68     		ldr	r3, [r7, #4]
 25090 0032 4FF00002 		mov	r2, #0
 25091 0036 5A81     		strh	r2, [r3, #10]	@ movhi
 468:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the SPI_BaudRatePrescaler member */
 469:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 25092              		.loc 1 469 0
 25093 0038 7B68     		ldr	r3, [r7, #4]
 25094 003a 4FF00002 		mov	r2, #0
 25095 003e 9A81     		strh	r2, [r3, #12]	@ movhi
 470:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the SPI_FirstBit member */
 471:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 25096              		.loc 1 471 0
 25097 0040 7B68     		ldr	r3, [r7, #4]
 25098 0042 4FF00002 		mov	r2, #0
 25099 0046 DA81     		strh	r2, [r3, #14]	@ movhi
 472:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the SPI_CRCPolynomial member */
 473:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_CRCPolynomial = 7;
 25100              		.loc 1 473 0
 25101 0048 7B68     		ldr	r3, [r7, #4]
 25102 004a 4FF00702 		mov	r2, #7
 25103 004e 1A82     		strh	r2, [r3, #16]	@ movhi
 474:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 25104              		.loc 1 474 0
 25105 0050 07F10C07 		add	r7, r7, #12
 25106 0054 BD46     		mov	sp, r7
 25107 0056 80BC     		pop	{r7}
 25108 0058 7047     		bx	lr
 25109              		.cfi_endproc
 25110              	.LFE113:
 25112 005a 00BF     		.section	.text.I2S_StructInit,"ax",%progbits
 25113              		.align	2
 25114              		.global	I2S_StructInit
 25115              		.thumb
 25116              		.thumb_func
 25118              	I2S_StructInit:
 25119              	.LFB114:
 475:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 476:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 477:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Fills each I2S_InitStruct member with its default value.
 478:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  I2S_InitStruct: pointer to a I2S_InitTypeDef structure which will be initialized.
 479:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 480:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 481:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
 482:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 25120              		.loc 1 482 0
 25121              		.cfi_startproc
 25122              		@ args = 0, pretend = 0, frame = 8
 25123              		@ frame_needed = 1, uses_anonymous_args = 0
 25124              		@ link register save eliminated.
 25125 0000 80B4     		push	{r7}
 25126              	.LCFI12:
 25127              		.cfi_def_cfa_offset 4
 25128 0002 83B0     		sub	sp, sp, #12
 25129              	.LCFI13:
 25130              		.cfi_def_cfa_offset 16
 25131 0004 00AF     		add	r7, sp, #0
 25132              		.cfi_offset 7, -4
 25133              	.LCFI14:
 25134              		.cfi_def_cfa_register 7
 25135 0006 7860     		str	r0, [r7, #4]
 483:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /*--------------- Reset I2S init structure parameters values -----------------*/
 484:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the I2S_Mode member */
 485:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 25136              		.loc 1 485 0
 25137 0008 7B68     		ldr	r3, [r7, #4]
 25138 000a 4FF00002 		mov	r2, #0
 25139 000e 1A80     		strh	r2, [r3, #0]	@ movhi
 486:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 487:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the I2S_Standard member */
 488:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   I2S_InitStruct->I2S_Standard = I2S_Standard_Phillips;
 25140              		.loc 1 488 0
 25141 0010 7B68     		ldr	r3, [r7, #4]
 25142 0012 4FF00002 		mov	r2, #0
 25143 0016 5A80     		strh	r2, [r3, #2]	@ movhi
 489:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 490:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the I2S_DataFormat member */
 491:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   I2S_InitStruct->I2S_DataFormat = I2S_DataFormat_16b;
 25144              		.loc 1 491 0
 25145 0018 7B68     		ldr	r3, [r7, #4]
 25146 001a 4FF00002 		mov	r2, #0
 25147 001e 9A80     		strh	r2, [r3, #4]	@ movhi
 492:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 493:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the I2S_MCLKOutput member */
 494:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
 25148              		.loc 1 494 0
 25149 0020 7B68     		ldr	r3, [r7, #4]
 25150 0022 4FF00002 		mov	r2, #0
 25151 0026 DA80     		strh	r2, [r3, #6]	@ movhi
 495:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 496:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the I2S_AudioFreq member */
 497:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 25152              		.loc 1 497 0
 25153 0028 7B68     		ldr	r3, [r7, #4]
 25154 002a 4FF00202 		mov	r2, #2
 25155 002e 9A60     		str	r2, [r3, #8]
 498:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 499:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the I2S_CPOL member */
 500:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   I2S_InitStruct->I2S_CPOL = I2S_CPOL_Low;
 25156              		.loc 1 500 0
 25157 0030 7B68     		ldr	r3, [r7, #4]
 25158 0032 4FF00002 		mov	r2, #0
 25159 0036 9A81     		strh	r2, [r3, #12]	@ movhi
 501:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 25160              		.loc 1 501 0
 25161 0038 07F10C07 		add	r7, r7, #12
 25162 003c BD46     		mov	sp, r7
 25163 003e 80BC     		pop	{r7}
 25164 0040 7047     		bx	lr
 25165              		.cfi_endproc
 25166              	.LFE114:
 25168 0042 00BF     		.section	.text.SPI_Cmd,"ax",%progbits
 25169              		.align	2
 25170              		.global	SPI_Cmd
 25171              		.thumb
 25172              		.thumb_func
 25174              	SPI_Cmd:
 25175              	.LFB115:
 502:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 503:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 504:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Enables or disables the specified SPI peripheral.
 505:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 506:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  NewState: new state of the SPIx peripheral. 
 507:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be: ENABLE or DISABLE.
 508:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 509:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 510:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
 511:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 25176              		.loc 1 511 0
 25177              		.cfi_startproc
 25178              		@ args = 0, pretend = 0, frame = 8
 25179              		@ frame_needed = 1, uses_anonymous_args = 0
 25180              		@ link register save eliminated.
 25181 0000 80B4     		push	{r7}
 25182              	.LCFI15:
 25183              		.cfi_def_cfa_offset 4
 25184 0002 83B0     		sub	sp, sp, #12
 25185              	.LCFI16:
 25186              		.cfi_def_cfa_offset 16
 25187 0004 00AF     		add	r7, sp, #0
 25188              		.cfi_offset 7, -4
 25189              	.LCFI17:
 25190              		.cfi_def_cfa_register 7
 25191 0006 7860     		str	r0, [r7, #4]
 25192 0008 0B46     		mov	r3, r1
 25193 000a FB70     		strb	r3, [r7, #3]
 512:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 513:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 514:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 515:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (NewState != DISABLE)
 25194              		.loc 1 515 0
 25195 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 25196 000e 002B     		cmp	r3, #0
 25197 0010 08D0     		beq	.L23
 516:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 517:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Enable the selected SPI peripheral */
 518:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR1 |= SPI_CR1_SPE;
 25198              		.loc 1 518 0
 25199 0012 7B68     		ldr	r3, [r7, #4]
 25200 0014 1B88     		ldrh	r3, [r3, #0]	@ movhi
 25201 0016 9BB2     		uxth	r3, r3
 25202 0018 43F04003 		orr	r3, r3, #64
 25203 001c 9AB2     		uxth	r2, r3
 25204 001e 7B68     		ldr	r3, [r7, #4]
 25205 0020 1A80     		strh	r2, [r3, #0]	@ movhi
 25206 0022 07E0     		b	.L22
 25207              	.L23:
 519:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 520:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 521:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 522:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Disable the selected SPI peripheral */
 523:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 25208              		.loc 1 523 0
 25209 0024 7B68     		ldr	r3, [r7, #4]
 25210 0026 1B88     		ldrh	r3, [r3, #0]	@ movhi
 25211 0028 9BB2     		uxth	r3, r3
 25212 002a 23F04003 		bic	r3, r3, #64
 25213 002e 9AB2     		uxth	r2, r3
 25214 0030 7B68     		ldr	r3, [r7, #4]
 25215 0032 1A80     		strh	r2, [r3, #0]	@ movhi
 25216              	.L22:
 524:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 525:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 25217              		.loc 1 525 0
 25218 0034 07F10C07 		add	r7, r7, #12
 25219 0038 BD46     		mov	sp, r7
 25220 003a 80BC     		pop	{r7}
 25221 003c 7047     		bx	lr
 25222              		.cfi_endproc
 25223              	.LFE115:
 25225 003e 00BF     		.section	.text.I2S_Cmd,"ax",%progbits
 25226              		.align	2
 25227              		.global	I2S_Cmd
 25228              		.thumb
 25229              		.thumb_func
 25231              	I2S_Cmd:
 25232              	.LFB116:
 526:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 527:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 528:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Enables or disables the specified SPI peripheral (in I2S mode).
 529:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 2 or 3 to select the SPI peripheral (or I2Sxext 
 530:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         for full duplex mode).
 531:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  NewState: new state of the SPIx peripheral. 
 532:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         This parameter can be: ENABLE or DISABLE.
 533:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 534:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 535:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void I2S_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
 536:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 25233              		.loc 1 536 0
 25234              		.cfi_startproc
 25235              		@ args = 0, pretend = 0, frame = 8
 25236              		@ frame_needed = 1, uses_anonymous_args = 0
 25237              		@ link register save eliminated.
 25238 0000 80B4     		push	{r7}
 25239              	.LCFI18:
 25240              		.cfi_def_cfa_offset 4
 25241 0002 83B0     		sub	sp, sp, #12
 25242              	.LCFI19:
 25243              		.cfi_def_cfa_offset 16
 25244 0004 00AF     		add	r7, sp, #0
 25245              		.cfi_offset 7, -4
 25246              	.LCFI20:
 25247              		.cfi_def_cfa_register 7
 25248 0006 7860     		str	r0, [r7, #4]
 25249 0008 0B46     		mov	r3, r1
 25250 000a FB70     		strb	r3, [r7, #3]
 537:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 538:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_23_PERIPH_EXT(SPIx));
 539:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 540:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 541:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (NewState != DISABLE)
 25251              		.loc 1 541 0
 25252 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 25253 000e 002B     		cmp	r3, #0
 25254 0010 08D0     		beq	.L26
 542:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 543:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Enable the selected SPI peripheral (in I2S mode) */
 544:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 25255              		.loc 1 544 0
 25256 0012 7B68     		ldr	r3, [r7, #4]
 25257 0014 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 25258 0016 9BB2     		uxth	r3, r3
 25259 0018 43F48063 		orr	r3, r3, #1024
 25260 001c 9AB2     		uxth	r2, r3
 25261 001e 7B68     		ldr	r3, [r7, #4]
 25262 0020 9A83     		strh	r2, [r3, #28]	@ movhi
 25263 0022 07E0     		b	.L25
 25264              	.L26:
 545:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 546:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 547:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 548:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Disable the selected SPI peripheral in I2S mode */
 549:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
 25265              		.loc 1 549 0
 25266 0024 7B68     		ldr	r3, [r7, #4]
 25267 0026 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 25268 0028 9BB2     		uxth	r3, r3
 25269 002a 23F48063 		bic	r3, r3, #1024
 25270 002e 9AB2     		uxth	r2, r3
 25271 0030 7B68     		ldr	r3, [r7, #4]
 25272 0032 9A83     		strh	r2, [r3, #28]	@ movhi
 25273              	.L25:
 550:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 551:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 25274              		.loc 1 551 0
 25275 0034 07F10C07 		add	r7, r7, #12
 25276 0038 BD46     		mov	sp, r7
 25277 003a 80BC     		pop	{r7}
 25278 003c 7047     		bx	lr
 25279              		.cfi_endproc
 25280              	.LFE116:
 25282 003e 00BF     		.section	.text.SPI_DataSizeConfig,"ax",%progbits
 25283              		.align	2
 25284              		.global	SPI_DataSizeConfig
 25285              		.thumb
 25286              		.thumb_func
 25288              	SPI_DataSizeConfig:
 25289              	.LFB117:
 552:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 553:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 554:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Configures the data size for the selected SPI.
 555:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 556:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_DataSize: specifies the SPI data size.
 557:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be one of the following values:
 558:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_DataSize_16b: Set data frame format to 16bit
 559:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_DataSize_8b: Set data frame format to 8bit
 560:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 561:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 562:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_DataSizeConfig(SPI_TypeDef* SPIx, uint16_t SPI_DataSize)
 563:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 25290              		.loc 1 563 0
 25291              		.cfi_startproc
 25292              		@ args = 0, pretend = 0, frame = 8
 25293              		@ frame_needed = 1, uses_anonymous_args = 0
 25294              		@ link register save eliminated.
 25295 0000 80B4     		push	{r7}
 25296              	.LCFI21:
 25297              		.cfi_def_cfa_offset 4
 25298 0002 83B0     		sub	sp, sp, #12
 25299              	.LCFI22:
 25300              		.cfi_def_cfa_offset 16
 25301 0004 00AF     		add	r7, sp, #0
 25302              		.cfi_offset 7, -4
 25303              	.LCFI23:
 25304              		.cfi_def_cfa_register 7
 25305 0006 7860     		str	r0, [r7, #4]
 25306 0008 0B46     		mov	r3, r1
 25307 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 564:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 565:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 566:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_DATASIZE(SPI_DataSize));
 567:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Clear DFF bit */
 568:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->CR1 &= (uint16_t)~SPI_DataSize_16b;
 25308              		.loc 1 568 0
 25309 000c 7B68     		ldr	r3, [r7, #4]
 25310 000e 1B88     		ldrh	r3, [r3, #0]	@ movhi
 25311 0010 9BB2     		uxth	r3, r3
 25312 0012 23F40063 		bic	r3, r3, #2048
 25313 0016 9AB2     		uxth	r2, r3
 25314 0018 7B68     		ldr	r3, [r7, #4]
 25315 001a 1A80     		strh	r2, [r3, #0]	@ movhi
 569:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Set new DFF bit value */
 570:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->CR1 |= SPI_DataSize;
 25316              		.loc 1 570 0
 25317 001c 7B68     		ldr	r3, [r7, #4]
 25318 001e 1B88     		ldrh	r3, [r3, #0]	@ movhi
 25319 0020 9AB2     		uxth	r2, r3
 25320 0022 7B88     		ldrh	r3, [r7, #2]	@ movhi
 25321 0024 42EA0303 		orr	r3, r2, r3
 25322 0028 9AB2     		uxth	r2, r3
 25323 002a 7B68     		ldr	r3, [r7, #4]
 25324 002c 1A80     		strh	r2, [r3, #0]	@ movhi
 571:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 25325              		.loc 1 571 0
 25326 002e 07F10C07 		add	r7, r7, #12
 25327 0032 BD46     		mov	sp, r7
 25328 0034 80BC     		pop	{r7}
 25329 0036 7047     		bx	lr
 25330              		.cfi_endproc
 25331              	.LFE117:
 25333              		.section	.text.SPI_BiDirectionalLineConfig,"ax",%progbits
 25334              		.align	2
 25335              		.global	SPI_BiDirectionalLineConfig
 25336              		.thumb
 25337              		.thumb_func
 25339              	SPI_BiDirectionalLineConfig:
 25340              	.LFB118:
 572:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 573:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 574:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Selects the data transfer direction in bidirectional mode for the specified SPI.
 575:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 576:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_Direction: specifies the data transfer direction in bidirectional mode. 
 577:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be one of the following values:
 578:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_Direction_Tx: Selects Tx transmission direction
 579:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_Direction_Rx: Selects Rx receive direction
 580:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 581:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 582:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
 583:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 25341              		.loc 1 583 0
 25342              		.cfi_startproc
 25343              		@ args = 0, pretend = 0, frame = 8
 25344              		@ frame_needed = 1, uses_anonymous_args = 0
 25345              		@ link register save eliminated.
 25346 0000 80B4     		push	{r7}
 25347              	.LCFI24:
 25348              		.cfi_def_cfa_offset 4
 25349 0002 83B0     		sub	sp, sp, #12
 25350              	.LCFI25:
 25351              		.cfi_def_cfa_offset 16
 25352 0004 00AF     		add	r7, sp, #0
 25353              		.cfi_offset 7, -4
 25354              	.LCFI26:
 25355              		.cfi_def_cfa_register 7
 25356 0006 7860     		str	r0, [r7, #4]
 25357 0008 0B46     		mov	r3, r1
 25358 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 584:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 585:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 586:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_DIRECTION(SPI_Direction));
 587:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (SPI_Direction == SPI_Direction_Tx)
 25359              		.loc 1 587 0
 25360 000c 7B88     		ldrh	r3, [r7, #2]
 25361 000e B3F5804F 		cmp	r3, #16384
 25362 0012 08D1     		bne	.L30
 588:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 589:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Set the Tx only mode */
 590:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR1 |= SPI_Direction_Tx;
 25363              		.loc 1 590 0
 25364 0014 7B68     		ldr	r3, [r7, #4]
 25365 0016 1B88     		ldrh	r3, [r3, #0]	@ movhi
 25366 0018 9BB2     		uxth	r3, r3
 25367 001a 43F48043 		orr	r3, r3, #16384
 25368 001e 9AB2     		uxth	r2, r3
 25369 0020 7B68     		ldr	r3, [r7, #4]
 25370 0022 1A80     		strh	r2, [r3, #0]	@ movhi
 25371 0024 07E0     		b	.L29
 25372              	.L30:
 591:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 592:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 593:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 594:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Set the Rx only mode */
 595:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR1 &= SPI_Direction_Rx;
 25373              		.loc 1 595 0
 25374 0026 7B68     		ldr	r3, [r7, #4]
 25375 0028 1B88     		ldrh	r3, [r3, #0]	@ movhi
 25376 002a 9BB2     		uxth	r3, r3
 25377 002c 23F48043 		bic	r3, r3, #16384
 25378 0030 9AB2     		uxth	r2, r3
 25379 0032 7B68     		ldr	r3, [r7, #4]
 25380 0034 1A80     		strh	r2, [r3, #0]	@ movhi
 25381              	.L29:
 596:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 597:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 25382              		.loc 1 597 0
 25383 0036 07F10C07 		add	r7, r7, #12
 25384 003a BD46     		mov	sp, r7
 25385 003c 80BC     		pop	{r7}
 25386 003e 7047     		bx	lr
 25387              		.cfi_endproc
 25388              	.LFE118:
 25390              		.section	.text.SPI_NSSInternalSoftwareConfig,"ax",%progbits
 25391              		.align	2
 25392              		.global	SPI_NSSInternalSoftwareConfig
 25393              		.thumb
 25394              		.thumb_func
 25396              	SPI_NSSInternalSoftwareConfig:
 25397              	.LFB119:
 598:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 599:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 600:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Configures internally by software the NSS pin for the selected SPI.
 601:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 602:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_NSSInternalSoft: specifies the SPI NSS internal state.
 603:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be one of the following values:
 604:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_NSSInternalSoft_Set: Set NSS pin internally
 605:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_NSSInternalSoft_Reset: Reset NSS pin internally
 606:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 607:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 608:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
 609:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 25398              		.loc 1 609 0
 25399              		.cfi_startproc
 25400              		@ args = 0, pretend = 0, frame = 8
 25401              		@ frame_needed = 1, uses_anonymous_args = 0
 25402              		@ link register save eliminated.
 25403 0000 80B4     		push	{r7}
 25404              	.LCFI27:
 25405              		.cfi_def_cfa_offset 4
 25406 0002 83B0     		sub	sp, sp, #12
 25407              	.LCFI28:
 25408              		.cfi_def_cfa_offset 16
 25409 0004 00AF     		add	r7, sp, #0
 25410              		.cfi_offset 7, -4
 25411              	.LCFI29:
 25412              		.cfi_def_cfa_register 7
 25413 0006 7860     		str	r0, [r7, #4]
 25414 0008 0B46     		mov	r3, r1
 25415 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 610:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 611:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 612:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
 613:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 25416              		.loc 1 613 0
 25417 000c 7A88     		ldrh	r2, [r7, #2]
 25418 000e 4FF6FF63 		movw	r3, #65279
 25419 0012 9A42     		cmp	r2, r3
 25420 0014 08D0     		beq	.L33
 614:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 615:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Set NSS pin internally by software */
 616:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 25421              		.loc 1 616 0
 25422 0016 7B68     		ldr	r3, [r7, #4]
 25423 0018 1B88     		ldrh	r3, [r3, #0]	@ movhi
 25424 001a 9BB2     		uxth	r3, r3
 25425 001c 43F48073 		orr	r3, r3, #256
 25426 0020 9AB2     		uxth	r2, r3
 25427 0022 7B68     		ldr	r3, [r7, #4]
 25428 0024 1A80     		strh	r2, [r3, #0]	@ movhi
 25429 0026 07E0     		b	.L32
 25430              	.L33:
 617:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 618:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 619:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 620:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Reset NSS pin internally by software */
 621:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
 25431              		.loc 1 621 0
 25432 0028 7B68     		ldr	r3, [r7, #4]
 25433 002a 1B88     		ldrh	r3, [r3, #0]	@ movhi
 25434 002c 9BB2     		uxth	r3, r3
 25435 002e 23F48073 		bic	r3, r3, #256
 25436 0032 9AB2     		uxth	r2, r3
 25437 0034 7B68     		ldr	r3, [r7, #4]
 25438 0036 1A80     		strh	r2, [r3, #0]	@ movhi
 25439              	.L32:
 622:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 623:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 25440              		.loc 1 623 0
 25441 0038 07F10C07 		add	r7, r7, #12
 25442 003c BD46     		mov	sp, r7
 25443 003e 80BC     		pop	{r7}
 25444 0040 7047     		bx	lr
 25445              		.cfi_endproc
 25446              	.LFE119:
 25448 0042 00BF     		.section	.text.SPI_SSOutputCmd,"ax",%progbits
 25449              		.align	2
 25450              		.global	SPI_SSOutputCmd
 25451              		.thumb
 25452              		.thumb_func
 25454              	SPI_SSOutputCmd:
 25455              	.LFB120:
 624:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 625:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 626:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Enables or disables the SS output for the selected SPI.
 627:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 628:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  NewState: new state of the SPIx SS output. 
 629:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be: ENABLE or DISABLE.
 630:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 631:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 632:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
 633:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 25456              		.loc 1 633 0
 25457              		.cfi_startproc
 25458              		@ args = 0, pretend = 0, frame = 8
 25459              		@ frame_needed = 1, uses_anonymous_args = 0
 25460              		@ link register save eliminated.
 25461 0000 80B4     		push	{r7}
 25462              	.LCFI30:
 25463              		.cfi_def_cfa_offset 4
 25464 0002 83B0     		sub	sp, sp, #12
 25465              	.LCFI31:
 25466              		.cfi_def_cfa_offset 16
 25467 0004 00AF     		add	r7, sp, #0
 25468              		.cfi_offset 7, -4
 25469              	.LCFI32:
 25470              		.cfi_def_cfa_register 7
 25471 0006 7860     		str	r0, [r7, #4]
 25472 0008 0B46     		mov	r3, r1
 25473 000a FB70     		strb	r3, [r7, #3]
 634:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 635:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 636:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 637:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (NewState != DISABLE)
 25474              		.loc 1 637 0
 25475 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 25476 000e 002B     		cmp	r3, #0
 25477 0010 08D0     		beq	.L36
 638:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 639:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Enable the selected SPI SS output */
 640:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR2 |= (uint16_t)SPI_CR2_SSOE;
 25478              		.loc 1 640 0
 25479 0012 7B68     		ldr	r3, [r7, #4]
 25480 0014 9B88     		ldrh	r3, [r3, #4]	@ movhi
 25481 0016 9BB2     		uxth	r3, r3
 25482 0018 43F00403 		orr	r3, r3, #4
 25483 001c 9AB2     		uxth	r2, r3
 25484 001e 7B68     		ldr	r3, [r7, #4]
 25485 0020 9A80     		strh	r2, [r3, #4]	@ movhi
 25486 0022 07E0     		b	.L35
 25487              	.L36:
 641:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 642:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 643:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 644:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Disable the selected SPI SS output */
 645:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_SSOE);
 25488              		.loc 1 645 0
 25489 0024 7B68     		ldr	r3, [r7, #4]
 25490 0026 9B88     		ldrh	r3, [r3, #4]	@ movhi
 25491 0028 9BB2     		uxth	r3, r3
 25492 002a 23F00403 		bic	r3, r3, #4
 25493 002e 9AB2     		uxth	r2, r3
 25494 0030 7B68     		ldr	r3, [r7, #4]
 25495 0032 9A80     		strh	r2, [r3, #4]	@ movhi
 25496              	.L35:
 646:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 647:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 25497              		.loc 1 647 0
 25498 0034 07F10C07 		add	r7, r7, #12
 25499 0038 BD46     		mov	sp, r7
 25500 003a 80BC     		pop	{r7}
 25501 003c 7047     		bx	lr
 25502              		.cfi_endproc
 25503              	.LFE120:
 25505 003e 00BF     		.section	.text.SPI_TIModeCmd,"ax",%progbits
 25506              		.align	2
 25507              		.global	SPI_TIModeCmd
 25508              		.thumb
 25509              		.thumb_func
 25511              	SPI_TIModeCmd:
 25512              	.LFB121:
 648:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 649:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 650:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Enables or disables the SPIx/I2Sx DMA interface.
 651:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *   
 652:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   This function can be called only after the SPI_Init() function has 
 653:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         been called. 
 654:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   When TI mode is selected, the control bits SSM, SSI, CPOL and CPHA 
 655:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         are not taken into consideration and are configured by hardware
 656:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         respectively to the TI mode requirements.  
 657:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * 
 658:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 
 659:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  NewState: new state of the selected SPI TI communication mode.
 660:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be: ENABLE or DISABLE.
 661:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 662:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 663:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_TIModeCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
 664:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 25513              		.loc 1 664 0
 25514              		.cfi_startproc
 25515              		@ args = 0, pretend = 0, frame = 8
 25516              		@ frame_needed = 1, uses_anonymous_args = 0
 25517              		@ link register save eliminated.
 25518 0000 80B4     		push	{r7}
 25519              	.LCFI33:
 25520              		.cfi_def_cfa_offset 4
 25521 0002 83B0     		sub	sp, sp, #12
 25522              	.LCFI34:
 25523              		.cfi_def_cfa_offset 16
 25524 0004 00AF     		add	r7, sp, #0
 25525              		.cfi_offset 7, -4
 25526              	.LCFI35:
 25527              		.cfi_def_cfa_register 7
 25528 0006 7860     		str	r0, [r7, #4]
 25529 0008 0B46     		mov	r3, r1
 25530 000a FB70     		strb	r3, [r7, #3]
 665:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 666:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 667:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 668:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 669:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (NewState != DISABLE)
 25531              		.loc 1 669 0
 25532 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 25533 000e 002B     		cmp	r3, #0
 25534 0010 08D0     		beq	.L39
 670:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 671:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Enable the TI mode for the selected SPI peripheral */
 672:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR2 |= SPI_CR2_FRF;
 25535              		.loc 1 672 0
 25536 0012 7B68     		ldr	r3, [r7, #4]
 25537 0014 9B88     		ldrh	r3, [r3, #4]	@ movhi
 25538 0016 9BB2     		uxth	r3, r3
 25539 0018 43F01003 		orr	r3, r3, #16
 25540 001c 9AB2     		uxth	r2, r3
 25541 001e 7B68     		ldr	r3, [r7, #4]
 25542 0020 9A80     		strh	r2, [r3, #4]	@ movhi
 25543 0022 07E0     		b	.L38
 25544              	.L39:
 673:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 674:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 675:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 676:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Disable the TI mode for the selected SPI peripheral */
 677:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR2 &= (uint16_t)~SPI_CR2_FRF;
 25545              		.loc 1 677 0
 25546 0024 7B68     		ldr	r3, [r7, #4]
 25547 0026 9B88     		ldrh	r3, [r3, #4]	@ movhi
 25548 0028 9BB2     		uxth	r3, r3
 25549 002a 23F01003 		bic	r3, r3, #16
 25550 002e 9AB2     		uxth	r2, r3
 25551 0030 7B68     		ldr	r3, [r7, #4]
 25552 0032 9A80     		strh	r2, [r3, #4]	@ movhi
 25553              	.L38:
 678:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 679:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 25554              		.loc 1 679 0
 25555 0034 07F10C07 		add	r7, r7, #12
 25556 0038 BD46     		mov	sp, r7
 25557 003a 80BC     		pop	{r7}
 25558 003c 7047     		bx	lr
 25559              		.cfi_endproc
 25560              	.LFE121:
 25562 003e 00BF     		.section	.text.I2S_FullDuplexConfig,"ax",%progbits
 25563              		.align	2
 25564              		.global	I2S_FullDuplexConfig
 25565              		.thumb
 25566              		.thumb_func
 25568              	I2S_FullDuplexConfig:
 25569              	.LFB122:
 680:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 681:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 682:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Configures the full duplex mode for the I2Sx peripheral using its
 683:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         extension I2Sxext according to the specified parameters in the 
 684:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         I2S_InitStruct.
 685:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  I2Sxext: where x can be  2 or 3 to select the I2S peripheral extension block.
 686:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  I2S_InitStruct: pointer to an I2S_InitTypeDef structure that
 687:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         contains the configuration information for the specified I2S peripheral
 688:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         extension.
 689:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * 
 690:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   The structure pointed by I2S_InitStruct parameter should be the same
 691:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         used for the master I2S peripheral. In this case, if the master is 
 692:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         configured as transmitter, the slave will be receiver and vice versa.
 693:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         Or you can force a different mode by modifying the field I2S_Mode to the
 694:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         value I2S_SlaveRx or I2S_SlaveTx indepedently of the master configuration.    
 695:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         
 696:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   The I2S full duplex extension can be configured in slave mode only.    
 697:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *  
 698:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 699:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 700:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void I2S_FullDuplexConfig(SPI_TypeDef* I2Sxext, I2S_InitTypeDef* I2S_InitStruct)
 701:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 25570              		.loc 1 701 0
 25571              		.cfi_startproc
 25572              		@ args = 0, pretend = 0, frame = 16
 25573              		@ frame_needed = 1, uses_anonymous_args = 0
 25574              		@ link register save eliminated.
 25575 0000 80B4     		push	{r7}
 25576              	.LCFI36:
 25577              		.cfi_def_cfa_offset 4
 25578 0002 85B0     		sub	sp, sp, #20
 25579              	.LCFI37:
 25580              		.cfi_def_cfa_offset 24
 25581 0004 00AF     		add	r7, sp, #0
 25582              		.cfi_offset 7, -4
 25583              	.LCFI38:
 25584              		.cfi_def_cfa_register 7
 25585 0006 7860     		str	r0, [r7, #4]
 25586 0008 3960     		str	r1, [r7, #0]
 702:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   uint16_t tmpreg = 0, tmp = 0;
 25587              		.loc 1 702 0
 25588 000a 4FF00003 		mov	r3, #0
 25589 000e BB81     		strh	r3, [r7, #12]	@ movhi
 25590 0010 4FF00003 		mov	r3, #0
 25591 0014 FB81     		strh	r3, [r7, #14]	@ movhi
 703:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 704:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the I2S parameters */
 705:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_EXT_PERIPH(I2Sxext));
 706:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_MODE(I2S_InitStruct->I2S_Mode));
 707:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_STANDARD(I2S_InitStruct->I2S_Standard));
 708:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
 709:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  
 710:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 711:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
 712:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
 713:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 25592              		.loc 1 713 0
 25593 0016 7B68     		ldr	r3, [r7, #4]
 25594 0018 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 25595 001a 9BB2     		uxth	r3, r3
 25596 001c 23F47A63 		bic	r3, r3, #4000
 25597 0020 23F01F03 		bic	r3, r3, #31
 25598 0024 9AB2     		uxth	r2, r3
 25599 0026 7B68     		ldr	r3, [r7, #4]
 25600 0028 9A83     		strh	r2, [r3, #28]	@ movhi
 714:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   I2Sxext->I2SPR = 0x0002;
 25601              		.loc 1 714 0
 25602 002a 7B68     		ldr	r3, [r7, #4]
 25603 002c 4FF00202 		mov	r2, #2
 25604 0030 1A84     		strh	r2, [r3, #32]	@ movhi
 715:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 716:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Get the I2SCFGR register value */
 717:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg = I2Sxext->I2SCFGR;
 25605              		.loc 1 717 0
 25606 0032 7B68     		ldr	r3, [r7, #4]
 25607 0034 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 25608 0036 BB81     		strh	r3, [r7, #12]	@ movhi
 718:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 719:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Get the mode to be configured for the extended I2S */
 720:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_Slav
 25609              		.loc 1 720 0
 25610 0038 3B68     		ldr	r3, [r7, #0]
 25611 003a 1B88     		ldrh	r3, [r3, #0]
 25612 003c B3F5007F 		cmp	r3, #512
 25613 0040 03D0     		beq	.L42
 25614              		.loc 1 720 0 is_stmt 0 discriminator 1
 25615 0042 3B68     		ldr	r3, [r7, #0]
 25616 0044 1B88     		ldrh	r3, [r3, #0]
 25617 0046 002B     		cmp	r3, #0
 25618 0048 03D1     		bne	.L43
 25619              	.L42:
 721:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 722:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     tmp = I2S_Mode_SlaveRx;
 25620              		.loc 1 722 0 is_stmt 1
 25621 004a 4FF48073 		mov	r3, #256
 25622 004e FB81     		strh	r3, [r7, #14]	@ movhi
 25623 0050 0CE0     		b	.L44
 25624              	.L43:
 723:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 724:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 725:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 726:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterRx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_Sl
 25625              		.loc 1 726 0
 25626 0052 3B68     		ldr	r3, [r7, #0]
 25627 0054 1B88     		ldrh	r3, [r3, #0]
 25628 0056 B3F5407F 		cmp	r3, #768
 25629 005a 04D0     		beq	.L45
 25630              		.loc 1 726 0 is_stmt 0 discriminator 1
 25631 005c 3B68     		ldr	r3, [r7, #0]
 25632 005e 1B88     		ldrh	r3, [r3, #0]
 25633 0060 B3F5807F 		cmp	r3, #256
 25634 0064 02D1     		bne	.L44
 25635              	.L45:
 727:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     {
 728:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       tmp = I2S_Mode_SlaveTx;
 25636              		.loc 1 728 0 is_stmt 1
 25637 0066 4FF00003 		mov	r3, #0
 25638 006a FB81     		strh	r3, [r7, #14]	@ movhi
 25639              	.L44:
 729:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     }
 730:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 731:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 732:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  
 733:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Configure the I2S with the SPI_InitStruct values */
 734:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 735:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                   (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataForm
 25640              		.loc 1 735 0
 25641 006c 3B68     		ldr	r3, [r7, #0]
 25642 006e 5A88     		ldrh	r2, [r3, #2]
 25643 0070 3B68     		ldr	r3, [r7, #0]
 25644 0072 9988     		ldrh	r1, [r3, #4]
 736:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                   (uint16_t)I2S_InitStruct->I2S_CPOL))));
 25645              		.loc 1 736 0
 25646 0074 3B68     		ldr	r3, [r7, #0]
 25647 0076 9B89     		ldrh	r3, [r3, #12]
 735:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                   (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataForm
 25648              		.loc 1 735 0
 25649 0078 41EA0303 		orr	r3, r1, r3
 25650 007c 9BB2     		uxth	r3, r3
 25651 007e 42EA0303 		orr	r3, r2, r3
 25652 0082 9AB2     		uxth	r2, r3
 734:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 25653              		.loc 1 734 0
 25654 0084 FB89     		ldrh	r3, [r7, #14]	@ movhi
 25655 0086 42EA0303 		orr	r3, r2, r3
 25656 008a 9AB2     		uxth	r2, r3
 25657 008c BB89     		ldrh	r3, [r7, #12]	@ movhi
 25658 008e 42EA0303 		orr	r3, r2, r3
 25659 0092 9BB2     		uxth	r3, r3
 25660 0094 43F40063 		orr	r3, r3, #2048
 25661 0098 BB81     		strh	r3, [r7, #12]	@ movhi
 737:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  
 738:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Write to SPIx I2SCFGR */  
 739:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   I2Sxext->I2SCFGR = tmpreg;
 25662              		.loc 1 739 0
 25663 009a 7B68     		ldr	r3, [r7, #4]
 25664 009c BA89     		ldrh	r2, [r7, #12]	@ movhi
 25665 009e 9A83     		strh	r2, [r3, #28]	@ movhi
 740:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 25666              		.loc 1 740 0
 25667 00a0 07F11407 		add	r7, r7, #20
 25668 00a4 BD46     		mov	sp, r7
 25669 00a6 80BC     		pop	{r7}
 25670 00a8 7047     		bx	lr
 25671              		.cfi_endproc
 25672              	.LFE122:
 25674 00aa 00BF     		.section	.text.SPI_I2S_ReceiveData,"ax",%progbits
 25675              		.align	2
 25676              		.global	SPI_I2S_ReceiveData
 25677              		.thumb
 25678              		.thumb_func
 25680              	SPI_I2S_ReceiveData:
 25681              	.LFB123:
 741:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 742:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 743:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @}
 744:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 745:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 746:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /** @defgroup SPI_Group2 Data transfers functions
 747:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  *  @brief   Data transfers functions
 748:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  *
 749:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @verbatim   
 750:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  ===============================================================================
 751:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                          Data transfers functions
 752:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  ===============================================================================  
 753:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 754:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   This section provides a set of functions allowing to manage the SPI data transfers
 755:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 756:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   In reception, data are received and then stored into an internal Rx buffer while 
 757:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   In transmission, data are first stored into an internal Tx buffer before being 
 758:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   transmitted.
 759:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 760:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   The read access of the SPI_DR register can be done using the SPI_I2S_ReceiveData()
 761:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   function and returns the Rx buffered value. Whereas a write access to the SPI_DR 
 762:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   can be done using SPI_I2S_SendData() function and stores the written data into 
 763:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   Tx buffer.
 764:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 765:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @endverbatim
 766:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @{
 767:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 768:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 769:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 770:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Returns the most recent received data by the SPIx/I2Sx peripheral. 
 771:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
 772:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
 773:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval The value of the received data.
 774:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 775:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
 776:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 25682              		.loc 1 776 0
 25683              		.cfi_startproc
 25684              		@ args = 0, pretend = 0, frame = 8
 25685              		@ frame_needed = 1, uses_anonymous_args = 0
 25686              		@ link register save eliminated.
 25687 0000 80B4     		push	{r7}
 25688              	.LCFI39:
 25689              		.cfi_def_cfa_offset 4
 25690 0002 83B0     		sub	sp, sp, #12
 25691              	.LCFI40:
 25692              		.cfi_def_cfa_offset 16
 25693 0004 00AF     		add	r7, sp, #0
 25694              		.cfi_offset 7, -4
 25695              	.LCFI41:
 25696              		.cfi_def_cfa_register 7
 25697 0006 7860     		str	r0, [r7, #4]
 777:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 778:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
 779:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 780:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Return the data in the DR register */
 781:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   return SPIx->DR;
 25698              		.loc 1 781 0
 25699 0008 7B68     		ldr	r3, [r7, #4]
 25700 000a 9B89     		ldrh	r3, [r3, #12]	@ movhi
 25701 000c 9BB2     		uxth	r3, r3
 782:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 25702              		.loc 1 782 0
 25703 000e 1846     		mov	r0, r3
 25704 0010 07F10C07 		add	r7, r7, #12
 25705 0014 BD46     		mov	sp, r7
 25706 0016 80BC     		pop	{r7}
 25707 0018 7047     		bx	lr
 25708              		.cfi_endproc
 25709              	.LFE123:
 25711 001a 00BF     		.section	.text.SPI_I2S_SendData,"ax",%progbits
 25712              		.align	2
 25713              		.global	SPI_I2S_SendData
 25714              		.thumb
 25715              		.thumb_func
 25717              	SPI_I2S_SendData:
 25718              	.LFB124:
 783:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 784:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 785:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Transmits a Data through the SPIx/I2Sx peripheral.
 786:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
 787:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
 788:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  Data: Data to be transmitted.
 789:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 790:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 791:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
 792:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 25719              		.loc 1 792 0
 25720              		.cfi_startproc
 25721              		@ args = 0, pretend = 0, frame = 8
 25722              		@ frame_needed = 1, uses_anonymous_args = 0
 25723              		@ link register save eliminated.
 25724 0000 80B4     		push	{r7}
 25725              	.LCFI42:
 25726              		.cfi_def_cfa_offset 4
 25727 0002 83B0     		sub	sp, sp, #12
 25728              	.LCFI43:
 25729              		.cfi_def_cfa_offset 16
 25730 0004 00AF     		add	r7, sp, #0
 25731              		.cfi_offset 7, -4
 25732              	.LCFI44:
 25733              		.cfi_def_cfa_register 7
 25734 0006 7860     		str	r0, [r7, #4]
 25735 0008 0B46     		mov	r3, r1
 25736 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 793:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 794:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
 795:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 796:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Write in the DR register the data to be sent */
 797:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->DR = Data;
 25737              		.loc 1 797 0
 25738 000c 7B68     		ldr	r3, [r7, #4]
 25739 000e 7A88     		ldrh	r2, [r7, #2]	@ movhi
 25740 0010 9A81     		strh	r2, [r3, #12]	@ movhi
 798:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 25741              		.loc 1 798 0
 25742 0012 07F10C07 		add	r7, r7, #12
 25743 0016 BD46     		mov	sp, r7
 25744 0018 80BC     		pop	{r7}
 25745 001a 7047     		bx	lr
 25746              		.cfi_endproc
 25747              	.LFE124:
 25749              		.section	.text.SPI_CalculateCRC,"ax",%progbits
 25750              		.align	2
 25751              		.global	SPI_CalculateCRC
 25752              		.thumb
 25753              		.thumb_func
 25755              	SPI_CalculateCRC:
 25756              	.LFB125:
 799:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 800:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 801:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @}
 802:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 803:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 804:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /** @defgroup SPI_Group3 Hardware CRC Calculation functions
 805:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  *  @brief   Hardware CRC Calculation functions
 806:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  *
 807:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @verbatim   
 808:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  ===============================================================================
 809:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                          Hardware CRC Calculation functions
 810:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  ===============================================================================  
 811:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 812:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   This section provides a set of functions allowing to manage the SPI CRC hardware 
 813:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   calculation
 814:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 815:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPI communication using CRC is possible through the following procedure:
 816:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      1. Program the Data direction, Polarity, Phase, First Data, Baud Rate Prescaler, 
 817:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****         Slave Management, Peripheral Mode and CRC Polynomial values using the SPI_Init()
 818:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****         function.
 819:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      2. Enable the CRC calculation using the SPI_CalculateCRC() function.
 820:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      3. Enable the SPI using the SPI_Cmd() function
 821:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      4. Before writing the last data to the TX buffer, set the CRCNext bit using the 
 822:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       SPI_TransmitCRC() function to indicate that after transmission of the last 
 823:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       data, the CRC should be transmitted.
 824:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      5. After transmitting the last data, the SPI transmits the CRC. The SPI_CR1_CRCNEXT
 825:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****         bit is reset. The CRC is also received and compared against the SPI_RXCRCR 
 826:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****         value. 
 827:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****         If the value does not match, the SPI_FLAG_CRCERR flag is set and an interrupt
 828:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****         can be generated when the SPI_I2S_IT_ERR interrupt is enabled.
 829:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 830:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @note It is advised not to read the calculated CRC values during the communication.
 831:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 832:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @note When the SPI is in slave mode, be careful to enable CRC calculation only 
 833:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       when the clock is stable, that is, when the clock is in the steady state. 
 834:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       If not, a wrong CRC calculation may be done. In fact, the CRC is sensitive 
 835:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       to the SCK slave input clock as soon as CRCEN is set, and this, whatever 
 836:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       the value of the SPE bit.
 837:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 838:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @note With high bitrate frequencies, be careful when transmitting the CRC.
 839:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       As the number of used CPU cycles has to be as low as possible in the CRC 
 840:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       transfer phase, it is forbidden to call software functions in the CRC 
 841:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       transmission sequence to avoid errors in the last data and CRC reception. 
 842:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       In fact, CRCNEXT bit has to be written before the end of the transmission/reception 
 843:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       of the last data.
 844:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 845:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @note For high bit rate frequencies, it is advised to use the DMA mode to avoid the
 846:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       degradation of the SPI speed performance due to CPU accesses impacting the 
 847:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       SPI bandwidth.
 848:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 849:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @note When the STM32F4xx is configured as slave and the NSS hardware mode is 
 850:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       used, the NSS pin needs to be kept low between the data phase and the CRC 
 851:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       phase.
 852:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 853:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @note When the SPI is configured in slave mode with the CRC feature enabled, CRC
 854:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       calculation takes place even if a high level is applied on the NSS pin. 
 855:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       This may happen for example in case of a multi-slave environment where the 
 856:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       communication master addresses slaves alternately.
 857:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 858:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @note Between a slave de-selection (high level on NSS) and a new slave selection 
 859:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       (low level on NSS), the CRC value should be cleared on both master and slave
 860:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       sides in order to resynchronize the master and slave for their respective 
 861:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       CRC calculation.
 862:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 863:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @note To clear the CRC, follow the procedure below:
 864:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****         1. Disable SPI using the SPI_Cmd() function
 865:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****         2. Disable the CRC calculation using the SPI_CalculateCRC() function.
 866:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****         3. Enable the CRC calculation using the SPI_CalculateCRC() function.
 867:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****         4. Enable SPI using the SPI_Cmd() function.
 868:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 869:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @endverbatim
 870:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @{
 871:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 872:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 873:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 874:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Enables or disables the CRC value calculation of the transferred bytes.
 875:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 876:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  NewState: new state of the SPIx CRC value calculation.
 877:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be: ENABLE or DISABLE.
 878:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 879:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 880:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_CalculateCRC(SPI_TypeDef* SPIx, FunctionalState NewState)
 881:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 25757              		.loc 1 881 0
 25758              		.cfi_startproc
 25759              		@ args = 0, pretend = 0, frame = 8
 25760              		@ frame_needed = 1, uses_anonymous_args = 0
 25761              		@ link register save eliminated.
 25762 0000 80B4     		push	{r7}
 25763              	.LCFI45:
 25764              		.cfi_def_cfa_offset 4
 25765 0002 83B0     		sub	sp, sp, #12
 25766              	.LCFI46:
 25767              		.cfi_def_cfa_offset 16
 25768 0004 00AF     		add	r7, sp, #0
 25769              		.cfi_offset 7, -4
 25770              	.LCFI47:
 25771              		.cfi_def_cfa_register 7
 25772 0006 7860     		str	r0, [r7, #4]
 25773 0008 0B46     		mov	r3, r1
 25774 000a FB70     		strb	r3, [r7, #3]
 882:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 883:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 884:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 885:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (NewState != DISABLE)
 25775              		.loc 1 885 0
 25776 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 25777 000e 002B     		cmp	r3, #0
 25778 0010 08D0     		beq	.L49
 886:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 887:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Enable the selected SPI CRC calculation */
 888:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR1 |= SPI_CR1_CRCEN;
 25779              		.loc 1 888 0
 25780 0012 7B68     		ldr	r3, [r7, #4]
 25781 0014 1B88     		ldrh	r3, [r3, #0]	@ movhi
 25782 0016 9BB2     		uxth	r3, r3
 25783 0018 43F40053 		orr	r3, r3, #8192
 25784 001c 9AB2     		uxth	r2, r3
 25785 001e 7B68     		ldr	r3, [r7, #4]
 25786 0020 1A80     		strh	r2, [r3, #0]	@ movhi
 25787 0022 07E0     		b	.L48
 25788              	.L49:
 889:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 890:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 891:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 892:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Disable the selected SPI CRC calculation */
 893:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCEN);
 25789              		.loc 1 893 0
 25790 0024 7B68     		ldr	r3, [r7, #4]
 25791 0026 1B88     		ldrh	r3, [r3, #0]	@ movhi
 25792 0028 9BB2     		uxth	r3, r3
 25793 002a 23F40053 		bic	r3, r3, #8192
 25794 002e 9AB2     		uxth	r2, r3
 25795 0030 7B68     		ldr	r3, [r7, #4]
 25796 0032 1A80     		strh	r2, [r3, #0]	@ movhi
 25797              	.L48:
 894:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 895:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 25798              		.loc 1 895 0
 25799 0034 07F10C07 		add	r7, r7, #12
 25800 0038 BD46     		mov	sp, r7
 25801 003a 80BC     		pop	{r7}
 25802 003c 7047     		bx	lr
 25803              		.cfi_endproc
 25804              	.LFE125:
 25806 003e 00BF     		.section	.text.SPI_TransmitCRC,"ax",%progbits
 25807              		.align	2
 25808              		.global	SPI_TransmitCRC
 25809              		.thumb
 25810              		.thumb_func
 25812              	SPI_TransmitCRC:
 25813              	.LFB126:
 896:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 897:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 898:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Transmit the SPIx CRC value.
 899:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 900:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 901:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 902:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_TransmitCRC(SPI_TypeDef* SPIx)
 903:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 25814              		.loc 1 903 0
 25815              		.cfi_startproc
 25816              		@ args = 0, pretend = 0, frame = 8
 25817              		@ frame_needed = 1, uses_anonymous_args = 0
 25818              		@ link register save eliminated.
 25819 0000 80B4     		push	{r7}
 25820              	.LCFI48:
 25821              		.cfi_def_cfa_offset 4
 25822 0002 83B0     		sub	sp, sp, #12
 25823              	.LCFI49:
 25824              		.cfi_def_cfa_offset 16
 25825 0004 00AF     		add	r7, sp, #0
 25826              		.cfi_offset 7, -4
 25827              	.LCFI50:
 25828              		.cfi_def_cfa_register 7
 25829 0006 7860     		str	r0, [r7, #4]
 904:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 905:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 906:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 907:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Enable the selected SPI CRC transmission */
 908:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->CR1 |= SPI_CR1_CRCNEXT;
 25830              		.loc 1 908 0
 25831 0008 7B68     		ldr	r3, [r7, #4]
 25832 000a 1B88     		ldrh	r3, [r3, #0]	@ movhi
 25833 000c 9BB2     		uxth	r3, r3
 25834 000e 43F48053 		orr	r3, r3, #4096
 25835 0012 9AB2     		uxth	r2, r3
 25836 0014 7B68     		ldr	r3, [r7, #4]
 25837 0016 1A80     		strh	r2, [r3, #0]	@ movhi
 909:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 25838              		.loc 1 909 0
 25839 0018 07F10C07 		add	r7, r7, #12
 25840 001c BD46     		mov	sp, r7
 25841 001e 80BC     		pop	{r7}
 25842 0020 7047     		bx	lr
 25843              		.cfi_endproc
 25844              	.LFE126:
 25846 0022 00BF     		.section	.text.SPI_GetCRC,"ax",%progbits
 25847              		.align	2
 25848              		.global	SPI_GetCRC
 25849              		.thumb
 25850              		.thumb_func
 25852              	SPI_GetCRC:
 25853              	.LFB127:
 910:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 911:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 912:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Returns the transmit or the receive CRC register value for the specified SPI.
 913:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 914:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_CRC: specifies the CRC register to be read.
 915:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be one of the following values:
 916:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_CRC_Tx: Selects Tx CRC register
 917:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_CRC_Rx: Selects Rx CRC register
 918:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval The selected CRC register value..
 919:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 920:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** uint16_t SPI_GetCRC(SPI_TypeDef* SPIx, uint8_t SPI_CRC)
 921:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 25854              		.loc 1 921 0
 25855              		.cfi_startproc
 25856              		@ args = 0, pretend = 0, frame = 16
 25857              		@ frame_needed = 1, uses_anonymous_args = 0
 25858              		@ link register save eliminated.
 25859 0000 80B4     		push	{r7}
 25860              	.LCFI51:
 25861              		.cfi_def_cfa_offset 4
 25862 0002 85B0     		sub	sp, sp, #20
 25863              	.LCFI52:
 25864              		.cfi_def_cfa_offset 24
 25865 0004 00AF     		add	r7, sp, #0
 25866              		.cfi_offset 7, -4
 25867              	.LCFI53:
 25868              		.cfi_def_cfa_register 7
 25869 0006 7860     		str	r0, [r7, #4]
 25870 0008 0B46     		mov	r3, r1
 25871 000a FB70     		strb	r3, [r7, #3]
 922:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   uint16_t crcreg = 0;
 25872              		.loc 1 922 0
 25873 000c 4FF00003 		mov	r3, #0
 25874 0010 FB81     		strh	r3, [r7, #14]	@ movhi
 923:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 924:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 925:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_CRC(SPI_CRC));
 926:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (SPI_CRC != SPI_CRC_Rx)
 25875              		.loc 1 926 0
 25876 0012 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 25877 0014 012B     		cmp	r3, #1
 25878 0016 03D0     		beq	.L53
 927:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 928:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Get the Tx CRC register */
 929:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     crcreg = SPIx->TXCRCR;
 25879              		.loc 1 929 0
 25880 0018 7B68     		ldr	r3, [r7, #4]
 25881 001a 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 25882 001c FB81     		strh	r3, [r7, #14]	@ movhi
 25883 001e 02E0     		b	.L54
 25884              	.L53:
 930:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 931:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 932:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 933:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Get the Rx CRC register */
 934:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     crcreg = SPIx->RXCRCR;
 25885              		.loc 1 934 0
 25886 0020 7B68     		ldr	r3, [r7, #4]
 25887 0022 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 25888 0024 FB81     		strh	r3, [r7, #14]	@ movhi
 25889              	.L54:
 935:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 936:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Return the selected CRC register */
 937:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   return crcreg;
 25890              		.loc 1 937 0
 25891 0026 FB89     		ldrh	r3, [r7, #14]
 938:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 25892              		.loc 1 938 0
 25893 0028 1846     		mov	r0, r3
 25894 002a 07F11407 		add	r7, r7, #20
 25895 002e BD46     		mov	sp, r7
 25896 0030 80BC     		pop	{r7}
 25897 0032 7047     		bx	lr
 25898              		.cfi_endproc
 25899              	.LFE127:
 25901              		.section	.text.SPI_GetCRCPolynomial,"ax",%progbits
 25902              		.align	2
 25903              		.global	SPI_GetCRCPolynomial
 25904              		.thumb
 25905              		.thumb_func
 25907              	SPI_GetCRCPolynomial:
 25908              	.LFB128:
 939:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 940:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 941:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Returns the CRC Polynomial register value for the specified SPI.
 942:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 943:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval The CRC Polynomial register value.
 944:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 945:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** uint16_t SPI_GetCRCPolynomial(SPI_TypeDef* SPIx)
 946:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 25909              		.loc 1 946 0
 25910              		.cfi_startproc
 25911              		@ args = 0, pretend = 0, frame = 8
 25912              		@ frame_needed = 1, uses_anonymous_args = 0
 25913              		@ link register save eliminated.
 25914 0000 80B4     		push	{r7}
 25915              	.LCFI54:
 25916              		.cfi_def_cfa_offset 4
 25917 0002 83B0     		sub	sp, sp, #12
 25918              	.LCFI55:
 25919              		.cfi_def_cfa_offset 16
 25920 0004 00AF     		add	r7, sp, #0
 25921              		.cfi_offset 7, -4
 25922              	.LCFI56:
 25923              		.cfi_def_cfa_register 7
 25924 0006 7860     		str	r0, [r7, #4]
 947:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 948:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 949:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 950:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Return the CRC polynomial register */
 951:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   return SPIx->CRCPR;
 25925              		.loc 1 951 0
 25926 0008 7B68     		ldr	r3, [r7, #4]
 25927 000a 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 25928 000c 9BB2     		uxth	r3, r3
 952:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 25929              		.loc 1 952 0
 25930 000e 1846     		mov	r0, r3
 25931 0010 07F10C07 		add	r7, r7, #12
 25932 0014 BD46     		mov	sp, r7
 25933 0016 80BC     		pop	{r7}
 25934 0018 7047     		bx	lr
 25935              		.cfi_endproc
 25936              	.LFE128:
 25938 001a 00BF     		.section	.text.SPI_I2S_DMACmd,"ax",%progbits
 25939              		.align	2
 25940              		.global	SPI_I2S_DMACmd
 25941              		.thumb
 25942              		.thumb_func
 25944              	SPI_I2S_DMACmd:
 25945              	.LFB129:
 953:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 954:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 955:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @}
 956:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 957:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 958:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /** @defgroup SPI_Group4 DMA transfers management functions
 959:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  *  @brief   DMA transfers management functions
 960:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *
 961:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @verbatim   
 962:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  ===============================================================================
 963:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                          DMA transfers management functions
 964:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  ===============================================================================  
 965:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 966:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @endverbatim
 967:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @{
 968:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 969:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 970:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 971:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Enables or disables the SPIx/I2Sx DMA interface.
 972:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
 973:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
 974:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_I2S_DMAReq: specifies the SPI DMA transfer request to be enabled or disabled. 
 975:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be any combination of the following values:
 976:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_DMAReq_Tx: Tx buffer DMA transfer request
 977:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_DMAReq_Rx: Rx buffer DMA transfer request
 978:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  NewState: new state of the selected SPI DMA transfer request.
 979:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be: ENABLE or DISABLE.
 980:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 981:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 982:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)
 983:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 25946              		.loc 1 983 0
 25947              		.cfi_startproc
 25948              		@ args = 0, pretend = 0, frame = 8
 25949              		@ frame_needed = 1, uses_anonymous_args = 0
 25950              		@ link register save eliminated.
 25951 0000 80B4     		push	{r7}
 25952              	.LCFI57:
 25953              		.cfi_def_cfa_offset 4
 25954 0002 83B0     		sub	sp, sp, #12
 25955              	.LCFI58:
 25956              		.cfi_def_cfa_offset 16
 25957 0004 00AF     		add	r7, sp, #0
 25958              		.cfi_offset 7, -4
 25959              	.LCFI59:
 25960              		.cfi_def_cfa_register 7
 25961 0006 7860     		str	r0, [r7, #4]
 25962 0008 1346     		mov	r3, r2
 25963 000a 0A46     		mov	r2, r1	@ movhi
 25964 000c 7A80     		strh	r2, [r7, #2]	@ movhi
 25965 000e 7B70     		strb	r3, [r7, #1]
 984:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 985:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
 986:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 987:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));
 988:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 989:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (NewState != DISABLE)
 25966              		.loc 1 989 0
 25967 0010 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 25968 0012 002B     		cmp	r3, #0
 25969 0014 09D0     		beq	.L57
 990:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 991:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Enable the selected SPI DMA requests */
 992:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR2 |= SPI_I2S_DMAReq;
 25970              		.loc 1 992 0
 25971 0016 7B68     		ldr	r3, [r7, #4]
 25972 0018 9B88     		ldrh	r3, [r3, #4]	@ movhi
 25973 001a 9AB2     		uxth	r2, r3
 25974 001c 7B88     		ldrh	r3, [r7, #2]	@ movhi
 25975 001e 42EA0303 		orr	r3, r2, r3
 25976 0022 9AB2     		uxth	r2, r3
 25977 0024 7B68     		ldr	r3, [r7, #4]
 25978 0026 9A80     		strh	r2, [r3, #4]	@ movhi
 25979 0028 0BE0     		b	.L56
 25980              	.L57:
 993:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 994:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 995:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 996:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Disable the selected SPI DMA requests */
 997:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 25981              		.loc 1 997 0
 25982 002a 7B68     		ldr	r3, [r7, #4]
 25983 002c 9B88     		ldrh	r3, [r3, #4]	@ movhi
 25984 002e 9AB2     		uxth	r2, r3
 25985 0030 7B88     		ldrh	r3, [r7, #2]	@ movhi
 25986 0032 6FEA0303 		mvn	r3, r3
 25987 0036 9BB2     		uxth	r3, r3
 25988 0038 02EA0303 		and	r3, r2, r3
 25989 003c 9AB2     		uxth	r2, r3
 25990 003e 7B68     		ldr	r3, [r7, #4]
 25991 0040 9A80     		strh	r2, [r3, #4]	@ movhi
 25992              	.L56:
 998:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 999:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 25993              		.loc 1 999 0
 25994 0042 07F10C07 		add	r7, r7, #12
 25995 0046 BD46     		mov	sp, r7
 25996 0048 80BC     		pop	{r7}
 25997 004a 7047     		bx	lr
 25998              		.cfi_endproc
 25999              	.LFE129:
 26001              		.section	.text.SPI_I2S_ITConfig,"ax",%progbits
 26002              		.align	2
 26003              		.global	SPI_I2S_ITConfig
 26004              		.thumb
 26005              		.thumb_func
 26007              	SPI_I2S_ITConfig:
 26008              	.LFB130:
1000:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1001:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
1002:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @}
1003:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
1004:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1005:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /** @defgroup SPI_Group5 Interrupts and flags management functions
1006:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  *  @brief   Interrupts and flags management functions
1007:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *
1008:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @verbatim   
1009:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  ===============================================================================
1010:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                          Interrupts and flags management functions
1011:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  ===============================================================================  
1012:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1013:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   This section provides a set of functions allowing to configure the SPI Interrupts 
1014:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   sources and check or clear the flags or pending bits status.
1015:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   The user should identify which mode will be used in his application to manage 
1016:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   the communication: Polling mode, Interrupt mode or DMA mode. 
1017:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     
1018:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   Polling Mode
1019:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   =============
1020:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   In Polling Mode, the SPI/I2S communication can be managed by 9 flags:
1021:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      1. SPI_I2S_FLAG_TXE : to indicate the status of the transmit buffer register
1022:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      2. SPI_I2S_FLAG_RXNE : to indicate the status of the receive buffer register
1023:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      3. SPI_I2S_FLAG_BSY : to indicate the state of the communication layer of the SPI.
1024:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      4. SPI_FLAG_CRCERR : to indicate if a CRC Calculation error occur              
1025:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      5. SPI_FLAG_MODF : to indicate if a Mode Fault error occur
1026:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      6. SPI_I2S_FLAG_OVR : to indicate if an Overrun error occur
1027:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      7. I2S_FLAG_TIFRFE: to indicate a Frame Format error occurs.
1028:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      8. I2S_FLAG_UDR: to indicate an Underrun error occurs.
1029:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      9. I2S_FLAG_CHSIDE: to indicate Channel Side.
1030:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1031:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @note Do not use the BSY flag to handle each data transmission or reception.  It is
1032:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       better to use the TXE and RXNE flags instead.
1033:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1034:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   In this Mode it is advised to use the following functions:
1035:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      - FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG);
1036:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      - void SPI_I2S_ClearFlag(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG);
1037:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1038:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   Interrupt Mode
1039:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   ===============
1040:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   In Interrupt Mode, the SPI communication can be managed by 3 interrupt sources
1041:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   and 7 pending bits: 
1042:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   Pending Bits:
1043:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   ------------- 
1044:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      1. SPI_I2S_IT_TXE : to indicate the status of the transmit buffer register
1045:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      2. SPI_I2S_IT_RXNE : to indicate the status of the receive buffer register
1046:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      3. SPI_IT_CRCERR : to indicate if a CRC Calculation error occur (available in SPI mode only)  
1047:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      4. SPI_IT_MODF : to indicate if a Mode Fault error occur (available in SPI mode only)
1048:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      5. SPI_I2S_IT_OVR : to indicate if an Overrun error occur
1049:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      6. I2S_IT_UDR : to indicate an Underrun Error occurs (available in I2S mode only).
1050:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      7. I2S_FLAG_TIFRFE : to indicate a Frame Format error occurs (available in TI mode only).
1051:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1052:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   Interrupt Source:
1053:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   -----------------
1054:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      1. SPI_I2S_IT_TXE: specifies the interrupt source for the Tx buffer empty 
1055:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                         interrupt.  
1056:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      2. SPI_I2S_IT_RXNE : specifies the interrupt source for the Rx buffer not 
1057:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                           empty interrupt.
1058:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      3. SPI_I2S_IT_ERR : specifies the interrupt source for the errors interrupt.
1059:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1060:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   In this Mode it is advised to use the following functions:
1061:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      - void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState);
1062:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      - ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT);
1063:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      - void SPI_I2S_ClearITPendingBit(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT);
1064:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1065:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   DMA Mode
1066:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   ========
1067:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   In DMA Mode, the SPI communication can be managed by 2 DMA Channel requests:
1068:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      1. SPI_I2S_DMAReq_Tx: specifies the Tx buffer DMA transfer request
1069:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      2. SPI_I2S_DMAReq_Rx: specifies the Rx buffer DMA transfer request
1070:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1071:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   In this Mode it is advised to use the following function:
1072:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     - void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState);
1073:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1074:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @endverbatim
1075:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @{
1076:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
1077:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1078:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
1079:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Enables or disables the specified SPI/I2S interrupts.
1080:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
1081:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
1082:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_I2S_IT: specifies the SPI interrupt source to be enabled or disabled. 
1083:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be one of the following values:
1084:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_IT_TXE: Tx buffer empty interrupt mask
1085:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_IT_RXNE: Rx buffer not empty interrupt mask
1086:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_IT_ERR: Error interrupt mask
1087:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  NewState: new state of the specified SPI interrupt.
1088:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be: ENABLE or DISABLE.
1089:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
1090:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
1091:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState)
1092:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 26009              		.loc 1 1092 0
 26010              		.cfi_startproc
 26011              		@ args = 0, pretend = 0, frame = 16
 26012              		@ frame_needed = 1, uses_anonymous_args = 0
 26013              		@ link register save eliminated.
 26014 0000 80B4     		push	{r7}
 26015              	.LCFI60:
 26016              		.cfi_def_cfa_offset 4
 26017 0002 85B0     		sub	sp, sp, #20
 26018              	.LCFI61:
 26019              		.cfi_def_cfa_offset 24
 26020 0004 00AF     		add	r7, sp, #0
 26021              		.cfi_offset 7, -4
 26022              	.LCFI62:
 26023              		.cfi_def_cfa_register 7
 26024 0006 7860     		str	r0, [r7, #4]
 26025 0008 1346     		mov	r3, r2
 26026 000a 0A46     		mov	r2, r1
 26027 000c FA70     		strb	r2, [r7, #3]
 26028 000e BB70     		strb	r3, [r7, #2]
1093:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   uint16_t itpos = 0, itmask = 0 ;
 26029              		.loc 1 1093 0
 26030 0010 4FF00003 		mov	r3, #0
 26031 0014 FB81     		strh	r3, [r7, #14]	@ movhi
 26032 0016 4FF00003 		mov	r3, #0
 26033 001a BB81     		strh	r3, [r7, #12]	@ movhi
1094:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
1095:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
1096:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
1097:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1098:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_I2S_CONFIG_IT(SPI_I2S_IT));
1099:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1100:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Get the SPI IT index */
1101:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   itpos = SPI_I2S_IT >> 4;
 26034              		.loc 1 1101 0
 26035 001c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 26036 001e 4FEA1313 		lsr	r3, r3, #4
 26037 0022 DBB2     		uxtb	r3, r3
 26038 0024 FB81     		strh	r3, [r7, #14]	@ movhi
1102:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1103:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Set the IT mask */
1104:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   itmask = (uint16_t)1 << (uint16_t)itpos;
 26039              		.loc 1 1104 0
 26040 0026 FB89     		ldrh	r3, [r7, #14]
 26041 0028 4FF00102 		mov	r2, #1
 26042 002c 02FA03F3 		lsl	r3, r2, r3
 26043 0030 BB81     		strh	r3, [r7, #12]	@ movhi
1105:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1106:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (NewState != DISABLE)
 26044              		.loc 1 1106 0
 26045 0032 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 26046 0034 002B     		cmp	r3, #0
 26047 0036 09D0     		beq	.L60
1107:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
1108:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Enable the selected SPI interrupt */
1109:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR2 |= itmask;
 26048              		.loc 1 1109 0
 26049 0038 7B68     		ldr	r3, [r7, #4]
 26050 003a 9B88     		ldrh	r3, [r3, #4]	@ movhi
 26051 003c 9AB2     		uxth	r2, r3
 26052 003e BB89     		ldrh	r3, [r7, #12]	@ movhi
 26053 0040 42EA0303 		orr	r3, r2, r3
 26054 0044 9AB2     		uxth	r2, r3
 26055 0046 7B68     		ldr	r3, [r7, #4]
 26056 0048 9A80     		strh	r2, [r3, #4]	@ movhi
 26057 004a 0BE0     		b	.L59
 26058              	.L60:
1110:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
1111:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
1112:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
1113:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Disable the selected SPI interrupt */
1114:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR2 &= (uint16_t)~itmask;
 26059              		.loc 1 1114 0
 26060 004c 7B68     		ldr	r3, [r7, #4]
 26061 004e 9B88     		ldrh	r3, [r3, #4]	@ movhi
 26062 0050 9AB2     		uxth	r2, r3
 26063 0052 BB89     		ldrh	r3, [r7, #12]	@ movhi
 26064 0054 6FEA0303 		mvn	r3, r3
 26065 0058 9BB2     		uxth	r3, r3
 26066 005a 02EA0303 		and	r3, r2, r3
 26067 005e 9AB2     		uxth	r2, r3
 26068 0060 7B68     		ldr	r3, [r7, #4]
 26069 0062 9A80     		strh	r2, [r3, #4]	@ movhi
 26070              	.L59:
1115:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
1116:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 26071              		.loc 1 1116 0
 26072 0064 07F11407 		add	r7, r7, #20
 26073 0068 BD46     		mov	sp, r7
 26074 006a 80BC     		pop	{r7}
 26075 006c 7047     		bx	lr
 26076              		.cfi_endproc
 26077              	.LFE130:
 26079 006e 00BF     		.section	.text.SPI_I2S_GetFlagStatus,"ax",%progbits
 26080              		.align	2
 26081              		.global	SPI_I2S_GetFlagStatus
 26082              		.thumb
 26083              		.thumb_func
 26085              	SPI_I2S_GetFlagStatus:
 26086              	.LFB131:
1117:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1118:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
1119:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Checks whether the specified SPIx/I2Sx flag is set or not.
1120:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
1121:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
1122:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_I2S_FLAG: specifies the SPI flag to check. 
1123:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be one of the following values:
1124:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_FLAG_TXE: Transmit buffer empty flag.
1125:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_FLAG_RXNE: Receive buffer not empty flag.
1126:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_FLAG_BSY: Busy flag.
1127:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_FLAG_OVR: Overrun flag.
1128:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_FLAG_MODF: Mode Fault flag.
1129:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_FLAG_CRCERR: CRC Error flag.
1130:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_FLAG_TIFRFE: Format Error.
1131:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg I2S_FLAG_UDR: Underrun Error flag.
1132:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
1133:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval The new state of SPI_I2S_FLAG (SET or RESET).
1134:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
1135:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
1136:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 26087              		.loc 1 1136 0
 26088              		.cfi_startproc
 26089              		@ args = 0, pretend = 0, frame = 16
 26090              		@ frame_needed = 1, uses_anonymous_args = 0
 26091              		@ link register save eliminated.
 26092 0000 80B4     		push	{r7}
 26093              	.LCFI63:
 26094              		.cfi_def_cfa_offset 4
 26095 0002 85B0     		sub	sp, sp, #20
 26096              	.LCFI64:
 26097              		.cfi_def_cfa_offset 24
 26098 0004 00AF     		add	r7, sp, #0
 26099              		.cfi_offset 7, -4
 26100              	.LCFI65:
 26101              		.cfi_def_cfa_register 7
 26102 0006 7860     		str	r0, [r7, #4]
 26103 0008 0B46     		mov	r3, r1
 26104 000a 7B80     		strh	r3, [r7, #2]	@ movhi
1137:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   FlagStatus bitstatus = RESET;
 26105              		.loc 1 1137 0
 26106 000c 4FF00003 		mov	r3, #0
 26107 0010 FB73     		strb	r3, [r7, #15]
1138:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
1139:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
1140:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
1141:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
1142:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the status of the specified SPI flag */
1143:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 26108              		.loc 1 1143 0
 26109 0012 7B68     		ldr	r3, [r7, #4]
 26110 0014 1B89     		ldrh	r3, [r3, #8]	@ movhi
 26111 0016 9AB2     		uxth	r2, r3
 26112 0018 7B88     		ldrh	r3, [r7, #2]	@ movhi
 26113 001a 02EA0303 		and	r3, r2, r3
 26114 001e 9BB2     		uxth	r3, r3
 26115 0020 002B     		cmp	r3, #0
 26116 0022 03D0     		beq	.L63
1144:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
1145:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* SPI_I2S_FLAG is set */
1146:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     bitstatus = SET;
 26117              		.loc 1 1146 0
 26118 0024 4FF00103 		mov	r3, #1
 26119 0028 FB73     		strb	r3, [r7, #15]
 26120 002a 02E0     		b	.L64
 26121              	.L63:
1147:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
1148:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
1149:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
1150:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* SPI_I2S_FLAG is reset */
1151:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     bitstatus = RESET;
 26122              		.loc 1 1151 0
 26123 002c 4FF00003 		mov	r3, #0
 26124 0030 FB73     		strb	r3, [r7, #15]
 26125              	.L64:
1152:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
1153:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Return the SPI_I2S_FLAG status */
1154:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   return  bitstatus;
 26126              		.loc 1 1154 0
 26127 0032 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1155:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 26128              		.loc 1 1155 0
 26129 0034 1846     		mov	r0, r3
 26130 0036 07F11407 		add	r7, r7, #20
 26131 003a BD46     		mov	sp, r7
 26132 003c 80BC     		pop	{r7}
 26133 003e 7047     		bx	lr
 26134              		.cfi_endproc
 26135              	.LFE131:
 26137              		.section	.text.SPI_I2S_ClearFlag,"ax",%progbits
 26138              		.align	2
 26139              		.global	SPI_I2S_ClearFlag
 26140              		.thumb
 26141              		.thumb_func
 26143              	SPI_I2S_ClearFlag:
 26144              	.LFB132:
1156:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1157:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
1158:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Clears the SPIx CRC Error (CRCERR) flag.
1159:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
1160:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
1161:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_I2S_FLAG: specifies the SPI flag to clear. 
1162:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This function clears only CRCERR flag.
1163:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_FLAG_CRCERR: CRC Error flag.  
1164:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *  
1165:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   OVR (OverRun error) flag is cleared by software sequence: a read 
1166:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          operation to SPI_DR register (SPI_I2S_ReceiveData()) followed by a read 
1167:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          operation to SPI_SR register (SPI_I2S_GetFlagStatus()).
1168:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   UDR (UnderRun error) flag is cleared by a read operation to 
1169:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          SPI_SR register (SPI_I2S_GetFlagStatus()).   
1170:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   MODF (Mode Fault) flag is cleared by software sequence: a read/write 
1171:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          operation to SPI_SR register (SPI_I2S_GetFlagStatus()) followed by a 
1172:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          write operation to SPI_CR1 register (SPI_Cmd() to enable the SPI).
1173:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *  
1174:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
1175:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
1176:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_I2S_ClearFlag(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
1177:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 26145              		.loc 1 1177 0
 26146              		.cfi_startproc
 26147              		@ args = 0, pretend = 0, frame = 8
 26148              		@ frame_needed = 1, uses_anonymous_args = 0
 26149              		@ link register save eliminated.
 26150 0000 80B4     		push	{r7}
 26151              	.LCFI66:
 26152              		.cfi_def_cfa_offset 4
 26153 0002 83B0     		sub	sp, sp, #12
 26154              	.LCFI67:
 26155              		.cfi_def_cfa_offset 16
 26156 0004 00AF     		add	r7, sp, #0
 26157              		.cfi_offset 7, -4
 26158              	.LCFI68:
 26159              		.cfi_def_cfa_register 7
 26160 0006 7860     		str	r0, [r7, #4]
 26161 0008 0B46     		mov	r3, r1
 26162 000a 7B80     		strh	r3, [r7, #2]	@ movhi
1178:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
1179:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
1180:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_I2S_CLEAR_FLAG(SPI_I2S_FLAG));
1181:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     
1182:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Clear the selected SPI CRC Error (CRCERR) flag */
1183:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
 26163              		.loc 1 1183 0
 26164 000c 7B88     		ldrh	r3, [r7, #2]	@ movhi
 26165 000e 6FEA0303 		mvn	r3, r3
 26166 0012 9AB2     		uxth	r2, r3
 26167 0014 7B68     		ldr	r3, [r7, #4]
 26168 0016 1A81     		strh	r2, [r3, #8]	@ movhi
1184:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 26169              		.loc 1 1184 0
 26170 0018 07F10C07 		add	r7, r7, #12
 26171 001c BD46     		mov	sp, r7
 26172 001e 80BC     		pop	{r7}
 26173 0020 7047     		bx	lr
 26174              		.cfi_endproc
 26175              	.LFE132:
 26177 0022 00BF     		.section	.text.SPI_I2S_GetITStatus,"ax",%progbits
 26178              		.align	2
 26179              		.global	SPI_I2S_GetITStatus
 26180              		.thumb
 26181              		.thumb_func
 26183              	SPI_I2S_GetITStatus:
 26184              	.LFB133:
1185:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1186:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
1187:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Checks whether the specified SPIx/I2Sx interrupt has occurred or not.
1188:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
1189:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.  
1190:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_I2S_IT: specifies the SPI interrupt source to check. 
1191:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be one of the following values:
1192:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_IT_TXE: Transmit buffer empty interrupt.
1193:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_IT_RXNE: Receive buffer not empty interrupt.
1194:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_IT_OVR: Overrun interrupt.
1195:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_IT_MODF: Mode Fault interrupt.
1196:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_IT_CRCERR: CRC Error interrupt.
1197:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg I2S_IT_UDR: Underrun interrupt.  
1198:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_IT_TIFRFE: Format Error interrupt.  
1199:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval The new state of SPI_I2S_IT (SET or RESET).
1200:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
1201:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
1202:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 26185              		.loc 1 1202 0
 26186              		.cfi_startproc
 26187              		@ args = 0, pretend = 0, frame = 16
 26188              		@ frame_needed = 1, uses_anonymous_args = 0
 26189              		@ link register save eliminated.
 26190 0000 80B4     		push	{r7}
 26191              	.LCFI69:
 26192              		.cfi_def_cfa_offset 4
 26193 0002 85B0     		sub	sp, sp, #20
 26194              	.LCFI70:
 26195              		.cfi_def_cfa_offset 24
 26196 0004 00AF     		add	r7, sp, #0
 26197              		.cfi_offset 7, -4
 26198              	.LCFI71:
 26199              		.cfi_def_cfa_register 7
 26200 0006 7860     		str	r0, [r7, #4]
 26201 0008 0B46     		mov	r3, r1
 26202 000a FB70     		strb	r3, [r7, #3]
1203:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   ITStatus bitstatus = RESET;
 26203              		.loc 1 1203 0
 26204 000c 4FF00003 		mov	r3, #0
 26205 0010 FB73     		strb	r3, [r7, #15]
1204:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   uint16_t itpos = 0, itmask = 0, enablestatus = 0;
 26206              		.loc 1 1204 0
 26207 0012 4FF00003 		mov	r3, #0
 26208 0016 BB81     		strh	r3, [r7, #12]	@ movhi
 26209 0018 4FF00003 		mov	r3, #0
 26210 001c 7B81     		strh	r3, [r7, #10]	@ movhi
 26211 001e 4FF00003 		mov	r3, #0
 26212 0022 3B81     		strh	r3, [r7, #8]	@ movhi
1205:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1206:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
1207:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
1208:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));
1209:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1210:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Get the SPI_I2S_IT index */
1211:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 26213              		.loc 1 1211 0
 26214 0024 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 26215 0026 03F00F03 		and	r3, r3, #15
 26216 002a 4FF00102 		mov	r2, #1
 26217 002e 02FA03F3 		lsl	r3, r2, r3
 26218 0032 BB81     		strh	r3, [r7, #12]	@ movhi
1212:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1213:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Get the SPI_I2S_IT IT mask */
1214:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   itmask = SPI_I2S_IT >> 4;
 26219              		.loc 1 1214 0
 26220 0034 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 26221 0036 4FEA1313 		lsr	r3, r3, #4
 26222 003a DBB2     		uxtb	r3, r3
 26223 003c 7B81     		strh	r3, [r7, #10]	@ movhi
1215:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1216:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Set the IT mask */
1217:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   itmask = 0x01 << itmask;
 26224              		.loc 1 1217 0
 26225 003e 7B89     		ldrh	r3, [r7, #10]
 26226 0040 4FF00102 		mov	r2, #1
 26227 0044 02FA03F3 		lsl	r3, r2, r3
 26228 0048 7B81     		strh	r3, [r7, #10]	@ movhi
1218:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1219:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Get the SPI_I2S_IT enable bit status */
1220:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   enablestatus = (SPIx->CR2 & itmask) ;
 26229              		.loc 1 1220 0
 26230 004a 7B68     		ldr	r3, [r7, #4]
 26231 004c 9B88     		ldrh	r3, [r3, #4]	@ movhi
 26232 004e 9AB2     		uxth	r2, r3
 26233 0050 7B89     		ldrh	r3, [r7, #10]	@ movhi
 26234 0052 02EA0303 		and	r3, r2, r3
 26235 0056 3B81     		strh	r3, [r7, #8]	@ movhi
1221:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1222:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the status of the specified SPI interrupt */
1223:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 26236              		.loc 1 1223 0
 26237 0058 7B68     		ldr	r3, [r7, #4]
 26238 005a 1B89     		ldrh	r3, [r3, #8]	@ movhi
 26239 005c 9AB2     		uxth	r2, r3
 26240 005e BB89     		ldrh	r3, [r7, #12]	@ movhi
 26241 0060 02EA0303 		and	r3, r2, r3
 26242 0064 9BB2     		uxth	r3, r3
 26243 0066 002B     		cmp	r3, #0
 26244 0068 06D0     		beq	.L67
 26245              		.loc 1 1223 0 is_stmt 0 discriminator 1
 26246 006a 3B89     		ldrh	r3, [r7, #8]
 26247 006c 002B     		cmp	r3, #0
 26248 006e 03D0     		beq	.L67
1224:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
1225:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* SPI_I2S_IT is set */
1226:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     bitstatus = SET;
 26249              		.loc 1 1226 0 is_stmt 1
 26250 0070 4FF00103 		mov	r3, #1
 26251 0074 FB73     		strb	r3, [r7, #15]
 26252 0076 02E0     		b	.L68
 26253              	.L67:
1227:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
1228:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
1229:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
1230:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* SPI_I2S_IT is reset */
1231:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     bitstatus = RESET;
 26254              		.loc 1 1231 0
 26255 0078 4FF00003 		mov	r3, #0
 26256 007c FB73     		strb	r3, [r7, #15]
 26257              	.L68:
1232:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
1233:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Return the SPI_I2S_IT status */
1234:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   return bitstatus;
 26258              		.loc 1 1234 0
 26259 007e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1235:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 26260              		.loc 1 1235 0
 26261 0080 1846     		mov	r0, r3
 26262 0082 07F11407 		add	r7, r7, #20
 26263 0086 BD46     		mov	sp, r7
 26264 0088 80BC     		pop	{r7}
 26265 008a 7047     		bx	lr
 26266              		.cfi_endproc
 26267              	.LFE133:
 26269              		.section	.text.SPI_I2S_ClearITPendingBit,"ax",%progbits
 26270              		.align	2
 26271              		.global	SPI_I2S_ClearITPendingBit
 26272              		.thumb
 26273              		.thumb_func
 26275              	SPI_I2S_ClearITPendingBit:
 26276              	.LFB134:
1236:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1237:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
1238:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Clears the SPIx CRC Error (CRCERR) interrupt pending bit.
1239:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
1240:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.  
1241:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_I2S_IT: specifies the SPI interrupt pending bit to clear.
1242:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         This function clears only CRCERR interrupt pending bit.   
1243:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_IT_CRCERR: CRC Error interrupt.
1244:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *   
1245:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   OVR (OverRun Error) interrupt pending bit is cleared by software 
1246:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          sequence: a read operation to SPI_DR register (SPI_I2S_ReceiveData()) 
1247:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          followed by a read operation to SPI_SR register (SPI_I2S_GetITStatus()).
1248:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   UDR (UnderRun Error) interrupt pending bit is cleared by a read 
1249:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          operation to SPI_SR register (SPI_I2S_GetITStatus()).   
1250:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   MODF (Mode Fault) interrupt pending bit is cleared by software sequence:
1251:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          a read/write operation to SPI_SR register (SPI_I2S_GetITStatus()) 
1252:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          followed by a write operation to SPI_CR1 register (SPI_Cmd() to enable 
1253:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          the SPI).
1254:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
1255:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
1256:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_I2S_ClearITPendingBit(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
1257:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 26277              		.loc 1 1257 0
 26278              		.cfi_startproc
 26279              		@ args = 0, pretend = 0, frame = 16
 26280              		@ frame_needed = 1, uses_anonymous_args = 0
 26281              		@ link register save eliminated.
 26282 0000 80B4     		push	{r7}
 26283              	.LCFI72:
 26284              		.cfi_def_cfa_offset 4
 26285 0002 85B0     		sub	sp, sp, #20
 26286              	.LCFI73:
 26287              		.cfi_def_cfa_offset 24
 26288 0004 00AF     		add	r7, sp, #0
 26289              		.cfi_offset 7, -4
 26290              	.LCFI74:
 26291              		.cfi_def_cfa_register 7
 26292 0006 7860     		str	r0, [r7, #4]
 26293 0008 0B46     		mov	r3, r1
 26294 000a FB70     		strb	r3, [r7, #3]
1258:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   uint16_t itpos = 0;
 26295              		.loc 1 1258 0
 26296 000c 4FF00003 		mov	r3, #0
 26297 0010 FB81     		strh	r3, [r7, #14]	@ movhi
1259:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
1260:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
1261:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_I2S_CLEAR_IT(SPI_I2S_IT));
1262:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1263:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Get the SPI_I2S IT index */
1264:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 26298              		.loc 1 1264 0
 26299 0012 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 26300 0014 03F00F03 		and	r3, r3, #15
 26301 0018 4FF00102 		mov	r2, #1
 26302 001c 02FA03F3 		lsl	r3, r2, r3
 26303 0020 FB81     		strh	r3, [r7, #14]	@ movhi
1265:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1266:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Clear the selected SPI CRC Error (CRCERR) interrupt pending bit */
1267:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->SR = (uint16_t)~itpos;
 26304              		.loc 1 1267 0
 26305 0022 FB89     		ldrh	r3, [r7, #14]	@ movhi
 26306 0024 6FEA0303 		mvn	r3, r3
 26307 0028 9AB2     		uxth	r2, r3
 26308 002a 7B68     		ldr	r3, [r7, #4]
 26309 002c 1A81     		strh	r2, [r3, #8]	@ movhi
1268:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 26310              		.loc 1 1268 0
 26311 002e 07F11407 		add	r7, r7, #20
 26312 0032 BD46     		mov	sp, r7
 26313 0034 80BC     		pop	{r7}
 26314 0036 7047     		bx	lr
 26315              		.cfi_endproc
 26316              	.LFE134:
 26318              		.text
 26319              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_spi.c
     /tmp/ccFXERKM.s:24593  .text.SPI_I2S_DeInit:00000000 $t
     /tmp/ccFXERKM.s:24598  .text.SPI_I2S_DeInit:00000000 SPI_I2S_DeInit
     /tmp/ccFXERKM.s:24667  .text.SPI_I2S_DeInit:00000074 $d
     /tmp/ccFXERKM.s:24674  .text.SPI_Init:00000000 $t
     /tmp/ccFXERKM.s:24679  .text.SPI_Init:00000000 SPI_Init
     /tmp/ccFXERKM.s:24781  .text.I2S_Init:00000000 $t
     /tmp/ccFXERKM.s:24786  .text.I2S_Init:00000000 I2S_Init
     /tmp/ccFXERKM.s:25038  .text.I2S_Init:000001f0 $d
     /tmp/ccFXERKM.s:25045  .text.SPI_StructInit:00000000 $t
     /tmp/ccFXERKM.s:25050  .text.SPI_StructInit:00000000 SPI_StructInit
     /tmp/ccFXERKM.s:25113  .text.I2S_StructInit:00000000 $t
     /tmp/ccFXERKM.s:25118  .text.I2S_StructInit:00000000 I2S_StructInit
     /tmp/ccFXERKM.s:25169  .text.SPI_Cmd:00000000 $t
     /tmp/ccFXERKM.s:25174  .text.SPI_Cmd:00000000 SPI_Cmd
     /tmp/ccFXERKM.s:25226  .text.I2S_Cmd:00000000 $t
     /tmp/ccFXERKM.s:25231  .text.I2S_Cmd:00000000 I2S_Cmd
     /tmp/ccFXERKM.s:25283  .text.SPI_DataSizeConfig:00000000 $t
     /tmp/ccFXERKM.s:25288  .text.SPI_DataSizeConfig:00000000 SPI_DataSizeConfig
     /tmp/ccFXERKM.s:25334  .text.SPI_BiDirectionalLineConfig:00000000 $t
     /tmp/ccFXERKM.s:25339  .text.SPI_BiDirectionalLineConfig:00000000 SPI_BiDirectionalLineConfig
     /tmp/ccFXERKM.s:25391  .text.SPI_NSSInternalSoftwareConfig:00000000 $t
     /tmp/ccFXERKM.s:25396  .text.SPI_NSSInternalSoftwareConfig:00000000 SPI_NSSInternalSoftwareConfig
     /tmp/ccFXERKM.s:25449  .text.SPI_SSOutputCmd:00000000 $t
     /tmp/ccFXERKM.s:25454  .text.SPI_SSOutputCmd:00000000 SPI_SSOutputCmd
     /tmp/ccFXERKM.s:25506  .text.SPI_TIModeCmd:00000000 $t
     /tmp/ccFXERKM.s:25511  .text.SPI_TIModeCmd:00000000 SPI_TIModeCmd
     /tmp/ccFXERKM.s:25563  .text.I2S_FullDuplexConfig:00000000 $t
     /tmp/ccFXERKM.s:25568  .text.I2S_FullDuplexConfig:00000000 I2S_FullDuplexConfig
     /tmp/ccFXERKM.s:25675  .text.SPI_I2S_ReceiveData:00000000 $t
     /tmp/ccFXERKM.s:25680  .text.SPI_I2S_ReceiveData:00000000 SPI_I2S_ReceiveData
     /tmp/ccFXERKM.s:25712  .text.SPI_I2S_SendData:00000000 $t
     /tmp/ccFXERKM.s:25717  .text.SPI_I2S_SendData:00000000 SPI_I2S_SendData
     /tmp/ccFXERKM.s:25750  .text.SPI_CalculateCRC:00000000 $t
     /tmp/ccFXERKM.s:25755  .text.SPI_CalculateCRC:00000000 SPI_CalculateCRC
     /tmp/ccFXERKM.s:25807  .text.SPI_TransmitCRC:00000000 $t
     /tmp/ccFXERKM.s:25812  .text.SPI_TransmitCRC:00000000 SPI_TransmitCRC
     /tmp/ccFXERKM.s:25847  .text.SPI_GetCRC:00000000 $t
     /tmp/ccFXERKM.s:25852  .text.SPI_GetCRC:00000000 SPI_GetCRC
     /tmp/ccFXERKM.s:25902  .text.SPI_GetCRCPolynomial:00000000 $t
     /tmp/ccFXERKM.s:25907  .text.SPI_GetCRCPolynomial:00000000 SPI_GetCRCPolynomial
     /tmp/ccFXERKM.s:25939  .text.SPI_I2S_DMACmd:00000000 $t
     /tmp/ccFXERKM.s:25944  .text.SPI_I2S_DMACmd:00000000 SPI_I2S_DMACmd
     /tmp/ccFXERKM.s:26002  .text.SPI_I2S_ITConfig:00000000 $t
     /tmp/ccFXERKM.s:26007  .text.SPI_I2S_ITConfig:00000000 SPI_I2S_ITConfig
     /tmp/ccFXERKM.s:26080  .text.SPI_I2S_GetFlagStatus:00000000 $t
     /tmp/ccFXERKM.s:26085  .text.SPI_I2S_GetFlagStatus:00000000 SPI_I2S_GetFlagStatus
     /tmp/ccFXERKM.s:26138  .text.SPI_I2S_ClearFlag:00000000 $t
     /tmp/ccFXERKM.s:26143  .text.SPI_I2S_ClearFlag:00000000 SPI_I2S_ClearFlag
     /tmp/ccFXERKM.s:26178  .text.SPI_I2S_GetITStatus:00000000 $t
     /tmp/ccFXERKM.s:26183  .text.SPI_I2S_GetITStatus:00000000 SPI_I2S_GetITStatus
     /tmp/ccFXERKM.s:26270  .text.SPI_I2S_ClearITPendingBit:00000000 $t
     /tmp/ccFXERKM.s:26275  .text.SPI_I2S_ClearITPendingBit:00000000 SPI_I2S_ClearITPendingBit
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
RCC_APB2PeriphResetCmd
RCC_APB1PeriphResetCmd
