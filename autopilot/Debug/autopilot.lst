
autopilot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d04  08000188  08000188  00008188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .data         0000011c  20000000  08005e8c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000016e4  2000011c  08005fa8  0001011c  2**2
                  ALLOC
  4 ._user_heap_stack 00000400  20001800  08005fa8  00011800  2**0
                  ALLOC
  5 .ARM.attributes 0000002f  00000000  00000000  0001011c  2**0
                  CONTENTS, READONLY
  6 .debug_abbrev 000049b5  00000000  00000000  0001014b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0001fc23  00000000  00000000  00014b00  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00013c9c  00000000  00000000  00034723  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_macinfo 0116a842  00000000  00000000  000483bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000a534  00000000  00000000  011b2c01  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubnames 0000447a  00000000  00000000  011bd135  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 00003dc3  00000000  00000000  011c15af  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001cd0  00000000  00000000  011c5378  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000019b8  00000000  00000000  011c7048  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000088ac  00000000  00000000  011c8a00  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000002a  00000000  00000000  011d12ac  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00005a04  00000000  00000000  011d12d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <LIS302DL_Init>:
static uint8_t LIS302DL_SendByte(uint8_t byte);
static uint8_t LIS302DL_GetByte(void);
static void LIS302DL_Read(uint8_t REG, uint8_t *DATA, uint8_t count);
static void LIS302DL_Write(uint8_t REG, uint8_t *DATA, uint8_t count);

void LIS302DL_Init() {
 8000188:	b580      	push	{r7, lr}
 800018a:	b082      	sub	sp, #8
 800018c:	af00      	add	r7, sp, #0
    GPIO_SetBits(GPIOE, GPIO_Pin_3);
 800018e:	480d      	ldr	r0, [pc, #52]	; (80001c4 <LIS302DL_Init+0x3c>)
 8000190:	f04f 0108 	mov.w	r1, #8
 8000194:	f004 ffb8 	bl	8005108 <GPIO_SetBits>
    uint8_t reg = 0x47;
 8000198:	f04f 0347 	mov.w	r3, #71	; 0x47
 800019c:	71fb      	strb	r3, [r7, #7]
    LIS302DL_Write(0x20, &reg, 1);
 800019e:	f107 0307 	add.w	r3, r7, #7
 80001a2:	f04f 0020 	mov.w	r0, #32
 80001a6:	4619      	mov	r1, r3
 80001a8:	f04f 0201 	mov.w	r2, #1
 80001ac:	f000 f8a6 	bl	80002fc <LIS302DL_Write>
    GPIO_ResetBits(GPIOE, GPIO_Pin_3);
 80001b0:	4804      	ldr	r0, [pc, #16]	; (80001c4 <LIS302DL_Init+0x3c>)
 80001b2:	f04f 0108 	mov.w	r1, #8
 80001b6:	f004 ffb5 	bl	8005124 <GPIO_ResetBits>
}
 80001ba:	f107 0708 	add.w	r7, r7, #8
 80001be:	46bd      	mov	sp, r7
 80001c0:	bd80      	pop	{r7, pc}
 80001c2:	bf00      	nop
 80001c4:	40021000 	.word	0x40021000

080001c8 <LIS302DL_ReadACCY>:
        *out = (int32_t) (72 * (int8_t) buffer[2 * i]);
        out++;
    }
}

void LIS302DL_ReadACCY(int8_t* out) {
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
    uint8_t buffer;
    LIS302DL_Read(0x2B, &buffer, 1);
 80001d0:	f107 030f 	add.w	r3, r7, #15
 80001d4:	f04f 002b 	mov.w	r0, #43	; 0x2b
 80001d8:	4619      	mov	r1, r3
 80001da:	f04f 0201 	mov.w	r2, #1
 80001de:	f000 f8bf 	bl	8000360 <LIS302DL_Read>

    *out = buffer;
 80001e2:	7bfb      	ldrb	r3, [r7, #15]
 80001e4:	b2da      	uxtb	r2, r3
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	701a      	strb	r2, [r3, #0]
}
 80001ea:	f107 0710 	add.w	r7, r7, #16
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bd80      	pop	{r7, pc}
 80001f2:	bf00      	nop

080001f4 <LIS302DL_ReadACCX>:


void LIS302DL_ReadACCX(int8_t* out) {
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b084      	sub	sp, #16
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	6078      	str	r0, [r7, #4]
    uint8_t buffer;
    LIS302DL_Read(0x29, &buffer, 1);
 80001fc:	f107 030f 	add.w	r3, r7, #15
 8000200:	f04f 0029 	mov.w	r0, #41	; 0x29
 8000204:	4619      	mov	r1, r3
 8000206:	f04f 0201 	mov.w	r2, #1
 800020a:	f000 f8a9 	bl	8000360 <LIS302DL_Read>

    *out = buffer;
 800020e:	7bfb      	ldrb	r3, [r7, #15]
 8000210:	b2da      	uxtb	r2, r3
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	701a      	strb	r2, [r3, #0]
}
 8000216:	f107 0710 	add.w	r7, r7, #16
 800021a:	46bd      	mov	sp, r7
 800021c:	bd80      	pop	{r7, pc}
 800021e:	bf00      	nop

08000220 <LIS302DL_getSatus>:

void LIS302DL_getSatus(uint8_t *out) {
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
    LIS302DL_Read(0x27, out, 1);
 8000228:	f04f 0027 	mov.w	r0, #39	; 0x27
 800022c:	6879      	ldr	r1, [r7, #4]
 800022e:	f04f 0201 	mov.w	r2, #1
 8000232:	f000 f895 	bl	8000360 <LIS302DL_Read>
}
 8000236:	f107 0708 	add.w	r7, r7, #8
 800023a:	46bd      	mov	sp, r7
 800023c:	bd80      	pop	{r7, pc}
 800023e:	bf00      	nop

08000240 <LIS302DL_SendByte>:

static uint8_t LIS302DL_SendByte(uint8_t byte) {
 8000240:	b580      	push	{r7, lr}
 8000242:	b084      	sub	sp, #16
 8000244:	af00      	add	r7, sp, #0
 8000246:	4603      	mov	r3, r0
 8000248:	71fb      	strb	r3, [r7, #7]
    uint32_t LIS302DLTimeout = LIS302DL_FLAG_TIMEOUT;
 800024a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800024e:	60fb      	str	r3, [r7, #12]

    while (SPI_I2S_GetFlagStatus(SPI1, SPI_FLAG_TXE) == RESET) {
 8000250:	e00e      	b.n	8000270 <LIS302DL_SendByte+0x30>
        if ((LIS302DLTimeout--) == 0)
 8000252:	68fb      	ldr	r3, [r7, #12]
 8000254:	2b00      	cmp	r3, #0
 8000256:	bf14      	ite	ne
 8000258:	2300      	movne	r3, #0
 800025a:	2301      	moveq	r3, #1
 800025c:	b2db      	uxtb	r3, r3
 800025e:	68fa      	ldr	r2, [r7, #12]
 8000260:	f102 32ff 	add.w	r2, r2, #4294967295
 8000264:	60fa      	str	r2, [r7, #12]
 8000266:	2b00      	cmp	r3, #0
 8000268:	d002      	beq.n	8000270 <LIS302DL_SendByte+0x30>
            return 0x00;
 800026a:	f04f 0300 	mov.w	r3, #0
 800026e:	e010      	b.n	8000292 <LIS302DL_SendByte+0x52>
}

static uint8_t LIS302DL_SendByte(uint8_t byte) {
    uint32_t LIS302DLTimeout = LIS302DL_FLAG_TIMEOUT;

    while (SPI_I2S_GetFlagStatus(SPI1, SPI_FLAG_TXE) == RESET) {
 8000270:	480a      	ldr	r0, [pc, #40]	; (800029c <LIS302DL_SendByte+0x5c>)
 8000272:	f04f 0102 	mov.w	r1, #2
 8000276:	f005 fa0b 	bl	8005690 <SPI_I2S_GetFlagStatus>
 800027a:	4603      	mov	r3, r0
 800027c:	2b00      	cmp	r3, #0
 800027e:	d0e8      	beq.n	8000252 <LIS302DL_SendByte+0x12>
        if ((LIS302DLTimeout--) == 0)
            return 0x00;
    }

    // Send a Byte through the SPI peripheral
    SPI_I2S_SendData(SPI1, byte);
 8000280:	79fb      	ldrb	r3, [r7, #7]
 8000282:	b29b      	uxth	r3, r3
 8000284:	4805      	ldr	r0, [pc, #20]	; (800029c <LIS302DL_SendByte+0x5c>)
 8000286:	4619      	mov	r1, r3
 8000288:	f005 f9f4 	bl	8005674 <SPI_I2S_SendData>

    return LIS302DL_GetByte();
 800028c:	f000 f808 	bl	80002a0 <LIS302DL_GetByte>
 8000290:	4603      	mov	r3, r0
}
 8000292:	4618      	mov	r0, r3
 8000294:	f107 0710 	add.w	r7, r7, #16
 8000298:	46bd      	mov	sp, r7
 800029a:	bd80      	pop	{r7, pc}
 800029c:	40013000 	.word	0x40013000

080002a0 <LIS302DL_GetByte>:

static uint8_t LIS302DL_GetByte() {
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b082      	sub	sp, #8
 80002a4:	af00      	add	r7, sp, #0
    uint32_t LIS302DLTimeout = LIS302DL_FLAG_TIMEOUT;
 80002a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002aa:	607b      	str	r3, [r7, #4]
    /* Wait to receive a Byte */
    LIS302DLTimeout = LIS302DL_FLAG_TIMEOUT;
 80002ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002b0:	607b      	str	r3, [r7, #4]
    while (SPI_I2S_GetFlagStatus(SPI1, SPI_FLAG_RXNE) == RESET) {
 80002b2:	e00e      	b.n	80002d2 <LIS302DL_GetByte+0x32>
        if ((LIS302DLTimeout--) == 0)
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	bf14      	ite	ne
 80002ba:	2300      	movne	r3, #0
 80002bc:	2301      	moveq	r3, #1
 80002be:	b2db      	uxtb	r3, r3
 80002c0:	687a      	ldr	r2, [r7, #4]
 80002c2:	f102 32ff 	add.w	r2, r2, #4294967295
 80002c6:	607a      	str	r2, [r7, #4]
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d002      	beq.n	80002d2 <LIS302DL_GetByte+0x32>
            return 0x00;
 80002cc:	f04f 0300 	mov.w	r3, #0
 80002d0:	e00c      	b.n	80002ec <LIS302DL_GetByte+0x4c>

static uint8_t LIS302DL_GetByte() {
    uint32_t LIS302DLTimeout = LIS302DL_FLAG_TIMEOUT;
    /* Wait to receive a Byte */
    LIS302DLTimeout = LIS302DL_FLAG_TIMEOUT;
    while (SPI_I2S_GetFlagStatus(SPI1, SPI_FLAG_RXNE) == RESET) {
 80002d2:	4809      	ldr	r0, [pc, #36]	; (80002f8 <LIS302DL_GetByte+0x58>)
 80002d4:	f04f 0101 	mov.w	r1, #1
 80002d8:	f005 f9da 	bl	8005690 <SPI_I2S_GetFlagStatus>
 80002dc:	4603      	mov	r3, r0
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d0e8      	beq.n	80002b4 <LIS302DL_GetByte+0x14>
        if ((LIS302DLTimeout--) == 0)
            return 0x00;
    }

    /* Return the Byte read from the SPI bus */
    return (uint8_t) SPI_I2S_ReceiveData(SPI1);
 80002e2:	4805      	ldr	r0, [pc, #20]	; (80002f8 <LIS302DL_GetByte+0x58>)
 80002e4:	f005 f9b8 	bl	8005658 <SPI_I2S_ReceiveData>
 80002e8:	4603      	mov	r3, r0
 80002ea:	b2db      	uxtb	r3, r3
}
 80002ec:	4618      	mov	r0, r3
 80002ee:	f107 0708 	add.w	r7, r7, #8
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bd80      	pop	{r7, pc}
 80002f6:	bf00      	nop
 80002f8:	40013000 	.word	0x40013000

080002fc <LIS302DL_Write>:

static void LIS302DL_Write(uint8_t REG, uint8_t *DATA, uint8_t count) {
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b086      	sub	sp, #24
 8000300:	af00      	add	r7, sp, #0
 8000302:	60b9      	str	r1, [r7, #8]
 8000304:	4613      	mov	r3, r2
 8000306:	4602      	mov	r2, r0
 8000308:	73fa      	strb	r2, [r7, #15]
 800030a:	71fb      	strb	r3, [r7, #7]
    GPIO_ResetBits(GPIOE, GPIO_Pin_3);
 800030c:	4813      	ldr	r0, [pc, #76]	; (800035c <LIS302DL_Write+0x60>)
 800030e:	f04f 0108 	mov.w	r1, #8
 8000312:	f004 ff07 	bl	8005124 <GPIO_ResetBits>
    LIS302DL_SendByte(REG);
 8000316:	7bfb      	ldrb	r3, [r7, #15]
 8000318:	4618      	mov	r0, r3
 800031a:	f7ff ff91 	bl	8000240 <LIS302DL_SendByte>
    for (int i = 0; i < count; i++) {
 800031e:	f04f 0300 	mov.w	r3, #0
 8000322:	617b      	str	r3, [r7, #20]
 8000324:	e00c      	b.n	8000340 <LIS302DL_Write+0x44>
        LIS302DL_SendByte(*DATA);
 8000326:	68bb      	ldr	r3, [r7, #8]
 8000328:	781b      	ldrb	r3, [r3, #0]
 800032a:	4618      	mov	r0, r3
 800032c:	f7ff ff88 	bl	8000240 <LIS302DL_SendByte>
        DATA++;
 8000330:	68bb      	ldr	r3, [r7, #8]
 8000332:	f103 0301 	add.w	r3, r3, #1
 8000336:	60bb      	str	r3, [r7, #8]
}

static void LIS302DL_Write(uint8_t REG, uint8_t *DATA, uint8_t count) {
    GPIO_ResetBits(GPIOE, GPIO_Pin_3);
    LIS302DL_SendByte(REG);
    for (int i = 0; i < count; i++) {
 8000338:	697b      	ldr	r3, [r7, #20]
 800033a:	f103 0301 	add.w	r3, r3, #1
 800033e:	617b      	str	r3, [r7, #20]
 8000340:	79fa      	ldrb	r2, [r7, #7]
 8000342:	697b      	ldr	r3, [r7, #20]
 8000344:	429a      	cmp	r2, r3
 8000346:	dcee      	bgt.n	8000326 <LIS302DL_Write+0x2a>
        LIS302DL_SendByte(*DATA);
        DATA++;
    }
    GPIO_SetBits(GPIOE, GPIO_Pin_3);
 8000348:	4804      	ldr	r0, [pc, #16]	; (800035c <LIS302DL_Write+0x60>)
 800034a:	f04f 0108 	mov.w	r1, #8
 800034e:	f004 fedb 	bl	8005108 <GPIO_SetBits>
}
 8000352:	f107 0718 	add.w	r7, r7, #24
 8000356:	46bd      	mov	sp, r7
 8000358:	bd80      	pop	{r7, pc}
 800035a:	bf00      	nop
 800035c:	40021000 	.word	0x40021000

08000360 <LIS302DL_Read>:

static void LIS302DL_Read(uint8_t REG, uint8_t *DATA, uint8_t count) {
 8000360:	b580      	push	{r7, lr}
 8000362:	b086      	sub	sp, #24
 8000364:	af00      	add	r7, sp, #0
 8000366:	60b9      	str	r1, [r7, #8]
 8000368:	4613      	mov	r3, r2
 800036a:	4602      	mov	r2, r0
 800036c:	73fa      	strb	r2, [r7, #15]
 800036e:	71fb      	strb	r3, [r7, #7]
    GPIO_ResetBits(GPIOE, GPIO_Pin_3);
 8000370:	481a      	ldr	r0, [pc, #104]	; (80003dc <LIS302DL_Read+0x7c>)
 8000372:	f04f 0108 	mov.w	r1, #8
 8000376:	f004 fed5 	bl	8005124 <GPIO_ResetBits>
    REG |= 0x80;
 800037a:	7bfb      	ldrb	r3, [r7, #15]
 800037c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000380:	73fb      	strb	r3, [r7, #15]
    if (count > 1) {
 8000382:	79fb      	ldrb	r3, [r7, #7]
 8000384:	2b01      	cmp	r3, #1
 8000386:	d903      	bls.n	8000390 <LIS302DL_Read+0x30>
        REG |= 0x40;
 8000388:	7bfb      	ldrb	r3, [r7, #15]
 800038a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800038e:	73fb      	strb	r3, [r7, #15]
    }
    LIS302DL_SendByte(REG);
 8000390:	7bfb      	ldrb	r3, [r7, #15]
 8000392:	4618      	mov	r0, r3
 8000394:	f7ff ff54 	bl	8000240 <LIS302DL_SendByte>
    for (uint8_t i = 0; i < count; i++) {
 8000398:	f04f 0300 	mov.w	r3, #0
 800039c:	75fb      	strb	r3, [r7, #23]
 800039e:	e00f      	b.n	80003c0 <LIS302DL_Read+0x60>
        *DATA = LIS302DL_SendByte((uint8_t) 0x00);
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	f7ff ff4c 	bl	8000240 <LIS302DL_SendByte>
 80003a8:	4603      	mov	r3, r0
 80003aa:	461a      	mov	r2, r3
 80003ac:	68bb      	ldr	r3, [r7, #8]
 80003ae:	701a      	strb	r2, [r3, #0]
        DATA++;
 80003b0:	68bb      	ldr	r3, [r7, #8]
 80003b2:	f103 0301 	add.w	r3, r3, #1
 80003b6:	60bb      	str	r3, [r7, #8]
    REG |= 0x80;
    if (count > 1) {
        REG |= 0x40;
    }
    LIS302DL_SendByte(REG);
    for (uint8_t i = 0; i < count; i++) {
 80003b8:	7dfb      	ldrb	r3, [r7, #23]
 80003ba:	f103 0301 	add.w	r3, r3, #1
 80003be:	75fb      	strb	r3, [r7, #23]
 80003c0:	7dfa      	ldrb	r2, [r7, #23]
 80003c2:	79fb      	ldrb	r3, [r7, #7]
 80003c4:	429a      	cmp	r2, r3
 80003c6:	d3eb      	bcc.n	80003a0 <LIS302DL_Read+0x40>
        *DATA = LIS302DL_SendByte((uint8_t) 0x00);
        DATA++;
    }

    GPIO_SetBits(GPIOE, GPIO_Pin_3);
 80003c8:	4804      	ldr	r0, [pc, #16]	; (80003dc <LIS302DL_Read+0x7c>)
 80003ca:	f04f 0108 	mov.w	r1, #8
 80003ce:	f004 fe9b 	bl	8005108 <GPIO_SetBits>
}
 80003d2:	f107 0718 	add.w	r7, r7, #24
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	bf00      	nop
 80003dc:	40021000 	.word	0x40021000

080003e0 <main>:
/**
 * @brief  Main program.
 * @param  None
 * @retval None
 */
int main(void) {
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b084      	sub	sp, #16
 80003e4:	af02      	add	r7, sp, #8
    Data_get = 0;
 80003e6:	4b1c      	ldr	r3, [pc, #112]	; (8000458 <main+0x78>)
 80003e8:	f04f 0200 	mov.w	r2, #0
 80003ec:	701a      	strb	r2, [r3, #0]
    uint32_t val = PWM_PERIOD;
 80003ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003f2:	607b      	str	r3, [r7, #4]

    PERIPH_Init_SysTick();
 80003f4:	f000 fabc 	bl	8000970 <PERIPH_Init_SysTick>
    PERIPH_Init_Leds();
 80003f8:	f000 f9fe 	bl	80007f8 <PERIPH_Init_Leds>
    PERIPH_Init_Timer();
 80003fc:	f000 fa3c 	bl	8000878 <PERIPH_Init_Timer>
    PERIPH_Init_PWM();
 8000400:	f000 fa70 	bl	80008e4 <PERIPH_Init_PWM>
    PERIPH_Init_Spi();
 8000404:	f000 f970 	bl	80006e8 <PERIPH_Init_Spi>
    LIS302DL_Init();
 8000408:	f7ff febe 	bl	8000188 <LIS302DL_Init>

    /* USB configuration */
    USBD_Init(&USB_OTG_dev, USB_OTG_FS_CORE_ID, &USR_desc, &USBD_CDC_cb, &USR_cb);
 800040c:	4b13      	ldr	r3, [pc, #76]	; (800045c <main+0x7c>)
 800040e:	9300      	str	r3, [sp, #0]
 8000410:	4813      	ldr	r0, [pc, #76]	; (8000460 <main+0x80>)
 8000412:	f04f 0101 	mov.w	r1, #1
 8000416:	4a13      	ldr	r2, [pc, #76]	; (8000464 <main+0x84>)
 8000418:	4b13      	ldr	r3, [pc, #76]	; (8000468 <main+0x88>)
 800041a:	f003 fab7 	bl	800398c <USBD_Init>

    while (1) {
        val = PWM_PERIOD - val;
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8000424:	607b      	str	r3, [r7, #4]
        TIM_SetCompare1(TIM4, val);
 8000426:	4811      	ldr	r0, [pc, #68]	; (800046c <main+0x8c>)
 8000428:	6879      	ldr	r1, [r7, #4]
 800042a:	f005 fc03 	bl	8005c34 <TIM_SetCompare1>

        if (USBD_USR_DEVICE_CONFIGURED == SET) {
 800042e:	4b10      	ldr	r3, [pc, #64]	; (8000470 <main+0x90>)
 8000430:	781b      	ldrb	r3, [r3, #0]
 8000432:	2b01      	cmp	r3, #1
 8000434:	d10b      	bne.n	800044e <main+0x6e>
            sendData();
 8000436:	f000 f835 	bl	80004a4 <sendData>

            if (Data_get == 1) {
 800043a:	4b07      	ldr	r3, [pc, #28]	; (8000458 <main+0x78>)
 800043c:	781b      	ldrb	r3, [r3, #0]
 800043e:	2b01      	cmp	r3, #1
 8000440:	d105      	bne.n	800044e <main+0x6e>
                getData();
 8000442:	f000 f889 	bl	8000558 <getData>
                Data_get = 0;
 8000446:	4b04      	ldr	r3, [pc, #16]	; (8000458 <main+0x78>)
 8000448:	f04f 0200 	mov.w	r2, #0
 800044c:	701a      	strb	r2, [r3, #0]
            }
        }

        Delay(10000);
 800044e:	f242 7010 	movw	r0, #10000	; 0x2710
 8000452:	f000 f80f 	bl	8000474 <Delay>
    }
 8000456:	e7e2      	b.n	800041e <main+0x3e>
 8000458:	20000148 	.word	0x20000148
 800045c:	2000004c 	.word	0x2000004c
 8000460:	2000014c 	.word	0x2000014c
 8000464:	20000018 	.word	0x20000018
 8000468:	200000e0 	.word	0x200000e0
 800046c:	40000800 	.word	0x40000800
 8000470:	20000149 	.word	0x20000149

08000474 <Delay>:
/**
 * @brief  Inserts a delay time.
 * @param  nTime: specifies the delay time length, in 10 ms.
 * @retval None
 */
static void Delay(__IO uint32_t nTime) {
 8000474:	b480      	push	{r7}
 8000476:	b083      	sub	sp, #12
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
    nTime += SysTime;
 800047c:	687a      	ldr	r2, [r7, #4]
 800047e:	4b08      	ldr	r3, [pc, #32]	; (80004a0 <Delay+0x2c>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	18d3      	adds	r3, r2, r3
 8000484:	607b      	str	r3, [r7, #4]

    while (nTime > SysTime) {
 8000486:	e000      	b.n	800048a <Delay+0x16>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000488:	bf00      	nop
 800048a:	687a      	ldr	r2, [r7, #4]
 800048c:	4b04      	ldr	r3, [pc, #16]	; (80004a0 <Delay+0x2c>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	429a      	cmp	r2, r3
 8000492:	d8f9      	bhi.n	8000488 <Delay+0x14>
        __NOP();
    }
}
 8000494:	f107 070c 	add.w	r7, r7, #12
 8000498:	46bd      	mov	sp, r7
 800049a:	bc80      	pop	{r7}
 800049c:	4770      	bx	lr
 800049e:	bf00      	nop
 80004a0:	20000f3c 	.word	0x20000f3c

080004a4 <sendData>:

static void sendData(void) {
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b094      	sub	sp, #80	; 0x50
 80004a8:	af00      	add	r7, sp, #0
    uint8_t buf[PROTOCOL_MAX_LEN];
    uint8_t status;
    int8_t acc;
    PROTOCOL_Protocol p;

    p.num = 2;
 80004aa:	f04f 0302 	mov.w	r3, #2
 80004ae:	607b      	str	r3, [r7, #4]
    p.framesLen = 0;
 80004b0:	f04f 0300 	mov.w	r3, #0
 80004b4:	603b      	str	r3, [r7, #0]

    LIS302DL_getSatus(&status);
 80004b6:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 80004ba:	4618      	mov	r0, r3
 80004bc:	f7ff feb0 	bl	8000220 <LIS302DL_getSatus>

    if ( status & 0x01) {
 80004c0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80004c4:	f003 0301 	and.w	r3, r3, #1
 80004c8:	b2db      	uxtb	r3, r3
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d012      	beq.n	80004f4 <sendData+0x50>
        LIS302DL_ReadACCX(&acc);
 80004ce:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 80004d2:	4618      	mov	r0, r3
 80004d4:	f7ff fe8e 	bl	80001f4 <LIS302DL_ReadACCX>
        p.frames[0].cmd = PROTOCOL_ANGEL_X;
 80004d8:	f04f 0305 	mov.w	r3, #5
 80004dc:	723b      	strb	r3, [r7, #8]
        p.frames[0].type = PROTOCOL_TYPE_BYTE;
 80004de:	f04f 0301 	mov.w	r3, #1
 80004e2:	727b      	strb	r3, [r7, #9]
        p.frames[0].bData = acc;
 80004e4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80004e8:	b2db      	uxtb	r3, r3
 80004ea:	72bb      	strb	r3, [r7, #10]
        p.framesLen++;
 80004ec:	683b      	ldr	r3, [r7, #0]
 80004ee:	f103 0301 	add.w	r3, r3, #1
 80004f2:	603b      	str	r3, [r7, #0]
    }
    if ( status & 0x02) {
 80004f4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80004f8:	f003 0302 	and.w	r3, r3, #2
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d012      	beq.n	8000526 <sendData+0x82>
        LIS302DL_ReadACCY(&acc);
 8000500:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 8000504:	4618      	mov	r0, r3
 8000506:	f7ff fe5f 	bl	80001c8 <LIS302DL_ReadACCY>
        p.frames[1].cmd = PROTOCOL_ANGEL_Y;
 800050a:	f04f 0306 	mov.w	r3, #6
 800050e:	743b      	strb	r3, [r7, #16]
        p.frames[1].type = PROTOCOL_TYPE_BYTE;
 8000510:	f04f 0301 	mov.w	r3, #1
 8000514:	747b      	strb	r3, [r7, #17]
        p.frames[1].bData = acc;
 8000516:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800051a:	b2db      	uxtb	r3, r3
 800051c:	74bb      	strb	r3, [r7, #18]
        p.framesLen++;
 800051e:	683b      	ldr	r3, [r7, #0]
 8000520:	f103 0301 	add.w	r3, r3, #1
 8000524:	603b      	str	r3, [r7, #0]
    }

    if (p.framesLen > 0) {
 8000526:	683b      	ldr	r3, [r7, #0]
 8000528:	2b00      	cmp	r3, #0
 800052a:	d00e      	beq.n	800054a <sendData+0xa6>
        uint32_t len = PROTOCOL_toByteArray(&p, buf);
 800052c:	463a      	mov	r2, r7
 800052e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000532:	4610      	mov	r0, r2
 8000534:	4619      	mov	r1, r3
 8000536:	f000 fa31 	bl	800099c <PROTOCOL_toByteArray>
 800053a:	64f8      	str	r0, [r7, #76]	; 0x4c
        APP_FOPS.pIf_DataTx(buf, len);
 800053c:	4b05      	ldr	r3, [pc, #20]	; (8000554 <sendData+0xb0>)
 800053e:	68db      	ldr	r3, [r3, #12]
 8000540:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000544:	4610      	mov	r0, r2
 8000546:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8000548:	4798      	blx	r3
    }
}
 800054a:	f107 0750 	add.w	r7, r7, #80	; 0x50
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	20000004 	.word	0x20000004

08000558 <getData>:

static void getData(void) {
 8000558:	b580      	push	{r7, lr}
 800055a:	b08c      	sub	sp, #48	; 0x30
 800055c:	af00      	add	r7, sp, #0
    PROTOCOL_Protocol p;
    PROTOCOL_parseProtocol(Data_buf, &p);
 800055e:	f107 0304 	add.w	r3, r7, #4
 8000562:	4834      	ldr	r0, [pc, #208]	; (8000634 <getData+0xdc>)
 8000564:	4619      	mov	r1, r3
 8000566:	f000 fa9d 	bl	8000aa4 <PROTOCOL_parseProtocol>
    for (int32_t i = 0; i < p.framesLen; i++) {
 800056a:	f04f 0300 	mov.w	r3, #0
 800056e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000570:	e058      	b.n	8000624 <getData+0xcc>
        switch (p.frames[i].cmd) {
 8000572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000574:	f103 0301 	add.w	r3, r3, #1
 8000578:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800057c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000580:	18d3      	adds	r3, r2, r3
 8000582:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8000586:	f103 33ff 	add.w	r3, r3, #4294967295
 800058a:	2b03      	cmp	r3, #3
 800058c:	d846      	bhi.n	800061c <getData+0xc4>
 800058e:	a201      	add	r2, pc, #4	; (adr r2, 8000594 <getData+0x3c>)
 8000590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000594:	080005a5 	.word	0x080005a5
 8000598:	080005c3 	.word	0x080005c3
 800059c:	080005e1 	.word	0x080005e1
 80005a0:	080005ff 	.word	0x080005ff
        case PROTOCOL_MOTOR_1:
            TIM_SetCompare1(TIM4, p.frames[i].iData);
 80005a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005a6:	f103 0301 	add.w	r3, r3, #1
 80005aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80005ae:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80005b2:	18d3      	adds	r3, r2, r3
 80005b4:	f853 3c28 	ldr.w	r3, [r3, #-40]
 80005b8:	481f      	ldr	r0, [pc, #124]	; (8000638 <getData+0xe0>)
 80005ba:	4619      	mov	r1, r3
 80005bc:	f005 fb3a 	bl	8005c34 <TIM_SetCompare1>
            break;
 80005c0:	e02c      	b.n	800061c <getData+0xc4>
        case PROTOCOL_MOTOR_2:
            TIM_SetCompare2(TIM4, p.frames[i].iData);
 80005c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005c4:	f103 0301 	add.w	r3, r3, #1
 80005c8:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80005cc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80005d0:	18d3      	adds	r3, r2, r3
 80005d2:	f853 3c28 	ldr.w	r3, [r3, #-40]
 80005d6:	4818      	ldr	r0, [pc, #96]	; (8000638 <getData+0xe0>)
 80005d8:	4619      	mov	r1, r3
 80005da:	f005 fb39 	bl	8005c50 <TIM_SetCompare2>
            break;
 80005de:	e01d      	b.n	800061c <getData+0xc4>
        case PROTOCOL_MOTOR_3:
            TIM_SetCompare3(TIM4, p.frames[i].iData);
 80005e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005e2:	f103 0301 	add.w	r3, r3, #1
 80005e6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80005ea:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80005ee:	18d3      	adds	r3, r2, r3
 80005f0:	f853 3c28 	ldr.w	r3, [r3, #-40]
 80005f4:	4810      	ldr	r0, [pc, #64]	; (8000638 <getData+0xe0>)
 80005f6:	4619      	mov	r1, r3
 80005f8:	f005 fb38 	bl	8005c6c <TIM_SetCompare3>
            break;
 80005fc:	e00e      	b.n	800061c <getData+0xc4>
        case PROTOCOL_MOTOR_4:
            TIM_SetCompare4(TIM4, p.frames[i].iData);
 80005fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000600:	f103 0301 	add.w	r3, r3, #1
 8000604:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000608:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800060c:	18d3      	adds	r3, r2, r3
 800060e:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8000612:	4809      	ldr	r0, [pc, #36]	; (8000638 <getData+0xe0>)
 8000614:	4619      	mov	r1, r3
 8000616:	f005 fb37 	bl	8005c88 <TIM_SetCompare4>
            break;
 800061a:	bf00      	nop
}

static void getData(void) {
    PROTOCOL_Protocol p;
    PROTOCOL_parseProtocol(Data_buf, &p);
    for (int32_t i = 0; i < p.framesLen; i++) {
 800061c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800061e:	f103 0301 	add.w	r3, r3, #1
 8000622:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000624:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	429a      	cmp	r2, r3
 800062a:	d3a2      	bcc.n	8000572 <getData+0x1a>
        case PROTOCOL_MOTOR_4:
            TIM_SetCompare4(TIM4, p.frames[i].iData);
            break;
        }
    }
}
 800062c:	f107 0730 	add.w	r7, r7, #48	; 0x30
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	2000073c 	.word	0x2000073c
 8000638:	40000800 	.word	0x40000800

0800063c <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
 8000642:	4603      	mov	r3, r0
 8000644:	6039      	str	r1, [r7, #0]
 8000646:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8000648:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800064c:	2b00      	cmp	r3, #0
 800064e:	da0d      	bge.n	800066c <NVIC_SetPriority+0x30>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000650:	490e      	ldr	r1, [pc, #56]	; (800068c <NVIC_SetPriority+0x50>)
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	f003 030f 	and.w	r3, r3, #15
 8000658:	f1a3 0304 	sub.w	r3, r3, #4
 800065c:	683a      	ldr	r2, [r7, #0]
 800065e:	b2d2      	uxtb	r2, r2
 8000660:	ea4f 1202 	mov.w	r2, r2, lsl #4
 8000664:	b2d2      	uxtb	r2, r2
 8000666:	18cb      	adds	r3, r1, r3
 8000668:	761a      	strb	r2, [r3, #24]
 800066a:	e00a      	b.n	8000682 <NVIC_SetPriority+0x46>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 800066c:	4908      	ldr	r1, [pc, #32]	; (8000690 <NVIC_SetPriority+0x54>)
 800066e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000672:	683a      	ldr	r2, [r7, #0]
 8000674:	b2d2      	uxtb	r2, r2
 8000676:	ea4f 1202 	mov.w	r2, r2, lsl #4
 800067a:	b2d2      	uxtb	r2, r2
 800067c:	18cb      	adds	r3, r1, r3
 800067e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000682:	f107 070c 	add.w	r7, r7, #12
 8000686:	46bd      	mov	sp, r7
 8000688:	bc80      	pop	{r7}
 800068a:	4770      	bx	lr
 800068c:	e000ed00 	.word	0xe000ed00
 8000690:	e000e100 	.word	0xe000e100

08000694 <SysTick_Config>:
    \param [in]  ticks  Number of ticks between two interrupts
    \return          0  Function succeeded
    \return          1  Function failed
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 800069c:	687a      	ldr	r2, [r7, #4]
 800069e:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80006a2:	429a      	cmp	r2, r3
 80006a4:	d902      	bls.n	80006ac <SysTick_Config+0x18>
 80006a6:	f04f 0301 	mov.w	r3, #1
 80006aa:	e016      	b.n	80006da <SysTick_Config+0x46>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 80006ac:	4b0d      	ldr	r3, [pc, #52]	; (80006e4 <SysTick_Config+0x50>)
 80006ae:	687a      	ldr	r2, [r7, #4]
 80006b0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80006b4:	f102 32ff 	add.w	r2, r2, #4294967295
 80006b8:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
 80006ba:	f04f 30ff 	mov.w	r0, #4294967295
 80006be:	f04f 010f 	mov.w	r1, #15
 80006c2:	f7ff ffbb 	bl	800063c <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 80006c6:	4b07      	ldr	r3, [pc, #28]	; (80006e4 <SysTick_Config+0x50>)
 80006c8:	f04f 0200 	mov.w	r2, #0
 80006cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006ce:	4b05      	ldr	r3, [pc, #20]	; (80006e4 <SysTick_Config+0x50>)
 80006d0:	f04f 0207 	mov.w	r2, #7
 80006d4:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 80006d6:	f04f 0300 	mov.w	r3, #0
}
 80006da:	4618      	mov	r0, r3
 80006dc:	f107 0708 	add.w	r7, r7, #8
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	e000e010 	.word	0xe000e010

080006e8 <PERIPH_Init_Spi>:
#include "stm32f4xx.h"

uint16_t PrescalerValue = 0;
extern __IO uint32_t SysTime;

void PERIPH_Init_Spi(void) {
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b088      	sub	sp, #32
 80006ec:	af00      	add	r7, sp, #0
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
 80006ee:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80006f2:	f04f 0101 	mov.w	r1, #1
 80006f6:	f004 fe9d 	bl	8005434 <RCC_APB2PeriphClockCmd>
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 80006fa:	f04f 0001 	mov.w	r0, #1
 80006fe:	f04f 0101 	mov.w	r1, #1
 8000702:	f004 fe31 	bl	8005368 <RCC_AHB1PeriphClockCmd>
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 8000706:	f04f 0010 	mov.w	r0, #16
 800070a:	f04f 0101 	mov.w	r1, #1
 800070e:	f004 fe2b 	bl	8005368 <RCC_AHB1PeriphClockCmd>

    GPIO_InitTypeDef GPIO_InitStruct;
    GPIO_StructInit(&GPIO_InitStruct);
 8000712:	f107 0318 	add.w	r3, r7, #24
 8000716:	4618      	mov	r0, r3
 8000718:	f004 fcd8 	bl	80050cc <GPIO_StructInit>
    GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 800071c:	f04f 0302 	mov.w	r3, #2
 8000720:	773b      	strb	r3, [r7, #28]
    GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8000722:	f04f 0300 	mov.w	r3, #0
 8000726:	77bb      	strb	r3, [r7, #30]
    GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_DOWN;
 8000728:	f04f 0302 	mov.w	r3, #2
 800072c:	77fb      	strb	r3, [r7, #31]
    GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 800072e:	f04f 0302 	mov.w	r3, #2
 8000732:	777b      	strb	r3, [r7, #29]
    GPIO_InitStruct.GPIO_Pin = GPIO_Pin_5 | GPIO_Pin_6 | GPIO_Pin_7;
 8000734:	f04f 03e0 	mov.w	r3, #224	; 0xe0
 8000738:	61bb      	str	r3, [r7, #24]
    GPIO_Init(GPIOA, &GPIO_InitStruct);
 800073a:	f107 0318 	add.w	r3, r7, #24
 800073e:	482b      	ldr	r0, [pc, #172]	; (80007ec <PERIPH_Init_Spi+0x104>)
 8000740:	4619      	mov	r1, r3
 8000742:	f004 fc1f 	bl	8004f84 <GPIO_Init>

    GPIO_PinAFConfig(GPIOA, GPIO_PinSource5, GPIO_AF_SPI1);
 8000746:	4829      	ldr	r0, [pc, #164]	; (80007ec <PERIPH_Init_Spi+0x104>)
 8000748:	f04f 0105 	mov.w	r1, #5
 800074c:	f04f 0205 	mov.w	r2, #5
 8000750:	f004 fcf6 	bl	8005140 <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOA, GPIO_PinSource6, GPIO_AF_SPI1);
 8000754:	4825      	ldr	r0, [pc, #148]	; (80007ec <PERIPH_Init_Spi+0x104>)
 8000756:	f04f 0106 	mov.w	r1, #6
 800075a:	f04f 0205 	mov.w	r2, #5
 800075e:	f004 fcef 	bl	8005140 <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOA, GPIO_PinSource7, GPIO_AF_SPI1);
 8000762:	4822      	ldr	r0, [pc, #136]	; (80007ec <PERIPH_Init_Spi+0x104>)
 8000764:	f04f 0107 	mov.w	r1, #7
 8000768:	f04f 0205 	mov.w	r2, #5
 800076c:	f004 fce8 	bl	8005140 <GPIO_PinAFConfig>

    GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
 8000770:	f04f 0301 	mov.w	r3, #1
 8000774:	773b      	strb	r3, [r7, #28]
    GPIO_InitStruct.GPIO_Pin = GPIO_Pin_3;
 8000776:	f04f 0308 	mov.w	r3, #8
 800077a:	61bb      	str	r3, [r7, #24]
    GPIO_Init(GPIOE, &GPIO_InitStruct);
 800077c:	f107 0318 	add.w	r3, r7, #24
 8000780:	481b      	ldr	r0, [pc, #108]	; (80007f0 <PERIPH_Init_Spi+0x108>)
 8000782:	4619      	mov	r1, r3
 8000784:	f004 fbfe 	bl	8004f84 <GPIO_Init>
    GPIO_SetBits(GPIOE, GPIO_Pin_3);
 8000788:	4819      	ldr	r0, [pc, #100]	; (80007f0 <PERIPH_Init_Spi+0x108>)
 800078a:	f04f 0108 	mov.w	r1, #8
 800078e:	f004 fcbb 	bl	8005108 <GPIO_SetBits>

    SPI_InitTypeDef SPI_InitStructure;
    SPI_I2S_DeInit(SPI1);
 8000792:	4818      	ldr	r0, [pc, #96]	; (80007f4 <PERIPH_Init_Spi+0x10c>)
 8000794:	f004 feb4 	bl	8005500 <SPI_I2S_DeInit>
    SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8000798:	f04f 0300 	mov.w	r3, #0
 800079c:	80bb      	strh	r3, [r7, #4]
    SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
 800079e:	f04f 0300 	mov.w	r3, #0
 80007a2:	813b      	strh	r3, [r7, #8]
    SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
 80007a4:	f04f 0300 	mov.w	r3, #0
 80007a8:	817b      	strh	r3, [r7, #10]
    SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
 80007aa:	f04f 0300 	mov.w	r3, #0
 80007ae:	81bb      	strh	r3, [r7, #12]
    SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 80007b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007b4:	81fb      	strh	r3, [r7, #14]
    SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_4;
 80007b6:	f04f 0308 	mov.w	r3, #8
 80007ba:	823b      	strh	r3, [r7, #16]
    SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
 80007bc:	f04f 0300 	mov.w	r3, #0
 80007c0:	827b      	strh	r3, [r7, #18]
    SPI_InitStructure.SPI_CRCPolynomial = 7;
 80007c2:	f04f 0307 	mov.w	r3, #7
 80007c6:	82bb      	strh	r3, [r7, #20]
    SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 80007c8:	f44f 7382 	mov.w	r3, #260	; 0x104
 80007cc:	80fb      	strh	r3, [r7, #6]
    SPI_Init(SPI1, &SPI_InitStructure);
 80007ce:	f107 0304 	add.w	r3, r7, #4
 80007d2:	4808      	ldr	r0, [pc, #32]	; (80007f4 <PERIPH_Init_Spi+0x10c>)
 80007d4:	4619      	mov	r1, r3
 80007d6:	f004 fed3 	bl	8005580 <SPI_Init>

    SPI_Cmd(SPI1, ENABLE);
 80007da:	4806      	ldr	r0, [pc, #24]	; (80007f4 <PERIPH_Init_Spi+0x10c>)
 80007dc:	f04f 0101 	mov.w	r1, #1
 80007e0:	f004 ff1a 	bl	8005618 <SPI_Cmd>
}
 80007e4:	f107 0720 	add.w	r7, r7, #32
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	40020000 	.word	0x40020000
 80007f0:	40021000 	.word	0x40021000
 80007f4:	40013000 	.word	0x40013000

080007f8 <PERIPH_Init_Leds>:

void PERIPH_Init_Leds() {
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 80007fe:	f04f 0008 	mov.w	r0, #8
 8000802:	f04f 0101 	mov.w	r1, #1
 8000806:	f004 fdaf 	bl	8005368 <RCC_AHB1PeriphClockCmd>

    GPIO_InitStructure.GPIO_Pin = LEDS;
 800080a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800080e:	603b      	str	r3, [r7, #0]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8000810:	f04f 0302 	mov.w	r3, #2
 8000814:	713b      	strb	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8000816:	f04f 0303 	mov.w	r3, #3
 800081a:	717b      	strb	r3, [r7, #5]
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800081c:	f04f 0300 	mov.w	r3, #0
 8000820:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8000822:	f04f 0301 	mov.w	r3, #1
 8000826:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOD, &GPIO_InitStructure);
 8000828:	463b      	mov	r3, r7
 800082a:	4812      	ldr	r0, [pc, #72]	; (8000874 <PERIPH_Init_Leds+0x7c>)
 800082c:	4619      	mov	r1, r3
 800082e:	f004 fba9 	bl	8004f84 <GPIO_Init>

    GPIO_PinAFConfig(GPIOD, GPIO_PinSource12, GPIO_AF_TIM4);
 8000832:	4810      	ldr	r0, [pc, #64]	; (8000874 <PERIPH_Init_Leds+0x7c>)
 8000834:	f04f 010c 	mov.w	r1, #12
 8000838:	f04f 0202 	mov.w	r2, #2
 800083c:	f004 fc80 	bl	8005140 <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOD, GPIO_PinSource13, GPIO_AF_TIM4);
 8000840:	480c      	ldr	r0, [pc, #48]	; (8000874 <PERIPH_Init_Leds+0x7c>)
 8000842:	f04f 010d 	mov.w	r1, #13
 8000846:	f04f 0202 	mov.w	r2, #2
 800084a:	f004 fc79 	bl	8005140 <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOD, GPIO_PinSource14, GPIO_AF_TIM4);
 800084e:	4809      	ldr	r0, [pc, #36]	; (8000874 <PERIPH_Init_Leds+0x7c>)
 8000850:	f04f 010e 	mov.w	r1, #14
 8000854:	f04f 0202 	mov.w	r2, #2
 8000858:	f004 fc72 	bl	8005140 <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOD, GPIO_PinSource15, GPIO_AF_TIM4);
 800085c:	4805      	ldr	r0, [pc, #20]	; (8000874 <PERIPH_Init_Leds+0x7c>)
 800085e:	f04f 010f 	mov.w	r1, #15
 8000862:	f04f 0202 	mov.w	r2, #2
 8000866:	f004 fc6b 	bl	8005140 <GPIO_PinAFConfig>
}
 800086a:	f107 0708 	add.w	r7, r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	40020c00 	.word	0x40020c00

08000878 <PERIPH_Init_Timer>:

void PERIPH_Init_Timer() {
 8000878:	b580      	push	{r7, lr}
 800087a:	b084      	sub	sp, #16
 800087c:	af00      	add	r7, sp, #0
    SysTime = 0;
 800087e:	4b15      	ldr	r3, [pc, #84]	; (80008d4 <PERIPH_Init_Timer+0x5c>)
 8000880:	f04f 0200 	mov.w	r2, #0
 8000884:	601a      	str	r2, [r3, #0]

    /* TIM4 clock enable */
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
 8000886:	f04f 0004 	mov.w	r0, #4
 800088a:	f04f 0101 	mov.w	r1, #1
 800088e:	f004 fdaf 	bl	80053f0 <RCC_APB1PeriphClockCmd>

    /* Compute the prescaler value */
    u32 PrescalerValue = (uint16_t) ((SystemCoreClock / 2) / 21000000) - 1;
 8000892:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <PERIPH_Init_Timer+0x60>)
 8000894:	681a      	ldr	r2, [r3, #0]
 8000896:	4b11      	ldr	r3, [pc, #68]	; (80008dc <PERIPH_Init_Timer+0x64>)
 8000898:	fba3 1302 	umull	r1, r3, r3, r2
 800089c:	ea4f 6313 	mov.w	r3, r3, lsr #24
 80008a0:	b29b      	uxth	r3, r3
 80008a2:	f103 33ff 	add.w	r3, r3, #4294967295
 80008a6:	60fb      	str	r3, [r7, #12]

    TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
    /* Time base configuration */
    TIM_TimeBaseStructure.TIM_Period = PWM_PERIOD;
 80008a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ac:	607b      	str	r3, [r7, #4]
    TIM_TimeBaseStructure.TIM_Prescaler = PrescalerValue;
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	b29b      	uxth	r3, r3
 80008b2:	803b      	strh	r3, [r7, #0]
    TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 80008b4:	f04f 0300 	mov.w	r3, #0
 80008b8:	813b      	strh	r3, [r7, #8]
    TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 80008ba:	f04f 0300 	mov.w	r3, #0
 80008be:	807b      	strh	r3, [r7, #2]

    TIM_TimeBaseInit(TIM4, &TIM_TimeBaseStructure);
 80008c0:	463b      	mov	r3, r7
 80008c2:	4807      	ldr	r0, [pc, #28]	; (80008e0 <PERIPH_Init_Timer+0x68>)
 80008c4:	4619      	mov	r1, r3
 80008c6:	f004 ff03 	bl	80056d0 <TIM_TimeBaseInit>
}
 80008ca:	f107 0710 	add.w	r7, r7, #16
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	20000f3c 	.word	0x20000f3c
 80008d8:	20000000 	.word	0x20000000
 80008dc:	6642d929 	.word	0x6642d929
 80008e0:	40000800 	.word	0x40000800

080008e4 <PERIPH_Init_PWM>:

void PERIPH_Init_PWM() {
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b086      	sub	sp, #24
 80008e8:	af00      	add	r7, sp, #0
    TIM_OCInitTypeDef TIM_OCInitStructure;

    TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 80008ea:	f04f 0360 	mov.w	r3, #96	; 0x60
 80008ee:	80bb      	strh	r3, [r7, #4]
    TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 80008f0:	f04f 0301 	mov.w	r3, #1
 80008f4:	80fb      	strh	r3, [r7, #6]
    TIM_OCInitStructure.TIM_Pulse = 0;
 80008f6:	f04f 0300 	mov.w	r3, #0
 80008fa:	60fb      	str	r3, [r7, #12]
    TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 80008fc:	f04f 0300 	mov.w	r3, #0
 8000900:	823b      	strh	r3, [r7, #16]

    /* PWM1 Mode configuration: Channel1 (GPIOD Pin 12)*/
    TIM_OC1Init(TIM4, &TIM_OCInitStructure);
 8000902:	f107 0304 	add.w	r3, r7, #4
 8000906:	4819      	ldr	r0, [pc, #100]	; (800096c <PERIPH_Init_PWM+0x88>)
 8000908:	4619      	mov	r1, r3
 800090a:	f004 ff6f 	bl	80057ec <TIM_OC1Init>
    TIM_OC1PreloadConfig(TIM4, TIM_OCPreload_Enable);
 800090e:	4817      	ldr	r0, [pc, #92]	; (800096c <PERIPH_Init_PWM+0x88>)
 8000910:	f04f 0108 	mov.w	r1, #8
 8000914:	f005 f9c6 	bl	8005ca4 <TIM_OC1PreloadConfig>

    /* PWM1 Mode configuration: Channel2 (GPIOD Pin 13)*/
    TIM_OC2Init(TIM4, &TIM_OCInitStructure);
 8000918:	f107 0304 	add.w	r3, r7, #4
 800091c:	4813      	ldr	r0, [pc, #76]	; (800096c <PERIPH_Init_PWM+0x88>)
 800091e:	4619      	mov	r1, r3
 8000920:	f004 ffe8 	bl	80058f4 <TIM_OC2Init>
    TIM_OC2PreloadConfig(TIM4, TIM_OCPreload_Enable);
 8000924:	4811      	ldr	r0, [pc, #68]	; (800096c <PERIPH_Init_PWM+0x88>)
 8000926:	f04f 0108 	mov.w	r1, #8
 800092a:	f005 f9d9 	bl	8005ce0 <TIM_OC2PreloadConfig>

    /* PWM1 Mode configuration: Channel2 (GPIOD Pin 14)*/
    TIM_OC3Init(TIM4, &TIM_OCInitStructure);
 800092e:	f107 0304 	add.w	r3, r7, #4
 8000932:	480e      	ldr	r0, [pc, #56]	; (800096c <PERIPH_Init_PWM+0x88>)
 8000934:	4619      	mov	r1, r3
 8000936:	f005 f875 	bl	8005a24 <TIM_OC3Init>
    TIM_OC3PreloadConfig(TIM4, TIM_OCPreload_Enable);
 800093a:	480c      	ldr	r0, [pc, #48]	; (800096c <PERIPH_Init_PWM+0x88>)
 800093c:	f04f 0108 	mov.w	r1, #8
 8000940:	f005 f9ee 	bl	8005d20 <TIM_OC3PreloadConfig>

    /* PWM1 Mode configuration: Channel4 (GPIOD Pin 15)*/
    TIM_OC4Init(TIM4, &TIM_OCInitStructure);
 8000944:	f107 0304 	add.w	r3, r7, #4
 8000948:	4808      	ldr	r0, [pc, #32]	; (800096c <PERIPH_Init_PWM+0x88>)
 800094a:	4619      	mov	r1, r3
 800094c:	f005 f900 	bl	8005b50 <TIM_OC4Init>
    TIM_OC4PreloadConfig(TIM4, TIM_OCPreload_Enable);
 8000950:	4806      	ldr	r0, [pc, #24]	; (800096c <PERIPH_Init_PWM+0x88>)
 8000952:	f04f 0108 	mov.w	r1, #8
 8000956:	f005 fa01 	bl	8005d5c <TIM_OC4PreloadConfig>

    TIM_Cmd(TIM4, ENABLE);
 800095a:	4804      	ldr	r0, [pc, #16]	; (800096c <PERIPH_Init_PWM+0x88>)
 800095c:	f04f 0101 	mov.w	r1, #1
 8000960:	f004 ff24 	bl	80057ac <TIM_Cmd>
}
 8000964:	f107 0718 	add.w	r7, r7, #24
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	40000800 	.word	0x40000800

08000970 <PERIPH_Init_SysTick>:

void PERIPH_Init_SysTick(void) {
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0
    RCC_ClocksTypeDef RCC_Clocks;
    /* SysTick end of count event each 1ms */
    RCC_GetClocksFreq(&RCC_Clocks);
 8000976:	463b      	mov	r3, r7
 8000978:	4618      	mov	r0, r3
 800097a:	f004 fc37 	bl	80051ec <RCC_GetClocksFreq>
    SysTick_Config(RCC_Clocks.HCLK_Frequency / 1000000);
 800097e:	687a      	ldr	r2, [r7, #4]
 8000980:	4b05      	ldr	r3, [pc, #20]	; (8000998 <PERIPH_Init_SysTick+0x28>)
 8000982:	fba3 1302 	umull	r1, r3, r3, r2
 8000986:	ea4f 4393 	mov.w	r3, r3, lsr #18
 800098a:	4618      	mov	r0, r3
 800098c:	f7ff fe82 	bl	8000694 <SysTick_Config>
}
 8000990:	f107 0710 	add.w	r7, r7, #16
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	431bde83 	.word	0x431bde83

0800099c <PROTOCOL_toByteArray>:

static void PROTOCOL_parseFrame(uint8_t *buf, PROTOCOL_Frame *f);
static uint32_t PROTOCOL_parseInt(uint8_t *mess);
static void PROTOCOL_intToByteArray(uint32_t val, uint8_t *arr);

uint32_t PROTOCOL_toByteArray(PROTOCOL_Protocol *p, uint8_t *buf) {
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
 80009a4:	6039      	str	r1, [r7, #0]
    uint32_t bufLen = 12;
 80009a6:	f04f 030c 	mov.w	r3, #12
 80009aa:	60fb      	str	r3, [r7, #12]
    PROTOCOL_intToByteArray(p->num, &buf[8]);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	685a      	ldr	r2, [r3, #4]
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	f103 0308 	add.w	r3, r3, #8
 80009b6:	4610      	mov	r0, r2
 80009b8:	4619      	mov	r1, r3
 80009ba:	f000 f925 	bl	8000c08 <PROTOCOL_intToByteArray>

    for (uint8_t i = 0; i < 2; i++) {
 80009be:	f04f 0300 	mov.w	r3, #0
 80009c2:	72fb      	strb	r3, [r7, #11]
 80009c4:	e059      	b.n	8000a7a <PROTOCOL_toByteArray+0xde>
        buf[bufLen] = p->frames[i].cmd;
 80009c6:	683a      	ldr	r2, [r7, #0]
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	18d3      	adds	r3, r2, r3
 80009cc:	7af9      	ldrb	r1, [r7, #11]
 80009ce:	687a      	ldr	r2, [r7, #4]
 80009d0:	f101 0101 	add.w	r1, r1, #1
 80009d4:	f812 2031 	ldrb.w	r2, [r2, r1, lsl #3]
 80009d8:	701a      	strb	r2, [r3, #0]
        bufLen++;
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	f103 0301 	add.w	r3, r3, #1
 80009e0:	60fb      	str	r3, [r7, #12]
        buf[bufLen] = p->frames[i].type;
 80009e2:	683a      	ldr	r2, [r7, #0]
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	18d2      	adds	r2, r2, r3
 80009e8:	7afb      	ldrb	r3, [r7, #11]
 80009ea:	6879      	ldr	r1, [r7, #4]
 80009ec:	f103 0301 	add.w	r3, r3, #1
 80009f0:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009f4:	18cb      	adds	r3, r1, r3
 80009f6:	785b      	ldrb	r3, [r3, #1]
 80009f8:	7013      	strb	r3, [r2, #0]
        bufLen++;
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	f103 0301 	add.w	r3, r3, #1
 8000a00:	60fb      	str	r3, [r7, #12]
        if (p->frames[i].type == PROTOCOL_TYPE_BYTE) {
 8000a02:	7afb      	ldrb	r3, [r7, #11]
 8000a04:	687a      	ldr	r2, [r7, #4]
 8000a06:	f103 0301 	add.w	r3, r3, #1
 8000a0a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a0e:	18d3      	adds	r3, r2, r3
 8000a10:	785b      	ldrb	r3, [r3, #1]
 8000a12:	2b01      	cmp	r3, #1
 8000a14:	d110      	bne.n	8000a38 <PROTOCOL_toByteArray+0x9c>
            buf[bufLen] = p->frames[i].bData;
 8000a16:	683a      	ldr	r2, [r7, #0]
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	18d2      	adds	r2, r2, r3
 8000a1c:	7afb      	ldrb	r3, [r7, #11]
 8000a1e:	6879      	ldr	r1, [r7, #4]
 8000a20:	f103 0301 	add.w	r3, r3, #1
 8000a24:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a28:	18cb      	adds	r3, r1, r3
 8000a2a:	789b      	ldrb	r3, [r3, #2]
 8000a2c:	7013      	strb	r3, [r2, #0]
            bufLen++;
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	f103 0301 	add.w	r3, r3, #1
 8000a34:	60fb      	str	r3, [r7, #12]
 8000a36:	e01c      	b.n	8000a72 <PROTOCOL_toByteArray+0xd6>
        } else if (p->frames[i].type == PROTOCOL_TYPE_INT) {
 8000a38:	7afb      	ldrb	r3, [r7, #11]
 8000a3a:	687a      	ldr	r2, [r7, #4]
 8000a3c:	f103 0301 	add.w	r3, r3, #1
 8000a40:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a44:	18d3      	adds	r3, r2, r3
 8000a46:	785b      	ldrb	r3, [r3, #1]
 8000a48:	2b02      	cmp	r3, #2
 8000a4a:	d112      	bne.n	8000a72 <PROTOCOL_toByteArray+0xd6>
            PROTOCOL_intToByteArray(p->frames[i].iData, &buf[bufLen]);
 8000a4c:	7afb      	ldrb	r3, [r7, #11]
 8000a4e:	687a      	ldr	r2, [r7, #4]
 8000a50:	f103 0301 	add.w	r3, r3, #1
 8000a54:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a58:	18d3      	adds	r3, r2, r3
 8000a5a:	685a      	ldr	r2, [r3, #4]
 8000a5c:	6839      	ldr	r1, [r7, #0]
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	18cb      	adds	r3, r1, r3
 8000a62:	4610      	mov	r0, r2
 8000a64:	4619      	mov	r1, r3
 8000a66:	f000 f8cf 	bl	8000c08 <PROTOCOL_intToByteArray>
            bufLen += 4;
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	f103 0304 	add.w	r3, r3, #4
 8000a70:	60fb      	str	r3, [r7, #12]

uint32_t PROTOCOL_toByteArray(PROTOCOL_Protocol *p, uint8_t *buf) {
    uint32_t bufLen = 12;
    PROTOCOL_intToByteArray(p->num, &buf[8]);

    for (uint8_t i = 0; i < 2; i++) {
 8000a72:	7afb      	ldrb	r3, [r7, #11]
 8000a74:	f103 0301 	add.w	r3, r3, #1
 8000a78:	72fb      	strb	r3, [r7, #11]
 8000a7a:	7afb      	ldrb	r3, [r7, #11]
 8000a7c:	2b01      	cmp	r3, #1
 8000a7e:	d9a2      	bls.n	80009c6 <PROTOCOL_toByteArray+0x2a>
            PROTOCOL_intToByteArray(p->frames[i].iData, &buf[bufLen]);
            bufLen += 4;
        }
    }

    PROTOCOL_intToByteArray(bufLen, &buf[4]);
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	f103 0304 	add.w	r3, r3, #4
 8000a86:	68f8      	ldr	r0, [r7, #12]
 8000a88:	4619      	mov	r1, r3
 8000a8a:	f000 f8bd 	bl	8000c08 <PROTOCOL_intToByteArray>
    PROTOCOL_intToByteArray(0x55555555, &buf[0]);
 8000a8e:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
 8000a92:	6839      	ldr	r1, [r7, #0]
 8000a94:	f000 f8b8 	bl	8000c08 <PROTOCOL_intToByteArray>
    return bufLen;
 8000a98:	68fb      	ldr	r3, [r7, #12]
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f107 0710 	add.w	r7, r7, #16
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}

08000aa4 <PROTOCOL_parseProtocol>:

// TODO : fixed parse protocol. Added check control frame
void PROTOCOL_parseProtocol(uint8_t *buf, PROTOCOL_Protocol *p) {
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b086      	sub	sp, #24
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
 8000aac:	6039      	str	r1, [r7, #0]
    uint32_t bufLen = PROTOCOL_parseInt(&buf[0]);
 8000aae:	6878      	ldr	r0, [r7, #4]
 8000ab0:	f000 f87e 	bl	8000bb0 <PROTOCOL_parseInt>
 8000ab4:	6138      	str	r0, [r7, #16]
    p->framesLen = 0;
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	f04f 0200 	mov.w	r2, #0
 8000abc:	601a      	str	r2, [r3, #0]
    if (bufLen <= 0 || bufLen > PROTOCOL_MAX_LEN) {
 8000abe:	693b      	ldr	r3, [r7, #16]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d041      	beq.n	8000b48 <PROTOCOL_parseProtocol+0xa4>
 8000ac4:	693b      	ldr	r3, [r7, #16]
 8000ac6:	2b20      	cmp	r3, #32
 8000ac8:	d840      	bhi.n	8000b4c <PROTOCOL_parseProtocol+0xa8>
        return;
    }
    p->num = PROTOCOL_parseInt(&buf[4]);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	f103 0304 	add.w	r3, r3, #4
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f000 f86d 	bl	8000bb0 <PROTOCOL_parseInt>
 8000ad6:	4602      	mov	r2, r0
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	605a      	str	r2, [r3, #4]
    PROTOCOL_Frame f;
    for (uint32_t i = 8; i < bufLen;) {
 8000adc:	f04f 0308 	mov.w	r3, #8
 8000ae0:	617b      	str	r3, [r7, #20]
 8000ae2:	e02c      	b.n	8000b3e <PROTOCOL_parseProtocol+0x9a>
        PROTOCOL_parseFrame(&buf[i], &f);
 8000ae4:	687a      	ldr	r2, [r7, #4]
 8000ae6:	697b      	ldr	r3, [r7, #20]
 8000ae8:	18d2      	adds	r2, r2, r3
 8000aea:	f107 0308 	add.w	r3, r7, #8
 8000aee:	4610      	mov	r0, r2
 8000af0:	4619      	mov	r1, r3
 8000af2:	f000 f831 	bl	8000b58 <PROTOCOL_parseFrame>
        switch (f.type) {
 8000af6:	7a7b      	ldrb	r3, [r7, #9]
 8000af8:	2b01      	cmp	r3, #1
 8000afa:	d002      	beq.n	8000b02 <PROTOCOL_parseProtocol+0x5e>
 8000afc:	2b02      	cmp	r3, #2
 8000afe:	d005      	beq.n	8000b0c <PROTOCOL_parseProtocol+0x68>
            break;
        case PROTOCOL_TYPE_INT:
            i += 6;
            break;
        default:
            return;
 8000b00:	e025      	b.n	8000b4e <PROTOCOL_parseProtocol+0xaa>
    PROTOCOL_Frame f;
    for (uint32_t i = 8; i < bufLen;) {
        PROTOCOL_parseFrame(&buf[i], &f);
        switch (f.type) {
        case PROTOCOL_TYPE_BYTE:
            i += 3;
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	f103 0303 	add.w	r3, r3, #3
 8000b08:	617b      	str	r3, [r7, #20]
            break;
 8000b0a:	e004      	b.n	8000b16 <PROTOCOL_parseProtocol+0x72>
        case PROTOCOL_TYPE_INT:
            i += 6;
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	f103 0306 	add.w	r3, r3, #6
 8000b12:	617b      	str	r3, [r7, #20]
            break;
 8000b14:	bf00      	nop
        default:
            return;
        }
        p->frames[p->framesLen] = f;
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	683a      	ldr	r2, [r7, #0]
 8000b1c:	f103 0301 	add.w	r3, r3, #1
 8000b20:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000b24:	18d3      	adds	r3, r2, r3
 8000b26:	f107 0208 	add.w	r2, r7, #8
 8000b2a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b2e:	e883 0003 	stmia.w	r3, {r0, r1}
        p->framesLen++;
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	f103 0201 	add.w	r2, r3, #1
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	601a      	str	r2, [r3, #0]
    if (bufLen <= 0 || bufLen > PROTOCOL_MAX_LEN) {
        return;
    }
    p->num = PROTOCOL_parseInt(&buf[4]);
    PROTOCOL_Frame f;
    for (uint32_t i = 8; i < bufLen;) {
 8000b3e:	697a      	ldr	r2, [r7, #20]
 8000b40:	693b      	ldr	r3, [r7, #16]
 8000b42:	429a      	cmp	r2, r3
 8000b44:	d3ce      	bcc.n	8000ae4 <PROTOCOL_parseProtocol+0x40>
        }
        p->frames[p->framesLen] = f;
        p->framesLen++;
    }

    return;
 8000b46:	e002      	b.n	8000b4e <PROTOCOL_parseProtocol+0xaa>
// TODO : fixed parse protocol. Added check control frame
void PROTOCOL_parseProtocol(uint8_t *buf, PROTOCOL_Protocol *p) {
    uint32_t bufLen = PROTOCOL_parseInt(&buf[0]);
    p->framesLen = 0;
    if (bufLen <= 0 || bufLen > PROTOCOL_MAX_LEN) {
        return;
 8000b48:	bf00      	nop
 8000b4a:	e000      	b.n	8000b4e <PROTOCOL_parseProtocol+0xaa>
 8000b4c:	bf00      	nop
        p->frames[p->framesLen] = f;
        p->framesLen++;
    }

    return;
}
 8000b4e:	f107 0718 	add.w	r7, r7, #24
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop

08000b58 <PROTOCOL_parseFrame>:

static void PROTOCOL_parseFrame(uint8_t *buf, PROTOCOL_Frame *f) {
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
 8000b60:	6039      	str	r1, [r7, #0]
    f->cmd = buf[0];
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	781a      	ldrb	r2, [r3, #0]
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	701a      	strb	r2, [r3, #0]
    f->type = buf[1];
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	f103 0301 	add.w	r3, r3, #1
 8000b70:	781a      	ldrb	r2, [r3, #0]
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	705a      	strb	r2, [r3, #1]
    switch (f->type) {
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	785b      	ldrb	r3, [r3, #1]
 8000b7a:	2b01      	cmp	r3, #1
 8000b7c:	d002      	beq.n	8000b84 <PROTOCOL_parseFrame+0x2c>
 8000b7e:	2b02      	cmp	r3, #2
 8000b80:	d007      	beq.n	8000b92 <PROTOCOL_parseFrame+0x3a>
 8000b82:	e010      	b.n	8000ba6 <PROTOCOL_parseFrame+0x4e>
    case PROTOCOL_TYPE_BYTE:
        f->bData = (uint32_t) buf[2];
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	f103 0302 	add.w	r3, r3, #2
 8000b8a:	781a      	ldrb	r2, [r3, #0]
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	709a      	strb	r2, [r3, #2]
        break;
 8000b90:	e009      	b.n	8000ba6 <PROTOCOL_parseFrame+0x4e>
    case PROTOCOL_TYPE_INT:
        f->iData = PROTOCOL_parseInt(&buf[2]);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	f103 0302 	add.w	r3, r3, #2
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f000 f809 	bl	8000bb0 <PROTOCOL_parseInt>
 8000b9e:	4602      	mov	r2, r0
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	605a      	str	r2, [r3, #4]
        break;
 8000ba4:	bf00      	nop
    }
    return;
}
 8000ba6:	f107 0708 	add.w	r7, r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop

08000bb0 <PROTOCOL_parseInt>:

static uint32_t PROTOCOL_parseInt(uint8_t *mess) {
 8000bb0:	b480      	push	{r7}
 8000bb2:	b085      	sub	sp, #20
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
    uint32_t res = (((uint32_t) (mess[0])) << 24);
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	ea4f 6303 	mov.w	r3, r3, lsl #24
 8000bc0:	60fb      	str	r3, [r7, #12]
    res |= (((uint32_t) (mess[1])) << 16);
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	f103 0301 	add.w	r3, r3, #1
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	ea4f 4303 	mov.w	r3, r3, lsl #16
 8000bce:	68fa      	ldr	r2, [r7, #12]
 8000bd0:	ea42 0303 	orr.w	r3, r2, r3
 8000bd4:	60fb      	str	r3, [r7, #12]
    res |= (((uint32_t) (mess[2])) << 8);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	f103 0302 	add.w	r3, r3, #2
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8000be2:	68fa      	ldr	r2, [r7, #12]
 8000be4:	ea42 0303 	orr.w	r3, r2, r3
 8000be8:	60fb      	str	r3, [r7, #12]
    res |= (((uint32_t) mess[3]));
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	f103 0303 	add.w	r3, r3, #3
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	68fa      	ldr	r2, [r7, #12]
 8000bf4:	ea42 0303 	orr.w	r3, r2, r3
 8000bf8:	60fb      	str	r3, [r7, #12]

    return res;
 8000bfa:	68fb      	ldr	r3, [r7, #12]
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f107 0714 	add.w	r7, r7, #20
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bc80      	pop	{r7}
 8000c06:	4770      	bx	lr

08000c08 <PROTOCOL_intToByteArray>:

static inline void PROTOCOL_intToByteArray(uint32_t val, uint8_t *arr) {
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
 8000c10:	6039      	str	r1, [r7, #0]
    arr[0] = (uint8_t) (val >> 24);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	ea4f 6313 	mov.w	r3, r3, lsr #24
 8000c18:	b2da      	uxtb	r2, r3
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	701a      	strb	r2, [r3, #0]
    arr[1] = (uint8_t) (val >> 16);
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	f103 0301 	add.w	r3, r3, #1
 8000c24:	687a      	ldr	r2, [r7, #4]
 8000c26:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8000c2a:	b2d2      	uxtb	r2, r2
 8000c2c:	701a      	strb	r2, [r3, #0]
    arr[2] = (uint8_t) (val >> 8);
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	f103 0302 	add.w	r3, r3, #2
 8000c34:	687a      	ldr	r2, [r7, #4]
 8000c36:	ea4f 2212 	mov.w	r2, r2, lsr #8
 8000c3a:	b2d2      	uxtb	r2, r2
 8000c3c:	701a      	strb	r2, [r3, #0]
    arr[3] = (uint8_t) val;
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	f103 0303 	add.w	r3, r3, #3
 8000c44:	687a      	ldr	r2, [r7, #4]
 8000c46:	b2d2      	uxtb	r2, r2
 8000c48:	701a      	strb	r2, [r3, #0]
}
 8000c4a:	f107 070c 	add.w	r7, r7, #12
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bc80      	pop	{r7}
 8000c52:	4770      	bx	lr

08000c54 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
}
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bc80      	pop	{r7}
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop

08000c60 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8000c64:	e7fe      	b.n	8000c64 <HardFault_Handler+0x4>
 8000c66:	bf00      	nop

08000c68 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8000c6c:	e7fe      	b.n	8000c6c <MemManage_Handler+0x4>
 8000c6e:	bf00      	nop

08000c70 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8000c74:	e7fe      	b.n	8000c74 <BusFault_Handler+0x4>
 8000c76:	bf00      	nop

08000c78 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8000c7c:	e7fe      	b.n	8000c7c <UsageFault_Handler+0x4>
 8000c7e:	bf00      	nop

08000c80 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
}
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bc80      	pop	{r7}
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop

08000c8c <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
}
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bc80      	pop	{r7}
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
}
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bc80      	pop	{r7}
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop

08000ca4 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
    SysTime++;
 8000ca8:	4b04      	ldr	r3, [pc, #16]	; (8000cbc <SysTick_Handler+0x18>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f103 0201 	add.w	r2, r3, #1
 8000cb0:	4b02      	ldr	r3, [pc, #8]	; (8000cbc <SysTick_Handler+0x18>)
 8000cb2:	601a      	str	r2, [r3, #0]
}
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bc80      	pop	{r7}
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	20000f3c 	.word	0x20000f3c

08000cc0 <EXTI0_IRQHandler>:
  * @brief  This function handles EXTI0_IRQ Handler.
  * @param  None
  * @retval None
  */
void EXTI0_IRQHandler(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
  uint8_t test[12] = "Hello world\n";
 8000cc6:	4a0b      	ldr	r2, [pc, #44]	; (8000cf4 <EXTI0_IRQHandler+0x34>)
 8000cc8:	f107 0304 	add.w	r3, r7, #4
 8000ccc:	ca07      	ldmia	r2, {r0, r1, r2}
 8000cce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  
  APP_FOPS.pIf_DataTx(&test[0],12);
 8000cd2:	4b09      	ldr	r3, [pc, #36]	; (8000cf8 <EXTI0_IRQHandler+0x38>)
 8000cd4:	68db      	ldr	r3, [r3, #12]
 8000cd6:	f107 0204 	add.w	r2, r7, #4
 8000cda:	4610      	mov	r0, r2
 8000cdc:	f04f 010c 	mov.w	r1, #12
 8000ce0:	4798      	blx	r3
  /* Clear the EXTI line pending bit */
  EXTI_ClearITPendingBit(USER_BUTTON_EXTI_LINE);
 8000ce2:	f04f 0001 	mov.w	r0, #1
 8000ce6:	f004 f93f 	bl	8004f68 <EXTI_ClearITPendingBit>
}
 8000cea:	f107 0710 	add.w	r7, r7, #16
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	08005de4 	.word	0x08005de4
 8000cf8:	20000004 	.word	0x20000004

08000cfc <OTG_FS_WKUP_IRQHandler>:
  * @brief  This function handles EXTI15_10_IRQ Handler.
  * @param  None
  * @retval None
  */
void OTG_FS_WKUP_IRQHandler(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  if(USB_OTG_dev.cfg.low_power)
 8000d00:	4b09      	ldr	r3, [pc, #36]	; (8000d28 <OTG_FS_WKUP_IRQHandler+0x2c>)
 8000d02:	7a9b      	ldrb	r3, [r3, #10]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d00a      	beq.n	8000d1e <OTG_FS_WKUP_IRQHandler+0x22>
  {
	/* Reset SLEEPDEEP and SLEEPONEXIT bits */
	SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8000d08:	4b08      	ldr	r3, [pc, #32]	; (8000d2c <OTG_FS_WKUP_IRQHandler+0x30>)
 8000d0a:	4a08      	ldr	r2, [pc, #32]	; (8000d2c <OTG_FS_WKUP_IRQHandler+0x30>)
 8000d0c:	6912      	ldr	r2, [r2, #16]
 8000d0e:	f022 0206 	bic.w	r2, r2, #6
 8000d12:	611a      	str	r2, [r3, #16]

	/* After wake-up from sleep mode, reconfigure the system clock */
	SystemInit();
 8000d14:	f000 f814 	bl	8000d40 <SystemInit>
    USB_OTG_UngateClock(&USB_OTG_dev);
 8000d18:	4803      	ldr	r0, [pc, #12]	; (8000d28 <OTG_FS_WKUP_IRQHandler+0x2c>)
 8000d1a:	f001 fde5 	bl	80028e8 <USB_OTG_UngateClock>
  }
  EXTI_ClearITPendingBit(EXTI_Line18);
 8000d1e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000d22:	f004 f921 	bl	8004f68 <EXTI_ClearITPendingBit>
}
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	2000014c 	.word	0x2000014c
 8000d2c:	e000ed00 	.word	0xe000ed00

08000d30 <OTG_FS_IRQHandler>:
  * @brief  This function handles OTG_HS Handler.
  * @param  None
  * @retval None
  */
void OTG_FS_IRQHandler(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  USBD_OTG_ISR_Handler (&USB_OTG_dev);
 8000d34:	4801      	ldr	r0, [pc, #4]	; (8000d3c <OTG_FS_IRQHandler+0xc>)
 8000d36:	f002 f853 	bl	8002de0 <USBD_OTG_ISR_Handler>
}
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	2000014c 	.word	0x2000014c

08000d40 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000d44:	4b12      	ldr	r3, [pc, #72]	; (8000d90 <SystemInit+0x50>)
 8000d46:	4a12      	ldr	r2, [pc, #72]	; (8000d90 <SystemInit+0x50>)
 8000d48:	6812      	ldr	r2, [r2, #0]
 8000d4a:	f042 0201 	orr.w	r2, r2, #1
 8000d4e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000d50:	4b0f      	ldr	r3, [pc, #60]	; (8000d90 <SystemInit+0x50>)
 8000d52:	f04f 0200 	mov.w	r2, #0
 8000d56:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000d58:	4a0d      	ldr	r2, [pc, #52]	; (8000d90 <SystemInit+0x50>)
 8000d5a:	4b0d      	ldr	r3, [pc, #52]	; (8000d90 <SystemInit+0x50>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000d62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d66:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000d68:	4b09      	ldr	r3, [pc, #36]	; (8000d90 <SystemInit+0x50>)
 8000d6a:	4a0a      	ldr	r2, [pc, #40]	; (8000d94 <SystemInit+0x54>)
 8000d6c:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000d6e:	4b08      	ldr	r3, [pc, #32]	; (8000d90 <SystemInit+0x50>)
 8000d70:	4a07      	ldr	r2, [pc, #28]	; (8000d90 <SystemInit+0x50>)
 8000d72:	6812      	ldr	r2, [r2, #0]
 8000d74:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000d78:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000d7a:	4b05      	ldr	r3, [pc, #20]	; (8000d90 <SystemInit+0x50>)
 8000d7c:	f04f 0200 	mov.w	r2, #0
 8000d80:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000d82:	f000 f80b 	bl	8000d9c <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d86:	4b04      	ldr	r3, [pc, #16]	; (8000d98 <SystemInit+0x58>)
 8000d88:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d8c:	609a      	str	r2, [r3, #8]
#endif
}
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	40023800 	.word	0x40023800
 8000d94:	24003010 	.word	0x24003010
 8000d98:	e000ed00 	.word	0xe000ed00

08000d9c <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000da2:	f04f 0300 	mov.w	r3, #0
 8000da6:	607b      	str	r3, [r7, #4]
 8000da8:	f04f 0300 	mov.w	r3, #0
 8000dac:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000dae:	4b42      	ldr	r3, [pc, #264]	; (8000eb8 <SetSysClock+0x11c>)
 8000db0:	4a41      	ldr	r2, [pc, #260]	; (8000eb8 <SetSysClock+0x11c>)
 8000db2:	6812      	ldr	r2, [r2, #0]
 8000db4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000db8:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000dba:	4b3f      	ldr	r3, [pc, #252]	; (8000eb8 <SetSysClock+0x11c>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dc2:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	f103 0301 	add.w	r3, r3, #1
 8000dca:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d103      	bne.n	8000dda <SetSysClock+0x3e>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000dd8:	d1ef      	bne.n	8000dba <SetSysClock+0x1e>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000dda:	4b37      	ldr	r3, [pc, #220]	; (8000eb8 <SetSysClock+0x11c>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d003      	beq.n	8000dee <SetSysClock+0x52>
  {
    HSEStatus = (uint32_t)0x01;
 8000de6:	f04f 0301 	mov.w	r3, #1
 8000dea:	603b      	str	r3, [r7, #0]
 8000dec:	e002      	b.n	8000df4 <SetSysClock+0x58>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000dee:	f04f 0300 	mov.w	r3, #0
 8000df2:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	d142      	bne.n	8000e80 <SetSysClock+0xe4>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000dfa:	4b2f      	ldr	r3, [pc, #188]	; (8000eb8 <SetSysClock+0x11c>)
 8000dfc:	4a2e      	ldr	r2, [pc, #184]	; (8000eb8 <SetSysClock+0x11c>)
 8000dfe:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000e00:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000e04:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8000e06:	4b2d      	ldr	r3, [pc, #180]	; (8000ebc <SetSysClock+0x120>)
 8000e08:	4a2c      	ldr	r2, [pc, #176]	; (8000ebc <SetSysClock+0x120>)
 8000e0a:	6812      	ldr	r2, [r2, #0]
 8000e0c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000e10:	601a      	str	r2, [r3, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000e12:	4b29      	ldr	r3, [pc, #164]	; (8000eb8 <SetSysClock+0x11c>)
 8000e14:	4a28      	ldr	r2, [pc, #160]	; (8000eb8 <SetSysClock+0x11c>)
 8000e16:	6892      	ldr	r2, [r2, #8]
 8000e18:	609a      	str	r2, [r3, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000e1a:	4b27      	ldr	r3, [pc, #156]	; (8000eb8 <SetSysClock+0x11c>)
 8000e1c:	4a26      	ldr	r2, [pc, #152]	; (8000eb8 <SetSysClock+0x11c>)
 8000e1e:	6892      	ldr	r2, [r2, #8]
 8000e20:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000e24:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000e26:	4b24      	ldr	r3, [pc, #144]	; (8000eb8 <SetSysClock+0x11c>)
 8000e28:	4a23      	ldr	r2, [pc, #140]	; (8000eb8 <SetSysClock+0x11c>)
 8000e2a:	6892      	ldr	r2, [r2, #8]
 8000e2c:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 8000e30:	609a      	str	r2, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000e32:	4b21      	ldr	r3, [pc, #132]	; (8000eb8 <SetSysClock+0x11c>)
 8000e34:	4a22      	ldr	r2, [pc, #136]	; (8000ec0 <SetSysClock+0x124>)
 8000e36:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000e38:	4b1f      	ldr	r3, [pc, #124]	; (8000eb8 <SetSysClock+0x11c>)
 8000e3a:	4a1f      	ldr	r2, [pc, #124]	; (8000eb8 <SetSysClock+0x11c>)
 8000e3c:	6812      	ldr	r2, [r2, #0]
 8000e3e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000e42:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000e44:	bf00      	nop
 8000e46:	4b1c      	ldr	r3, [pc, #112]	; (8000eb8 <SetSysClock+0x11c>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d0f9      	beq.n	8000e46 <SetSysClock+0xaa>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000e52:	4b1c      	ldr	r3, [pc, #112]	; (8000ec4 <SetSysClock+0x128>)
 8000e54:	f240 6205 	movw	r2, #1541	; 0x605
 8000e58:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000e5a:	4b17      	ldr	r3, [pc, #92]	; (8000eb8 <SetSysClock+0x11c>)
 8000e5c:	4a16      	ldr	r2, [pc, #88]	; (8000eb8 <SetSysClock+0x11c>)
 8000e5e:	6892      	ldr	r2, [r2, #8]
 8000e60:	f022 0203 	bic.w	r2, r2, #3
 8000e64:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000e66:	4b14      	ldr	r3, [pc, #80]	; (8000eb8 <SetSysClock+0x11c>)
 8000e68:	4a13      	ldr	r2, [pc, #76]	; (8000eb8 <SetSysClock+0x11c>)
 8000e6a:	6892      	ldr	r2, [r2, #8]
 8000e6c:	f042 0202 	orr.w	r2, r2, #2
 8000e70:	609a      	str	r2, [r3, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000e72:	bf00      	nop
 8000e74:	4b10      	ldr	r3, [pc, #64]	; (8000eb8 <SetSysClock+0x11c>)
 8000e76:	689b      	ldr	r3, [r3, #8]
 8000e78:	f003 030c 	and.w	r3, r3, #12
 8000e7c:	2b08      	cmp	r3, #8
 8000e7e:	d1f9      	bne.n	8000e74 <SetSysClock+0xd8>

/******************************************************************************/
/*                        I2S clock configuration                             */
/******************************************************************************/
  /* PLLI2S clock used as I2S clock source */
  RCC->CFGR &= ~RCC_CFGR_I2SSRC;
 8000e80:	4b0d      	ldr	r3, [pc, #52]	; (8000eb8 <SetSysClock+0x11c>)
 8000e82:	4a0d      	ldr	r2, [pc, #52]	; (8000eb8 <SetSysClock+0x11c>)
 8000e84:	6892      	ldr	r2, [r2, #8]
 8000e86:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8000e8a:	609a      	str	r2, [r3, #8]

  /* Configure PLLI2S */
  RCC->PLLI2SCFGR = (PLLI2S_N << 6) | (PLLI2S_R << 28);
 8000e8c:	4b0a      	ldr	r3, [pc, #40]	; (8000eb8 <SetSysClock+0x11c>)
 8000e8e:	4a0e      	ldr	r2, [pc, #56]	; (8000ec8 <SetSysClock+0x12c>)
 8000e90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Enable PLLI2S */
  RCC->CR |= ((uint32_t)RCC_CR_PLLI2SON);
 8000e94:	4b08      	ldr	r3, [pc, #32]	; (8000eb8 <SetSysClock+0x11c>)
 8000e96:	4a08      	ldr	r2, [pc, #32]	; (8000eb8 <SetSysClock+0x11c>)
 8000e98:	6812      	ldr	r2, [r2, #0]
 8000e9a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8000e9e:	601a      	str	r2, [r3, #0]

  /* Wait till PLLI2S is ready */
  while((RCC->CR & RCC_CR_PLLI2SRDY) == 0)
 8000ea0:	bf00      	nop
 8000ea2:	4b05      	ldr	r3, [pc, #20]	; (8000eb8 <SetSysClock+0x11c>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d0f9      	beq.n	8000ea2 <SetSysClock+0x106>
  {
  }
}
 8000eae:	f107 070c 	add.w	r7, r7, #12
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bc80      	pop	{r7}
 8000eb6:	4770      	bx	lr
 8000eb8:	40023800 	.word	0x40023800
 8000ebc:	40007000 	.word	0x40007000
 8000ec0:	07405408 	.word	0x07405408
 8000ec4:	40023c00 	.word	0x40023c00
 8000ec8:	50003000 	.word	0x50003000

08000ecc <USB_OTG_BSP_Init>:
* @param  None
* @retval None
*/

void USB_OTG_BSP_Init(USB_OTG_CORE_HANDLE *pdev)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
#endif
  
 
 #ifdef USE_USB_OTG_FS 

  RCC_AHB1PeriphClockCmd( RCC_AHB1Periph_GPIOA , ENABLE);  
 8000ed4:	f04f 0001 	mov.w	r0, #1
 8000ed8:	f04f 0101 	mov.w	r1, #1
 8000edc:	f004 fa44 	bl	8005368 <RCC_AHB1PeriphClockCmd>
  
  /* Configure SOF VBUS ID DM DP Pins */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8  | 
 8000ee0:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 8000ee4:	60bb      	str	r3, [r7, #8]
    GPIO_Pin_9  | 
      GPIO_Pin_11 | 
        GPIO_Pin_12;
  
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8000ee6:	f04f 0303 	mov.w	r3, #3
 8000eea:	737b      	strb	r3, [r7, #13]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8000eec:	f04f 0302 	mov.w	r3, #2
 8000ef0:	733b      	strb	r3, [r7, #12]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000ef2:	f04f 0300 	mov.w	r3, #0
 8000ef6:	73bb      	strb	r3, [r7, #14]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 8000ef8:	f04f 0300 	mov.w	r3, #0
 8000efc:	73fb      	strb	r3, [r7, #15]
  GPIO_Init(GPIOA, &GPIO_InitStructure);  
 8000efe:	f107 0308 	add.w	r3, r7, #8
 8000f02:	4827      	ldr	r0, [pc, #156]	; (8000fa0 <USB_OTG_BSP_Init+0xd4>)
 8000f04:	4619      	mov	r1, r3
 8000f06:	f004 f83d 	bl	8004f84 <GPIO_Init>
  
  GPIO_PinAFConfig(GPIOA,GPIO_PinSource8,GPIO_AF_OTG1_FS) ;
 8000f0a:	4825      	ldr	r0, [pc, #148]	; (8000fa0 <USB_OTG_BSP_Init+0xd4>)
 8000f0c:	f04f 0108 	mov.w	r1, #8
 8000f10:	f04f 020a 	mov.w	r2, #10
 8000f14:	f004 f914 	bl	8005140 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA,GPIO_PinSource9,GPIO_AF_OTG1_FS) ; 
 8000f18:	4821      	ldr	r0, [pc, #132]	; (8000fa0 <USB_OTG_BSP_Init+0xd4>)
 8000f1a:	f04f 0109 	mov.w	r1, #9
 8000f1e:	f04f 020a 	mov.w	r2, #10
 8000f22:	f004 f90d 	bl	8005140 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA,GPIO_PinSource11,GPIO_AF_OTG1_FS) ; 
 8000f26:	481e      	ldr	r0, [pc, #120]	; (8000fa0 <USB_OTG_BSP_Init+0xd4>)
 8000f28:	f04f 010b 	mov.w	r1, #11
 8000f2c:	f04f 020a 	mov.w	r2, #10
 8000f30:	f004 f906 	bl	8005140 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA,GPIO_PinSource12,GPIO_AF_OTG1_FS) ;
 8000f34:	481a      	ldr	r0, [pc, #104]	; (8000fa0 <USB_OTG_BSP_Init+0xd4>)
 8000f36:	f04f 010c 	mov.w	r1, #12
 8000f3a:	f04f 020a 	mov.w	r2, #10
 8000f3e:	f004 f8ff 	bl	8005140 <GPIO_PinAFConfig>
  
  /* this for ID line debug */
  
  
  GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_10;
 8000f42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f46:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 8000f48:	f04f 0301 	mov.w	r3, #1
 8000f4c:	73bb      	strb	r3, [r7, #14]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP ;  
 8000f4e:	f04f 0301 	mov.w	r3, #1
 8000f52:	73fb      	strb	r3, [r7, #15]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8000f54:	f04f 0303 	mov.w	r3, #3
 8000f58:	737b      	strb	r3, [r7, #13]
  GPIO_Init(GPIOA, &GPIO_InitStructure);  
 8000f5a:	f107 0308 	add.w	r3, r7, #8
 8000f5e:	4810      	ldr	r0, [pc, #64]	; (8000fa0 <USB_OTG_BSP_Init+0xd4>)
 8000f60:	4619      	mov	r1, r3
 8000f62:	f004 f80f 	bl	8004f84 <GPIO_Init>
  GPIO_PinAFConfig(GPIOA,GPIO_PinSource10,GPIO_AF_OTG1_FS) ;   
 8000f66:	480e      	ldr	r0, [pc, #56]	; (8000fa0 <USB_OTG_BSP_Init+0xd4>)
 8000f68:	f04f 010a 	mov.w	r1, #10
 8000f6c:	f04f 020a 	mov.w	r2, #10
 8000f70:	f004 f8e6 	bl	8005140 <GPIO_PinAFConfig>

  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8000f74:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000f78:	f04f 0101 	mov.w	r1, #1
 8000f7c:	f004 fa5a 	bl	8005434 <RCC_APB2PeriphClockCmd>
  RCC_AHB2PeriphClockCmd(RCC_AHB2Periph_OTG_FS, ENABLE) ; 
 8000f80:	f04f 0080 	mov.w	r0, #128	; 0x80
 8000f84:	f04f 0101 	mov.w	r1, #1
 8000f88:	f004 fa10 	bl	80053ac <RCC_AHB2PeriphClockCmd>
  
 #endif //USB_OTG_HS

  
  /* enable the PWR clock */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);   
 8000f8c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000f90:	f04f 0101 	mov.w	r1, #1
 8000f94:	f004 fa70 	bl	8005478 <RCC_APB1PeriphResetCmd>
  NVIC_Init(&NVIC_InitStructure);

  EXTI_ClearITPendingBit(EXTI_Line20);    
#endif   

}
 8000f98:	f107 0710 	add.w	r7, r7, #16
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	40020000 	.word	0x40020000

08000fa4 <USB_OTG_BSP_EnableInterrupt>:
*         Enabele USB Global interrupt
* @param  None
* @retval None
*/
void USB_OTG_BSP_EnableInterrupt(USB_OTG_CORE_HANDLE *pdev)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  NVIC_InitTypeDef NVIC_InitStructure; 
  
  NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);
 8000fac:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8000fb0:	f003 ff5c 	bl	8004e6c <NVIC_PriorityGroupConfig>
#ifdef USE_USB_OTG_HS   
  NVIC_InitStructure.NVIC_IRQChannel = OTG_HS_IRQn;
#else
  NVIC_InitStructure.NVIC_IRQChannel = OTG_FS_IRQn;  
 8000fb4:	f04f 0343 	mov.w	r3, #67	; 0x43
 8000fb8:	733b      	strb	r3, [r7, #12]
#endif
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
 8000fba:	f04f 0301 	mov.w	r3, #1
 8000fbe:	737b      	strb	r3, [r7, #13]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 3;
 8000fc0:	f04f 0303 	mov.w	r3, #3
 8000fc4:	73bb      	strb	r3, [r7, #14]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8000fc6:	f04f 0301 	mov.w	r3, #1
 8000fca:	73fb      	strb	r3, [r7, #15]
  NVIC_Init(&NVIC_InitStructure);  
 8000fcc:	f107 030c 	add.w	r3, r7, #12
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f003 ff5d 	bl	8004e90 <NVIC_Init>
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
  NVIC_Init(&NVIC_InitStructure);   
#endif
}
 8000fd6:	f107 0710 	add.w	r7, r7, #16
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop

08000fe0 <USB_OTG_BSP_uDelay>:
*         This function provides delay time in micro sec
* @param  usec : Value of delay required in micro sec
* @retval None
*/
void USB_OTG_BSP_uDelay (const uint32_t usec)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b085      	sub	sp, #20
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  uint32_t utime = (120 * usec / 7);
 8000fe8:	687a      	ldr	r2, [r7, #4]
 8000fea:	4613      	mov	r3, r2
 8000fec:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8000ff0:	1a9b      	subs	r3, r3, r2
 8000ff2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	4b0a      	ldr	r3, [pc, #40]	; (8001024 <USB_OTG_BSP_uDelay+0x44>)
 8000ffa:	fba3 1302 	umull	r1, r3, r3, r2
 8000ffe:	1ad2      	subs	r2, r2, r3
 8001000:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8001004:	189b      	adds	r3, r3, r2
 8001006:	ea4f 0393 	mov.w	r3, r3, lsr #2
 800100a:	60fb      	str	r3, [r7, #12]
  do
  {
      utime--;
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	f103 33ff 	add.w	r3, r3, #4294967295
 8001012:	60fb      	str	r3, [r7, #12]
  }
  while (utime > 0);
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d1f8      	bne.n	800100c <USB_OTG_BSP_uDelay+0x2c>
}
 800101a:	f107 0714 	add.w	r7, r7, #20
 800101e:	46bd      	mov	sp, r7
 8001020:	bc80      	pop	{r7}
 8001022:	4770      	bx	lr
 8001024:	24924925 	.word	0x24924925

08001028 <USB_OTG_BSP_mDelay>:
*          This function provides delay time in milli sec
* @param  msec : Value of delay required in milli sec
* @retval None
*/
void USB_OTG_BSP_mDelay (const uint32_t msec)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  USB_OTG_BSP_uDelay(msec * 1000);   
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001036:	fb02 f303 	mul.w	r3, r2, r3
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff ffd0 	bl	8000fe0 <USB_OTG_BSP_uDelay>
}
 8001040:	f107 0708 	add.w	r7, r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <VCP_Init>:
  *         Initializes the Media on the STM32
  * @param  None
  * @retval Result of the opeartion (USBD_OK in all cases)
  */
static uint16_t VCP_Init(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
    Data_get = 0;
 800104c:	4b04      	ldr	r3, [pc, #16]	; (8001060 <VCP_Init+0x18>)
 800104e:	f04f 0200 	mov.w	r2, #0
 8001052:	701a      	strb	r2, [r3, #0]
  return USBD_OK;
 8001054:	f04f 0300 	mov.w	r3, #0
}
 8001058:	4618      	mov	r0, r3
 800105a:	46bd      	mov	sp, r7
 800105c:	bc80      	pop	{r7}
 800105e:	4770      	bx	lr
 8001060:	20000148 	.word	0x20000148

08001064 <VCP_DeInit>:
  *         DeInitializes the Media on the STM32
  * @param  None
  * @retval Result of the opeartion (USBD_OK in all cases)
  */
static uint16_t VCP_DeInit(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  return USBD_OK;
 8001068:	f04f 0300 	mov.w	r3, #0
}
 800106c:	4618      	mov	r0, r3
 800106e:	46bd      	mov	sp, r7
 8001070:	bc80      	pop	{r7}
 8001072:	4770      	bx	lr

08001074 <VCP_Ctrl>:
  * @param  Buf: Buffer containing command data (request parameters)
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the opeartion (USBD_OK in all cases)
  */
static uint16_t VCP_Ctrl (uint32_t Cmd, uint8_t* Buf, uint32_t Len)
{ 
 8001074:	b480      	push	{r7}
 8001076:	b085      	sub	sp, #20
 8001078:	af00      	add	r7, sp, #0
 800107a:	60f8      	str	r0, [r7, #12]
 800107c:	60b9      	str	r1, [r7, #8]
 800107e:	607a      	str	r2, [r7, #4]
  switch (Cmd)
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	2b23      	cmp	r3, #35	; 0x23
 8001084:	d84a      	bhi.n	800111c <VCP_Ctrl+0xa8>
 8001086:	a201      	add	r2, pc, #4	; (adr r2, 800108c <VCP_Ctrl+0x18>)
 8001088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800108c:	0800111d 	.word	0x0800111d
 8001090:	0800111d 	.word	0x0800111d
 8001094:	0800111d 	.word	0x0800111d
 8001098:	0800111d 	.word	0x0800111d
 800109c:	0800111d 	.word	0x0800111d
 80010a0:	0800111d 	.word	0x0800111d
 80010a4:	0800111d 	.word	0x0800111d
 80010a8:	0800111d 	.word	0x0800111d
 80010ac:	0800111d 	.word	0x0800111d
 80010b0:	0800111d 	.word	0x0800111d
 80010b4:	0800111d 	.word	0x0800111d
 80010b8:	0800111d 	.word	0x0800111d
 80010bc:	0800111d 	.word	0x0800111d
 80010c0:	0800111d 	.word	0x0800111d
 80010c4:	0800111d 	.word	0x0800111d
 80010c8:	0800111d 	.word	0x0800111d
 80010cc:	0800111d 	.word	0x0800111d
 80010d0:	0800111d 	.word	0x0800111d
 80010d4:	0800111d 	.word	0x0800111d
 80010d8:	0800111d 	.word	0x0800111d
 80010dc:	0800111d 	.word	0x0800111d
 80010e0:	0800111d 	.word	0x0800111d
 80010e4:	0800111d 	.word	0x0800111d
 80010e8:	0800111d 	.word	0x0800111d
 80010ec:	0800111d 	.word	0x0800111d
 80010f0:	0800111d 	.word	0x0800111d
 80010f4:	0800111d 	.word	0x0800111d
 80010f8:	0800111d 	.word	0x0800111d
 80010fc:	0800111d 	.word	0x0800111d
 8001100:	0800111d 	.word	0x0800111d
 8001104:	0800111d 	.word	0x0800111d
 8001108:	0800111d 	.word	0x0800111d
 800110c:	0800111d 	.word	0x0800111d
 8001110:	0800111d 	.word	0x0800111d
 8001114:	0800111d 	.word	0x0800111d
 8001118:	0800111d 	.word	0x0800111d
  case SEND_BREAK:
    /* Not  needed for this driver */
    break;    
    
  default:
    break;
 800111c:	bf00      	nop
  }

  return USBD_OK;
 800111e:	f04f 0300 	mov.w	r3, #0
}
 8001122:	4618      	mov	r0, r3
 8001124:	f107 0714 	add.w	r7, r7, #20
 8001128:	46bd      	mov	sp, r7
 800112a:	bc80      	pop	{r7}
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop

08001130 <VCP_DataTx>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the opeartion: USBD_OK if all operations are OK else VCP_FAIL
  */
static uint16_t VCP_DataTx (uint8_t* Buf, uint32_t Len)
{
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	6039      	str	r1, [r7, #0]
	uint32_t i;
	//loop through buffer
	for( i = 0; i < Len; i++ )
 800113a:	f04f 0300 	mov.w	r3, #0
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	e01a      	b.n	8001178 <VCP_DataTx+0x48>
	{
		APP_Rx_Buffer[APP_Rx_ptr_in] = (uint8_t) Buf[i];
 8001142:	4b13      	ldr	r3, [pc, #76]	; (8001190 <VCP_DataTx+0x60>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	6879      	ldr	r1, [r7, #4]
 8001148:	68fa      	ldr	r2, [r7, #12]
 800114a:	188a      	adds	r2, r1, r2
 800114c:	7811      	ldrb	r1, [r2, #0]
 800114e:	4a11      	ldr	r2, [pc, #68]	; (8001194 <VCP_DataTx+0x64>)
 8001150:	54d1      	strb	r1, [r2, r3]
		//increase pointer value
		APP_Rx_ptr_in++;
 8001152:	4b0f      	ldr	r3, [pc, #60]	; (8001190 <VCP_DataTx+0x60>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f103 0201 	add.w	r2, r3, #1
 800115a:	4b0d      	ldr	r3, [pc, #52]	; (8001190 <VCP_DataTx+0x60>)
 800115c:	601a      	str	r2, [r3, #0]
		/* To avoid buffer overflow */
		if(APP_Rx_ptr_in == APP_RX_DATA_SIZE)
 800115e:	4b0c      	ldr	r3, [pc, #48]	; (8001190 <VCP_DataTx+0x60>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001166:	d103      	bne.n	8001170 <VCP_DataTx+0x40>
		{
			APP_Rx_ptr_in = 0;
 8001168:	4b09      	ldr	r3, [pc, #36]	; (8001190 <VCP_DataTx+0x60>)
 800116a:	f04f 0200 	mov.w	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
  */
static uint16_t VCP_DataTx (uint8_t* Buf, uint32_t Len)
{
	uint32_t i;
	//loop through buffer
	for( i = 0; i < Len; i++ )
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	f103 0301 	add.w	r3, r3, #1
 8001176:	60fb      	str	r3, [r7, #12]
 8001178:	68fa      	ldr	r2, [r7, #12]
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	429a      	cmp	r2, r3
 800117e:	d3e0      	bcc.n	8001142 <VCP_DataTx+0x12>
		{
			APP_Rx_ptr_in = 0;
		}
	}
        
	return USBD_OK;
 8001180:	f04f 0300 	mov.w	r3, #0
}
 8001184:	4618      	mov	r0, r3
 8001186:	f107 0714 	add.w	r7, r7, #20
 800118a:	46bd      	mov	sp, r7
 800118c:	bc80      	pop	{r7}
 800118e:	4770      	bx	lr
 8001190:	20000130 	.word	0x20000130
 8001194:	20001000 	.word	0x20001000

08001198 <VCP_DataRx>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the opeartion: USBD_OK if all operations are OK else VCP_FAIL
  */
static uint16_t VCP_DataRx (uint8_t* Buf, uint32_t Len)
{
 8001198:	b480      	push	{r7}
 800119a:	b085      	sub	sp, #20
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	6039      	str	r1, [r7, #0]
    //VCP_DataTx(Buf, Len);

    for (uint32_t i =0 ; i < Len; i++) {
 80011a2:	f04f 0300 	mov.w	r3, #0
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	e00b      	b.n	80011c2 <VCP_DataRx+0x2a>
        Data_buf[i] = Buf[i];
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	18d3      	adds	r3, r2, r3
 80011b0:	781a      	ldrb	r2, [r3, #0]
 80011b2:	490c      	ldr	r1, [pc, #48]	; (80011e4 <VCP_DataRx+0x4c>)
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	18cb      	adds	r3, r1, r3
 80011b8:	701a      	strb	r2, [r3, #0]
  */
static uint16_t VCP_DataRx (uint8_t* Buf, uint32_t Len)
{
    //VCP_DataTx(Buf, Len);

    for (uint32_t i =0 ; i < Len; i++) {
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	f103 0301 	add.w	r3, r3, #1
 80011c0:	60fb      	str	r3, [r7, #12]
 80011c2:	68fa      	ldr	r2, [r7, #12]
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	429a      	cmp	r2, r3
 80011c8:	d3ef      	bcc.n	80011aa <VCP_DataRx+0x12>
        Data_buf[i] = Buf[i];
    }
    Data_get = 1;
 80011ca:	4b07      	ldr	r3, [pc, #28]	; (80011e8 <VCP_DataRx+0x50>)
 80011cc:	f04f 0201 	mov.w	r2, #1
 80011d0:	701a      	strb	r2, [r3, #0]

	return USBD_OK;
 80011d2:	f04f 0300 	mov.w	r3, #0
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	f107 0714 	add.w	r7, r7, #20
 80011dc:	46bd      	mov	sp, r7
 80011de:	bc80      	pop	{r7}
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	2000073c 	.word	0x2000073c
 80011e8:	20000148 	.word	0x20000148

080011ec <USBD_USR_DeviceDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_USR_DeviceDescriptor( uint8_t speed , uint16_t *length)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	6039      	str	r1, [r7, #0]
 80011f6:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_DeviceDesc);
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	f04f 0212 	mov.w	r2, #18
 80011fe:	801a      	strh	r2, [r3, #0]
  return USBD_DeviceDesc;
 8001200:	4b03      	ldr	r3, [pc, #12]	; (8001210 <USBD_USR_DeviceDescriptor+0x24>)
}
 8001202:	4618      	mov	r0, r3
 8001204:	f107 070c 	add.w	r7, r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	bc80      	pop	{r7}
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	20000034 	.word	0x20000034

08001214 <USBD_USR_LangIDStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_USR_LangIDStrDescriptor( uint8_t speed , uint16_t *length)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	6039      	str	r1, [r7, #0]
 800121e:	71fb      	strb	r3, [r7, #7]
  *length =  sizeof(USBD_LangIDDesc);  
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	f04f 0204 	mov.w	r2, #4
 8001226:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8001228:	4b03      	ldr	r3, [pc, #12]	; (8001238 <USBD_USR_LangIDStrDescriptor+0x24>)
}
 800122a:	4618      	mov	r0, r3
 800122c:	f107 070c 	add.w	r7, r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	bc80      	pop	{r7}
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	20000048 	.word	0x20000048

0800123c <USBD_USR_ProductStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_USR_ProductStrDescriptor( uint8_t speed , uint16_t *length)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	6039      	str	r1, [r7, #0]
 8001246:	71fb      	strb	r3, [r7, #7]
 
  
  if(speed == 0)
 8001248:	79fb      	ldrb	r3, [r7, #7]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d105      	bne.n	800125a <USBD_USR_ProductStrDescriptor+0x1e>
  {   
    USBD_GetString (USBD_PRODUCT_HS_STRING, USBD_StrDesc, length);
 800124e:	4808      	ldr	r0, [pc, #32]	; (8001270 <USBD_USR_ProductStrDescriptor+0x34>)
 8001250:	4908      	ldr	r1, [pc, #32]	; (8001274 <USBD_USR_ProductStrDescriptor+0x38>)
 8001252:	683a      	ldr	r2, [r7, #0]
 8001254:	f003 fb02 	bl	800485c <USBD_GetString>
 8001258:	e004      	b.n	8001264 <USBD_USR_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString (USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);    
 800125a:	4807      	ldr	r0, [pc, #28]	; (8001278 <USBD_USR_ProductStrDescriptor+0x3c>)
 800125c:	4905      	ldr	r1, [pc, #20]	; (8001274 <USBD_USR_ProductStrDescriptor+0x38>)
 800125e:	683a      	ldr	r2, [r7, #0]
 8001260:	f003 fafc 	bl	800485c <USBD_GetString>
  }
  return USBD_StrDesc;
 8001264:	4b03      	ldr	r3, [pc, #12]	; (8001274 <USBD_USR_ProductStrDescriptor+0x38>)
}
 8001266:	4618      	mov	r0, r3
 8001268:	f107 0708 	add.w	r7, r7, #8
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	08005df4 	.word	0x08005df4
 8001274:	20000f40 	.word	0x20000f40
 8001278:	08005e18 	.word	0x08005e18

0800127c <USBD_USR_ManufacturerStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_USR_ManufacturerStrDescriptor( uint8_t speed , uint16_t *length)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	4603      	mov	r3, r0
 8001284:	6039      	str	r1, [r7, #0]
 8001286:	71fb      	strb	r3, [r7, #7]
  USBD_GetString (USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8001288:	4805      	ldr	r0, [pc, #20]	; (80012a0 <USBD_USR_ManufacturerStrDescriptor+0x24>)
 800128a:	4906      	ldr	r1, [pc, #24]	; (80012a4 <USBD_USR_ManufacturerStrDescriptor+0x28>)
 800128c:	683a      	ldr	r2, [r7, #0]
 800128e:	f003 fae5 	bl	800485c <USBD_GetString>
  return USBD_StrDesc;
 8001292:	4b04      	ldr	r3, [pc, #16]	; (80012a4 <USBD_USR_ManufacturerStrDescriptor+0x28>)
}
 8001294:	4618      	mov	r0, r3
 8001296:	f107 0708 	add.w	r7, r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	08005e3c 	.word	0x08005e3c
 80012a4:	20000f40 	.word	0x20000f40

080012a8 <USBD_USR_SerialStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_USR_SerialStrDescriptor( uint8_t speed , uint16_t *length)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	6039      	str	r1, [r7, #0]
 80012b2:	71fb      	strb	r3, [r7, #7]
  if(speed  == USB_OTG_SPEED_HIGH)
 80012b4:	79fb      	ldrb	r3, [r7, #7]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d105      	bne.n	80012c6 <USBD_USR_SerialStrDescriptor+0x1e>
  {    
    USBD_GetString (USBD_SERIALNUMBER_HS_STRING, USBD_StrDesc, length);
 80012ba:	4808      	ldr	r0, [pc, #32]	; (80012dc <USBD_USR_SerialStrDescriptor+0x34>)
 80012bc:	4908      	ldr	r1, [pc, #32]	; (80012e0 <USBD_USR_SerialStrDescriptor+0x38>)
 80012be:	683a      	ldr	r2, [r7, #0]
 80012c0:	f003 facc 	bl	800485c <USBD_GetString>
 80012c4:	e004      	b.n	80012d0 <USBD_USR_SerialStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString (USBD_SERIALNUMBER_FS_STRING, USBD_StrDesc, length);    
 80012c6:	4807      	ldr	r0, [pc, #28]	; (80012e4 <USBD_USR_SerialStrDescriptor+0x3c>)
 80012c8:	4905      	ldr	r1, [pc, #20]	; (80012e0 <USBD_USR_SerialStrDescriptor+0x38>)
 80012ca:	683a      	ldr	r2, [r7, #0]
 80012cc:	f003 fac6 	bl	800485c <USBD_GetString>
  }
  return USBD_StrDesc;
 80012d0:	4b03      	ldr	r3, [pc, #12]	; (80012e0 <USBD_USR_SerialStrDescriptor+0x38>)
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	f107 0708 	add.w	r7, r7, #8
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	08005e50 	.word	0x08005e50
 80012e0:	20000f40 	.word	0x20000f40
 80012e4:	08005e60 	.word	0x08005e60

080012e8 <USBD_USR_ConfigStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_USR_ConfigStrDescriptor( uint8_t speed , uint16_t *length)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	6039      	str	r1, [r7, #0]
 80012f2:	71fb      	strb	r3, [r7, #7]
  if(speed  == USB_OTG_SPEED_HIGH)
 80012f4:	79fb      	ldrb	r3, [r7, #7]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d105      	bne.n	8001306 <USBD_USR_ConfigStrDescriptor+0x1e>
  {  
    USBD_GetString (USBD_CONFIGURATION_HS_STRING, USBD_StrDesc, length);
 80012fa:	4808      	ldr	r0, [pc, #32]	; (800131c <USBD_USR_ConfigStrDescriptor+0x34>)
 80012fc:	4908      	ldr	r1, [pc, #32]	; (8001320 <USBD_USR_ConfigStrDescriptor+0x38>)
 80012fe:	683a      	ldr	r2, [r7, #0]
 8001300:	f003 faac 	bl	800485c <USBD_GetString>
 8001304:	e004      	b.n	8001310 <USBD_USR_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString (USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length); 
 8001306:	4805      	ldr	r0, [pc, #20]	; (800131c <USBD_USR_ConfigStrDescriptor+0x34>)
 8001308:	4905      	ldr	r1, [pc, #20]	; (8001320 <USBD_USR_ConfigStrDescriptor+0x38>)
 800130a:	683a      	ldr	r2, [r7, #0]
 800130c:	f003 faa6 	bl	800485c <USBD_GetString>
  }
  return USBD_StrDesc;  
 8001310:	4b03      	ldr	r3, [pc, #12]	; (8001320 <USBD_USR_ConfigStrDescriptor+0x38>)
}
 8001312:	4618      	mov	r0, r3
 8001314:	f107 0708 	add.w	r7, r7, #8
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	08005e70 	.word	0x08005e70
 8001320:	20000f40 	.word	0x20000f40

08001324 <USBD_USR_InterfaceStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_USR_InterfaceStrDescriptor( uint8_t speed , uint16_t *length)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	6039      	str	r1, [r7, #0]
 800132e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8001330:	79fb      	ldrb	r3, [r7, #7]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d105      	bne.n	8001342 <USBD_USR_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString (USBD_INTERFACE_HS_STRING, USBD_StrDesc, length);
 8001336:	4808      	ldr	r0, [pc, #32]	; (8001358 <USBD_USR_InterfaceStrDescriptor+0x34>)
 8001338:	4908      	ldr	r1, [pc, #32]	; (800135c <USBD_USR_InterfaceStrDescriptor+0x38>)
 800133a:	683a      	ldr	r2, [r7, #0]
 800133c:	f003 fa8e 	bl	800485c <USBD_GetString>
 8001340:	e004      	b.n	800134c <USBD_USR_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString (USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 8001342:	4805      	ldr	r0, [pc, #20]	; (8001358 <USBD_USR_InterfaceStrDescriptor+0x34>)
 8001344:	4905      	ldr	r1, [pc, #20]	; (800135c <USBD_USR_InterfaceStrDescriptor+0x38>)
 8001346:	683a      	ldr	r2, [r7, #0]
 8001348:	f003 fa88 	bl	800485c <USBD_GetString>
  }
  return USBD_StrDesc;  
 800134c:	4b03      	ldr	r3, [pc, #12]	; (800135c <USBD_USR_InterfaceStrDescriptor+0x38>)
}
 800134e:	4618      	mov	r0, r3
 8001350:	f107 0708 	add.w	r7, r7, #8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	08005e7c 	.word	0x08005e7c
 800135c:	20000f40 	.word	0x20000f40

08001360 <USBD_USR_Init>:
* @brief  USBD_USR_Init 
* @param  None
* @retval None
*/
void USBD_USR_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
    TIM_SetCompare2(TIM4, 1000);
 8001364:	4802      	ldr	r0, [pc, #8]	; (8001370 <USBD_USR_Init+0x10>)
 8001366:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800136a:	f004 fc71 	bl	8005c50 <TIM_SetCompare2>
}
 800136e:	bd80      	pop	{r7, pc}
 8001370:	40000800 	.word	0x40000800

08001374 <USBD_USR_DeviceReset>:
* @brief  USBD_USR_DeviceReset 
* @param  speed : device speed
* @retval None
*/
void USBD_USR_DeviceReset(uint8_t speed )
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	71fb      	strb	r3, [r7, #7]
    USBD_USR_DEVICE_CONFIGURED = RESET;
 800137e:	4b09      	ldr	r3, [pc, #36]	; (80013a4 <USBD_USR_DeviceReset+0x30>)
 8001380:	f04f 0200 	mov.w	r2, #0
 8001384:	701a      	strb	r2, [r3, #0]
    TIM_SetCompare3(TIM4, 0);
 8001386:	4808      	ldr	r0, [pc, #32]	; (80013a8 <USBD_USR_DeviceReset+0x34>)
 8001388:	f04f 0100 	mov.w	r1, #0
 800138c:	f004 fc6e 	bl	8005c6c <TIM_SetCompare3>
 switch (speed)
 8001390:	79fb      	ldrb	r3, [r7, #7]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <USBD_USR_DeviceReset+0x26>
 8001396:	2b01      	cmp	r3, #1
 {
   case USB_OTG_SPEED_HIGH: 
     break;

  case USB_OTG_SPEED_FULL: 
     break;
 8001398:	e000      	b.n	800139c <USBD_USR_DeviceReset+0x28>
    USBD_USR_DEVICE_CONFIGURED = RESET;
    TIM_SetCompare3(TIM4, 0);
 switch (speed)
 {
   case USB_OTG_SPEED_HIGH: 
     break;
 800139a:	bf00      	nop
     break;
 default:
     break;
     
 }
}
 800139c:	f107 0708 	add.w	r7, r7, #8
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	20000149 	.word	0x20000149
 80013a8:	40000800 	.word	0x40000800

080013ac <USBD_USR_DeviceConfigured>:
*         Displays the message on LCD on device configuration Event
* @param  None
* @retval Staus
*/
void USBD_USR_DeviceConfigured (void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
    USBD_USR_DEVICE_CONFIGURED = SET;
 80013b0:	4b04      	ldr	r3, [pc, #16]	; (80013c4 <USBD_USR_DeviceConfigured+0x18>)
 80013b2:	f04f 0201 	mov.w	r2, #1
 80013b6:	701a      	strb	r2, [r3, #0]
    TIM_SetCompare3(TIM4, 1000);
 80013b8:	4803      	ldr	r0, [pc, #12]	; (80013c8 <USBD_USR_DeviceConfigured+0x1c>)
 80013ba:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80013be:	f004 fc55 	bl	8005c6c <TIM_SetCompare3>
}
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	20000149 	.word	0x20000149
 80013c8:	40000800 	.word	0x40000800

080013cc <USBD_USR_DeviceConnected>:
*         Displays the message on LCD on device connection Event
* @param  None
* @retval Staus
*/
void USBD_USR_DeviceConnected (void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
    TIM_SetCompare4(TIM4, 1000);
 80013d0:	4802      	ldr	r0, [pc, #8]	; (80013dc <USBD_USR_DeviceConnected+0x10>)
 80013d2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80013d6:	f004 fc57 	bl	8005c88 <TIM_SetCompare4>
}
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	40000800 	.word	0x40000800

080013e0 <USBD_USR_DeviceDisconnected>:
*         Displays the message on LCD on device disconnection Event
* @param  None
* @retval Staus
*/
void USBD_USR_DeviceDisconnected (void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
}
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bc80      	pop	{r7}
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop

080013ec <USBD_USR_DeviceSuspended>:
*         Displays the message on LCD on device suspend Event
* @param  None
* @retval None
*/
void USBD_USR_DeviceSuspended(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  /* Users can do their application actions here for the USB-Reset */
}
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bc80      	pop	{r7}
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop

080013f8 <USBD_USR_DeviceResumed>:
*         Displays the message on LCD on device resume Event
* @param  None
* @retval None
*/
void USBD_USR_DeviceResumed(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  /* Users can do their application actions here for the USB-Reset */
}
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bc80      	pop	{r7}
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop

08001404 <USB_OTG_EnableCommonInt>:
*         Initializes the commmon interrupts, used in both device and modes
* @param  pdev : Selected device
* @retval None
*/
static void USB_OTG_EnableCommonInt(USB_OTG_CORE_HANDLE *pdev)
{
 8001404:	b480      	push	{r7}
 8001406:	b085      	sub	sp, #20
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTMSK_TypeDef  int_mask;
  
  int_mask.d32 = 0;
 800140c:	f04f 0300 	mov.w	r3, #0
 8001410:	60fb      	str	r3, [r7, #12]
  /* Clear any pending USB_OTG Interrupts */
#ifndef USE_OTG_MODE
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GOTGINT, 0xFFFFFFFF);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	68db      	ldr	r3, [r3, #12]
 8001416:	f04f 32ff 	mov.w	r2, #4294967295
 800141a:	605a      	str	r2, [r3, #4]
#endif
  /* Clear any pending interrupts */
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTSTS, 0xFFFFFFFF);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	f04f 32ff 	mov.w	r2, #4294967295
 8001424:	615a      	str	r2, [r3, #20]
  /* Enable the interrupts in the INTMSK */
  int_mask.b.wkupintr = 1;
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800142c:	60fb      	str	r3, [r7, #12]
  int_mask.b.usbsuspend = 1; 
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001434:	60fb      	str	r3, [r7, #12]
#ifdef USE_OTG_MODE
  int_mask.b.otgintr = 1;
  int_mask.b.sessreqintr = 1;
  int_mask.b.conidstschng = 1;
#endif
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTMSK, int_mask.d32);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	68db      	ldr	r3, [r3, #12]
 800143a:	68fa      	ldr	r2, [r7, #12]
 800143c:	619a      	str	r2, [r3, #24]
}
 800143e:	f107 0714 	add.w	r7, r7, #20
 8001442:	46bd      	mov	sp, r7
 8001444:	bc80      	pop	{r7}
 8001446:	4770      	bx	lr

08001448 <USB_OTG_CoreReset>:
* @brief  USB_OTG_CoreReset : Soft reset of the core
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
static USB_OTG_STS USB_OTG_CoreReset(USB_OTG_CORE_HANDLE *pdev)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b086      	sub	sp, #24
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  USB_OTG_STS status = USB_OTG_OK;
 8001450:	f04f 0300 	mov.w	r3, #0
 8001454:	74fb      	strb	r3, [r7, #19]
  __IO USB_OTG_GRSTCTL_TypeDef  greset;
  uint32_t count = 0;
 8001456:	f04f 0300 	mov.w	r3, #0
 800145a:	617b      	str	r3, [r7, #20]
  
  greset.d32 = 0;
 800145c:	f04f 0300 	mov.w	r3, #0
 8001460:	60fb      	str	r3, [r7, #12]
  /* Wait for AHB master IDLE state. */
  do
  {
    USB_OTG_BSP_uDelay(3);
 8001462:	f04f 0003 	mov.w	r0, #3
 8001466:	f7ff fdbb 	bl	8000fe0 <USB_OTG_BSP_uDelay>
    greset.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GRSTCTL);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	68db      	ldr	r3, [r3, #12]
 800146e:	691b      	ldr	r3, [r3, #16]
 8001470:	60fb      	str	r3, [r7, #12]
    if (++count > 200000)
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	f103 0301 	add.w	r3, r3, #1
 8001478:	617b      	str	r3, [r7, #20]
 800147a:	697a      	ldr	r2, [r7, #20]
 800147c:	4b19      	ldr	r3, [pc, #100]	; (80014e4 <USB_OTG_CoreReset+0x9c>)
 800147e:	429a      	cmp	r2, r3
 8001480:	d902      	bls.n	8001488 <USB_OTG_CoreReset+0x40>
    {
      return USB_OTG_OK;
 8001482:	f04f 0300 	mov.w	r3, #0
 8001486:	e027      	b.n	80014d8 <USB_OTG_CoreReset+0x90>
    }
  }
  while (greset.b.ahbidle == 0);
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d0e7      	beq.n	8001462 <USB_OTG_CoreReset+0x1a>
  /* Core Soft Reset */
  count = 0;
 8001492:	f04f 0300 	mov.w	r3, #0
 8001496:	617b      	str	r3, [r7, #20]
  greset.b.csftrst = 1;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	f043 0301 	orr.w	r3, r3, #1
 800149e:	60fb      	str	r3, [r7, #12]
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRSTCTL, greset.d32 );
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	68fa      	ldr	r2, [r7, #12]
 80014a6:	611a      	str	r2, [r3, #16]
  do
  {
    greset.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GRSTCTL);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	691b      	ldr	r3, [r3, #16]
 80014ae:	60fb      	str	r3, [r7, #12]
    if (++count > 200000)
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	f103 0301 	add.w	r3, r3, #1
 80014b6:	617b      	str	r3, [r7, #20]
 80014b8:	697a      	ldr	r2, [r7, #20]
 80014ba:	4b0a      	ldr	r3, [pc, #40]	; (80014e4 <USB_OTG_CoreReset+0x9c>)
 80014bc:	429a      	cmp	r2, r3
 80014be:	d805      	bhi.n	80014cc <USB_OTG_CoreReset+0x84>
    {
      break;
    }
  }
  while (greset.b.csftrst == 1);
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d1ee      	bne.n	80014a8 <USB_OTG_CoreReset+0x60>
 80014ca:	e000      	b.n	80014ce <USB_OTG_CoreReset+0x86>
  do
  {
    greset.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GRSTCTL);
    if (++count > 200000)
    {
      break;
 80014cc:	bf00      	nop
    }
  }
  while (greset.b.csftrst == 1);
  /* Wait for 3 PHY Clocks*/
  USB_OTG_BSP_uDelay(3);
 80014ce:	f04f 0003 	mov.w	r0, #3
 80014d2:	f7ff fd85 	bl	8000fe0 <USB_OTG_BSP_uDelay>
  return status;
 80014d6:	7cfb      	ldrb	r3, [r7, #19]
}
 80014d8:	4618      	mov	r0, r3
 80014da:	f107 0718 	add.w	r7, r7, #24
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	00030d40 	.word	0x00030d40

080014e8 <USB_OTG_WritePacket>:
*/
USB_OTG_STS USB_OTG_WritePacket(USB_OTG_CORE_HANDLE *pdev, 
                                uint8_t             *src, 
                                uint8_t             ch_ep_num, 
                                uint16_t            len)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b089      	sub	sp, #36	; 0x24
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	60f8      	str	r0, [r7, #12]
 80014f0:	60b9      	str	r1, [r7, #8]
 80014f2:	71fa      	strb	r2, [r7, #7]
 80014f4:	80bb      	strh	r3, [r7, #4]
  USB_OTG_STS status = USB_OTG_OK;
 80014f6:	f04f 0300 	mov.w	r3, #0
 80014fa:	76fb      	strb	r3, [r7, #27]
  if (pdev->cfg.dma_enable == 0)
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	78db      	ldrb	r3, [r3, #3]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d12c      	bne.n	800155e <USB_OTG_WritePacket+0x76>
  {
    uint32_t count32b= 0 , i= 0;
 8001504:	f04f 0300 	mov.w	r3, #0
 8001508:	617b      	str	r3, [r7, #20]
 800150a:	f04f 0300 	mov.w	r3, #0
 800150e:	61fb      	str	r3, [r7, #28]
    __IO uint32_t *fifo;
    
    count32b =  (len + 3) / 4;
 8001510:	88bb      	ldrh	r3, [r7, #4]
 8001512:	f103 0303 	add.w	r3, r3, #3
 8001516:	2b00      	cmp	r3, #0
 8001518:	da01      	bge.n	800151e <USB_OTG_WritePacket+0x36>
 800151a:	f103 0303 	add.w	r3, r3, #3
 800151e:	ea4f 03a3 	mov.w	r3, r3, asr #2
 8001522:	617b      	str	r3, [r7, #20]
    fifo = pdev->regs.DFIFO[ch_ep_num];
 8001524:	79fb      	ldrb	r3, [r7, #7]
 8001526:	68fa      	ldr	r2, [r7, #12]
 8001528:	f103 0332 	add.w	r3, r3, #50	; 0x32
 800152c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001530:	18d3      	adds	r3, r2, r3
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	613b      	str	r3, [r7, #16]
    for (i = 0; i < count32b; i++, src+=4)
 8001536:	f04f 0300 	mov.w	r3, #0
 800153a:	61fb      	str	r3, [r7, #28]
 800153c:	e00b      	b.n	8001556 <USB_OTG_WritePacket+0x6e>
    {
      USB_OTG_WRITE_REG32( fifo, *((__packed uint32_t *)src) );
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	601a      	str	r2, [r3, #0]
    uint32_t count32b= 0 , i= 0;
    __IO uint32_t *fifo;
    
    count32b =  (len + 3) / 4;
    fifo = pdev->regs.DFIFO[ch_ep_num];
    for (i = 0; i < count32b; i++, src+=4)
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	f103 0301 	add.w	r3, r3, #1
 800154c:	61fb      	str	r3, [r7, #28]
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	f103 0304 	add.w	r3, r3, #4
 8001554:	60bb      	str	r3, [r7, #8]
 8001556:	69fa      	ldr	r2, [r7, #28]
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	429a      	cmp	r2, r3
 800155c:	d3ef      	bcc.n	800153e <USB_OTG_WritePacket+0x56>
    {
      USB_OTG_WRITE_REG32( fifo, *((__packed uint32_t *)src) );
    }
  }
  return status;
 800155e:	7efb      	ldrb	r3, [r7, #27]
}
 8001560:	4618      	mov	r0, r3
 8001562:	f107 0724 	add.w	r7, r7, #36	; 0x24
 8001566:	46bd      	mov	sp, r7
 8001568:	bc80      	pop	{r7}
 800156a:	4770      	bx	lr

0800156c <USB_OTG_ReadPacket>:
* @retval None
*/
void *USB_OTG_ReadPacket(USB_OTG_CORE_HANDLE *pdev, 
                         uint8_t *dest, 
                         uint16_t len)
{
 800156c:	b480      	push	{r7}
 800156e:	b089      	sub	sp, #36	; 0x24
 8001570:	af00      	add	r7, sp, #0
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	60b9      	str	r1, [r7, #8]
 8001576:	4613      	mov	r3, r2
 8001578:	80fb      	strh	r3, [r7, #6]
  uint32_t i=0;
 800157a:	f04f 0300 	mov.w	r3, #0
 800157e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b = (len + 3) / 4;
 8001580:	88fb      	ldrh	r3, [r7, #6]
 8001582:	f103 0303 	add.w	r3, r3, #3
 8001586:	2b00      	cmp	r3, #0
 8001588:	da01      	bge.n	800158e <USB_OTG_ReadPacket+0x22>
 800158a:	f103 0303 	add.w	r3, r3, #3
 800158e:	ea4f 03a3 	mov.w	r3, r3, asr #2
 8001592:	61bb      	str	r3, [r7, #24]
  
  __IO uint32_t *fifo = pdev->regs.DFIFO[0];
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800159a:	617b      	str	r3, [r7, #20]
  
  for ( i = 0; i < count32b; i++, dest += 4 )
 800159c:	f04f 0300 	mov.w	r3, #0
 80015a0:	61fb      	str	r3, [r7, #28]
 80015a2:	e00b      	b.n	80015bc <USB_OTG_ReadPacket+0x50>
  {
    *(__packed uint32_t *)dest = USB_OTG_READ_REG32(fifo);
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	697a      	ldr	r2, [r7, #20]
 80015a8:	6812      	ldr	r2, [r2, #0]
 80015aa:	601a      	str	r2, [r3, #0]
  uint32_t i=0;
  uint32_t count32b = (len + 3) / 4;
  
  __IO uint32_t *fifo = pdev->regs.DFIFO[0];
  
  for ( i = 0; i < count32b; i++, dest += 4 )
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	f103 0301 	add.w	r3, r3, #1
 80015b2:	61fb      	str	r3, [r7, #28]
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	f103 0304 	add.w	r3, r3, #4
 80015ba:	60bb      	str	r3, [r7, #8]
 80015bc:	69fa      	ldr	r2, [r7, #28]
 80015be:	69bb      	ldr	r3, [r7, #24]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d3ef      	bcc.n	80015a4 <USB_OTG_ReadPacket+0x38>
  {
    *(__packed uint32_t *)dest = USB_OTG_READ_REG32(fifo);
    
  }
  return ((void *)dest);
 80015c4:	68bb      	ldr	r3, [r7, #8]
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	f107 0724 	add.w	r7, r7, #36	; 0x24
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bc80      	pop	{r7}
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop

080015d4 <USB_OTG_SelectCore>:
* @param  coreID : USB OTG Core ID
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_SelectCore(USB_OTG_CORE_HANDLE *pdev, 
                               USB_OTG_CORE_ID_TypeDef coreID)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b087      	sub	sp, #28
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	460b      	mov	r3, r1
 80015de:	70fb      	strb	r3, [r7, #3]
  uint32_t i , baseAddress = 0;
 80015e0:	f04f 0300 	mov.w	r3, #0
 80015e4:	613b      	str	r3, [r7, #16]
  USB_OTG_STS status = USB_OTG_OK;
 80015e6:	f04f 0300 	mov.w	r3, #0
 80015ea:	73fb      	strb	r3, [r7, #15]
  
  pdev->cfg.dma_enable       = 0;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	f04f 0200 	mov.w	r2, #0
 80015f2:	70da      	strb	r2, [r3, #3]
  
  /* at startup the core is in FS mode */
  pdev->cfg.speed            = USB_OTG_SPEED_FULL;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	f04f 0201 	mov.w	r2, #1
 80015fa:	709a      	strb	r2, [r3, #2]
  pdev->cfg.mps              = USB_OTG_FS_MAX_PACKET_SIZE ;    
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	f04f 0240 	mov.w	r2, #64	; 0x40
 8001602:	809a      	strh	r2, [r3, #4]
    
  /* initialize device cfg following its address */
  if (coreID == USB_OTG_FS_CORE_ID)
 8001604:	78fb      	ldrb	r3, [r7, #3]
 8001606:	2b01      	cmp	r3, #1
 8001608:	d117      	bne.n	800163a <USB_OTG_SelectCore+0x66>
  {
    baseAddress                = USB_OTG_FS_BASE_ADDR;
 800160a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800160e:	613b      	str	r3, [r7, #16]
    pdev->cfg.coreID           = USB_OTG_FS_CORE_ID;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	f04f 0201 	mov.w	r2, #1
 8001616:	72da      	strb	r2, [r3, #11]
    pdev->cfg.host_channels    = 8 ;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	f04f 0208 	mov.w	r2, #8
 800161e:	701a      	strb	r2, [r3, #0]
    pdev->cfg.dev_endpoints    = 4 ;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f04f 0204 	mov.w	r2, #4
 8001626:	705a      	strb	r2, [r3, #1]
    pdev->cfg.TotalFifoSize    = 320; /* in 32-bits */
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800162e:	80da      	strh	r2, [r3, #6]
    pdev->cfg.phy_itface       = USB_OTG_EMBEDDED_PHY;     
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	f04f 0202 	mov.w	r2, #2
 8001636:	721a      	strb	r2, [r3, #8]
 8001638:	e014      	b.n	8001664 <USB_OTG_SelectCore+0x90>
    
#ifdef USB_OTG_FS_LOW_PWR_MGMT_SUPPORT    
    pdev->cfg.low_power        = 1;    
#endif     
  }
  else if (coreID == USB_OTG_HS_CORE_ID)
 800163a:	78fb      	ldrb	r3, [r7, #3]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d111      	bne.n	8001664 <USB_OTG_SelectCore+0x90>
  {
    baseAddress                = USB_OTG_HS_BASE_ADDR;
 8001640:	4b4f      	ldr	r3, [pc, #316]	; (8001780 <USB_OTG_SelectCore+0x1ac>)
 8001642:	613b      	str	r3, [r7, #16]
    pdev->cfg.coreID           = USB_OTG_HS_CORE_ID;    
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f04f 0200 	mov.w	r2, #0
 800164a:	72da      	strb	r2, [r3, #11]
    pdev->cfg.host_channels    = 12 ;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f04f 020c 	mov.w	r2, #12
 8001652:	701a      	strb	r2, [r3, #0]
    pdev->cfg.dev_endpoints    = 6 ;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	f04f 0206 	mov.w	r2, #6
 800165a:	705a      	strb	r2, [r3, #1]
    pdev->cfg.TotalFifoSize    = 1280;/* in 32-bits */
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8001662:	80da      	strh	r2, [r3, #6]
    pdev->cfg.low_power        = 1;    
#endif 
    
  }
  
  pdev->regs.GREGS = (USB_OTG_GREGS *)(baseAddress + \
 8001664:	693a      	ldr	r2, [r7, #16]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	60da      	str	r2, [r3, #12]
    USB_OTG_CORE_GLOBAL_REGS_OFFSET);
  pdev->regs.DREGS =  (USB_OTG_DREGS  *)  (baseAddress + \
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001670:	461a      	mov	r2, r3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	611a      	str	r2, [r3, #16]
    USB_OTG_DEV_GLOBAL_REG_OFFSET);
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8001676:	f04f 0300 	mov.w	r3, #0
 800167a:	617b      	str	r3, [r7, #20]
 800167c:	e023      	b.n	80016c6 <USB_OTG_SelectCore+0xf2>
  {
    pdev->regs.INEP_REGS[i]  = (USB_OTG_INEPREGS *)  \
      (baseAddress + USB_OTG_DEV_IN_EP_REG_OFFSET + \
        (i * USB_OTG_EP_REG_OFFSET));
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	ea4f 1243 	mov.w	r2, r3, lsl #5
    USB_OTG_DEV_GLOBAL_REG_OFFSET);
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
  {
    pdev->regs.INEP_REGS[i]  = (USB_OTG_INEPREGS *)  \
      (baseAddress + USB_OTG_DEV_IN_EP_REG_OFFSET + \
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	18d3      	adds	r3, r2, r3
 8001688:	f503 6310 	add.w	r3, r3, #2304	; 0x900
  pdev->regs.DREGS =  (USB_OTG_DREGS  *)  (baseAddress + \
    USB_OTG_DEV_GLOBAL_REG_OFFSET);
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
  {
    pdev->regs.INEP_REGS[i]  = (USB_OTG_INEPREGS *)  \
 800168c:	461a      	mov	r2, r3
 800168e:	6879      	ldr	r1, [r7, #4]
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	f103 0304 	add.w	r3, r3, #4
 8001696:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800169a:	18cb      	adds	r3, r1, r3
 800169c:	609a      	str	r2, [r3, #8]
      (baseAddress + USB_OTG_DEV_IN_EP_REG_OFFSET + \
        (i * USB_OTG_EP_REG_OFFSET));
    pdev->regs.OUTEP_REGS[i] = (USB_OTG_OUTEPREGS *) \
      (baseAddress + USB_OTG_DEV_OUT_EP_REG_OFFSET + \
        (i * USB_OTG_EP_REG_OFFSET));
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	ea4f 1243 	mov.w	r2, r3, lsl #5
  {
    pdev->regs.INEP_REGS[i]  = (USB_OTG_INEPREGS *)  \
      (baseAddress + USB_OTG_DEV_IN_EP_REG_OFFSET + \
        (i * USB_OTG_EP_REG_OFFSET));
    pdev->regs.OUTEP_REGS[i] = (USB_OTG_OUTEPREGS *) \
      (baseAddress + USB_OTG_DEV_OUT_EP_REG_OFFSET + \
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	18d3      	adds	r3, r2, r3
 80016a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
  {
    pdev->regs.INEP_REGS[i]  = (USB_OTG_INEPREGS *)  \
      (baseAddress + USB_OTG_DEV_IN_EP_REG_OFFSET + \
        (i * USB_OTG_EP_REG_OFFSET));
    pdev->regs.OUTEP_REGS[i] = (USB_OTG_OUTEPREGS *) \
 80016ac:	461a      	mov	r2, r3
 80016ae:	6879      	ldr	r1, [r7, #4]
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	f103 0314 	add.w	r3, r3, #20
 80016b6:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80016ba:	18cb      	adds	r3, r1, r3
 80016bc:	605a      	str	r2, [r3, #4]
  pdev->regs.GREGS = (USB_OTG_GREGS *)(baseAddress + \
    USB_OTG_CORE_GLOBAL_REGS_OFFSET);
  pdev->regs.DREGS =  (USB_OTG_DREGS  *)  (baseAddress + \
    USB_OTG_DEV_GLOBAL_REG_OFFSET);
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	f103 0301 	add.w	r3, r3, #1
 80016c4:	617b      	str	r3, [r7, #20]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	785b      	ldrb	r3, [r3, #1]
 80016ca:	461a      	mov	r2, r3
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	429a      	cmp	r2, r3
 80016d0:	d8d5      	bhi.n	800167e <USB_OTG_SelectCore+0xaa>
        (i * USB_OTG_EP_REG_OFFSET));
    pdev->regs.OUTEP_REGS[i] = (USB_OTG_OUTEPREGS *) \
      (baseAddress + USB_OTG_DEV_OUT_EP_REG_OFFSET + \
        (i * USB_OTG_EP_REG_OFFSET));
  }
  pdev->regs.HREGS = (USB_OTG_HREGS *)(baseAddress + \
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80016d8:	461a      	mov	r2, r3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	615a      	str	r2, [r3, #20]
    USB_OTG_HOST_GLOBAL_REG_OFFSET);
  pdev->regs.HPRT0 = (uint32_t *)(baseAddress + USB_OTG_HOST_PORT_REGS_OFFSET);
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80016e4:	461a      	mov	r2, r3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
  
  for (i = 0; i < pdev->cfg.host_channels; i++)
 80016ec:	f04f 0300 	mov.w	r3, #0
 80016f0:	617b      	str	r3, [r7, #20]
 80016f2:	e013      	b.n	800171c <USB_OTG_SelectCore+0x148>
  {
    pdev->regs.HC_REGS[i] = (USB_OTG_HC_REGS *)(baseAddress + \
      USB_OTG_HOST_CHAN_REGS_OFFSET + \
        (i * USB_OTG_CHAN_REGS_OFFSET));
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	ea4f 1243 	mov.w	r2, r3, lsl #5
  pdev->regs.HPRT0 = (uint32_t *)(baseAddress + USB_OTG_HOST_PORT_REGS_OFFSET);
  
  for (i = 0; i < pdev->cfg.host_channels; i++)
  {
    pdev->regs.HC_REGS[i] = (USB_OTG_HC_REGS *)(baseAddress + \
      USB_OTG_HOST_CHAN_REGS_OFFSET + \
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	18d3      	adds	r3, r2, r3
 80016fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
    USB_OTG_HOST_GLOBAL_REG_OFFSET);
  pdev->regs.HPRT0 = (uint32_t *)(baseAddress + USB_OTG_HOST_PORT_REGS_OFFSET);
  
  for (i = 0; i < pdev->cfg.host_channels; i++)
  {
    pdev->regs.HC_REGS[i] = (USB_OTG_HC_REGS *)(baseAddress + \
 8001702:	461a      	mov	r2, r3
 8001704:	6879      	ldr	r1, [r7, #4]
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	f103 0322 	add.w	r3, r3, #34	; 0x22
 800170c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001710:	18cb      	adds	r3, r1, r3
 8001712:	609a      	str	r2, [r3, #8]
  }
  pdev->regs.HREGS = (USB_OTG_HREGS *)(baseAddress + \
    USB_OTG_HOST_GLOBAL_REG_OFFSET);
  pdev->regs.HPRT0 = (uint32_t *)(baseAddress + USB_OTG_HOST_PORT_REGS_OFFSET);
  
  for (i = 0; i < pdev->cfg.host_channels; i++)
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	f103 0301 	add.w	r3, r3, #1
 800171a:	617b      	str	r3, [r7, #20]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	461a      	mov	r2, r3
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	429a      	cmp	r2, r3
 8001726:	d8e5      	bhi.n	80016f4 <USB_OTG_SelectCore+0x120>
  {
    pdev->regs.HC_REGS[i] = (USB_OTG_HC_REGS *)(baseAddress + \
      USB_OTG_HOST_CHAN_REGS_OFFSET + \
        (i * USB_OTG_CHAN_REGS_OFFSET));
  }
  for (i = 0; i < pdev->cfg.host_channels; i++)
 8001728:	f04f 0300 	mov.w	r3, #0
 800172c:	617b      	str	r3, [r7, #20]
 800172e:	e013      	b.n	8001758 <USB_OTG_SelectCore+0x184>
  {
    pdev->regs.DFIFO[i] = (uint32_t *)(baseAddress + USB_OTG_DATA_FIFO_OFFSET +\
      (i * USB_OTG_DATA_FIFO_SIZE));
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	ea4f 3203 	mov.w	r2, r3, lsl #12
      USB_OTG_HOST_CHAN_REGS_OFFSET + \
        (i * USB_OTG_CHAN_REGS_OFFSET));
  }
  for (i = 0; i < pdev->cfg.host_channels; i++)
  {
    pdev->regs.DFIFO[i] = (uint32_t *)(baseAddress + USB_OTG_DATA_FIFO_OFFSET +\
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	18d3      	adds	r3, r2, r3
 800173a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800173e:	461a      	mov	r2, r3
 8001740:	6879      	ldr	r1, [r7, #4]
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	f103 0332 	add.w	r3, r3, #50	; 0x32
 8001748:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800174c:	18cb      	adds	r3, r1, r3
 800174e:	609a      	str	r2, [r3, #8]
  {
    pdev->regs.HC_REGS[i] = (USB_OTG_HC_REGS *)(baseAddress + \
      USB_OTG_HOST_CHAN_REGS_OFFSET + \
        (i * USB_OTG_CHAN_REGS_OFFSET));
  }
  for (i = 0; i < pdev->cfg.host_channels; i++)
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	f103 0301 	add.w	r3, r3, #1
 8001756:	617b      	str	r3, [r7, #20]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	461a      	mov	r2, r3
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	429a      	cmp	r2, r3
 8001762:	d8e5      	bhi.n	8001730 <USB_OTG_SelectCore+0x15c>
  {
    pdev->regs.DFIFO[i] = (uint32_t *)(baseAddress + USB_OTG_DATA_FIFO_OFFSET +\
      (i * USB_OTG_DATA_FIFO_SIZE));
  }
  pdev->regs.PCGCCTL = (uint32_t *)(baseAddress + USB_OTG_PCGCCTL_OFFSET);
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800176a:	461a      	mov	r2, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  
  return status;
 8001772:	7bfb      	ldrb	r3, [r7, #15]
}
 8001774:	4618      	mov	r0, r3
 8001776:	f107 071c 	add.w	r7, r7, #28
 800177a:	46bd      	mov	sp, r7
 800177c:	bc80      	pop	{r7}
 800177e:	4770      	bx	lr
 8001780:	40040000 	.word	0x40040000

08001784 <USB_OTG_CoreInit>:
*         device mode or host mode operation.
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_CoreInit(USB_OTG_CORE_HANDLE *pdev)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b088      	sub	sp, #32
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  USB_OTG_STS status = USB_OTG_OK;
 800178c:	f04f 0300 	mov.w	r3, #0
 8001790:	77fb      	strb	r3, [r7, #31]
  USB_OTG_GUSBCFG_TypeDef  usbcfg;
  USB_OTG_GCCFG_TypeDef    gccfg;
  USB_OTG_GI2CCTL_TypeDef  i2cctl;
  USB_OTG_GAHBCFG_TypeDef  ahbcfg;
  
  usbcfg.d32 = 0;
 8001792:	f04f 0300 	mov.w	r3, #0
 8001796:	61bb      	str	r3, [r7, #24]
  gccfg.d32 = 0;
 8001798:	f04f 0300 	mov.w	r3, #0
 800179c:	617b      	str	r3, [r7, #20]
  ahbcfg.d32 = 0;
 800179e:	f04f 0300 	mov.w	r3, #0
 80017a2:	60fb      	str	r3, [r7, #12]
  

  
  if (pdev->cfg.phy_itface == USB_OTG_ULPI_PHY)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	7a1b      	ldrb	r3, [r3, #8]
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d151      	bne.n	8001850 <USB_OTG_CoreInit+0xcc>
  {
    gccfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GCCFG);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017b2:	617b      	str	r3, [r7, #20]
    gccfg.b.pwdn = 0;
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	f36f 4310 	bfc	r3, #16, #1
 80017ba:	617b      	str	r3, [r7, #20]
    
    if (pdev->cfg.Sof_output)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	7a5b      	ldrb	r3, [r3, #9]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d003      	beq.n	80017cc <USB_OTG_CoreInit+0x48>
    {
      gccfg.b.sofouten = 1;   
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80017ca:	617b      	str	r3, [r7, #20]
    }
    USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GCCFG, gccfg.d32);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	697a      	ldr	r2, [r7, #20]
 80017d2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Init The ULPI Interface */
    usbcfg.d32 = 0;
 80017d4:	f04f 0300 	mov.w	r3, #0
 80017d8:	61bb      	str	r3, [r7, #24]
    usbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	68db      	ldr	r3, [r3, #12]
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	61bb      	str	r3, [r7, #24]
    
    usbcfg.b.physel            = 0; /* HS Interface */
 80017e2:	69bb      	ldr	r3, [r7, #24]
 80017e4:	f36f 1386 	bfc	r3, #6, #1
 80017e8:	61bb      	str	r3, [r7, #24]
#else
 #ifdef USB_OTG_EXTERNAL_VBUS_ENABLED    
    usbcfg.b.ulpi_ext_vbus_drv = 1; /* Use external VBUS */
 #endif
#endif 
    usbcfg.b.term_sel_dl_pulse = 0; /* Data line pulsing using utmi_txvalid */    
 80017ea:	69bb      	ldr	r3, [r7, #24]
 80017ec:	f36f 5396 	bfc	r3, #22, #1
 80017f0:	61bb      	str	r3, [r7, #24]
    usbcfg.b.ulpi_utmi_sel     = 1; /* ULPI seleInterfacect */
 80017f2:	69bb      	ldr	r3, [r7, #24]
 80017f4:	f043 0310 	orr.w	r3, r3, #16
 80017f8:	61bb      	str	r3, [r7, #24]
    
    usbcfg.b.phyif             = 0; /* 8 bits */
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	f36f 03c3 	bfc	r3, #3, #1
 8001800:	61bb      	str	r3, [r7, #24]
    usbcfg.b.ddrsel            = 0; /* single data rate */
 8001802:	69bb      	ldr	r3, [r7, #24]
 8001804:	f36f 13c7 	bfc	r3, #7, #1
 8001808:	61bb      	str	r3, [r7, #24]
    
    usbcfg.b.ulpi_fsls = 0;
 800180a:	69bb      	ldr	r3, [r7, #24]
 800180c:	f36f 4351 	bfc	r3, #17, #1
 8001810:	61bb      	str	r3, [r7, #24]
    usbcfg.b.ulpi_clk_sus_m = 0;
 8001812:	69bb      	ldr	r3, [r7, #24]
 8001814:	f36f 43d3 	bfc	r3, #19, #1
 8001818:	61bb      	str	r3, [r7, #24]
    USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GUSBCFG, usbcfg.d32);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	68db      	ldr	r3, [r3, #12]
 800181e:	69ba      	ldr	r2, [r7, #24]
 8001820:	60da      	str	r2, [r3, #12]
    
    /* Reset after a PHY select  */
    USB_OTG_CoreReset(pdev);
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f7ff fe10 	bl	8001448 <USB_OTG_CoreReset>
    
    if(pdev->cfg.dma_enable == 1)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	78db      	ldrb	r3, [r3, #3]
 800182c:	2b01      	cmp	r3, #1
 800182e:	f040 8089 	bne.w	8001944 <USB_OTG_CoreInit+0x1c0>
    {
      
      ahbcfg.b.hburstlen = 5; /* 64 x 32-bits*/
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	f04f 0205 	mov.w	r2, #5
 8001838:	f362 0344 	bfi	r3, r2, #1, #4
 800183c:	60fb      	str	r3, [r7, #12]
      ahbcfg.b.dmaenable = 1;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	f043 0320 	orr.w	r3, r3, #32
 8001844:	60fb      	str	r3, [r7, #12]
      USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GAHBCFG, ahbcfg.d32);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	68db      	ldr	r3, [r3, #12]
 800184a:	68fa      	ldr	r2, [r7, #12]
 800184c:	609a      	str	r2, [r3, #8]
 800184e:	e079      	b.n	8001944 <USB_OTG_CoreInit+0x1c0>
    }    
  }
  else /* FS interface (embedded Phy or I2C Phy) */
  {
    
    usbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	68db      	ldr	r3, [r3, #12]
 8001856:	61bb      	str	r3, [r7, #24]
    usbcfg.b.physel  = 1; /* FS Interface */
 8001858:	69bb      	ldr	r3, [r7, #24]
 800185a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800185e:	61bb      	str	r3, [r7, #24]
    USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GUSBCFG, usbcfg.d32);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	69ba      	ldr	r2, [r7, #24]
 8001866:	60da      	str	r2, [r3, #12]
    /* Reset after a PHY select and set Host mode */
    USB_OTG_CoreReset(pdev);
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f7ff fded 	bl	8001448 <USB_OTG_CoreReset>
    /* Enable the I2C interface and deactivate the power down*/
    gccfg.d32 = 0;
 800186e:	f04f 0300 	mov.w	r3, #0
 8001872:	617b      	str	r3, [r7, #20]
    gccfg.b.pwdn = 1;
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800187a:	617b      	str	r3, [r7, #20]
    
    if(pdev->cfg.phy_itface == USB_OTG_I2C_PHY)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	7a1b      	ldrb	r3, [r3, #8]
 8001880:	2b03      	cmp	r3, #3
 8001882:	d103      	bne.n	800188c <USB_OTG_CoreInit+0x108>
    {
      gccfg.b.i2cifen = 1;
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800188a:	617b      	str	r3, [r7, #20]
    }   
    gccfg.b.vbussensingA = 1 ;
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001892:	617b      	str	r3, [r7, #20]
    gccfg.b.vbussensingB = 1 ;     
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800189a:	617b      	str	r3, [r7, #20]
#ifndef VBUS_SENSING_ENABLED
    gccfg.b.disablevbussensing = 1; 
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018a2:	617b      	str	r3, [r7, #20]
#endif    
    
    if(pdev->cfg.Sof_output)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	7a5b      	ldrb	r3, [r3, #9]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d003      	beq.n	80018b4 <USB_OTG_CoreInit+0x130>
    {
      gccfg.b.sofouten = 1;  
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80018b2:	617b      	str	r3, [r7, #20]
    }
    
    USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GCCFG, gccfg.d32);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	697a      	ldr	r2, [r7, #20]
 80018ba:	639a      	str	r2, [r3, #56]	; 0x38
    USB_OTG_BSP_mDelay(20);
 80018bc:	f04f 0014 	mov.w	r0, #20
 80018c0:	f7ff fbb2 	bl	8001028 <USB_OTG_BSP_mDelay>
    /* Program GUSBCFG.OtgUtmifsSel to I2C*/
    usbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	68db      	ldr	r3, [r3, #12]
 80018ca:	61bb      	str	r3, [r7, #24]
    
    if(pdev->cfg.phy_itface == USB_OTG_I2C_PHY)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	7a1b      	ldrb	r3, [r3, #8]
 80018d0:	2b03      	cmp	r3, #3
 80018d2:	d103      	bne.n	80018dc <USB_OTG_CoreInit+0x158>
    {
      usbcfg.b.otgutmifssel = 1;
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018da:	61bb      	str	r3, [r7, #24]
    }
    
    USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GUSBCFG, usbcfg.d32);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	60da      	str	r2, [r3, #12]
    
    if(pdev->cfg.phy_itface == USB_OTG_I2C_PHY)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	7a1b      	ldrb	r3, [r3, #8]
 80018e8:	2b03      	cmp	r3, #3
 80018ea:	d12b      	bne.n	8001944 <USB_OTG_CoreInit+0x1c0>
    {
      /*Program GI2CCTL.I2CEn*/
      i2cctl.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GI2CCTL);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	613b      	str	r3, [r7, #16]
      i2cctl.b.i2cdevaddr = 1;
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	f04f 0201 	mov.w	r2, #1
 80018fa:	f362 639b 	bfi	r3, r2, #26, #2
 80018fe:	613b      	str	r3, [r7, #16]
      i2cctl.b.i2cen = 0;
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	f36f 53d7 	bfc	r3, #23, #1
 8001906:	613b      	str	r3, [r7, #16]
      i2cctl.b.dat_se0 = 1;
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800190e:	613b      	str	r3, [r7, #16]
      i2cctl.b.addr = 0x2D;
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	f04f 022d 	mov.w	r2, #45	; 0x2d
 8001916:	f362 4316 	bfi	r3, r2, #16, #7
 800191a:	613b      	str	r3, [r7, #16]
      USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GI2CCTL, i2cctl.d32);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	693a      	ldr	r2, [r7, #16]
 8001922:	631a      	str	r2, [r3, #48]	; 0x30
      
      USB_OTG_BSP_mDelay(200);
 8001924:	f04f 00c8 	mov.w	r0, #200	; 0xc8
 8001928:	f7ff fb7e 	bl	8001028 <USB_OTG_BSP_mDelay>
      
      i2cctl.b.i2cen = 1;
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001932:	613b      	str	r3, [r7, #16]
      USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GI2CCTL, i2cctl.d32);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	693a      	ldr	r2, [r7, #16]
 800193a:	631a      	str	r2, [r3, #48]	; 0x30
      USB_OTG_BSP_mDelay(200);
 800193c:	f04f 00c8 	mov.w	r0, #200	; 0xc8
 8001940:	f7ff fb72 	bl	8001028 <USB_OTG_BSP_mDelay>
    }
  }
  /* case the HS core is working in FS mode */
  if(pdev->cfg.dma_enable == 1)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	78db      	ldrb	r3, [r3, #3]
 8001948:	2b01      	cmp	r3, #1
 800194a:	d111      	bne.n	8001970 <USB_OTG_CoreInit+0x1ec>
  {
    
    ahbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GAHBCFG);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	60fb      	str	r3, [r7, #12]
    ahbcfg.b.hburstlen = 5; /* 64 x 32-bits*/
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	f04f 0205 	mov.w	r2, #5
 800195a:	f362 0344 	bfi	r3, r2, #1, #4
 800195e:	60fb      	str	r3, [r7, #12]
    ahbcfg.b.dmaenable = 1;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	f043 0320 	orr.w	r3, r3, #32
 8001966:	60fb      	str	r3, [r7, #12]
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GAHBCFG, ahbcfg.d32);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	68fa      	ldr	r2, [r7, #12]
 800196e:	609a      	str	r2, [r3, #8]
  usbcfg.b.hnpcap = 1;
  usbcfg.b.srpcap = 1;
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GUSBCFG, usbcfg.d32);
  USB_OTG_EnableCommonInt(pdev);
#endif
  return status;
 8001970:	7ffb      	ldrb	r3, [r7, #31]
}
 8001972:	4618      	mov	r0, r3
 8001974:	f107 0720 	add.w	r7, r7, #32
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}

0800197c <USB_OTG_EnableGlobalInt>:
*         Enables the controller's Global Int in the AHB Config reg
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EnableGlobalInt(USB_OTG_CORE_HANDLE *pdev)
{
 800197c:	b480      	push	{r7}
 800197e:	b085      	sub	sp, #20
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  USB_OTG_STS status = USB_OTG_OK;
 8001984:	f04f 0300 	mov.w	r3, #0
 8001988:	73fb      	strb	r3, [r7, #15]
  USB_OTG_GAHBCFG_TypeDef  ahbcfg;
  
  ahbcfg.d32 = 0;
 800198a:	f04f 0300 	mov.w	r3, #0
 800198e:	60bb      	str	r3, [r7, #8]
  ahbcfg.b.glblintrmsk = 1; /* Enable interrupts */
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	f043 0301 	orr.w	r3, r3, #1
 8001996:	60bb      	str	r3, [r7, #8]
  USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GAHBCFG, 0, ahbcfg.d32);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	68d2      	ldr	r2, [r2, #12]
 80019a0:	6891      	ldr	r1, [r2, #8]
 80019a2:	68ba      	ldr	r2, [r7, #8]
 80019a4:	ea41 0202 	orr.w	r2, r1, r2
 80019a8:	609a      	str	r2, [r3, #8]
  return status;
 80019aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	f107 0714 	add.w	r7, r7, #20
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bc80      	pop	{r7}
 80019b6:	4770      	bx	lr

080019b8 <USB_OTG_DisableGlobalInt>:
*         Enables the controller's Global Int in the AHB Config reg
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_DisableGlobalInt(USB_OTG_CORE_HANDLE *pdev)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b085      	sub	sp, #20
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  USB_OTG_STS status = USB_OTG_OK;
 80019c0:	f04f 0300 	mov.w	r3, #0
 80019c4:	73fb      	strb	r3, [r7, #15]
  USB_OTG_GAHBCFG_TypeDef  ahbcfg;
  ahbcfg.d32 = 0;
 80019c6:	f04f 0300 	mov.w	r3, #0
 80019ca:	60bb      	str	r3, [r7, #8]
  ahbcfg.b.glblintrmsk = 1; /* Enable interrupts */
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	f043 0301 	orr.w	r3, r3, #1
 80019d2:	60bb      	str	r3, [r7, #8]
  USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GAHBCFG, ahbcfg.d32, 0);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	687a      	ldr	r2, [r7, #4]
 80019da:	68d2      	ldr	r2, [r2, #12]
 80019dc:	6891      	ldr	r1, [r2, #8]
 80019de:	68ba      	ldr	r2, [r7, #8]
 80019e0:	ea6f 0202 	mvn.w	r2, r2
 80019e4:	ea01 0202 	and.w	r2, r1, r2
 80019e8:	609a      	str	r2, [r3, #8]
  return status;
 80019ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	f107 0714 	add.w	r7, r7, #20
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bc80      	pop	{r7}
 80019f6:	4770      	bx	lr

080019f8 <USB_OTG_FlushTxFifo>:
* @param  pdev : Selected device
* @param  num : FO num
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_FlushTxFifo (USB_OTG_CORE_HANDLE *pdev , uint32_t num )
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
  USB_OTG_STS status = USB_OTG_OK;
 8001a02:	f04f 0300 	mov.w	r3, #0
 8001a06:	74fb      	strb	r3, [r7, #19]
  __IO USB_OTG_GRSTCTL_TypeDef  greset;
  
  uint32_t count = 0;
 8001a08:	f04f 0300 	mov.w	r3, #0
 8001a0c:	617b      	str	r3, [r7, #20]
  greset.d32 = 0;
 8001a0e:	f04f 0300 	mov.w	r3, #0
 8001a12:	60fb      	str	r3, [r7, #12]
  greset.b.txfflsh = 1;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	f043 0320 	orr.w	r3, r3, #32
 8001a1a:	60fb      	str	r3, [r7, #12]
  greset.b.txfnum  = num;
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	f003 031f 	and.w	r3, r3, #31
 8001a24:	b2da      	uxtb	r2, r3
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	f362 138a 	bfi	r3, r2, #6, #5
 8001a2c:	60fb      	str	r3, [r7, #12]
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GRSTCTL, greset.d32 );
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	68db      	ldr	r3, [r3, #12]
 8001a32:	68fa      	ldr	r2, [r7, #12]
 8001a34:	611a      	str	r2, [r3, #16]
  do
  {
    greset.d32 = USB_OTG_READ_REG32( &pdev->regs.GREGS->GRSTCTL);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	68db      	ldr	r3, [r3, #12]
 8001a3a:	691b      	ldr	r3, [r3, #16]
 8001a3c:	60fb      	str	r3, [r7, #12]
    if (++count > 200000)
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	f103 0301 	add.w	r3, r3, #1
 8001a44:	617b      	str	r3, [r7, #20]
 8001a46:	697a      	ldr	r2, [r7, #20]
 8001a48:	4b09      	ldr	r3, [pc, #36]	; (8001a70 <USB_OTG_FlushTxFifo+0x78>)
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d805      	bhi.n	8001a5a <USB_OTG_FlushTxFifo+0x62>
    {
      break;
    }
  }
  while (greset.b.txfflsh == 1);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	f003 0320 	and.w	r3, r3, #32
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d1ee      	bne.n	8001a36 <USB_OTG_FlushTxFifo+0x3e>
 8001a58:	e000      	b.n	8001a5c <USB_OTG_FlushTxFifo+0x64>
  do
  {
    greset.d32 = USB_OTG_READ_REG32( &pdev->regs.GREGS->GRSTCTL);
    if (++count > 200000)
    {
      break;
 8001a5a:	bf00      	nop
    }
  }
  while (greset.b.txfflsh == 1);
  /* Wait for 3 PHY Clocks*/
  USB_OTG_BSP_uDelay(3);
 8001a5c:	f04f 0003 	mov.w	r0, #3
 8001a60:	f7ff fabe 	bl	8000fe0 <USB_OTG_BSP_uDelay>
  return status;
 8001a64:	7cfb      	ldrb	r3, [r7, #19]
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	f107 0718 	add.w	r7, r7, #24
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	00030d40 	.word	0x00030d40

08001a74 <USB_OTG_FlushRxFifo>:
* @brief  USB_OTG_FlushRxFifo : Flush a Rx FIFO
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_FlushRxFifo( USB_OTG_CORE_HANDLE *pdev )
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b086      	sub	sp, #24
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  USB_OTG_STS status = USB_OTG_OK;
 8001a7c:	f04f 0300 	mov.w	r3, #0
 8001a80:	74fb      	strb	r3, [r7, #19]
  __IO USB_OTG_GRSTCTL_TypeDef  greset;
  uint32_t count = 0;
 8001a82:	f04f 0300 	mov.w	r3, #0
 8001a86:	617b      	str	r3, [r7, #20]
  
  greset.d32 = 0;
 8001a88:	f04f 0300 	mov.w	r3, #0
 8001a8c:	60fb      	str	r3, [r7, #12]
  greset.b.rxfflsh = 1;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	f043 0310 	orr.w	r3, r3, #16
 8001a94:	60fb      	str	r3, [r7, #12]
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GRSTCTL, greset.d32 );
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	68db      	ldr	r3, [r3, #12]
 8001a9a:	68fa      	ldr	r2, [r7, #12]
 8001a9c:	611a      	str	r2, [r3, #16]
  do
  {
    greset.d32 = USB_OTG_READ_REG32( &pdev->regs.GREGS->GRSTCTL);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	68db      	ldr	r3, [r3, #12]
 8001aa2:	691b      	ldr	r3, [r3, #16]
 8001aa4:	60fb      	str	r3, [r7, #12]
    if (++count > 200000)
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	f103 0301 	add.w	r3, r3, #1
 8001aac:	617b      	str	r3, [r7, #20]
 8001aae:	697a      	ldr	r2, [r7, #20]
 8001ab0:	4b09      	ldr	r3, [pc, #36]	; (8001ad8 <USB_OTG_FlushRxFifo+0x64>)
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d805      	bhi.n	8001ac2 <USB_OTG_FlushRxFifo+0x4e>
    {
      break;
    }
  }
  while (greset.b.rxfflsh == 1);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	f003 0310 	and.w	r3, r3, #16
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d1ee      	bne.n	8001a9e <USB_OTG_FlushRxFifo+0x2a>
 8001ac0:	e000      	b.n	8001ac4 <USB_OTG_FlushRxFifo+0x50>
  do
  {
    greset.d32 = USB_OTG_READ_REG32( &pdev->regs.GREGS->GRSTCTL);
    if (++count > 200000)
    {
      break;
 8001ac2:	bf00      	nop
    }
  }
  while (greset.b.rxfflsh == 1);
  /* Wait for 3 PHY Clocks*/
  USB_OTG_BSP_uDelay(3);
 8001ac4:	f04f 0003 	mov.w	r0, #3
 8001ac8:	f7ff fa8a 	bl	8000fe0 <USB_OTG_BSP_uDelay>
  return status;
 8001acc:	7cfb      	ldrb	r3, [r7, #19]
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f107 0718 	add.w	r7, r7, #24
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	00030d40 	.word	0x00030d40

08001adc <USB_OTG_SetCurrentMode>:
* @param  pdev : Selected device
* @param  mode :  (Host/device)
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_SetCurrentMode(USB_OTG_CORE_HANDLE *pdev , uint8_t mode)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_STS status = USB_OTG_OK;
 8001ae8:	f04f 0300 	mov.w	r3, #0
 8001aec:	73fb      	strb	r3, [r7, #15]
  USB_OTG_GUSBCFG_TypeDef  usbcfg;
  
  usbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	68db      	ldr	r3, [r3, #12]
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	60bb      	str	r3, [r7, #8]
  
  usbcfg.b.force_host = 0;
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	f36f 735d 	bfc	r3, #29, #1
 8001afc:	60bb      	str	r3, [r7, #8]
  usbcfg.b.force_dev = 0;
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	f36f 739e 	bfc	r3, #30, #1
 8001b04:	60bb      	str	r3, [r7, #8]
  
  if ( mode == HOST_MODE)
 8001b06:	78fb      	ldrb	r3, [r7, #3]
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d104      	bne.n	8001b16 <USB_OTG_SetCurrentMode+0x3a>
  {
    usbcfg.b.force_host = 1;
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001b12:	60bb      	str	r3, [r7, #8]
 8001b14:	e006      	b.n	8001b24 <USB_OTG_SetCurrentMode+0x48>
  }
  else if ( mode == DEVICE_MODE)
 8001b16:	78fb      	ldrb	r3, [r7, #3]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d103      	bne.n	8001b24 <USB_OTG_SetCurrentMode+0x48>
  {
    usbcfg.b.force_dev = 1;
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001b22:	60bb      	str	r3, [r7, #8]
  }
  
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GUSBCFG, usbcfg.d32);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	68ba      	ldr	r2, [r7, #8]
 8001b2a:	60da      	str	r2, [r3, #12]
  USB_OTG_BSP_mDelay(50);
 8001b2c:	f04f 0032 	mov.w	r0, #50	; 0x32
 8001b30:	f7ff fa7a 	bl	8001028 <USB_OTG_BSP_mDelay>
  return status;
 8001b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	f107 0710 	add.w	r7, r7, #16
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <USB_OTG_GetMode>:
* @brief  USB_OTG_GetMode : Get current mode
* @param  pdev : Selected device
* @retval current mode
*/
uint32_t USB_OTG_GetMode(USB_OTG_CORE_HANDLE *pdev)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  return (USB_OTG_READ_REG32(&pdev->regs.GREGS->GINTSTS ) & 0x1);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	695b      	ldr	r3, [r3, #20]
 8001b4e:	f003 0301 	and.w	r3, r3, #1
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	f107 070c 	add.w	r7, r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bc80      	pop	{r7}
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop

08001b60 <USB_OTG_IsDeviceMode>:
* @brief  USB_OTG_IsDeviceMode : Check if it is device mode
* @param  pdev : Selected device
* @retval num_in_ep
*/
uint8_t USB_OTG_IsDeviceMode(USB_OTG_CORE_HANDLE *pdev)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  return (USB_OTG_GetMode(pdev) != HOST_MODE);
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f7ff ffe9 	bl	8001b40 <USB_OTG_GetMode>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	bf0c      	ite	eq
 8001b74:	2300      	moveq	r3, #0
 8001b76:	2301      	movne	r3, #1
 8001b78:	b2db      	uxtb	r3, r3
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f107 0708 	add.w	r7, r7, #8
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <USB_OTG_ReadCoreItr>:
* @brief  USB_OTG_ReadCoreItr : returns the Core Interrupt register
* @param  pdev : Selected device
* @retval Status
*/
uint32_t USB_OTG_ReadCoreItr(USB_OTG_CORE_HANDLE *pdev)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b085      	sub	sp, #20
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  uint32_t v = 0;
 8001b8c:	f04f 0300 	mov.w	r3, #0
 8001b90:	60fb      	str	r3, [r7, #12]
  v = USB_OTG_READ_REG32(&pdev->regs.GREGS->GINTSTS);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	68db      	ldr	r3, [r3, #12]
 8001b96:	695b      	ldr	r3, [r3, #20]
 8001b98:	60fb      	str	r3, [r7, #12]
  v &= USB_OTG_READ_REG32(&pdev->regs.GREGS->GINTMSK);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	68db      	ldr	r3, [r3, #12]
 8001b9e:	699b      	ldr	r3, [r3, #24]
 8001ba0:	68fa      	ldr	r2, [r7, #12]
 8001ba2:	ea02 0303 	and.w	r3, r2, r3
 8001ba6:	60fb      	str	r3, [r7, #12]
  return v;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	f107 0714 	add.w	r7, r7, #20
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bc80      	pop	{r7}
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop

08001bb8 <USB_OTG_InitDevSpeed>:
*         depending the PHY type and the enumeration speed of the device.
* @param  pdev : Selected device
* @retval : None
*/
void USB_OTG_InitDevSpeed(USB_OTG_CORE_HANDLE *pdev , uint8_t speed)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b085      	sub	sp, #20
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_DCFG_TypeDef   dcfg;
  
  dcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DCFG);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	691b      	ldr	r3, [r3, #16]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	60fb      	str	r3, [r7, #12]
  dcfg.b.devspd = speed;
 8001bcc:	78fb      	ldrb	r3, [r7, #3]
 8001bce:	f003 0303 	and.w	r3, r3, #3
 8001bd2:	b2da      	uxtb	r2, r3
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	f362 0301 	bfi	r3, r2, #0, #2
 8001bda:	60fb      	str	r3, [r7, #12]
  USB_OTG_WRITE_REG32(&pdev->regs.DREGS->DCFG, dcfg.d32);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	691b      	ldr	r3, [r3, #16]
 8001be0:	68fa      	ldr	r2, [r7, #12]
 8001be2:	601a      	str	r2, [r3, #0]
}
 8001be4:	f107 0714 	add.w	r7, r7, #20
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bc80      	pop	{r7}
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop

08001bf0 <USB_OTG_CoreInitDev>:
*         for device mode
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_CoreInitDev (USB_OTG_CORE_HANDLE *pdev)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b08c      	sub	sp, #48	; 0x30
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  USB_OTG_STS             status       = USB_OTG_OK;
 8001bf8:	f04f 0300 	mov.w	r3, #0
 8001bfc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  USB_OTG_FSIZ_TypeDef    nptxfifosize;
  USB_OTG_FSIZ_TypeDef    txfifosize;
  USB_OTG_DIEPMSK_TypeDef msk;
  USB_OTG_DTHRCTL_TypeDef dthrctl;  
  
  depctl.d32 = 0;
 8001c00:	f04f 0300 	mov.w	r3, #0
 8001c04:	627b      	str	r3, [r7, #36]	; 0x24
  dcfg.d32 = 0;
 8001c06:	f04f 0300 	mov.w	r3, #0
 8001c0a:	623b      	str	r3, [r7, #32]
  nptxfifosize.d32 = 0;
 8001c0c:	f04f 0300 	mov.w	r3, #0
 8001c10:	61fb      	str	r3, [r7, #28]
  txfifosize.d32 = 0;
 8001c12:	f04f 0300 	mov.w	r3, #0
 8001c16:	61bb      	str	r3, [r7, #24]
  msk.d32 = 0;
 8001c18:	f04f 0300 	mov.w	r3, #0
 8001c1c:	617b      	str	r3, [r7, #20]
  
  /* Restart the Phy Clock */
  USB_OTG_WRITE_REG32(pdev->regs.PCGCCTL, 0);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001c24:	f04f 0200 	mov.w	r2, #0
 8001c28:	601a      	str	r2, [r3, #0]
  /* Device configuration register */
  dcfg.d32 = USB_OTG_READ_REG32( &pdev->regs.DREGS->DCFG);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	691b      	ldr	r3, [r3, #16]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	623b      	str	r3, [r7, #32]
  dcfg.b.perfrint = DCFG_FRAME_INTERVAL_80;
 8001c32:	6a3b      	ldr	r3, [r7, #32]
 8001c34:	f36f 23cc 	bfc	r3, #11, #2
 8001c38:	623b      	str	r3, [r7, #32]
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DCFG, dcfg.d32 );
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	691b      	ldr	r3, [r3, #16]
 8001c3e:	6a3a      	ldr	r2, [r7, #32]
 8001c40:	601a      	str	r2, [r3, #0]
  
#ifdef USB_OTG_FS_CORE
  if(pdev->cfg.coreID == USB_OTG_FS_CORE_ID  )
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	7adb      	ldrb	r3, [r3, #11]
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d14d      	bne.n	8001ce6 <USB_OTG_CoreInitDev+0xf6>
  {  
    
    /* Set Full speed phy */
    USB_OTG_InitDevSpeed (pdev , USB_OTG_SPEED_PARAM_FULL);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f04f 0103 	mov.w	r1, #3
 8001c50:	f7ff ffb2 	bl	8001bb8 <USB_OTG_InitDevSpeed>
    
    /* set Rx FIFO size */
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRXFSIZ, RX_FIFO_FS_SIZE);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	f04f 0280 	mov.w	r2, #128	; 0x80
 8001c5c:	625a      	str	r2, [r3, #36]	; 0x24
    
    /* EP0 TX*/
    nptxfifosize.b.depth     = TX0_FIFO_FS_SIZE;
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	f04f 0220 	mov.w	r2, #32
 8001c64:	f362 431f 	bfi	r3, r2, #16, #16
 8001c68:	61fb      	str	r3, [r7, #28]
    nptxfifosize.b.startaddr = RX_FIFO_FS_SIZE;
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	f04f 0280 	mov.w	r2, #128	; 0x80
 8001c70:	f362 030f 	bfi	r3, r2, #0, #16
 8001c74:	61fb      	str	r3, [r7, #28]
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF0_HNPTXFSIZ, nptxfifosize.d32 );
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	68db      	ldr	r3, [r3, #12]
 8001c7a:	69fa      	ldr	r2, [r7, #28]
 8001c7c:	629a      	str	r2, [r3, #40]	; 0x28
    
    
    /* EP1 TX*/
    txfifosize.b.startaddr = nptxfifosize.b.startaddr + nptxfifosize.b.depth;
 8001c7e:	8bba      	ldrh	r2, [r7, #28]
 8001c80:	8bfb      	ldrh	r3, [r7, #30]
 8001c82:	18d3      	adds	r3, r2, r3
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	833b      	strh	r3, [r7, #24]
    txfifosize.b.depth = TX1_FIFO_FS_SIZE;
 8001c88:	69bb      	ldr	r3, [r7, #24]
 8001c8a:	f04f 0280 	mov.w	r2, #128	; 0x80
 8001c8e:	f362 431f 	bfi	r3, r2, #16, #16
 8001c92:	61bb      	str	r3, [r7, #24]
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF[0], txfifosize.d32 );
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    
    
    /* EP2 TX*/
    txfifosize.b.startaddr += txfifosize.b.depth;
 8001c9e:	8b3a      	ldrh	r2, [r7, #24]
 8001ca0:	8b7b      	ldrh	r3, [r7, #26]
 8001ca2:	18d3      	adds	r3, r2, r3
 8001ca4:	b29b      	uxth	r3, r3
 8001ca6:	833b      	strh	r3, [r7, #24]
    txfifosize.b.depth = TX2_FIFO_FS_SIZE;
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	f04f 0220 	mov.w	r2, #32
 8001cae:	f362 431f 	bfi	r3, r2, #16, #16
 8001cb2:	61bb      	str	r3, [r7, #24]
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF[1], txfifosize.d32 );
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8001cbc:	f103 0304 	add.w	r3, r3, #4
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	601a      	str	r2, [r3, #0]
    
    
    /* EP3 TX*/  
    txfifosize.b.startaddr += txfifosize.b.depth;
 8001cc4:	8b3a      	ldrh	r2, [r7, #24]
 8001cc6:	8b7b      	ldrh	r3, [r7, #26]
 8001cc8:	18d3      	adds	r3, r2, r3
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	833b      	strh	r3, [r7, #24]
    txfifosize.b.depth = TX3_FIFO_FS_SIZE;
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	f36f 431f 	bfc	r3, #16, #16
 8001cd4:	61bb      	str	r3, [r7, #24]
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF[2], txfifosize.d32 );
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	68db      	ldr	r3, [r3, #12]
 8001cda:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8001cde:	f103 0308 	add.w	r3, r3, #8
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	601a      	str	r2, [r3, #0]
    txfifosize.b.depth = TX5_FIFO_HS_SIZE;
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF[4], txfifosize.d32 );
  }
#endif  
  /* Flush the FIFOs */
  USB_OTG_FlushTxFifo(pdev , 0x10); /* all Tx FIFOs */
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f04f 0110 	mov.w	r1, #16
 8001cec:	f7ff fe84 	bl	80019f8 <USB_OTG_FlushTxFifo>
  USB_OTG_FlushRxFifo(pdev);
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f7ff febf 	bl	8001a74 <USB_OTG_FlushRxFifo>
  /* Clear all pending Device Interrupts */
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DIEPMSK, 0 );
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	691b      	ldr	r3, [r3, #16]
 8001cfa:	f04f 0200 	mov.w	r2, #0
 8001cfe:	611a      	str	r2, [r3, #16]
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DOEPMSK, 0 );
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	691b      	ldr	r3, [r3, #16]
 8001d04:	f04f 0200 	mov.w	r2, #0
 8001d08:	615a      	str	r2, [r3, #20]
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINT, 0xFFFFFFFF );
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	691b      	ldr	r3, [r3, #16]
 8001d0e:	f04f 32ff 	mov.w	r2, #4294967295
 8001d12:	619a      	str	r2, [r3, #24]
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINTMSK, 0 );
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	691b      	ldr	r3, [r3, #16]
 8001d18:	f04f 0200 	mov.w	r2, #0
 8001d1c:	61da      	str	r2, [r3, #28]
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8001d1e:	f04f 0300 	mov.w	r3, #0
 8001d22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d24:	e043      	b.n	8001dae <USB_OTG_CoreInitDev+0x1be>
  {
    depctl.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[i]->DIEPCTL);
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d2a:	f103 0304 	add.w	r3, r3, #4
 8001d2e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001d32:	18d3      	adds	r3, r2, r3
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	627b      	str	r3, [r7, #36]	; 0x24
    if (depctl.b.epena)
 8001d3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d3e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d00b      	beq.n	8001d60 <USB_OTG_CoreInitDev+0x170>
    {
      depctl.d32 = 0;
 8001d48:	f04f 0300 	mov.w	r3, #0
 8001d4c:	627b      	str	r3, [r7, #36]	; 0x24
      depctl.b.epdis = 1;
 8001d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d50:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001d54:	627b      	str	r3, [r7, #36]	; 0x24
      depctl.b.snak = 1;
 8001d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d58:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001d5c:	627b      	str	r3, [r7, #36]	; 0x24
 8001d5e:	e002      	b.n	8001d66 <USB_OTG_CoreInitDev+0x176>
    }
    else
    {
      depctl.d32 = 0;
 8001d60:	f04f 0300 	mov.w	r3, #0
 8001d64:	627b      	str	r3, [r7, #36]	; 0x24
    }
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPCTL, depctl.d32);
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d6a:	f103 0304 	add.w	r3, r3, #4
 8001d6e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001d72:	18d3      	adds	r3, r2, r3
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d78:	601a      	str	r2, [r3, #0]
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPTSIZ, 0);
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d7e:	f103 0304 	add.w	r3, r3, #4
 8001d82:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001d86:	18d3      	adds	r3, r2, r3
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	f04f 0200 	mov.w	r2, #0
 8001d8e:	611a      	str	r2, [r3, #16]
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 8001d90:	687a      	ldr	r2, [r7, #4]
 8001d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d94:	f103 0304 	add.w	r3, r3, #4
 8001d98:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001d9c:	18d3      	adds	r3, r2, r3
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	f04f 02ff 	mov.w	r2, #255	; 0xff
 8001da4:	609a      	str	r2, [r3, #8]
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DIEPMSK, 0 );
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DOEPMSK, 0 );
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINT, 0xFFFFFFFF );
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINTMSK, 0 );
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8001da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001da8:	f103 0301 	add.w	r3, r3, #1
 8001dac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	785b      	ldrb	r3, [r3, #1]
 8001db2:	461a      	mov	r2, r3
 8001db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d8b5      	bhi.n	8001d26 <USB_OTG_CoreInitDev+0x136>
    }
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPCTL, depctl.d32);
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPTSIZ, 0);
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
  }
  for (i = 0; i <  pdev->cfg.dev_endpoints; i++)
 8001dba:	f04f 0300 	mov.w	r3, #0
 8001dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dc0:	e042      	b.n	8001e48 <USB_OTG_CoreInitDev+0x258>
  {
    USB_OTG_DEPCTL_TypeDef  depctl;
    depctl.d32 = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[i]->DOEPCTL);
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dc6:	f103 0314 	add.w	r3, r3, #20
 8001dca:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001dce:	18d3      	adds	r3, r2, r3
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	60fb      	str	r3, [r7, #12]
    if (depctl.b.epena)
 8001dd6:	7bfb      	ldrb	r3, [r7, #15]
 8001dd8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d00b      	beq.n	8001dfa <USB_OTG_CoreInitDev+0x20a>
    {
      depctl.d32 = 0;
 8001de2:	f04f 0300 	mov.w	r3, #0
 8001de6:	60fb      	str	r3, [r7, #12]
      depctl.b.epdis = 1;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001dee:	60fb      	str	r3, [r7, #12]
      depctl.b.snak = 1;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001df6:	60fb      	str	r3, [r7, #12]
 8001df8:	e002      	b.n	8001e00 <USB_OTG_CoreInitDev+0x210>
    }
    else
    {
      depctl.d32 = 0;
 8001dfa:	f04f 0300 	mov.w	r3, #0
 8001dfe:	60fb      	str	r3, [r7, #12]
    }
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPCTL, depctl.d32);
 8001e00:	687a      	ldr	r2, [r7, #4]
 8001e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e04:	f103 0314 	add.w	r3, r3, #20
 8001e08:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001e0c:	18d3      	adds	r3, r2, r3
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	68fa      	ldr	r2, [r7, #12]
 8001e12:	601a      	str	r2, [r3, #0]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPTSIZ, 0);
 8001e14:	687a      	ldr	r2, [r7, #4]
 8001e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e18:	f103 0314 	add.w	r3, r3, #20
 8001e1c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001e20:	18d3      	adds	r3, r2, r3
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f04f 0200 	mov.w	r2, #0
 8001e28:	611a      	str	r2, [r3, #16]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e2e:	f103 0314 	add.w	r3, r3, #20
 8001e32:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001e36:	18d3      	adds	r3, r2, r3
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f04f 02ff 	mov.w	r2, #255	; 0xff
 8001e3e:	609a      	str	r2, [r3, #8]
    }
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPCTL, depctl.d32);
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPTSIZ, 0);
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
  }
  for (i = 0; i <  pdev->cfg.dev_endpoints; i++)
 8001e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e42:	f103 0301 	add.w	r3, r3, #1
 8001e46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	785b      	ldrb	r3, [r3, #1]
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d8b6      	bhi.n	8001dc2 <USB_OTG_CoreInitDev+0x1d2>
    }
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPCTL, depctl.d32);
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPTSIZ, 0);
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
  }
  msk.d32 = 0;
 8001e54:	f04f 0300 	mov.w	r3, #0
 8001e58:	617b      	str	r3, [r7, #20]
  msk.b.txfifoundrn = 1;
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e60:	617b      	str	r3, [r7, #20]
  USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPMSK, msk.d32, msk.d32);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	691b      	ldr	r3, [r3, #16]
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	6912      	ldr	r2, [r2, #16]
 8001e6a:	6911      	ldr	r1, [r2, #16]
 8001e6c:	697a      	ldr	r2, [r7, #20]
 8001e6e:	ea6f 0202 	mvn.w	r2, r2
 8001e72:	4011      	ands	r1, r2
 8001e74:	697a      	ldr	r2, [r7, #20]
 8001e76:	ea41 0202 	orr.w	r2, r1, r2
 8001e7a:	611a      	str	r2, [r3, #16]
  
  if (pdev->cfg.dma_enable == 1)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	78db      	ldrb	r3, [r3, #3]
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d11e      	bne.n	8001ec2 <USB_OTG_CoreInitDev+0x2d2>
  {
    dthrctl.d32 = 0;
 8001e84:	f04f 0300 	mov.w	r3, #0
 8001e88:	613b      	str	r3, [r7, #16]
    dthrctl.b.non_iso_thr_en = 1;
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	f043 0301 	orr.w	r3, r3, #1
 8001e90:	613b      	str	r3, [r7, #16]
    dthrctl.b.iso_thr_en = 1;
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	f043 0302 	orr.w	r3, r3, #2
 8001e98:	613b      	str	r3, [r7, #16]
    dthrctl.b.tx_thr_len = 64;
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	f04f 0240 	mov.w	r2, #64	; 0x40
 8001ea0:	f362 038a 	bfi	r3, r2, #2, #9
 8001ea4:	613b      	str	r3, [r7, #16]
    dthrctl.b.rx_thr_en = 1;
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eac:	613b      	str	r3, [r7, #16]
    dthrctl.b.rx_thr_len = 64;
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	f04f 0240 	mov.w	r2, #64	; 0x40
 8001eb4:	f362 4359 	bfi	r3, r2, #17, #9
 8001eb8:	613b      	str	r3, [r7, #16]
    USB_OTG_WRITE_REG32(&pdev->regs.DREGS->DTHRCTL, dthrctl.d32);  
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	691b      	ldr	r3, [r3, #16]
 8001ebe:	693a      	ldr	r2, [r7, #16]
 8001ec0:	631a      	str	r2, [r3, #48]	; 0x30
  }
  USB_OTG_EnableDevInt(pdev);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f000 f808 	bl	8001ed8 <USB_OTG_EnableDevInt>
  return status;
 8001ec8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f107 0730 	add.w	r7, r7, #48	; 0x30
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop

08001ed8 <USB_OTG_EnableDevInt>:
* @brief  USB_OTG_EnableDevInt : Enables the Device mode interrupts
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EnableDevInt(USB_OTG_CORE_HANDLE *pdev)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  USB_OTG_STS status = USB_OTG_OK;
 8001ee0:	f04f 0300 	mov.w	r3, #0
 8001ee4:	73fb      	strb	r3, [r7, #15]
  USB_OTG_GINTMSK_TypeDef  intmsk;
  
  intmsk.d32 = 0;
 8001ee6:	f04f 0300 	mov.w	r3, #0
 8001eea:	60bb      	str	r3, [r7, #8]
  
  /* Disable all interrupts. */
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTMSK, 0);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	f04f 0200 	mov.w	r2, #0
 8001ef4:	619a      	str	r2, [r3, #24]
  /* Clear any pending interrupts */
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTSTS, 0xFFFFFFFF);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	f04f 32ff 	mov.w	r2, #4294967295
 8001efe:	615a      	str	r2, [r3, #20]
  /* Enable the common interrupts */
  USB_OTG_EnableCommonInt(pdev);
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f7ff fa7f 	bl	8001404 <USB_OTG_EnableCommonInt>
  
  if (pdev->cfg.dma_enable == 0)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	78db      	ldrb	r3, [r3, #3]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d103      	bne.n	8001f16 <USB_OTG_EnableDevInt+0x3e>
  {
    intmsk.b.rxstsqlvl = 1;
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	f043 0310 	orr.w	r3, r3, #16
 8001f14:	60bb      	str	r3, [r7, #8]
  }
  
  /* Enable interrupts matching to the Device mode ONLY */
  intmsk.b.usbsuspend = 1;
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f1c:	60bb      	str	r3, [r7, #8]
  intmsk.b.usbreset   = 1;
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f24:	60bb      	str	r3, [r7, #8]
  intmsk.b.enumdone   = 1;
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f2c:	60bb      	str	r3, [r7, #8]
  intmsk.b.inepintr   = 1;
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f34:	60bb      	str	r3, [r7, #8]
  intmsk.b.outepintr  = 1;
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001f3c:	60bb      	str	r3, [r7, #8]
  intmsk.b.sofintr    = 1; 
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	f043 0308 	orr.w	r3, r3, #8
 8001f44:	60bb      	str	r3, [r7, #8]

  intmsk.b.incomplisoin    = 1; 
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f4c:	60bb      	str	r3, [r7, #8]
  intmsk.b.incomplisoout    = 1;   
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f54:	60bb      	str	r3, [r7, #8]
#ifdef VBUS_SENSING_ENABLED
  intmsk.b.sessreqintr    = 1; 
  intmsk.b.otgintr    = 1;    
#endif  
  USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, intmsk.d32, intmsk.d32);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	68d2      	ldr	r2, [r2, #12]
 8001f5e:	6991      	ldr	r1, [r2, #24]
 8001f60:	68ba      	ldr	r2, [r7, #8]
 8001f62:	ea6f 0202 	mvn.w	r2, r2
 8001f66:	4011      	ands	r1, r2
 8001f68:	68ba      	ldr	r2, [r7, #8]
 8001f6a:	ea41 0202 	orr.w	r2, r1, r2
 8001f6e:	619a      	str	r2, [r3, #24]
  return status;
 8001f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	f107 0710 	add.w	r7, r7, #16
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <USB_OTG_GetDeviceSpeed>:
*         Get the device speed from the device status register
* @param  None
* @retval status
*/
enum USB_OTG_SPEED USB_OTG_GetDeviceSpeed (USB_OTG_CORE_HANDLE *pdev)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b085      	sub	sp, #20
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  USB_OTG_DSTS_TypeDef  dsts;
  enum USB_OTG_SPEED speed = USB_SPEED_UNKNOWN;
 8001f84:	f04f 0300 	mov.w	r3, #0
 8001f88:	73fb      	strb	r3, [r7, #15]
  
  
  dsts.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DSTS);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	691b      	ldr	r3, [r3, #16]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	60bb      	str	r3, [r7, #8]
  
  switch (dsts.b.enumspd)
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d00b      	beq.n	8001fb6 <USB_OTG_GetDeviceSpeed+0x3a>
 8001f9e:	2b03      	cmp	r3, #3
 8001fa0:	d005      	beq.n	8001fae <USB_OTG_GetDeviceSpeed+0x32>
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d003      	beq.n	8001fae <USB_OTG_GetDeviceSpeed+0x32>
  {
  case DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ:
    speed = USB_SPEED_HIGH;
 8001fa6:	f04f 0303 	mov.w	r3, #3
 8001faa:	73fb      	strb	r3, [r7, #15]
    break;
 8001fac:	e007      	b.n	8001fbe <USB_OTG_GetDeviceSpeed+0x42>
  case DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ:
  case DSTS_ENUMSPD_FS_PHY_48MHZ:
    speed = USB_SPEED_FULL;
 8001fae:	f04f 0302 	mov.w	r3, #2
 8001fb2:	73fb      	strb	r3, [r7, #15]
    break;
 8001fb4:	e003      	b.n	8001fbe <USB_OTG_GetDeviceSpeed+0x42>
    
  case DSTS_ENUMSPD_LS_PHY_6MHZ:
    speed = USB_SPEED_LOW;
 8001fb6:	f04f 0301 	mov.w	r3, #1
 8001fba:	73fb      	strb	r3, [r7, #15]
    break;
 8001fbc:	bf00      	nop
  }
  
  return speed;
 8001fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f107 0714 	add.w	r7, r7, #20
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bc80      	pop	{r7}
 8001fca:	4770      	bx	lr

08001fcc <USB_OTG_EP0Activate>:
*   for transmitting packets
* @param  None
* @retval USB_OTG_STS : status
*/
USB_OTG_STS  USB_OTG_EP0Activate(USB_OTG_CORE_HANDLE *pdev)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b087      	sub	sp, #28
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  USB_OTG_STS             status = USB_OTG_OK;
 8001fd4:	f04f 0300 	mov.w	r3, #0
 8001fd8:	75fb      	strb	r3, [r7, #23]
  USB_OTG_DSTS_TypeDef    dsts;
  USB_OTG_DEPCTL_TypeDef  diepctl;
  USB_OTG_DCTL_TypeDef    dctl;
  
  dctl.d32 = 0;
 8001fda:	f04f 0300 	mov.w	r3, #0
 8001fde:	60bb      	str	r3, [r7, #8]
  /* Read the Device Status and Endpoint 0 Control registers */
  dsts.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DSTS);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	691b      	ldr	r3, [r3, #16]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	613b      	str	r3, [r7, #16]
  diepctl.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[0]->DIEPCTL);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	699b      	ldr	r3, [r3, #24]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	60fb      	str	r3, [r7, #12]
  /* Set the MPS of the IN EP based on the enumeration speed */
  switch (dsts.b.enumspd)
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d004      	beq.n	8002006 <USB_OTG_EP0Activate+0x3a>
  {
  case DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ:
  case DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ:
  case DSTS_ENUMSPD_FS_PHY_48MHZ:
    diepctl.b.mps = DEP0CTL_MPS_64;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	f36f 030a 	bfc	r3, #0, #11
 8002002:	60fb      	str	r3, [r7, #12]
    break;
 8002004:	e006      	b.n	8002014 <USB_OTG_EP0Activate+0x48>
  case DSTS_ENUMSPD_LS_PHY_6MHZ:
    diepctl.b.mps = DEP0CTL_MPS_8;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	f04f 0203 	mov.w	r2, #3
 800200c:	f362 030a 	bfi	r3, r2, #0, #11
 8002010:	60fb      	str	r3, [r7, #12]
    break;
 8002012:	bf00      	nop
  }
  USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[0]->DIEPCTL, diepctl.d32);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	699b      	ldr	r3, [r3, #24]
 8002018:	68fa      	ldr	r2, [r7, #12]
 800201a:	601a      	str	r2, [r3, #0]
  dctl.b.cgnpinnak = 1;
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002022:	60bb      	str	r3, [r7, #8]
  USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DCTL, dctl.d32, dctl.d32);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	691b      	ldr	r3, [r3, #16]
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	6912      	ldr	r2, [r2, #16]
 800202c:	6851      	ldr	r1, [r2, #4]
 800202e:	68ba      	ldr	r2, [r7, #8]
 8002030:	ea6f 0202 	mvn.w	r2, r2
 8002034:	4011      	ands	r1, r2
 8002036:	68ba      	ldr	r2, [r7, #8]
 8002038:	ea41 0202 	orr.w	r2, r1, r2
 800203c:	605a      	str	r2, [r3, #4]
  return status;
 800203e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002040:	4618      	mov	r0, r3
 8002042:	f107 071c 	add.w	r7, r7, #28
 8002046:	46bd      	mov	sp, r7
 8002048:	bc80      	pop	{r7}
 800204a:	4770      	bx	lr

0800204c <USB_OTG_EPActivate>:
* @brief  USB_OTG_EPActivate : Activates an EP
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EPActivate(USB_OTG_CORE_HANDLE *pdev , USB_OTG_EP *ep)
{
 800204c:	b480      	push	{r7}
 800204e:	b087      	sub	sp, #28
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	6039      	str	r1, [r7, #0]
  USB_OTG_STS status = USB_OTG_OK;
 8002056:	f04f 0300 	mov.w	r3, #0
 800205a:	74fb      	strb	r3, [r7, #19]
  USB_OTG_DEPCTL_TypeDef  depctl;
  USB_OTG_DAINT_TypeDef  daintmsk;
  __IO uint32_t *addr;
  
  
  depctl.d32 = 0;
 800205c:	f04f 0300 	mov.w	r3, #0
 8002060:	60fb      	str	r3, [r7, #12]
  daintmsk.d32 = 0;
 8002062:	f04f 0300 	mov.w	r3, #0
 8002066:	60bb      	str	r3, [r7, #8]
  /* Read DEPCTLn register */
  if (ep->is_in == 1)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	785b      	ldrb	r3, [r3, #1]
 800206c:	2b01      	cmp	r3, #1
 800206e:	d112      	bne.n	8002096 <USB_OTG_EPActivate+0x4a>
  {
    addr = &pdev->regs.INEP_REGS[ep->num]->DIEPCTL;
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	f103 0304 	add.w	r3, r3, #4
 800207a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800207e:	18d3      	adds	r3, r2, r3
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	617b      	str	r3, [r7, #20]
    daintmsk.ep.in = 1 << ep->num;
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	f04f 0201 	mov.w	r2, #1
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	b29b      	uxth	r3, r3
 8002092:	813b      	strh	r3, [r7, #8]
 8002094:	e011      	b.n	80020ba <USB_OTG_EPActivate+0x6e>
  }
  else
  {
    addr = &pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL;
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	f103 0314 	add.w	r3, r3, #20
 80020a0:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80020a4:	18d3      	adds	r3, r2, r3
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	617b      	str	r3, [r7, #20]
    daintmsk.ep.out = 1 << ep->num;
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	f04f 0201 	mov.w	r2, #1
 80020b2:	fa02 f303 	lsl.w	r3, r2, r3
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	817b      	strh	r3, [r7, #10]
  }
  /* If the EP is already active don't change the EP Control
  * register. */
  depctl.d32 = USB_OTG_READ_REG32(addr);
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	60fb      	str	r3, [r7, #12]
  if (!depctl.b.usbactep)
 80020c0:	7b7b      	ldrb	r3, [r7, #13]
 80020c2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d129      	bne.n	8002120 <USB_OTG_EPActivate+0xd4>
  {
    depctl.b.mps    = ep->maxpacket;
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	b29b      	uxth	r3, r3
 80020d2:	ea4f 5343 	mov.w	r3, r3, lsl #21
 80020d6:	ea4f 5353 	mov.w	r3, r3, lsr #21
 80020da:	b29a      	uxth	r2, r3
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	f362 030a 	bfi	r3, r2, #0, #11
 80020e2:	60fb      	str	r3, [r7, #12]
    depctl.b.eptype = ep->type;
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	78db      	ldrb	r3, [r3, #3]
 80020e8:	f003 0303 	and.w	r3, r3, #3
 80020ec:	b2da      	uxtb	r2, r3
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	f362 4393 	bfi	r3, r2, #18, #2
 80020f4:	60fb      	str	r3, [r7, #12]
    depctl.b.txfnum = ep->tx_fifo_num;
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	88db      	ldrh	r3, [r3, #6]
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	f003 030f 	and.w	r3, r3, #15
 8002100:	b2da      	uxtb	r2, r3
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	f362 5399 	bfi	r3, r2, #22, #4
 8002108:	60fb      	str	r3, [r7, #12]
    depctl.b.setd0pid = 1;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002110:	60fb      	str	r3, [r7, #12]
    depctl.b.usbactep = 1;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002118:	60fb      	str	r3, [r7, #12]
    USB_OTG_WRITE_REG32(addr, depctl.d32);
 800211a:	68fa      	ldr	r2, [r7, #12]
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	601a      	str	r2, [r3, #0]
  {
    USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DEACHMSK, 0, daintmsk.d32);
  }
  else
#endif   
    USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DAINTMSK, 0, daintmsk.d32);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	691b      	ldr	r3, [r3, #16]
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	6912      	ldr	r2, [r2, #16]
 8002128:	69d1      	ldr	r1, [r2, #28]
 800212a:	68ba      	ldr	r2, [r7, #8]
 800212c:	ea41 0202 	orr.w	r2, r1, r2
 8002130:	61da      	str	r2, [r3, #28]
  return status;
 8002132:	7cfb      	ldrb	r3, [r7, #19]
}
 8002134:	4618      	mov	r0, r3
 8002136:	f107 071c 	add.w	r7, r7, #28
 800213a:	46bd      	mov	sp, r7
 800213c:	bc80      	pop	{r7}
 800213e:	4770      	bx	lr

08002140 <USB_OTG_EPDeactivate>:
* @brief  USB_OTG_EPDeactivate : Deactivates an EP
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EPDeactivate(USB_OTG_CORE_HANDLE *pdev , USB_OTG_EP *ep)
{
 8002140:	b480      	push	{r7}
 8002142:	b087      	sub	sp, #28
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	6039      	str	r1, [r7, #0]
  USB_OTG_STS status = USB_OTG_OK;
 800214a:	f04f 0300 	mov.w	r3, #0
 800214e:	74fb      	strb	r3, [r7, #19]
  USB_OTG_DEPCTL_TypeDef  depctl;
  USB_OTG_DAINT_TypeDef  daintmsk;
  __IO uint32_t *addr;
  
  depctl.d32 = 0;
 8002150:	f04f 0300 	mov.w	r3, #0
 8002154:	60fb      	str	r3, [r7, #12]
  daintmsk.d32 = 0;  
 8002156:	f04f 0300 	mov.w	r3, #0
 800215a:	60bb      	str	r3, [r7, #8]
  /* Read DEPCTLn register */
  if (ep->is_in == 1)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	785b      	ldrb	r3, [r3, #1]
 8002160:	2b01      	cmp	r3, #1
 8002162:	d112      	bne.n	800218a <USB_OTG_EPDeactivate+0x4a>
  {
    addr = &pdev->regs.INEP_REGS[ep->num]->DIEPCTL;
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	f103 0304 	add.w	r3, r3, #4
 800216e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002172:	18d3      	adds	r3, r2, r3
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	617b      	str	r3, [r7, #20]
    daintmsk.ep.in = 1 << ep->num;
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	f04f 0201 	mov.w	r2, #1
 8002180:	fa02 f303 	lsl.w	r3, r2, r3
 8002184:	b29b      	uxth	r3, r3
 8002186:	813b      	strh	r3, [r7, #8]
 8002188:	e011      	b.n	80021ae <USB_OTG_EPDeactivate+0x6e>
  }
  else
  {
    addr = &pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL;
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	f103 0314 	add.w	r3, r3, #20
 8002194:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002198:	18d3      	adds	r3, r2, r3
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	617b      	str	r3, [r7, #20]
    daintmsk.ep.out = 1 << ep->num;
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	f04f 0201 	mov.w	r2, #1
 80021a6:	fa02 f303 	lsl.w	r3, r2, r3
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	817b      	strh	r3, [r7, #10]
  }
  depctl.b.usbactep = 0;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	f36f 33cf 	bfc	r3, #15, #1
 80021b4:	60fb      	str	r3, [r7, #12]
  USB_OTG_WRITE_REG32(addr, depctl.d32);
 80021b6:	68fa      	ldr	r2, [r7, #12]
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	601a      	str	r2, [r3, #0]
  {
    USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DEACHMSK, daintmsk.d32, 0);
  }
  else
#endif    
    USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DAINTMSK, daintmsk.d32, 0);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	691b      	ldr	r3, [r3, #16]
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	6912      	ldr	r2, [r2, #16]
 80021c4:	69d1      	ldr	r1, [r2, #28]
 80021c6:	68ba      	ldr	r2, [r7, #8]
 80021c8:	ea6f 0202 	mvn.w	r2, r2
 80021cc:	ea01 0202 	and.w	r2, r1, r2
 80021d0:	61da      	str	r2, [r3, #28]
  return status;
 80021d2:	7cfb      	ldrb	r3, [r7, #19]
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	f107 071c 	add.w	r7, r7, #28
 80021da:	46bd      	mov	sp, r7
 80021dc:	bc80      	pop	{r7}
 80021de:	4770      	bx	lr

080021e0 <USB_OTG_EPStartXfer>:
*         starts the xfer
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EPStartXfer(USB_OTG_CORE_HANDLE *pdev , USB_OTG_EP *ep)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b088      	sub	sp, #32
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]
  USB_OTG_STS status = USB_OTG_OK;
 80021ea:	f04f 0300 	mov.w	r3, #0
 80021ee:	77fb      	strb	r3, [r7, #31]
  USB_OTG_DEPCTL_TypeDef     depctl;
  USB_OTG_DEPXFRSIZ_TypeDef  deptsiz;
  USB_OTG_DSTS_TypeDef       dsts;    
  uint32_t fifoemptymsk = 0;  
 80021f0:	f04f 0300 	mov.w	r3, #0
 80021f4:	61bb      	str	r3, [r7, #24]
  
  depctl.d32 = 0;
 80021f6:	f04f 0300 	mov.w	r3, #0
 80021fa:	617b      	str	r3, [r7, #20]
  deptsiz.d32 = 0;
 80021fc:	f04f 0300 	mov.w	r3, #0
 8002200:	613b      	str	r3, [r7, #16]
  /* IN endpoint */
  if (ep->is_in == 1)
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	785b      	ldrb	r3, [r3, #1]
 8002206:	2b01      	cmp	r3, #1
 8002208:	f040 80be 	bne.w	8002388 <USB_OTG_EPStartXfer+0x1a8>
  {
    depctl.d32  = USB_OTG_READ_REG32(&(pdev->regs.INEP_REGS[ep->num]->DIEPCTL));
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	f103 0304 	add.w	r3, r3, #4
 8002216:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800221a:	18d3      	adds	r3, r2, r3
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	617b      	str	r3, [r7, #20]
    deptsiz.d32 = USB_OTG_READ_REG32(&(pdev->regs.INEP_REGS[ep->num]->DIEPTSIZ));
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	f103 0304 	add.w	r3, r3, #4
 800222c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002230:	18d3      	adds	r3, r2, r3
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	691b      	ldr	r3, [r3, #16]
 8002236:	613b      	str	r3, [r7, #16]
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	695b      	ldr	r3, [r3, #20]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d10a      	bne.n	8002256 <USB_OTG_EPStartXfer+0x76>
    {
      deptsiz.b.xfersize = 0;
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	f36f 0312 	bfc	r3, #0, #19
 8002246:	613b      	str	r3, [r7, #16]
      deptsiz.b.pktcnt = 1;
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	f04f 0201 	mov.w	r2, #1
 800224e:	f362 43dc 	bfi	r3, r2, #19, #10
 8002252:	613b      	str	r3, [r7, #16]
 8002254:	e028      	b.n	80022a8 <USB_OTG_EPStartXfer+0xc8>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      deptsiz.b.xfersize = ep->xfer_len;
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	695b      	ldr	r3, [r3, #20]
 800225a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800225e:	f422 0278 	bic.w	r2, r2, #16252928	; 0xf80000
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	f362 0312 	bfi	r3, r2, #0, #19
 8002268:	613b      	str	r3, [r7, #16]
      deptsiz.b.pktcnt = (ep->xfer_len - 1 + ep->maxpacket) / ep->maxpacket;
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	695a      	ldr	r2, [r3, #20]
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	18d3      	adds	r3, r2, r3
 8002274:	f103 32ff 	add.w	r2, r3, #4294967295
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002280:	b29b      	uxth	r3, r3
 8002282:	ea4f 5383 	mov.w	r3, r3, lsl #22
 8002286:	ea4f 5393 	mov.w	r3, r3, lsr #22
 800228a:	b29a      	uxth	r2, r3
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	f362 43dc 	bfi	r3, r2, #19, #10
 8002292:	613b      	str	r3, [r7, #16]

      if (ep->type == EP_TYPE_ISOC)
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	78db      	ldrb	r3, [r3, #3]
 8002298:	2b01      	cmp	r3, #1
 800229a:	d105      	bne.n	80022a8 <USB_OTG_EPStartXfer+0xc8>
      {
        deptsiz.b.mc = 1;
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	f04f 0201 	mov.w	r2, #1
 80022a2:	f362 735e 	bfi	r3, r2, #29, #2
 80022a6:	613b      	str	r3, [r7, #16]
      }       
    }
    USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[ep->num]->DIEPTSIZ, deptsiz.d32);
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	f103 0304 	add.w	r3, r3, #4
 80022b2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80022b6:	18d3      	adds	r3, r2, r3
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	693a      	ldr	r2, [r7, #16]
 80022bc:	611a      	str	r2, [r3, #16]
    
    if (pdev->cfg.dma_enable == 1)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	78db      	ldrb	r3, [r3, #3]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d10c      	bne.n	80022e0 <USB_OTG_EPStartXfer+0x100>
    {
      USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[ep->num]->DIEPDMA, ep->dma_addr);
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	f103 0304 	add.w	r3, r3, #4
 80022d0:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80022d4:	18d3      	adds	r3, r2, r3
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	683a      	ldr	r2, [r7, #0]
 80022da:	6912      	ldr	r2, [r2, #16]
 80022dc:	615a      	str	r2, [r3, #20]
 80022de:	e017      	b.n	8002310 <USB_OTG_EPStartXfer+0x130>
    }
    else
    {
      if (ep->type != EP_TYPE_ISOC)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	78db      	ldrb	r3, [r3, #3]
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d013      	beq.n	8002310 <USB_OTG_EPStartXfer+0x130>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0)
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	695b      	ldr	r3, [r3, #20]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d00f      	beq.n	8002310 <USB_OTG_EPStartXfer+0x130>
        {
          fifoemptymsk = 1 << ep->num;
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	f04f 0201 	mov.w	r2, #1
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	61bb      	str	r3, [r7, #24]
          USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, 0, fifoemptymsk);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	691b      	ldr	r3, [r3, #16]
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	6912      	ldr	r2, [r2, #16]
 8002306:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	ea41 0202 	orr.w	r2, r1, r2
 800230e:	635a      	str	r2, [r3, #52]	; 0x34
        }
      }
    }
    
    
    if (ep->type == EP_TYPE_ISOC)
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	78db      	ldrb	r3, [r3, #3]
 8002314:	2b01      	cmp	r3, #1
 8002316:	d114      	bne.n	8002342 <USB_OTG_EPStartXfer+0x162>
    {
      dsts.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DSTS);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	691b      	ldr	r3, [r3, #16]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	60fb      	str	r3, [r7, #12]
      
      if (((dsts.b.soffn)&0x1) == 0)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f3c3 230d 	ubfx	r3, r3, #8, #14
 8002326:	b29b      	uxth	r3, r3
 8002328:	f003 0301 	and.w	r3, r3, #1
 800232c:	2b00      	cmp	r3, #0
 800232e:	d104      	bne.n	800233a <USB_OTG_EPStartXfer+0x15a>
      {
        depctl.b.setd1pid = 1;
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002336:	617b      	str	r3, [r7, #20]
 8002338:	e003      	b.n	8002342 <USB_OTG_EPStartXfer+0x162>
      }
      else
      {
        depctl.b.setd0pid = 1;
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002340:	617b      	str	r3, [r7, #20]
      }
    } 
    
    /* EP enable, IN data in FIFO */
    depctl.b.cnak = 1;
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002348:	617b      	str	r3, [r7, #20]
    depctl.b.epena = 1;
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002350:	617b      	str	r3, [r7, #20]
    USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[ep->num]->DIEPCTL, depctl.d32);
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	f103 0304 	add.w	r3, r3, #4
 800235c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002360:	18d3      	adds	r3, r2, r3
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	697a      	ldr	r2, [r7, #20]
 8002366:	601a      	str	r2, [r3, #0]

    if (ep->type == EP_TYPE_ISOC)
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	78db      	ldrb	r3, [r3, #3]
 800236c:	2b01      	cmp	r3, #1
 800236e:	f040 809a 	bne.w	80024a6 <USB_OTG_EPStartXfer+0x2c6>
    {
      USB_OTG_WritePacket(pdev, ep->xfer_buff, ep->num, ep->xfer_len);   
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	68d9      	ldr	r1, [r3, #12]
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	781a      	ldrb	r2, [r3, #0]
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	695b      	ldr	r3, [r3, #20]
 800237e:	b29b      	uxth	r3, r3
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f7ff f8b1 	bl	80014e8 <USB_OTG_WritePacket>
 8002386:	e08e      	b.n	80024a6 <USB_OTG_EPStartXfer+0x2c6>
    }    
  }
  else
  {
    /* OUT endpoint */
    depctl.d32  = USB_OTG_READ_REG32(&(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL));
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	f103 0314 	add.w	r3, r3, #20
 8002392:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002396:	18d3      	adds	r3, r2, r3
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	617b      	str	r3, [r7, #20]
    deptsiz.d32 = USB_OTG_READ_REG32(&(pdev->regs.OUTEP_REGS[ep->num]->DOEPTSIZ));
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	f103 0314 	add.w	r3, r3, #20
 80023a8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80023ac:	18d3      	adds	r3, r2, r3
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	691b      	ldr	r3, [r3, #16]
 80023b2:	613b      	str	r3, [r7, #16]
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    if (ep->xfer_len == 0)
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	695b      	ldr	r3, [r3, #20]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d110      	bne.n	80023de <USB_OTG_EPStartXfer+0x1fe>
    {
      deptsiz.b.xfersize = ep->maxpacket;
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80023c4:	f422 0278 	bic.w	r2, r2, #16252928	; 0xf80000
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	f362 0312 	bfi	r3, r2, #0, #19
 80023ce:	613b      	str	r3, [r7, #16]
      deptsiz.b.pktcnt = 1;
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	f04f 0201 	mov.w	r2, #1
 80023d6:	f362 43dc 	bfi	r3, r2, #19, #10
 80023da:	613b      	str	r3, [r7, #16]
 80023dc:	e024      	b.n	8002428 <USB_OTG_EPStartXfer+0x248>
    }
    else
    {
      deptsiz.b.pktcnt = (ep->xfer_len + (ep->maxpacket - 1)) / ep->maxpacket;
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	695a      	ldr	r2, [r3, #20]
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	18d3      	adds	r3, r2, r3
 80023e8:	f103 32ff 	add.w	r2, r3, #4294967295
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	ea4f 5383 	mov.w	r3, r3, lsl #22
 80023fa:	ea4f 5393 	mov.w	r3, r3, lsr #22
 80023fe:	b29a      	uxth	r2, r3
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	f362 43dc 	bfi	r3, r2, #19, #10
 8002406:	613b      	str	r3, [r7, #16]
      deptsiz.b.xfersize = deptsiz.b.pktcnt * ep->maxpacket;
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	f3c3 43c9 	ubfx	r3, r3, #19, #10
 800240e:	b29b      	uxth	r3, r3
 8002410:	683a      	ldr	r2, [r7, #0]
 8002412:	6892      	ldr	r2, [r2, #8]
 8002414:	fb02 f303 	mul.w	r3, r2, r3
 8002418:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800241c:	f422 0278 	bic.w	r2, r2, #16252928	; 0xf80000
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	f362 0312 	bfi	r3, r2, #0, #19
 8002426:	613b      	str	r3, [r7, #16]
    }
    USB_OTG_WRITE_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPTSIZ, deptsiz.d32);
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	f103 0314 	add.w	r3, r3, #20
 8002432:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002436:	18d3      	adds	r3, r2, r3
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	693a      	ldr	r2, [r7, #16]
 800243c:	611a      	str	r2, [r3, #16]
    
    if (pdev->cfg.dma_enable == 1)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	78db      	ldrb	r3, [r3, #3]
 8002442:	2b01      	cmp	r3, #1
 8002444:	d10b      	bne.n	800245e <USB_OTG_EPStartXfer+0x27e>
    {
      USB_OTG_WRITE_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPDMA, ep->dma_addr);
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	f103 0314 	add.w	r3, r3, #20
 8002450:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002454:	18d3      	adds	r3, r2, r3
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	683a      	ldr	r2, [r7, #0]
 800245a:	6912      	ldr	r2, [r2, #16]
 800245c:	615a      	str	r2, [r3, #20]
    }
    
    if (ep->type == EP_TYPE_ISOC)
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	78db      	ldrb	r3, [r3, #3]
 8002462:	2b01      	cmp	r3, #1
 8002464:	d10c      	bne.n	8002480 <USB_OTG_EPStartXfer+0x2a0>
    {
      if (ep->even_odd_frame)
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	795b      	ldrb	r3, [r3, #5]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d004      	beq.n	8002478 <USB_OTG_EPStartXfer+0x298>
      {
        depctl.b.setd1pid = 1;
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002474:	617b      	str	r3, [r7, #20]
 8002476:	e003      	b.n	8002480 <USB_OTG_EPStartXfer+0x2a0>
      }
      else
      {
        depctl.b.setd0pid = 1;
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800247e:	617b      	str	r3, [r7, #20]
      }
    }
    /* EP enable */
    depctl.b.cnak = 1;
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002486:	617b      	str	r3, [r7, #20]
    depctl.b.epena = 1;
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800248e:	617b      	str	r3, [r7, #20]
    USB_OTG_WRITE_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL, depctl.d32);
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	f103 0314 	add.w	r3, r3, #20
 800249a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800249e:	18d3      	adds	r3, r2, r3
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	697a      	ldr	r2, [r7, #20]
 80024a4:	601a      	str	r2, [r3, #0]
  }
  return status;
 80024a6:	7ffb      	ldrb	r3, [r7, #31]
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	f107 0720 	add.w	r7, r7, #32
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop

080024b4 <USB_OTG_EP0StartXfer>:
*         starts the xfer
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EP0StartXfer(USB_OTG_CORE_HANDLE *pdev , USB_OTG_EP *ep)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b089      	sub	sp, #36	; 0x24
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]
  USB_OTG_STS                 status = USB_OTG_OK;
 80024be:	f04f 0300 	mov.w	r3, #0
 80024c2:	77fb      	strb	r3, [r7, #31]
  USB_OTG_DEPCTL_TypeDef      depctl;
  USB_OTG_DEP0XFRSIZ_TypeDef  deptsiz;
  USB_OTG_INEPREGS          *in_regs;
  uint32_t fifoemptymsk = 0;
 80024c4:	f04f 0300 	mov.w	r3, #0
 80024c8:	61bb      	str	r3, [r7, #24]
  
  depctl.d32   = 0;
 80024ca:	f04f 0300 	mov.w	r3, #0
 80024ce:	613b      	str	r3, [r7, #16]
  deptsiz.d32  = 0;
 80024d0:	f04f 0300 	mov.w	r3, #0
 80024d4:	60bb      	str	r3, [r7, #8]
  /* IN endpoint */
  if (ep->is_in == 1)
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	785b      	ldrb	r3, [r3, #1]
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d178      	bne.n	80025d0 <USB_OTG_EP0StartXfer+0x11c>
  {
    in_regs = pdev->regs.INEP_REGS[0];
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	699b      	ldr	r3, [r3, #24]
 80024e2:	617b      	str	r3, [r7, #20]
    depctl.d32  = USB_OTG_READ_REG32(&in_regs->DIEPCTL);
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	613b      	str	r3, [r7, #16]
    deptsiz.d32 = USB_OTG_READ_REG32(&in_regs->DIEPTSIZ);
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	691b      	ldr	r3, [r3, #16]
 80024ee:	60bb      	str	r3, [r7, #8]
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	695b      	ldr	r3, [r3, #20]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d10a      	bne.n	800250e <USB_OTG_EP0StartXfer+0x5a>
    {
      deptsiz.b.xfersize = 0;
 80024f8:	7a3b      	ldrb	r3, [r7, #8]
 80024fa:	f36f 0306 	bfc	r3, #0, #7
 80024fe:	723b      	strb	r3, [r7, #8]
      deptsiz.b.pktcnt = 1;
 8002500:	7abb      	ldrb	r3, [r7, #10]
 8002502:	f04f 0201 	mov.w	r2, #1
 8002506:	f362 03c4 	bfi	r3, r2, #3, #2
 800250a:	72bb      	strb	r3, [r7, #10]
 800250c:	e024      	b.n	8002558 <USB_OTG_EP0StartXfer+0xa4>
      
    }
    else
    {
      if (ep->xfer_len > ep->maxpacket)
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	695a      	ldr	r2, [r3, #20]
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	429a      	cmp	r2, r3
 8002518:	d90e      	bls.n	8002538 <USB_OTG_EP0StartXfer+0x84>
      {
        ep->xfer_len = ep->maxpacket;
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	689a      	ldr	r2, [r3, #8]
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	615a      	str	r2, [r3, #20]
        deptsiz.b.xfersize = ep->maxpacket;
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	b2db      	uxtb	r3, r3
 8002528:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800252c:	b2da      	uxtb	r2, r3
 800252e:	7a3b      	ldrb	r3, [r7, #8]
 8002530:	f362 0306 	bfi	r3, r2, #0, #7
 8002534:	723b      	strb	r3, [r7, #8]
 8002536:	e009      	b.n	800254c <USB_OTG_EP0StartXfer+0x98>
      }
      else
      {
        deptsiz.b.xfersize = ep->xfer_len;
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	695b      	ldr	r3, [r3, #20]
 800253c:	b2db      	uxtb	r3, r3
 800253e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002542:	b2da      	uxtb	r2, r3
 8002544:	7a3b      	ldrb	r3, [r7, #8]
 8002546:	f362 0306 	bfi	r3, r2, #0, #7
 800254a:	723b      	strb	r3, [r7, #8]
      }
      deptsiz.b.pktcnt = 1;
 800254c:	7abb      	ldrb	r3, [r7, #10]
 800254e:	f04f 0201 	mov.w	r2, #1
 8002552:	f362 03c4 	bfi	r3, r2, #3, #2
 8002556:	72bb      	strb	r3, [r7, #10]
    }
    USB_OTG_WRITE_REG32(&in_regs->DIEPTSIZ, deptsiz.d32);
 8002558:	68ba      	ldr	r2, [r7, #8]
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	611a      	str	r2, [r3, #16]
    
    if (pdev->cfg.dma_enable == 1)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	78db      	ldrb	r3, [r3, #3]
 8002562:	2b01      	cmp	r3, #1
 8002564:	d10b      	bne.n	800257e <USB_OTG_EP0StartXfer+0xca>
    {
      USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[ep->num]->DIEPDMA, ep->dma_addr);  
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	f103 0304 	add.w	r3, r3, #4
 8002570:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002574:	18d3      	adds	r3, r2, r3
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	683a      	ldr	r2, [r7, #0]
 800257a:	6912      	ldr	r2, [r2, #16]
 800257c:	615a      	str	r2, [r3, #20]
    }
    
    /* EP enable, IN data in FIFO */
    depctl.b.cnak = 1;
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002584:	613b      	str	r3, [r7, #16]
    depctl.b.epena = 1;
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800258c:	613b      	str	r3, [r7, #16]
    USB_OTG_WRITE_REG32(&in_regs->DIEPCTL, depctl.d32);
 800258e:	693a      	ldr	r2, [r7, #16]
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	601a      	str	r2, [r3, #0]
    
    
    
    if (pdev->cfg.dma_enable == 0)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	78db      	ldrb	r3, [r3, #3]
 8002598:	2b00      	cmp	r3, #0
 800259a:	f040 8086 	bne.w	80026aa <USB_OTG_EP0StartXfer+0x1f6>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0)
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	695b      	ldr	r3, [r3, #20]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	f000 8081 	beq.w	80026aa <USB_OTG_EP0StartXfer+0x1f6>
      {
        {
          fifoemptymsk |= 1 << ep->num;
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	f04f 0201 	mov.w	r2, #1
 80025b0:	fa02 f303 	lsl.w	r3, r2, r3
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	ea42 0303 	orr.w	r3, r2, r3
 80025ba:	61bb      	str	r3, [r7, #24]
          USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, 0, fifoemptymsk);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	691b      	ldr	r3, [r3, #16]
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	6912      	ldr	r2, [r2, #16]
 80025c4:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80025c6:	69ba      	ldr	r2, [r7, #24]
 80025c8:	ea41 0202 	orr.w	r2, r1, r2
 80025cc:	635a      	str	r2, [r3, #52]	; 0x34
 80025ce:	e06c      	b.n	80026aa <USB_OTG_EP0StartXfer+0x1f6>
    }
  }
  else
  {
    /* OUT endpoint */
    depctl.d32  = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL);
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	f103 0314 	add.w	r3, r3, #20
 80025da:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80025de:	18d3      	adds	r3, r2, r3
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	613b      	str	r3, [r7, #16]
    deptsiz.d32 = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPTSIZ);
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	f103 0314 	add.w	r3, r3, #20
 80025f0:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80025f4:	18d3      	adds	r3, r2, r3
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	60bb      	str	r3, [r7, #8]
    /* Program the transfer size and packet count as follows:
    * xfersize = N * (maxpacket + 4 - (maxpacket % 4))
    * pktcnt = N           */
    if (ep->xfer_len == 0)
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	695b      	ldr	r3, [r3, #20]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d110      	bne.n	8002626 <USB_OTG_EP0StartXfer+0x172>
    {
      deptsiz.b.xfersize = ep->maxpacket;
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	b2db      	uxtb	r3, r3
 800260a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800260e:	b2da      	uxtb	r2, r3
 8002610:	7a3b      	ldrb	r3, [r7, #8]
 8002612:	f362 0306 	bfi	r3, r2, #0, #7
 8002616:	723b      	strb	r3, [r7, #8]
      deptsiz.b.pktcnt = 1;
 8002618:	7abb      	ldrb	r3, [r7, #10]
 800261a:	f04f 0201 	mov.w	r2, #1
 800261e:	f362 03c4 	bfi	r3, r2, #3, #2
 8002622:	72bb      	strb	r3, [r7, #10]
 8002624:	e013      	b.n	800264e <USB_OTG_EP0StartXfer+0x19a>
    }
    else
    {
      ep->xfer_len = ep->maxpacket;
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	689a      	ldr	r2, [r3, #8]
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	615a      	str	r2, [r3, #20]
      deptsiz.b.xfersize = ep->maxpacket;
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	b2db      	uxtb	r3, r3
 8002634:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002638:	b2da      	uxtb	r2, r3
 800263a:	7a3b      	ldrb	r3, [r7, #8]
 800263c:	f362 0306 	bfi	r3, r2, #0, #7
 8002640:	723b      	strb	r3, [r7, #8]
      deptsiz.b.pktcnt = 1;
 8002642:	7abb      	ldrb	r3, [r7, #10]
 8002644:	f04f 0201 	mov.w	r2, #1
 8002648:	f362 03c4 	bfi	r3, r2, #3, #2
 800264c:	72bb      	strb	r3, [r7, #10]
    }
    USB_OTG_WRITE_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPTSIZ, deptsiz.d32);
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	f103 0314 	add.w	r3, r3, #20
 8002658:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800265c:	18d3      	adds	r3, r2, r3
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	68ba      	ldr	r2, [r7, #8]
 8002662:	611a      	str	r2, [r3, #16]
    if (pdev->cfg.dma_enable == 1)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	78db      	ldrb	r3, [r3, #3]
 8002668:	2b01      	cmp	r3, #1
 800266a:	d10b      	bne.n	8002684 <USB_OTG_EP0StartXfer+0x1d0>
    {
      USB_OTG_WRITE_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPDMA, ep->dma_addr);
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	f103 0314 	add.w	r3, r3, #20
 8002676:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800267a:	18d3      	adds	r3, r2, r3
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	683a      	ldr	r2, [r7, #0]
 8002680:	6912      	ldr	r2, [r2, #16]
 8002682:	615a      	str	r2, [r3, #20]
    }
    /* EP enable */
    depctl.b.cnak = 1;
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800268a:	613b      	str	r3, [r7, #16]
    depctl.b.epena = 1;
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002692:	613b      	str	r3, [r7, #16]
    USB_OTG_WRITE_REG32 (&(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL), depctl.d32);
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	f103 0314 	add.w	r3, r3, #20
 800269e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80026a2:	18d3      	adds	r3, r2, r3
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	693a      	ldr	r2, [r7, #16]
 80026a8:	601a      	str	r2, [r3, #0]
    
  }
  return status;
 80026aa:	7ffb      	ldrb	r3, [r7, #31]
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	f107 0724 	add.w	r7, r7, #36	; 0x24
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bc80      	pop	{r7}
 80026b6:	4770      	bx	lr

080026b8 <USB_OTG_EPSetStall>:
* @brief  USB_OTG_EPSetStall : Set the EP STALL
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EPSetStall(USB_OTG_CORE_HANDLE *pdev , USB_OTG_EP *ep)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b087      	sub	sp, #28
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	6039      	str	r1, [r7, #0]
  USB_OTG_STS status = USB_OTG_OK;
 80026c2:	f04f 0300 	mov.w	r3, #0
 80026c6:	75fb      	strb	r3, [r7, #23]
  USB_OTG_DEPCTL_TypeDef  depctl;
  __IO uint32_t *depctl_addr;
  
  depctl.d32 = 0;
 80026c8:	f04f 0300 	mov.w	r3, #0
 80026cc:	60fb      	str	r3, [r7, #12]
  if (ep->is_in == 1)
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	785b      	ldrb	r3, [r3, #1]
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d11e      	bne.n	8002714 <USB_OTG_EPSetStall+0x5c>
  {
    depctl_addr = &(pdev->regs.INEP_REGS[ep->num]->DIEPCTL);
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	f103 0304 	add.w	r3, r3, #4
 80026e0:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80026e4:	18d3      	adds	r3, r2, r3
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	613b      	str	r3, [r7, #16]
    depctl.d32 = USB_OTG_READ_REG32(depctl_addr);
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	60fb      	str	r3, [r7, #12]
    /* set the disable and stall bits */
    if (depctl.b.epena)
 80026f0:	7bfb      	ldrb	r3, [r7, #15]
 80026f2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d003      	beq.n	8002704 <USB_OTG_EPSetStall+0x4c>
    {
      depctl.b.epdis = 1;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002702:	60fb      	str	r3, [r7, #12]
    }
    depctl.b.stall = 1;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800270a:	60fb      	str	r3, [r7, #12]
    USB_OTG_WRITE_REG32(depctl_addr, depctl.d32);
 800270c:	68fa      	ldr	r2, [r7, #12]
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	601a      	str	r2, [r3, #0]
 8002712:	e013      	b.n	800273c <USB_OTG_EPSetStall+0x84>
  }
  else
  {
    depctl_addr = &(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL);
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	f103 0314 	add.w	r3, r3, #20
 800271e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002722:	18d3      	adds	r3, r2, r3
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	613b      	str	r3, [r7, #16]
    depctl.d32 = USB_OTG_READ_REG32(depctl_addr);
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	60fb      	str	r3, [r7, #12]
    /* set the stall bit */
    depctl.b.stall = 1;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002734:	60fb      	str	r3, [r7, #12]
    USB_OTG_WRITE_REG32(depctl_addr, depctl.d32);
 8002736:	68fa      	ldr	r2, [r7, #12]
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	601a      	str	r2, [r3, #0]
  }
  return status;
 800273c:	7dfb      	ldrb	r3, [r7, #23]
}
 800273e:	4618      	mov	r0, r3
 8002740:	f107 071c 	add.w	r7, r7, #28
 8002744:	46bd      	mov	sp, r7
 8002746:	bc80      	pop	{r7}
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop

0800274c <USB_OTG_EPClearStall>:
* @brief  Clear the EP STALL
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EPClearStall(USB_OTG_CORE_HANDLE *pdev , USB_OTG_EP *ep)
{
 800274c:	b480      	push	{r7}
 800274e:	b087      	sub	sp, #28
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
  USB_OTG_STS status = USB_OTG_OK;
 8002756:	f04f 0300 	mov.w	r3, #0
 800275a:	74fb      	strb	r3, [r7, #19]
  USB_OTG_DEPCTL_TypeDef  depctl;
  __IO uint32_t *depctl_addr;
  
  depctl.d32 = 0;
 800275c:	f04f 0300 	mov.w	r3, #0
 8002760:	60fb      	str	r3, [r7, #12]
  
  if (ep->is_in == 1)
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	785b      	ldrb	r3, [r3, #1]
 8002766:	2b01      	cmp	r3, #1
 8002768:	d10a      	bne.n	8002780 <USB_OTG_EPClearStall+0x34>
  {
    depctl_addr = &(pdev->regs.INEP_REGS[ep->num]->DIEPCTL);
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	f103 0304 	add.w	r3, r3, #4
 8002774:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002778:	18d3      	adds	r3, r2, r3
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	617b      	str	r3, [r7, #20]
 800277e:	e009      	b.n	8002794 <USB_OTG_EPClearStall+0x48>
  }
  else
  {
    depctl_addr = &(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL);
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	f103 0314 	add.w	r3, r3, #20
 800278a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800278e:	18d3      	adds	r3, r2, r3
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	617b      	str	r3, [r7, #20]
  }
  depctl.d32 = USB_OTG_READ_REG32(depctl_addr);
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	60fb      	str	r3, [r7, #12]
  /* clear the stall bits */
  depctl.b.stall = 0;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	f36f 5355 	bfc	r3, #21, #1
 80027a0:	60fb      	str	r3, [r7, #12]
  if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	78db      	ldrb	r3, [r3, #3]
 80027a6:	2b03      	cmp	r3, #3
 80027a8:	d003      	beq.n	80027b2 <USB_OTG_EPClearStall+0x66>
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	78db      	ldrb	r3, [r3, #3]
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d103      	bne.n	80027ba <USB_OTG_EPClearStall+0x6e>
  {
    depctl.b.setd0pid = 1; /* DATA0 */
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027b8:	60fb      	str	r3, [r7, #12]
  }
  USB_OTG_WRITE_REG32(depctl_addr, depctl.d32);
 80027ba:	68fa      	ldr	r2, [r7, #12]
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	601a      	str	r2, [r3, #0]
  return status;
 80027c0:	7cfb      	ldrb	r3, [r7, #19]
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	f107 071c 	add.w	r7, r7, #28
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bc80      	pop	{r7}
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop

080027d0 <USB_OTG_ReadDevAllOutEp_itr>:
* @brief  USB_OTG_ReadDevAllOutEp_itr : returns OUT endpoint interrupt bits
* @param  pdev : Selected device
* @retval OUT endpoint interrupt bits
*/
uint32_t USB_OTG_ReadDevAllOutEp_itr(USB_OTG_CORE_HANDLE *pdev)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b085      	sub	sp, #20
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  uint32_t v;
  v  = USB_OTG_READ_REG32(&pdev->regs.DREGS->DAINT);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	691b      	ldr	r3, [r3, #16]
 80027dc:	699b      	ldr	r3, [r3, #24]
 80027de:	60fb      	str	r3, [r7, #12]
  v &= USB_OTG_READ_REG32(&pdev->regs.DREGS->DAINTMSK);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	691b      	ldr	r3, [r3, #16]
 80027e4:	69db      	ldr	r3, [r3, #28]
 80027e6:	68fa      	ldr	r2, [r7, #12]
 80027e8:	ea02 0303 	and.w	r3, r2, r3
 80027ec:	60fb      	str	r3, [r7, #12]
  return ((v & 0xffff0000) >> 16);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	ea4f 4313 	mov.w	r3, r3, lsr #16
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	f107 0714 	add.w	r7, r7, #20
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bc80      	pop	{r7}
 80027fe:	4770      	bx	lr

08002800 <USB_OTG_ReadDevOutEP_itr>:
* @param  pdev : Selected device
* @param  ep : end point number
* @retval Device OUT EP Interrupt register
*/
uint32_t USB_OTG_ReadDevOutEP_itr(USB_OTG_CORE_HANDLE *pdev , uint8_t epnum)
{
 8002800:	b480      	push	{r7}
 8002802:	b085      	sub	sp, #20
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	460b      	mov	r3, r1
 800280a:	70fb      	strb	r3, [r7, #3]
  uint32_t v;
  v  = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[epnum]->DOEPINT);
 800280c:	78fb      	ldrb	r3, [r7, #3]
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	f103 0314 	add.w	r3, r3, #20
 8002814:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002818:	18d3      	adds	r3, r2, r3
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	60fb      	str	r3, [r7, #12]
  v &= USB_OTG_READ_REG32(&pdev->regs.DREGS->DOEPMSK);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	691b      	ldr	r3, [r3, #16]
 8002824:	695b      	ldr	r3, [r3, #20]
 8002826:	68fa      	ldr	r2, [r7, #12]
 8002828:	ea02 0303 	and.w	r3, r2, r3
 800282c:	60fb      	str	r3, [r7, #12]
  return v;
 800282e:	68fb      	ldr	r3, [r7, #12]
}
 8002830:	4618      	mov	r0, r3
 8002832:	f107 0714 	add.w	r7, r7, #20
 8002836:	46bd      	mov	sp, r7
 8002838:	bc80      	pop	{r7}
 800283a:	4770      	bx	lr

0800283c <USB_OTG_ReadDevAllInEPItr>:
* @brief  USB_OTG_ReadDevAllInEPItr : Get int status register
* @param  pdev : Selected device
* @retval int status register
*/
uint32_t USB_OTG_ReadDevAllInEPItr(USB_OTG_CORE_HANDLE *pdev)
{
 800283c:	b480      	push	{r7}
 800283e:	b085      	sub	sp, #20
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  uint32_t v;
  v = USB_OTG_READ_REG32(&pdev->regs.DREGS->DAINT);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	691b      	ldr	r3, [r3, #16]
 8002848:	699b      	ldr	r3, [r3, #24]
 800284a:	60fb      	str	r3, [r7, #12]
  v &= USB_OTG_READ_REG32(&pdev->regs.DREGS->DAINTMSK);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	691b      	ldr	r3, [r3, #16]
 8002850:	69db      	ldr	r3, [r3, #28]
 8002852:	68fa      	ldr	r2, [r7, #12]
 8002854:	ea02 0303 	and.w	r3, r2, r3
 8002858:	60fb      	str	r3, [r7, #12]
  return (v & 0xffff);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	ea4f 4303 	mov.w	r3, r3, lsl #16
 8002860:	ea4f 4313 	mov.w	r3, r3, lsr #16
}
 8002864:	4618      	mov	r0, r3
 8002866:	f107 0714 	add.w	r7, r7, #20
 800286a:	46bd      	mov	sp, r7
 800286c:	bc80      	pop	{r7}
 800286e:	4770      	bx	lr

08002870 <USB_OTG_EP0_OutStart>:
* @brief  configures EPO to receive SETUP packets
* @param  None
* @retval : None
*/
void USB_OTG_EP0_OutStart(USB_OTG_CORE_HANDLE *pdev)
{
 8002870:	b480      	push	{r7}
 8002872:	b087      	sub	sp, #28
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  USB_OTG_DEP0XFRSIZ_TypeDef  doeptsize0;
  doeptsize0.d32 = 0;
 8002878:	f04f 0300 	mov.w	r3, #0
 800287c:	613b      	str	r3, [r7, #16]
  doeptsize0.b.supcnt = 3;
 800287e:	7cfb      	ldrb	r3, [r7, #19]
 8002880:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002884:	74fb      	strb	r3, [r7, #19]
  doeptsize0.b.pktcnt = 1;
 8002886:	7cbb      	ldrb	r3, [r7, #18]
 8002888:	f04f 0201 	mov.w	r2, #1
 800288c:	f362 03c4 	bfi	r3, r2, #3, #2
 8002890:	74bb      	strb	r3, [r7, #18]
  doeptsize0.b.xfersize = 8 * 3;
 8002892:	7c3b      	ldrb	r3, [r7, #16]
 8002894:	f04f 0218 	mov.w	r2, #24
 8002898:	f362 0306 	bfi	r3, r2, #0, #7
 800289c:	743b      	strb	r3, [r7, #16]
  USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[0]->DOEPTSIZ, doeptsize0.d32 );
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028a2:	693a      	ldr	r2, [r7, #16]
 80028a4:	611a      	str	r2, [r3, #16]
  
  if (pdev->cfg.dma_enable == 1)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	78db      	ldrb	r3, [r3, #3]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d117      	bne.n	80028de <USB_OTG_EP0_OutStart+0x6e>
  {
    USB_OTG_DEPCTL_TypeDef  doepctl;
    doepctl.d32 = 0;
 80028ae:	f04f 0300 	mov.w	r3, #0
 80028b2:	60fb      	str	r3, [r7, #12]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[0]->DOEPDMA, 
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	f502 62b9 	add.w	r2, r2, #1480	; 0x5c8
 80028be:	615a      	str	r2, [r3, #20]
                        (uint32_t)&pdev->dev.setup_packet);
    
    /* EP enable */
    doepctl.d32 = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[0]->DOEPCTL);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	60fb      	str	r3, [r7, #12]
    doepctl.b.epena = 1;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80028ce:	60fb      	str	r3, [r7, #12]
    doepctl.d32 = 0x80008000;
 80028d0:	f04f 2380 	mov.w	r3, #2147516416	; 0x80008000
 80028d4:	60fb      	str	r3, [r7, #12]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[0]->DOEPCTL, doepctl.d32);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028da:	68fa      	ldr	r2, [r7, #12]
 80028dc:	601a      	str	r2, [r3, #0]
  }
}
 80028de:	f107 071c 	add.w	r7, r7, #28
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bc80      	pop	{r7}
 80028e6:	4770      	bx	lr

080028e8 <USB_OTG_UngateClock>:
* @brief  USB_OTG_UngateClock : active USB Core clock
* @param  None
* @retval : None
*/
void USB_OTG_UngateClock(USB_OTG_CORE_HANDLE *pdev)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b085      	sub	sp, #20
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  if(pdev->cfg.low_power)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	7a9b      	ldrb	r3, [r3, #10]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d01b      	beq.n	8002930 <USB_OTG_UngateClock+0x48>
  {
    
    USB_OTG_DSTS_TypeDef     dsts;
    USB_OTG_PCGCCTL_TypeDef  power; 
    
    dsts.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DSTS);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	691b      	ldr	r3, [r3, #16]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	60fb      	str	r3, [r7, #12]
    
    if(dsts.b.suspsts == 1)
 8002900:	7b3b      	ldrb	r3, [r7, #12]
 8002902:	f003 0301 	and.w	r3, r3, #1
 8002906:	b2db      	uxtb	r3, r3
 8002908:	2b00      	cmp	r3, #0
 800290a:	d011      	beq.n	8002930 <USB_OTG_UngateClock+0x48>
    {
      /* un-gate USB Core clock */
      power.d32 = USB_OTG_READ_REG32(&pdev->regs.PCGCCTL);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	60bb      	str	r3, [r7, #8]
      power.b.gatehclk = 0;
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	f36f 0341 	bfc	r3, #1, #1
 800291c:	60bb      	str	r3, [r7, #8]
      power.b.stoppclk = 0;
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	f36f 0300 	bfc	r3, #0, #1
 8002924:	60bb      	str	r3, [r7, #8]
      USB_OTG_WRITE_REG32(pdev->regs.PCGCCTL, power.d32);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800292c:	68ba      	ldr	r2, [r7, #8]
 800292e:	601a      	str	r2, [r3, #0]
      
    }
  }
}
 8002930:	f107 0714 	add.w	r7, r7, #20
 8002934:	46bd      	mov	sp, r7
 8002936:	bc80      	pop	{r7}
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop

0800293c <DCD_Init>:



void DCD_Init(USB_OTG_CORE_HANDLE *pdev , 
              USB_OTG_CORE_ID_TypeDef coreID)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	460b      	mov	r3, r1
 8002946:	70fb      	strb	r3, [r7, #3]
  uint32_t i;
  USB_OTG_EP *ep;
  
  USB_OTG_SelectCore (pdev , coreID);
 8002948:	78fb      	ldrb	r3, [r7, #3]
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	4619      	mov	r1, r3
 800294e:	f7fe fe41 	bl	80015d4 <USB_OTG_SelectCore>
  
  pdev->dev.device_status = USB_OTG_DEFAULT;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f04f 0201 	mov.w	r2, #1
 8002958:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
  pdev->dev.device_address = 0;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f04f 0200 	mov.w	r2, #0
 8002962:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
  
  /* Init ep structure */
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8002966:	f04f 0300 	mov.w	r3, #0
 800296a:	60fb      	str	r3, [r7, #12]
 800296c:	e02b      	b.n	80029c6 <DCD_Init+0x8a>
  {
    ep = &pdev->dev.in_ep[i];
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f503 718c 	add.w	r1, r3, #280	; 0x118
 8002974:	68fa      	ldr	r2, [r7, #12]
 8002976:	4613      	mov	r3, r2
 8002978:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800297c:	189b      	adds	r3, r3, r2
 800297e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8002982:	18cb      	adds	r3, r1, r3
 8002984:	60bb      	str	r3, [r7, #8]
    /* Init ep structure */
    ep->is_in = 1;
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	f04f 0201 	mov.w	r2, #1
 800298c:	705a      	strb	r2, [r3, #1]
    ep->num = i;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	b2da      	uxtb	r2, r3
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	701a      	strb	r2, [r3, #0]
    ep->tx_fifo_num = i;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	b29a      	uxth	r2, r3
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	80da      	strh	r2, [r3, #6]
    /* Control until ep is actvated */
    ep->type = EP_TYPE_CTRL;
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	f04f 0200 	mov.w	r2, #0
 80029a4:	70da      	strb	r2, [r3, #3]
    ep->maxpacket =  USB_OTG_MAX_EP0_SIZE;
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	f04f 0208 	mov.w	r2, #8
 80029ac:	609a      	str	r2, [r3, #8]
    ep->xfer_buff = 0;
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	f04f 0200 	mov.w	r2, #0
 80029b4:	60da      	str	r2, [r3, #12]
    ep->xfer_len = 0;
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	f04f 0200 	mov.w	r2, #0
 80029bc:	615a      	str	r2, [r3, #20]
  
  pdev->dev.device_status = USB_OTG_DEFAULT;
  pdev->dev.device_address = 0;
  
  /* Init ep structure */
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	f103 0301 	add.w	r3, r3, #1
 80029c4:	60fb      	str	r3, [r7, #12]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	785b      	ldrb	r3, [r3, #1]
 80029ca:	461a      	mov	r2, r3
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d8cd      	bhi.n	800296e <DCD_Init+0x32>
    ep->maxpacket =  USB_OTG_MAX_EP0_SIZE;
    ep->xfer_buff = 0;
    ep->xfer_len = 0;
  }
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 80029d2:	f04f 0300 	mov.w	r3, #0
 80029d6:	60fb      	str	r3, [r7, #12]
 80029d8:	e02b      	b.n	8002a32 <DCD_Init+0xf6>
  {
    ep = &pdev->dev.out_ep[i];
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f503 715c 	add.w	r1, r3, #880	; 0x370
 80029e0:	68fa      	ldr	r2, [r7, #12]
 80029e2:	4613      	mov	r3, r2
 80029e4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80029e8:	189b      	adds	r3, r3, r2
 80029ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80029ee:	18cb      	adds	r3, r1, r3
 80029f0:	60bb      	str	r3, [r7, #8]
    /* Init ep structure */
    ep->is_in = 0;
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	f04f 0200 	mov.w	r2, #0
 80029f8:	705a      	strb	r2, [r3, #1]
    ep->num = i;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	b2da      	uxtb	r2, r3
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	701a      	strb	r2, [r3, #0]
    ep->tx_fifo_num = i;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	b29a      	uxth	r2, r3
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	80da      	strh	r2, [r3, #6]
    /* Control until ep is activated */
    ep->type = EP_TYPE_CTRL;
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	f04f 0200 	mov.w	r2, #0
 8002a10:	70da      	strb	r2, [r3, #3]
    ep->maxpacket = USB_OTG_MAX_EP0_SIZE;
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	f04f 0208 	mov.w	r2, #8
 8002a18:	609a      	str	r2, [r3, #8]
    ep->xfer_buff = 0;
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	f04f 0200 	mov.w	r2, #0
 8002a20:	60da      	str	r2, [r3, #12]
    ep->xfer_len = 0;
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	f04f 0200 	mov.w	r2, #0
 8002a28:	615a      	str	r2, [r3, #20]
    ep->maxpacket =  USB_OTG_MAX_EP0_SIZE;
    ep->xfer_buff = 0;
    ep->xfer_len = 0;
  }
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	f103 0301 	add.w	r3, r3, #1
 8002a30:	60fb      	str	r3, [r7, #12]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	785b      	ldrb	r3, [r3, #1]
 8002a36:	461a      	mov	r2, r3
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d8cd      	bhi.n	80029da <DCD_Init+0x9e>
    ep->maxpacket = USB_OTG_MAX_EP0_SIZE;
    ep->xfer_buff = 0;
    ep->xfer_len = 0;
  }
  
  USB_OTG_DisableGlobalInt(pdev);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f7fe ffba 	bl	80019b8 <USB_OTG_DisableGlobalInt>
  
  /*Init the Core (common init.) */
  USB_OTG_CoreInit(pdev);
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f7fe fe9d 	bl	8001784 <USB_OTG_CoreInit>


  /* Force Device Mode*/
  USB_OTG_SetCurrentMode(pdev, DEVICE_MODE);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f04f 0100 	mov.w	r1, #0
 8002a50:	f7ff f844 	bl	8001adc <USB_OTG_SetCurrentMode>
  
  /* Init Device */
  USB_OTG_CoreInitDev(pdev);
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f7ff f8cb 	bl	8001bf0 <USB_OTG_CoreInitDev>
  
  
  /* Enable USB Global interrupt */
  USB_OTG_EnableGlobalInt(pdev);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f7fe ff8e 	bl	800197c <USB_OTG_EnableGlobalInt>
}
 8002a60:	f107 0710 	add.w	r7, r7, #16
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <DCD_EP_Open>:
*/
uint32_t DCD_EP_Open(USB_OTG_CORE_HANDLE *pdev , 
                     uint8_t ep_addr,
                     uint16_t ep_mps,
                     uint8_t ep_type)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b086      	sub	sp, #24
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	72f9      	strb	r1, [r7, #11]
 8002a72:	813a      	strh	r2, [r7, #8]
 8002a74:	71fb      	strb	r3, [r7, #7]
  USB_OTG_EP *ep;
  
  if ((ep_addr & 0x80) == 0x80)
 8002a76:	7afb      	ldrb	r3, [r7, #11]
 8002a78:	b25b      	sxtb	r3, r3
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	da0e      	bge.n	8002a9c <DCD_EP_Open+0x34>
  {
    ep = &pdev->dev.in_ep[ep_addr & 0x7F];
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	f503 718c 	add.w	r1, r3, #280	; 0x118
 8002a84:	7afb      	ldrb	r3, [r7, #11]
 8002a86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002a90:	189b      	adds	r3, r3, r2
 8002a92:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8002a96:	18cb      	adds	r3, r1, r3
 8002a98:	617b      	str	r3, [r7, #20]
 8002a9a:	e00d      	b.n	8002ab8 <DCD_EP_Open+0x50>
  }
  else
  {
    ep = &pdev->dev.out_ep[ep_addr & 0x7F];
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f503 715c 	add.w	r1, r3, #880	; 0x370
 8002aa2:	7afb      	ldrb	r3, [r7, #11]
 8002aa4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002aae:	189b      	adds	r3, r3, r2
 8002ab0:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8002ab4:	18cb      	adds	r3, r1, r3
 8002ab6:	617b      	str	r3, [r7, #20]
  }
  ep->num   = ep_addr & 0x7F;
 8002ab8:	7afb      	ldrb	r3, [r7, #11]
 8002aba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002abe:	b2da      	uxtb	r2, r3
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80 & ep_addr) != 0;
 8002ac4:	7afb      	ldrb	r3, [r7, #11]
 8002ac6:	ea4f 13d3 	mov.w	r3, r3, lsr #7
 8002aca:	b2da      	uxtb	r2, r3
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	705a      	strb	r2, [r3, #1]
  ep->maxpacket = ep_mps;
 8002ad0:	893a      	ldrh	r2, [r7, #8]
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	79fa      	ldrb	r2, [r7, #7]
 8002ada:	70da      	strb	r2, [r3, #3]
  if (ep->is_in)
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	785b      	ldrb	r3, [r3, #1]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d004      	beq.n	8002aee <DCD_EP_Open+0x86>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	461a      	mov	r2, r3
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == USB_OTG_EP_BULK )
 8002aee:	79fb      	ldrb	r3, [r7, #7]
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d103      	bne.n	8002afc <DCD_EP_Open+0x94>
  {
    ep->data_pid_start = 0;
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	f04f 0200 	mov.w	r2, #0
 8002afa:	711a      	strb	r2, [r3, #4]
  }
  USB_OTG_EPActivate(pdev , ep );
 8002afc:	68f8      	ldr	r0, [r7, #12]
 8002afe:	6979      	ldr	r1, [r7, #20]
 8002b00:	f7ff faa4 	bl	800204c <USB_OTG_EPActivate>
  return 0;
 8002b04:	f04f 0300 	mov.w	r3, #0
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f107 0718 	add.w	r7, r7, #24
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop

08002b14 <DCD_EP_Close>:
* @param pdev: device instance
* @param ep_addr: endpoint address
* @retval : status
*/
uint32_t DCD_EP_Close(USB_OTG_CORE_HANDLE *pdev , uint8_t  ep_addr)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	460b      	mov	r3, r1
 8002b1e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EP *ep;
  
  if ((ep_addr&0x80) == 0x80)
 8002b20:	78fb      	ldrb	r3, [r7, #3]
 8002b22:	b25b      	sxtb	r3, r3
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	da0e      	bge.n	8002b46 <DCD_EP_Close+0x32>
  {
    ep = &pdev->dev.in_ep[ep_addr & 0x7F];
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f503 718c 	add.w	r1, r3, #280	; 0x118
 8002b2e:	78fb      	ldrb	r3, [r7, #3]
 8002b30:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002b34:	4613      	mov	r3, r2
 8002b36:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002b3a:	189b      	adds	r3, r3, r2
 8002b3c:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8002b40:	18cb      	adds	r3, r1, r3
 8002b42:	60fb      	str	r3, [r7, #12]
 8002b44:	e00d      	b.n	8002b62 <DCD_EP_Close+0x4e>
  }
  else
  {
    ep = &pdev->dev.out_ep[ep_addr & 0x7F];
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f503 715c 	add.w	r1, r3, #880	; 0x370
 8002b4c:	78fb      	ldrb	r3, [r7, #3]
 8002b4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002b52:	4613      	mov	r3, r2
 8002b54:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002b58:	189b      	adds	r3, r3, r2
 8002b5a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8002b5e:	18cb      	adds	r3, r1, r3
 8002b60:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7F;
 8002b62:	78fb      	ldrb	r3, [r7, #3]
 8002b64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b68:	b2da      	uxtb	r2, r3
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	701a      	strb	r2, [r3, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 8002b6e:	78fb      	ldrb	r3, [r7, #3]
 8002b70:	ea4f 13d3 	mov.w	r3, r3, lsr #7
 8002b74:	b2da      	uxtb	r2, r3
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	705a      	strb	r2, [r3, #1]
  USB_OTG_EPDeactivate(pdev , ep );
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	68f9      	ldr	r1, [r7, #12]
 8002b7e:	f7ff fadf 	bl	8002140 <USB_OTG_EPDeactivate>
  return 0;
 8002b82:	f04f 0300 	mov.w	r3, #0
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	f107 0710 	add.w	r7, r7, #16
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <DCD_EP_PrepareRx>:
*/
uint32_t   DCD_EP_PrepareRx( USB_OTG_CORE_HANDLE *pdev,
                            uint8_t   ep_addr,
                            uint8_t *pbuf,                        
                            uint16_t  buf_len)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b086      	sub	sp, #24
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	607a      	str	r2, [r7, #4]
 8002b9a:	460a      	mov	r2, r1
 8002b9c:	72fa      	strb	r2, [r7, #11]
 8002b9e:	807b      	strh	r3, [r7, #2]
  USB_OTG_EP *ep;
  
  ep = &pdev->dev.out_ep[ep_addr & 0x7F];
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f503 715c 	add.w	r1, r3, #880	; 0x370
 8002ba6:	7afb      	ldrb	r3, [r7, #11]
 8002ba8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002bac:	4613      	mov	r3, r2
 8002bae:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002bb2:	189b      	adds	r3, r3, r2
 8002bb4:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8002bb8:	18cb      	adds	r3, r1, r3
 8002bba:	617b      	str	r3, [r7, #20]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pbuf;  
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = buf_len;
 8002bc2:	887a      	ldrh	r2, [r7, #2]
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0;
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	f04f 0200 	mov.w	r2, #0
 8002bce:	619a      	str	r2, [r3, #24]
  ep->is_in = 0;
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	f04f 0200 	mov.w	r2, #0
 8002bd6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7F;
 8002bd8:	7afb      	ldrb	r3, [r7, #11]
 8002bda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002bde:	b2da      	uxtb	r2, r3
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	701a      	strb	r2, [r3, #0]
  
  if (pdev->cfg.dma_enable == 1)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	78db      	ldrb	r3, [r3, #3]
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d102      	bne.n	8002bf2 <DCD_EP_PrepareRx+0x62>
  {
    ep->dma_addr = (uint32_t)pbuf;  
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	611a      	str	r2, [r3, #16]
  }
  
  if ( ep->num == 0 )
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d104      	bne.n	8002c04 <DCD_EP_PrepareRx+0x74>
  {
    USB_OTG_EP0StartXfer(pdev , ep);
 8002bfa:	68f8      	ldr	r0, [r7, #12]
 8002bfc:	6979      	ldr	r1, [r7, #20]
 8002bfe:	f7ff fc59 	bl	80024b4 <USB_OTG_EP0StartXfer>
 8002c02:	e003      	b.n	8002c0c <DCD_EP_PrepareRx+0x7c>
  }
  else
  {
    USB_OTG_EPStartXfer(pdev, ep );
 8002c04:	68f8      	ldr	r0, [r7, #12]
 8002c06:	6979      	ldr	r1, [r7, #20]
 8002c08:	f7ff faea 	bl	80021e0 <USB_OTG_EPStartXfer>
  }
  return 0;
 8002c0c:	f04f 0300 	mov.w	r3, #0
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	f107 0718 	add.w	r7, r7, #24
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop

08002c1c <DCD_EP_Tx>:
*/
uint32_t  DCD_EP_Tx ( USB_OTG_CORE_HANDLE *pdev,
                     uint8_t   ep_addr,
                     uint8_t   *pbuf,
                     uint32_t   buf_len)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b086      	sub	sp, #24
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	607a      	str	r2, [r7, #4]
 8002c26:	603b      	str	r3, [r7, #0]
 8002c28:	460b      	mov	r3, r1
 8002c2a:	72fb      	strb	r3, [r7, #11]
  USB_OTG_EP *ep;
  
  ep = &pdev->dev.in_ep[ep_addr & 0x7F];
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f503 718c 	add.w	r1, r3, #280	; 0x118
 8002c32:	7afb      	ldrb	r3, [r7, #11]
 8002c34:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002c38:	4613      	mov	r3, r2
 8002c3a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002c3e:	189b      	adds	r3, r3, r2
 8002c40:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8002c44:	18cb      	adds	r3, r1, r3
 8002c46:	617b      	str	r3, [r7, #20]
  
  /* Setup and start the Transfer */
  ep->is_in = 1;
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	f04f 0201 	mov.w	r2, #1
 8002c4e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7F;  
 8002c50:	7afb      	ldrb	r3, [r7, #11]
 8002c52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c56:	b2da      	uxtb	r2, r3
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	701a      	strb	r2, [r3, #0]
  ep->xfer_buff = pbuf;
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	60da      	str	r2, [r3, #12]
  ep->dma_addr = (uint32_t)pbuf;  
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0;
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	f04f 0200 	mov.w	r2, #0
 8002c6e:	619a      	str	r2, [r3, #24]
  ep->xfer_len  = buf_len;
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	683a      	ldr	r2, [r7, #0]
 8002c74:	615a      	str	r2, [r3, #20]
  
  if ( ep->num == 0 )
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d104      	bne.n	8002c88 <DCD_EP_Tx+0x6c>
  {
    USB_OTG_EP0StartXfer(pdev , ep);
 8002c7e:	68f8      	ldr	r0, [r7, #12]
 8002c80:	6979      	ldr	r1, [r7, #20]
 8002c82:	f7ff fc17 	bl	80024b4 <USB_OTG_EP0StartXfer>
 8002c86:	e003      	b.n	8002c90 <DCD_EP_Tx+0x74>
  }
  else
  {
    USB_OTG_EPStartXfer(pdev, ep );
 8002c88:	68f8      	ldr	r0, [r7, #12]
 8002c8a:	6979      	ldr	r1, [r7, #20]
 8002c8c:	f7ff faa8 	bl	80021e0 <USB_OTG_EPStartXfer>
  }
  return 0;
 8002c90:	f04f 0300 	mov.w	r3, #0
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	f107 0718 	add.w	r7, r7, #24
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop

08002ca0 <DCD_EP_Stall>:
* @param pdev: device instance
* @param epnum: endpoint address
* @retval : status
*/
uint32_t  DCD_EP_Stall (USB_OTG_CORE_HANDLE *pdev, uint8_t   epnum)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	460b      	mov	r3, r1
 8002caa:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EP *ep;
  if ((0x80 & epnum) == 0x80)
 8002cac:	78fb      	ldrb	r3, [r7, #3]
 8002cae:	b25b      	sxtb	r3, r3
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	da0e      	bge.n	8002cd2 <DCD_EP_Stall+0x32>
  {
    ep = &pdev->dev.in_ep[epnum & 0x7F];
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f503 718c 	add.w	r1, r3, #280	; 0x118
 8002cba:	78fb      	ldrb	r3, [r7, #3]
 8002cbc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002cc6:	189b      	adds	r3, r3, r2
 8002cc8:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8002ccc:	18cb      	adds	r3, r1, r3
 8002cce:	60fb      	str	r3, [r7, #12]
 8002cd0:	e00b      	b.n	8002cea <DCD_EP_Stall+0x4a>
  }
  else
  {
    ep = &pdev->dev.out_ep[epnum];
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f503 715c 	add.w	r1, r3, #880	; 0x370
 8002cd8:	78fa      	ldrb	r2, [r7, #3]
 8002cda:	4613      	mov	r3, r2
 8002cdc:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002ce0:	189b      	adds	r3, r3, r2
 8002ce2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8002ce6:	18cb      	adds	r3, r1, r3
 8002ce8:	60fb      	str	r3, [r7, #12]
  }

  ep->is_stall = 1;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	f04f 0201 	mov.w	r2, #1
 8002cf0:	709a      	strb	r2, [r3, #2]
  ep->num   = epnum & 0x7F;
 8002cf2:	78fb      	ldrb	r3, [r7, #3]
 8002cf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002cf8:	b2da      	uxtb	r2, r3
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((epnum & 0x80) == 0x80);
 8002cfe:	78fb      	ldrb	r3, [r7, #3]
 8002d00:	ea4f 13d3 	mov.w	r3, r3, lsr #7
 8002d04:	b2da      	uxtb	r2, r3
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	705a      	strb	r2, [r3, #1]
  
  USB_OTG_EPSetStall(pdev , ep);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	68f9      	ldr	r1, [r7, #12]
 8002d0e:	f7ff fcd3 	bl	80026b8 <USB_OTG_EPSetStall>
  return (0);
 8002d12:	f04f 0300 	mov.w	r3, #0
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	f107 0710 	add.w	r7, r7, #16
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <DCD_EP_ClrStall>:
* @param pdev: device instance
* @param epnum: endpoint address
* @retval : status
*/
uint32_t  DCD_EP_ClrStall (USB_OTG_CORE_HANDLE *pdev, uint8_t epnum)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	460b      	mov	r3, r1
 8002d2a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EP *ep;
  if ((0x80 & epnum) == 0x80)
 8002d2c:	78fb      	ldrb	r3, [r7, #3]
 8002d2e:	b25b      	sxtb	r3, r3
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	da0e      	bge.n	8002d52 <DCD_EP_ClrStall+0x32>
  {
    ep = &pdev->dev.in_ep[epnum & 0x7F];    
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f503 718c 	add.w	r1, r3, #280	; 0x118
 8002d3a:	78fb      	ldrb	r3, [r7, #3]
 8002d3c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002d40:	4613      	mov	r3, r2
 8002d42:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002d46:	189b      	adds	r3, r3, r2
 8002d48:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8002d4c:	18cb      	adds	r3, r1, r3
 8002d4e:	60fb      	str	r3, [r7, #12]
 8002d50:	e00b      	b.n	8002d6a <DCD_EP_ClrStall+0x4a>
  }
  else
  {
    ep = &pdev->dev.out_ep[epnum];
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f503 715c 	add.w	r1, r3, #880	; 0x370
 8002d58:	78fa      	ldrb	r2, [r7, #3]
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002d60:	189b      	adds	r3, r3, r2
 8002d62:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8002d66:	18cb      	adds	r3, r1, r3
 8002d68:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 0;  
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	f04f 0200 	mov.w	r2, #0
 8002d70:	709a      	strb	r2, [r3, #2]
  ep->num   = epnum & 0x7F;
 8002d72:	78fb      	ldrb	r3, [r7, #3]
 8002d74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d78:	b2da      	uxtb	r2, r3
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((epnum & 0x80) == 0x80);
 8002d7e:	78fb      	ldrb	r3, [r7, #3]
 8002d80:	ea4f 13d3 	mov.w	r3, r3, lsr #7
 8002d84:	b2da      	uxtb	r2, r3
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	705a      	strb	r2, [r3, #1]
  
  USB_OTG_EPClearStall(pdev , ep);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	68f9      	ldr	r1, [r7, #12]
 8002d8e:	f7ff fcdd 	bl	800274c <USB_OTG_EPClearStall>
  return (0);
 8002d92:	f04f 0300 	mov.w	r3, #0
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	f107 0710 	add.w	r7, r7, #16
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <DCD_EP_SetAddress>:
* @param pdev: device instance
* @param address: new device address
* @retval : status
*/
void  DCD_EP_SetAddress (USB_OTG_CORE_HANDLE *pdev, uint8_t address)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b085      	sub	sp, #20
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	460b      	mov	r3, r1
 8002daa:	70fb      	strb	r3, [r7, #3]
  USB_OTG_DCFG_TypeDef  dcfg;
  dcfg.d32 = 0;
 8002dac:	f04f 0300 	mov.w	r3, #0
 8002db0:	60fb      	str	r3, [r7, #12]
  dcfg.b.devaddr = address;
 8002db2:	78fb      	ldrb	r3, [r7, #3]
 8002db4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002db8:	b2da      	uxtb	r2, r3
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	f362 130a 	bfi	r3, r2, #4, #7
 8002dc0:	60fb      	str	r3, [r7, #12]
  USB_OTG_MODIFY_REG32( &pdev->regs.DREGS->DCFG, 0, dcfg.d32);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	6912      	ldr	r2, [r2, #16]
 8002dca:	6811      	ldr	r1, [r2, #0]
 8002dcc:	68fa      	ldr	r2, [r7, #12]
 8002dce:	ea41 0202 	orr.w	r2, r1, r2
 8002dd2:	601a      	str	r2, [r3, #0]
}
 8002dd4:	f107 0714 	add.w	r7, r7, #20
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bc80      	pop	{r7}
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop

08002de0 <USBD_OTG_ISR_Handler>:
*         handles all USB Interrupts
* @param  pdev: device instance
* @retval status
*/
uint32_t USBD_OTG_ISR_Handler (USB_OTG_CORE_HANDLE *pdev)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b086      	sub	sp, #24
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTSTS_TypeDef  gintr_status;
  uint32_t retval = 0;
 8002de8:	f04f 0300 	mov.w	r3, #0
 8002dec:	617b      	str	r3, [r7, #20]
  
  if (USB_OTG_IsDeviceMode(pdev)) /* ensure that we are in device mode */
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f7fe feb6 	bl	8001b60 <USB_OTG_IsDeviceMode>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	f000 80a8 	beq.w	8002f4c <USBD_OTG_ISR_Handler+0x16c>
  {
    gintr_status.d32 = USB_OTG_ReadCoreItr(pdev);
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f7fe fec1 	bl	8001b84 <USB_OTG_ReadCoreItr>
 8002e02:	4603      	mov	r3, r0
 8002e04:	613b      	str	r3, [r7, #16]
    if (!gintr_status.d32) /* avoid spurious interrupt */
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d102      	bne.n	8002e12 <USBD_OTG_ISR_Handler+0x32>
    {
      return 0;
 8002e0c:	f04f 0300 	mov.w	r3, #0
 8002e10:	e09d      	b.n	8002f4e <USBD_OTG_ISR_Handler+0x16e>
    }
    
    if (gintr_status.b.outepintr)
 8002e12:	7cbb      	ldrb	r3, [r7, #18]
 8002e14:	f003 0308 	and.w	r3, r3, #8
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d007      	beq.n	8002e2e <USBD_OTG_ISR_Handler+0x4e>
    {
      retval |= DCD_HandleOutEP_ISR(pdev);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f000 fa4c 	bl	80032bc <DCD_HandleOutEP_ISR>
 8002e24:	4603      	mov	r3, r0
 8002e26:	697a      	ldr	r2, [r7, #20]
 8002e28:	ea42 0303 	orr.w	r3, r2, r3
 8002e2c:	617b      	str	r3, [r7, #20]
    }    
    
    if (gintr_status.b.inepint)
 8002e2e:	7cbb      	ldrb	r3, [r7, #18]
 8002e30:	f003 0304 	and.w	r3, r3, #4
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d007      	beq.n	8002e4a <USBD_OTG_ISR_Handler+0x6a>
    {
      retval |= DCD_HandleInEP_ISR(pdev);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f000 f926 	bl	800308c <DCD_HandleInEP_ISR>
 8002e40:	4603      	mov	r3, r0
 8002e42:	697a      	ldr	r2, [r7, #20]
 8002e44:	ea42 0303 	orr.w	r3, r2, r3
 8002e48:	617b      	str	r3, [r7, #20]
    }
    
    if (gintr_status.b.modemismatch)
 8002e4a:	7c3b      	ldrb	r3, [r7, #16]
 8002e4c:	f003 0302 	and.w	r3, r3, #2
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d00a      	beq.n	8002e6c <USBD_OTG_ISR_Handler+0x8c>
    {
      USB_OTG_GINTSTS_TypeDef  gintsts;
      
      /* Clear interrupt */
      gintsts.d32 = 0;
 8002e56:	f04f 0300 	mov.w	r3, #0
 8002e5a:	60fb      	str	r3, [r7, #12]
      gintsts.b.modemismatch = 1;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f043 0302 	orr.w	r3, r3, #2
 8002e62:	60fb      	str	r3, [r7, #12]
      USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	68fa      	ldr	r2, [r7, #12]
 8002e6a:	615a      	str	r2, [r3, #20]
    }
    
    if (gintr_status.b.wkupintr)
 8002e6c:	7cfb      	ldrb	r3, [r7, #19]
 8002e6e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d007      	beq.n	8002e88 <USBD_OTG_ISR_Handler+0xa8>
    {
      retval |= DCD_HandleResume_ISR(pdev);
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f000 f86d 	bl	8002f58 <DCD_HandleResume_ISR>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	697a      	ldr	r2, [r7, #20]
 8002e82:	ea42 0303 	orr.w	r3, r2, r3
 8002e86:	617b      	str	r3, [r7, #20]
    }
    
    if (gintr_status.b.usbsuspend)
 8002e88:	7c7b      	ldrb	r3, [r7, #17]
 8002e8a:	f003 0308 	and.w	r3, r3, #8
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d007      	beq.n	8002ea4 <USBD_OTG_ISR_Handler+0xc4>
    {
      retval |= DCD_HandleUSBSuspend_ISR(pdev);
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f000 f8a5 	bl	8002fe4 <DCD_HandleUSBSuspend_ISR>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	697a      	ldr	r2, [r7, #20]
 8002e9e:	ea42 0303 	orr.w	r3, r2, r3
 8002ea2:	617b      	str	r3, [r7, #20]
    }
    if (gintr_status.b.sofintr)
 8002ea4:	7c3b      	ldrb	r3, [r7, #16]
 8002ea6:	f003 0308 	and.w	r3, r3, #8
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d007      	beq.n	8002ec0 <USBD_OTG_ISR_Handler+0xe0>
    {
      retval |= DCD_HandleSof_ISR(pdev);
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f000 fad9 	bl	8003468 <DCD_HandleSof_ISR>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	697a      	ldr	r2, [r7, #20]
 8002eba:	ea42 0303 	orr.w	r3, r2, r3
 8002ebe:	617b      	str	r3, [r7, #20]
      
    }
    
    if (gintr_status.b.rxstsqlvl)
 8002ec0:	7c3b      	ldrb	r3, [r7, #16]
 8002ec2:	f003 0310 	and.w	r3, r3, #16
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d007      	beq.n	8002edc <USBD_OTG_ISR_Handler+0xfc>
    {
      retval |= DCD_HandleRxStatusQueueLevel_ISR(pdev);
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f000 fae9 	bl	80034a4 <DCD_HandleRxStatusQueueLevel_ISR>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	697a      	ldr	r2, [r7, #20]
 8002ed6:	ea42 0303 	orr.w	r3, r2, r3
 8002eda:	617b      	str	r3, [r7, #20]
      
    }
    
    if (gintr_status.b.usbreset)
 8002edc:	7c7b      	ldrb	r3, [r7, #17]
 8002ede:	f003 0310 	and.w	r3, r3, #16
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d007      	beq.n	8002ef8 <USBD_OTG_ISR_Handler+0x118>
    {
      retval |= DCD_HandleUsbReset_ISR(pdev);
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f000 fbe9 	bl	80036c0 <DCD_HandleUsbReset_ISR>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	697a      	ldr	r2, [r7, #20]
 8002ef2:	ea42 0303 	orr.w	r3, r2, r3
 8002ef6:	617b      	str	r3, [r7, #20]
      
    }
    if (gintr_status.b.enumdone)
 8002ef8:	7c7b      	ldrb	r3, [r7, #17]
 8002efa:	f003 0320 	and.w	r3, r3, #32
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d007      	beq.n	8002f14 <USBD_OTG_ISR_Handler+0x134>
    {
      retval |= DCD_HandleEnumDone_ISR(pdev);
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f000 fc93 	bl	8003830 <DCD_HandleEnumDone_ISR>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	697a      	ldr	r2, [r7, #20]
 8002f0e:	ea42 0303 	orr.w	r3, r2, r3
 8002f12:	617b      	str	r3, [r7, #20]
    }
    
    if (gintr_status.b.incomplisoin)
 8002f14:	7cbb      	ldrb	r3, [r7, #18]
 8002f16:	f003 0310 	and.w	r3, r3, #16
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d007      	beq.n	8002f30 <USBD_OTG_ISR_Handler+0x150>
    {
      retval |= DCD_IsoINIncomplete_ISR(pdev);
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f000 fcc9 	bl	80038b8 <DCD_IsoINIncomplete_ISR>
 8002f26:	4603      	mov	r3, r0
 8002f28:	697a      	ldr	r2, [r7, #20]
 8002f2a:	ea42 0303 	orr.w	r3, r2, r3
 8002f2e:	617b      	str	r3, [r7, #20]
    }

    if (gintr_status.b.incomplisoout)
 8002f30:	7cbb      	ldrb	r3, [r7, #18]
 8002f32:	f003 0320 	and.w	r3, r3, #32
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d007      	beq.n	8002f4c <USBD_OTG_ISR_Handler+0x16c>
    {
      retval |= DCD_IsoOUTIncomplete_ISR(pdev);
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f000 fcd9 	bl	80038f4 <DCD_IsoOUTIncomplete_ISR>
 8002f42:	4603      	mov	r3, r0
 8002f44:	697a      	ldr	r2, [r7, #20]
 8002f46:	ea42 0303 	orr.w	r3, r2, r3
 8002f4a:	617b      	str	r3, [r7, #20]
    {
      retval |= DCD_OTG_ISR(pdev);
    }   
#endif    
  }
  return retval;
 8002f4c:	697b      	ldr	r3, [r7, #20]
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f107 0718 	add.w	r7, r7, #24
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <DCD_HandleResume_ISR>:
*                 remote Wake-up sequence
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_HandleResume_ISR(USB_OTG_CORE_HANDLE *pdev)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b086      	sub	sp, #24
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTSTS_TypeDef  gintsts;
  USB_OTG_DCTL_TypeDef     devctl;
  USB_OTG_PCGCCTL_TypeDef  power;
  
  if(pdev->cfg.low_power)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	7a9b      	ldrb	r3, [r3, #10]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d011      	beq.n	8002f8c <DCD_HandleResume_ISR+0x34>
  {
    /* un-gate USB Core clock */
    power.d32 = USB_OTG_READ_REG32(&pdev->regs.PCGCCTL);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	60fb      	str	r3, [r7, #12]
    power.b.gatehclk = 0;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	f36f 0341 	bfc	r3, #1, #1
 8002f78:	60fb      	str	r3, [r7, #12]
    power.b.stoppclk = 0;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	f36f 0300 	bfc	r3, #0, #1
 8002f80:	60fb      	str	r3, [r7, #12]
    USB_OTG_WRITE_REG32(pdev->regs.PCGCCTL, power.d32);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8002f88:	68fa      	ldr	r2, [r7, #12]
 8002f8a:	601a      	str	r2, [r3, #0]
  }
  
  /* Clear the Remote Wake-up Signaling */
  devctl.d32 = 0;
 8002f8c:	f04f 0300 	mov.w	r3, #0
 8002f90:	613b      	str	r3, [r7, #16]
  devctl.b.rmtwkupsig = 1;
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	f043 0301 	orr.w	r3, r3, #1
 8002f98:	613b      	str	r3, [r7, #16]
  USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DCTL, devctl.d32, 0);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	691b      	ldr	r3, [r3, #16]
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	6912      	ldr	r2, [r2, #16]
 8002fa2:	6851      	ldr	r1, [r2, #4]
 8002fa4:	693a      	ldr	r2, [r7, #16]
 8002fa6:	ea6f 0202 	mvn.w	r2, r2
 8002faa:	ea01 0202 	and.w	r2, r1, r2
 8002fae:	605a      	str	r2, [r3, #4]
  
  /* Inform upper layer by the Resume Event */
  USBD_DCD_INT_fops->Resume (pdev);
 8002fb0:	4b0b      	ldr	r3, [pc, #44]	; (8002fe0 <DCD_HandleResume_ISR+0x88>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	699b      	ldr	r3, [r3, #24]
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	4798      	blx	r3
  
  /* Clear interrupt */
  gintsts.d32 = 0;
 8002fba:	f04f 0300 	mov.w	r3, #0
 8002fbe:	617b      	str	r3, [r7, #20]
  gintsts.b.wkupintr = 1;
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002fc6:	617b      	str	r3, [r7, #20]
  USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	697a      	ldr	r2, [r7, #20]
 8002fce:	615a      	str	r2, [r3, #20]
  return 1;
 8002fd0:	f04f 0301 	mov.w	r3, #1
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f107 0718 	add.w	r7, r7, #24
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	20000094 	.word	0x20000094

08002fe4 <DCD_HandleUSBSuspend_ISR>:
*         Indicates that SUSPEND state has been detected on the USB
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_HandleUSBSuspend_ISR(USB_OTG_CORE_HANDLE *pdev)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b086      	sub	sp, #24
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTSTS_TypeDef  gintsts;
  USB_OTG_PCGCCTL_TypeDef  power;
  USB_OTG_DSTS_TypeDef     dsts;
  
  USBD_DCD_INT_fops->Suspend (pdev);      
 8002fec:	4b25      	ldr	r3, [pc, #148]	; (8003084 <DCD_HandleUSBSuspend_ISR+0xa0>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	695b      	ldr	r3, [r3, #20]
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	4798      	blx	r3
  
  dsts.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DSTS);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	691b      	ldr	r3, [r3, #16]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	60fb      	str	r3, [r7, #12]
    
  /* Clear interrupt */
  gintsts.d32 = 0;
 8002ffe:	f04f 0300 	mov.w	r3, #0
 8003002:	617b      	str	r3, [r7, #20]
  gintsts.b.usbsuspend = 1;
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800300a:	617b      	str	r3, [r7, #20]
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	697a      	ldr	r2, [r7, #20]
 8003012:	615a      	str	r2, [r3, #20]
  
  if((pdev->cfg.low_power) && (dsts.b.suspsts == 1))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	7a9b      	ldrb	r3, [r3, #10]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d02c      	beq.n	8003076 <DCD_HandleUSBSuspend_ISR+0x92>
 800301c:	7b3b      	ldrb	r3, [r7, #12]
 800301e:	f003 0301 	and.w	r3, r3, #1
 8003022:	b2db      	uxtb	r3, r3
 8003024:	2b00      	cmp	r3, #0
 8003026:	d026      	beq.n	8003076 <DCD_HandleUSBSuspend_ISR+0x92>
  {
	/*  switch-off the clocks */
    power.d32 = 0;
 8003028:	f04f 0300 	mov.w	r3, #0
 800302c:	613b      	str	r3, [r7, #16]
    power.b.stoppclk = 1;
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	f043 0301 	orr.w	r3, r3, #1
 8003034:	613b      	str	r3, [r7, #16]
    USB_OTG_MODIFY_REG32(pdev->regs.PCGCCTL, 0, power.d32);  
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
 8003042:	6811      	ldr	r1, [r2, #0]
 8003044:	693a      	ldr	r2, [r7, #16]
 8003046:	ea41 0202 	orr.w	r2, r1, r2
 800304a:	601a      	str	r2, [r3, #0]
    
    power.b.gatehclk = 1;
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	f043 0302 	orr.w	r3, r3, #2
 8003052:	613b      	str	r3, [r7, #16]
    USB_OTG_MODIFY_REG32(pdev->regs.PCGCCTL, 0, power.d32);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
 8003060:	6811      	ldr	r1, [r2, #0]
 8003062:	693a      	ldr	r2, [r7, #16]
 8003064:	ea41 0202 	orr.w	r2, r1, r2
 8003068:	601a      	str	r2, [r3, #0]
    
    /* Request to enter Sleep mode after exit from current ISR */
    SCB->SCR |= (SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk);
 800306a:	4b07      	ldr	r3, [pc, #28]	; (8003088 <DCD_HandleUSBSuspend_ISR+0xa4>)
 800306c:	4a06      	ldr	r2, [pc, #24]	; (8003088 <DCD_HandleUSBSuspend_ISR+0xa4>)
 800306e:	6912      	ldr	r2, [r2, #16]
 8003070:	f042 0206 	orr.w	r2, r2, #6
 8003074:	611a      	str	r2, [r3, #16]
  }
  return 1;
 8003076:	f04f 0301 	mov.w	r3, #1
}
 800307a:	4618      	mov	r0, r3
 800307c:	f107 0718 	add.w	r7, r7, #24
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}
 8003084:	20000094 	.word	0x20000094
 8003088:	e000ed00 	.word	0xe000ed00

0800308c <DCD_HandleInEP_ISR>:
*         Indicates that an IN EP has a pending Interrupt
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_HandleInEP_ISR(USB_OTG_CORE_HANDLE *pdev)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b086      	sub	sp, #24
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  USB_OTG_DIEPINTn_TypeDef  diepint;
  
  uint32_t ep_intr;
  uint32_t epnum = 0;
 8003094:	f04f 0300 	mov.w	r3, #0
 8003098:	613b      	str	r3, [r7, #16]
  uint32_t fifoemptymsk;
  diepint.d32 = 0;
 800309a:	f04f 0300 	mov.w	r3, #0
 800309e:	60bb      	str	r3, [r7, #8]
  ep_intr = USB_OTG_ReadDevAllInEPItr(pdev);
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f7ff fbcb 	bl	800283c <USB_OTG_ReadDevAllInEPItr>
 80030a6:	6178      	str	r0, [r7, #20]
  
  while ( ep_intr )
 80030a8:	e0fa      	b.n	80032a0 <DCD_HandleInEP_ISR+0x214>
  {
    if (ep_intr&0x1) /* In ITR */
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	f003 0301 	and.w	r3, r3, #1
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	f000 80ec 	beq.w	8003290 <DCD_HandleInEP_ISR+0x204>
    {
      diepint.d32 = DCD_ReadDevInEP(pdev , epnum); /* Get In ITR status */
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	4619      	mov	r1, r3
 80030c0:	f000 fc36 	bl	8003930 <DCD_ReadDevInEP>
 80030c4:	4603      	mov	r3, r0
 80030c6:	60bb      	str	r3, [r7, #8]
      if ( diepint.b.xfercompl )
 80030c8:	7a3b      	ldrb	r3, [r7, #8]
 80030ca:	f003 0301 	and.w	r3, r3, #1
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d038      	beq.n	8003146 <DCD_HandleInEP_ISR+0xba>
      {
        fifoemptymsk = 0x1 << epnum;
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	f04f 0201 	mov.w	r2, #1
 80030da:	fa02 f303 	lsl.w	r3, r2, r3
 80030de:	60fb      	str	r3, [r7, #12]
        USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, fifoemptymsk, 0);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	691b      	ldr	r3, [r3, #16]
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	6912      	ldr	r2, [r2, #16]
 80030e8:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80030ea:	68fa      	ldr	r2, [r7, #12]
 80030ec:	ea6f 0202 	mvn.w	r2, r2
 80030f0:	ea01 0202 	and.w	r2, r1, r2
 80030f4:	635a      	str	r2, [r3, #52]	; 0x34
        CLEAR_IN_EP_INTR(epnum, xfercompl);
 80030f6:	f04f 0300 	mov.w	r3, #0
 80030fa:	60bb      	str	r3, [r7, #8]
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	f043 0301 	orr.w	r3, r3, #1
 8003102:	60bb      	str	r3, [r7, #8]
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	f103 0304 	add.w	r3, r3, #4
 800310c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003110:	18d3      	adds	r3, r2, r3
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	68ba      	ldr	r2, [r7, #8]
 8003116:	609a      	str	r2, [r3, #8]
        /* TX COMPLETE */
        USBD_DCD_INT_fops->DataInStage(pdev , epnum);
 8003118:	4b67      	ldr	r3, [pc, #412]	; (80032b8 <DCD_HandleInEP_ISR+0x22c>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	693a      	ldr	r2, [r7, #16]
 8003120:	b2d2      	uxtb	r2, r2
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	4611      	mov	r1, r2
 8003126:	4798      	blx	r3
        
        if (pdev->cfg.dma_enable == 1)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	78db      	ldrb	r3, [r3, #3]
 800312c:	2b01      	cmp	r3, #1
 800312e:	d10a      	bne.n	8003146 <DCD_HandleInEP_ISR+0xba>
        {
          if((epnum == 0) && (pdev->dev.device_state == USB_OTG_EP0_STATUS_IN))
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d107      	bne.n	8003146 <DCD_HandleInEP_ISR+0xba>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
 800313c:	2b04      	cmp	r3, #4
 800313e:	d102      	bne.n	8003146 <DCD_HandleInEP_ISR+0xba>
          {
            /* prepare to rx more setup packets */
            USB_OTG_EP0_OutStart(pdev);
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f7ff fb95 	bl	8002870 <USB_OTG_EP0_OutStart>
          }
        }           
      }
      if ( diepint.b.ahberr )
 8003146:	7a3b      	ldrb	r3, [r7, #8]
 8003148:	f003 0304 	and.w	r3, r3, #4
 800314c:	b2db      	uxtb	r3, r3
 800314e:	2b00      	cmp	r3, #0
 8003150:	d010      	beq.n	8003174 <DCD_HandleInEP_ISR+0xe8>
      {
        CLEAR_IN_EP_INTR(epnum, ahberr);
 8003152:	f04f 0300 	mov.w	r3, #0
 8003156:	60bb      	str	r3, [r7, #8]
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	f043 0304 	orr.w	r3, r3, #4
 800315e:	60bb      	str	r3, [r7, #8]
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	f103 0304 	add.w	r3, r3, #4
 8003168:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800316c:	18d3      	adds	r3, r2, r3
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	68ba      	ldr	r2, [r7, #8]
 8003172:	609a      	str	r2, [r3, #8]
      }
      if ( diepint.b.timeout )
 8003174:	7a3b      	ldrb	r3, [r7, #8]
 8003176:	f003 0308 	and.w	r3, r3, #8
 800317a:	b2db      	uxtb	r3, r3
 800317c:	2b00      	cmp	r3, #0
 800317e:	d010      	beq.n	80031a2 <DCD_HandleInEP_ISR+0x116>
      {
        CLEAR_IN_EP_INTR(epnum, timeout);
 8003180:	f04f 0300 	mov.w	r3, #0
 8003184:	60bb      	str	r3, [r7, #8]
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	f043 0308 	orr.w	r3, r3, #8
 800318c:	60bb      	str	r3, [r7, #8]
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	f103 0304 	add.w	r3, r3, #4
 8003196:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800319a:	18d3      	adds	r3, r2, r3
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	68ba      	ldr	r2, [r7, #8]
 80031a0:	609a      	str	r2, [r3, #8]
      }
      if (diepint.b.intktxfemp)
 80031a2:	7a3b      	ldrb	r3, [r7, #8]
 80031a4:	f003 0310 	and.w	r3, r3, #16
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d010      	beq.n	80031d0 <DCD_HandleInEP_ISR+0x144>
      {
        CLEAR_IN_EP_INTR(epnum, intktxfemp);
 80031ae:	f04f 0300 	mov.w	r3, #0
 80031b2:	60bb      	str	r3, [r7, #8]
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	f043 0310 	orr.w	r3, r3, #16
 80031ba:	60bb      	str	r3, [r7, #8]
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	f103 0304 	add.w	r3, r3, #4
 80031c4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80031c8:	18d3      	adds	r3, r2, r3
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	68ba      	ldr	r2, [r7, #8]
 80031ce:	609a      	str	r2, [r3, #8]
      }
      if (diepint.b.intknepmis)
 80031d0:	7a3b      	ldrb	r3, [r7, #8]
 80031d2:	f003 0320 	and.w	r3, r3, #32
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d010      	beq.n	80031fe <DCD_HandleInEP_ISR+0x172>
      {
        CLEAR_IN_EP_INTR(epnum, intknepmis);
 80031dc:	f04f 0300 	mov.w	r3, #0
 80031e0:	60bb      	str	r3, [r7, #8]
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	f043 0320 	orr.w	r3, r3, #32
 80031e8:	60bb      	str	r3, [r7, #8]
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	f103 0304 	add.w	r3, r3, #4
 80031f2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80031f6:	18d3      	adds	r3, r2, r3
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	68ba      	ldr	r2, [r7, #8]
 80031fc:	609a      	str	r2, [r3, #8]
      }
      if (diepint.b.inepnakeff)
 80031fe:	7a3b      	ldrb	r3, [r7, #8]
 8003200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003204:	b2db      	uxtb	r3, r3
 8003206:	2b00      	cmp	r3, #0
 8003208:	d010      	beq.n	800322c <DCD_HandleInEP_ISR+0x1a0>
      {
        CLEAR_IN_EP_INTR(epnum, inepnakeff);
 800320a:	f04f 0300 	mov.w	r3, #0
 800320e:	60bb      	str	r3, [r7, #8]
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003216:	60bb      	str	r3, [r7, #8]
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	f103 0304 	add.w	r3, r3, #4
 8003220:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003224:	18d3      	adds	r3, r2, r3
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	68ba      	ldr	r2, [r7, #8]
 800322a:	609a      	str	r2, [r3, #8]
      }
      if ( diepint.b.epdisabled )
 800322c:	7a3b      	ldrb	r3, [r7, #8]
 800322e:	f003 0302 	and.w	r3, r3, #2
 8003232:	b2db      	uxtb	r3, r3
 8003234:	2b00      	cmp	r3, #0
 8003236:	d010      	beq.n	800325a <DCD_HandleInEP_ISR+0x1ce>
      {
        CLEAR_IN_EP_INTR(epnum, epdisabled);
 8003238:	f04f 0300 	mov.w	r3, #0
 800323c:	60bb      	str	r3, [r7, #8]
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	f043 0302 	orr.w	r3, r3, #2
 8003244:	60bb      	str	r3, [r7, #8]
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	f103 0304 	add.w	r3, r3, #4
 800324e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003252:	18d3      	adds	r3, r2, r3
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	68ba      	ldr	r2, [r7, #8]
 8003258:	609a      	str	r2, [r3, #8]
      }       
      if (diepint.b.emptyintr)
 800325a:	7a3b      	ldrb	r3, [r7, #8]
 800325c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003260:	b2db      	uxtb	r3, r3
 8003262:	2b00      	cmp	r3, #0
 8003264:	d014      	beq.n	8003290 <DCD_HandleInEP_ISR+0x204>
      {
        
        DCD_WriteEmptyTxFifo(pdev , epnum);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	6939      	ldr	r1, [r7, #16]
 800326a:	f000 f9a9 	bl	80035c0 <DCD_WriteEmptyTxFifo>
        
        CLEAR_IN_EP_INTR(epnum, emptyintr);
 800326e:	f04f 0300 	mov.w	r3, #0
 8003272:	60bb      	str	r3, [r7, #8]
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800327a:	60bb      	str	r3, [r7, #8]
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	f103 0304 	add.w	r3, r3, #4
 8003284:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003288:	18d3      	adds	r3, r2, r3
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	68ba      	ldr	r2, [r7, #8]
 800328e:	609a      	str	r2, [r3, #8]
      }
    }
    epnum++;
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	f103 0301 	add.w	r3, r3, #1
 8003296:	613b      	str	r3, [r7, #16]
    ep_intr >>= 1;
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	ea4f 0353 	mov.w	r3, r3, lsr #1
 800329e:	617b      	str	r3, [r7, #20]
  uint32_t epnum = 0;
  uint32_t fifoemptymsk;
  diepint.d32 = 0;
  ep_intr = USB_OTG_ReadDevAllInEPItr(pdev);
  
  while ( ep_intr )
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	f47f af01 	bne.w	80030aa <DCD_HandleInEP_ISR+0x1e>
    }
    epnum++;
    ep_intr >>= 1;
  }
  
  return 1;
 80032a8:	f04f 0301 	mov.w	r3, #1
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	f107 0718 	add.w	r7, r7, #24
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	20000094 	.word	0x20000094

080032bc <DCD_HandleOutEP_ISR>:
*         Indicates that an OUT EP has a pending Interrupt
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_HandleOutEP_ISR(USB_OTG_CORE_HANDLE *pdev)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b086      	sub	sp, #24
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  uint32_t ep_intr;
  USB_OTG_DOEPINTn_TypeDef  doepint;
  USB_OTG_DEPXFRSIZ_TypeDef  deptsiz;
  uint32_t epnum = 0;
 80032c4:	f04f 0300 	mov.w	r3, #0
 80032c8:	613b      	str	r3, [r7, #16]
  
  doepint.d32 = 0;
 80032ca:	f04f 0300 	mov.w	r3, #0
 80032ce:	60fb      	str	r3, [r7, #12]
  
  /* Read in the device interrupt bits */
  ep_intr = USB_OTG_ReadDevAllOutEp_itr(pdev);
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f7ff fa7d 	bl	80027d0 <USB_OTG_ReadDevAllOutEp_itr>
 80032d6:	6178      	str	r0, [r7, #20]
  
  while ( ep_intr )
 80032d8:	e0b8      	b.n	800344c <DCD_HandleOutEP_ISR+0x190>
  {
    if (ep_intr&0x1)
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	f003 0301 	and.w	r3, r3, #1
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	f000 80aa 	beq.w	800343c <DCD_HandleOutEP_ISR+0x180>
    {
      
      doepint.d32 = USB_OTG_ReadDevOutEP_itr(pdev, epnum);
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	4619      	mov	r1, r3
 80032f0:	f7ff fa86 	bl	8002800 <USB_OTG_ReadDevOutEP_itr>
 80032f4:	4603      	mov	r3, r0
 80032f6:	60fb      	str	r3, [r7, #12]
      
      /* Transfer complete */
      if ( doepint.b.xfercompl )
 80032f8:	7b3b      	ldrb	r3, [r7, #12]
 80032fa:	f003 0301 	and.w	r3, r3, #1
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	2b00      	cmp	r3, #0
 8003302:	d051      	beq.n	80033a8 <DCD_HandleOutEP_ISR+0xec>
      {
        /* Clear the bit in DOEPINTn for this interrupt */
        CLEAR_OUT_EP_INTR(epnum, xfercompl);
 8003304:	f04f 0300 	mov.w	r3, #0
 8003308:	60fb      	str	r3, [r7, #12]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	f043 0301 	orr.w	r3, r3, #1
 8003310:	60fb      	str	r3, [r7, #12]
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	f103 0314 	add.w	r3, r3, #20
 800331a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800331e:	18d3      	adds	r3, r2, r3
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	68fa      	ldr	r2, [r7, #12]
 8003324:	609a      	str	r2, [r3, #8]
        if (pdev->cfg.dma_enable == 1)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	78db      	ldrb	r3, [r3, #3]
 800332a:	2b01      	cmp	r3, #1
 800332c:	d125      	bne.n	800337a <DCD_HandleOutEP_ISR+0xbe>
        {
          deptsiz.d32 = USB_OTG_READ_REG32(&(pdev->regs.OUTEP_REGS[epnum]->DOEPTSIZ));
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	f103 0314 	add.w	r3, r3, #20
 8003336:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800333a:	18d3      	adds	r3, r2, r3
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	691b      	ldr	r3, [r3, #16]
 8003340:	60bb      	str	r3, [r7, #8]
          /*ToDo : handle more than one single MPS size packet */
          pdev->dev.out_ep[epnum].xfer_count = pdev->dev.out_ep[epnum].maxpacket - \
 8003342:	6879      	ldr	r1, [r7, #4]
 8003344:	693a      	ldr	r2, [r7, #16]
 8003346:	4613      	mov	r3, r2
 8003348:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800334c:	189b      	adds	r3, r3, r2
 800334e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8003352:	18cb      	adds	r3, r1, r3
 8003354:	f503 735e 	add.w	r3, r3, #888	; 0x378
 8003358:	681a      	ldr	r2, [r3, #0]
            deptsiz.b.xfersize;
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	f3c3 0312 	ubfx	r3, r3, #0, #19
        CLEAR_OUT_EP_INTR(epnum, xfercompl);
        if (pdev->cfg.dma_enable == 1)
        {
          deptsiz.d32 = USB_OTG_READ_REG32(&(pdev->regs.OUTEP_REGS[epnum]->DOEPTSIZ));
          /*ToDo : handle more than one single MPS size packet */
          pdev->dev.out_ep[epnum].xfer_count = pdev->dev.out_ep[epnum].maxpacket - \
 8003360:	1ad1      	subs	r1, r2, r3
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	693a      	ldr	r2, [r7, #16]
 8003366:	4613      	mov	r3, r2
 8003368:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800336c:	189b      	adds	r3, r3, r2
 800336e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8003372:	18c3      	adds	r3, r0, r3
 8003374:	f503 7362 	add.w	r3, r3, #904	; 0x388
 8003378:	6019      	str	r1, [r3, #0]
            deptsiz.b.xfersize;
        }
        /* Inform upper layer: data ready */
        /* RX COMPLETE */
        USBD_DCD_INT_fops->DataOutStage(pdev , epnum);
 800337a:	4b3a      	ldr	r3, [pc, #232]	; (8003464 <DCD_HandleOutEP_ISR+0x1a8>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	693a      	ldr	r2, [r7, #16]
 8003382:	b2d2      	uxtb	r2, r2
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	4611      	mov	r1, r2
 8003388:	4798      	blx	r3
        
        if (pdev->cfg.dma_enable == 1)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	78db      	ldrb	r3, [r3, #3]
 800338e:	2b01      	cmp	r3, #1
 8003390:	d10a      	bne.n	80033a8 <DCD_HandleOutEP_ISR+0xec>
        {
          if((epnum == 0) && (pdev->dev.device_state == USB_OTG_EP0_STATUS_OUT))
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d107      	bne.n	80033a8 <DCD_HandleOutEP_ISR+0xec>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
 800339e:	2b05      	cmp	r3, #5
 80033a0:	d102      	bne.n	80033a8 <DCD_HandleOutEP_ISR+0xec>
          {
            /* prepare to rx more setup packets */
            USB_OTG_EP0_OutStart(pdev);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f7ff fa64 	bl	8002870 <USB_OTG_EP0_OutStart>
          }
        }        
      }
      /* Endpoint disable  */
      if ( doepint.b.epdisabled )
 80033a8:	7b3b      	ldrb	r3, [r7, #12]
 80033aa:	f003 0302 	and.w	r3, r3, #2
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d010      	beq.n	80033d6 <DCD_HandleOutEP_ISR+0x11a>
      {
        /* Clear the bit in DOEPINTn for this interrupt */
        CLEAR_OUT_EP_INTR(epnum, epdisabled);
 80033b4:	f04f 0300 	mov.w	r3, #0
 80033b8:	60fb      	str	r3, [r7, #12]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	f043 0302 	orr.w	r3, r3, #2
 80033c0:	60fb      	str	r3, [r7, #12]
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	f103 0314 	add.w	r3, r3, #20
 80033ca:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80033ce:	18d3      	adds	r3, r2, r3
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	68fa      	ldr	r2, [r7, #12]
 80033d4:	609a      	str	r2, [r3, #8]
      }
      /* AHB Error */
      if ( doepint.b.ahberr )
 80033d6:	7b3b      	ldrb	r3, [r7, #12]
 80033d8:	f003 0304 	and.w	r3, r3, #4
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d010      	beq.n	8003404 <DCD_HandleOutEP_ISR+0x148>
      {
        CLEAR_OUT_EP_INTR(epnum, ahberr);
 80033e2:	f04f 0300 	mov.w	r3, #0
 80033e6:	60fb      	str	r3, [r7, #12]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f043 0304 	orr.w	r3, r3, #4
 80033ee:	60fb      	str	r3, [r7, #12]
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	f103 0314 	add.w	r3, r3, #20
 80033f8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80033fc:	18d3      	adds	r3, r2, r3
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	68fa      	ldr	r2, [r7, #12]
 8003402:	609a      	str	r2, [r3, #8]
      }
      /* Setup Phase Done (control EPs) */
      if ( doepint.b.setup )
 8003404:	7b3b      	ldrb	r3, [r7, #12]
 8003406:	f003 0308 	and.w	r3, r3, #8
 800340a:	b2db      	uxtb	r3, r3
 800340c:	2b00      	cmp	r3, #0
 800340e:	d015      	beq.n	800343c <DCD_HandleOutEP_ISR+0x180>
      {
        
        /* inform the upper layer that a setup packet is available */
        /* SETUP COMPLETE */
        USBD_DCD_INT_fops->SetupStage(pdev);
 8003410:	4b14      	ldr	r3, [pc, #80]	; (8003464 <DCD_HandleOutEP_ISR+0x1a8>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	4798      	blx	r3
        CLEAR_OUT_EP_INTR(epnum, setup);
 800341a:	f04f 0300 	mov.w	r3, #0
 800341e:	60fb      	str	r3, [r7, #12]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f043 0308 	orr.w	r3, r3, #8
 8003426:	60fb      	str	r3, [r7, #12]
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	f103 0314 	add.w	r3, r3, #20
 8003430:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003434:	18d3      	adds	r3, r2, r3
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	68fa      	ldr	r2, [r7, #12]
 800343a:	609a      	str	r2, [r3, #8]
      }
    }
    epnum++;
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	f103 0301 	add.w	r3, r3, #1
 8003442:	613b      	str	r3, [r7, #16]
    ep_intr >>= 1;
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	ea4f 0353 	mov.w	r3, r3, lsr #1
 800344a:	617b      	str	r3, [r7, #20]
  doepint.d32 = 0;
  
  /* Read in the device interrupt bits */
  ep_intr = USB_OTG_ReadDevAllOutEp_itr(pdev);
  
  while ( ep_intr )
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	2b00      	cmp	r3, #0
 8003450:	f47f af43 	bne.w	80032da <DCD_HandleOutEP_ISR+0x1e>
      }
    }
    epnum++;
    ep_intr >>= 1;
  }
  return 1;
 8003454:	f04f 0301 	mov.w	r3, #1
}
 8003458:	4618      	mov	r0, r3
 800345a:	f107 0718 	add.w	r7, r7, #24
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	20000094 	.word	0x20000094

08003468 <DCD_HandleSof_ISR>:
*         Handles the SOF Interrupts
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_HandleSof_ISR(USB_OTG_CORE_HANDLE *pdev)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTSTS_TypeDef  GINTSTS;
  
  
  USBD_DCD_INT_fops->SOF(pdev);
 8003470:	4b0b      	ldr	r3, [pc, #44]	; (80034a0 <DCD_HandleSof_ISR+0x38>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	4798      	blx	r3
  
  /* Clear interrupt */
  GINTSTS.d32 = 0;
 800347a:	f04f 0300 	mov.w	r3, #0
 800347e:	60fb      	str	r3, [r7, #12]
  GINTSTS.b.sofintr = 1;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f043 0308 	orr.w	r3, r3, #8
 8003486:	60fb      	str	r3, [r7, #12]
  USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GINTSTS, GINTSTS.d32);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	68fa      	ldr	r2, [r7, #12]
 800348e:	615a      	str	r2, [r3, #20]
  
  return 1;
 8003490:	f04f 0301 	mov.w	r3, #1
}
 8003494:	4618      	mov	r0, r3
 8003496:	f107 0710 	add.w	r7, r7, #16
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	20000094 	.word	0x20000094

080034a4 <DCD_HandleRxStatusQueueLevel_ISR>:
*         Handles the Rx Status Queue Level Interrupt
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_HandleRxStatusQueueLevel_ISR(USB_OTG_CORE_HANDLE *pdev)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b086      	sub	sp, #24
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTMSK_TypeDef  int_mask;
  USB_OTG_DRXSTS_TypeDef   status;
  USB_OTG_EP *ep;
  
  /* Disable the Rx Status Queue Level interrupt */
  int_mask.d32 = 0;
 80034ac:	f04f 0300 	mov.w	r3, #0
 80034b0:	613b      	str	r3, [r7, #16]
  int_mask.b.rxstsqlvl = 1;
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	f043 0310 	orr.w	r3, r3, #16
 80034b8:	613b      	str	r3, [r7, #16]
  USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, int_mask.d32, 0);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	68d2      	ldr	r2, [r2, #12]
 80034c2:	6991      	ldr	r1, [r2, #24]
 80034c4:	693a      	ldr	r2, [r7, #16]
 80034c6:	ea6f 0202 	mvn.w	r2, r2
 80034ca:	ea01 0202 	and.w	r2, r1, r2
 80034ce:	619a      	str	r2, [r3, #24]
  
  /* Get the Status from the top of the FIFO */
  status.d32 = USB_OTG_READ_REG32( &pdev->regs.GREGS->GRXSTSP );
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	6a1b      	ldr	r3, [r3, #32]
 80034d6:	60fb      	str	r3, [r7, #12]
  
  ep = &pdev->dev.out_ep[status.b.epnum];
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f503 715c 	add.w	r1, r3, #880	; 0x370
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	461a      	mov	r2, r3
 80034e8:	4613      	mov	r3, r2
 80034ea:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80034ee:	189b      	adds	r3, r3, r2
 80034f0:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80034f4:	18cb      	adds	r3, r1, r3
 80034f6:	617b      	str	r3, [r7, #20]
  
  switch (status.b.pktsts)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f3c3 4343 	ubfx	r3, r3, #17, #4
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	f103 33ff 	add.w	r3, r3, #4294967295
 8003504:	2b05      	cmp	r3, #5
 8003506:	d848      	bhi.n	800359a <DCD_HandleRxStatusQueueLevel_ISR+0xf6>
 8003508:	a201      	add	r2, pc, #4	; (adr r2, 8003510 <DCD_HandleRxStatusQueueLevel_ISR+0x6c>)
 800350a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800350e:	bf00      	nop
 8003510:	0800359b 	.word	0x0800359b
 8003514:	08003529 	.word	0x08003529
 8003518:	0800359b 	.word	0x0800359b
 800351c:	0800359b 	.word	0x0800359b
 8003520:	0800359b 	.word	0x0800359b
 8003524:	08003575 	.word	0x08003575
  {
  case STS_GOUT_NAK:
    break;
  case STS_DATA_UPDT:
    if (status.b.bcnt)
 8003528:	89ba      	ldrh	r2, [r7, #12]
 800352a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800352e:	ea02 0303 	and.w	r3, r2, r3
 8003532:	b29b      	uxth	r3, r3
 8003534:	2b00      	cmp	r3, #0
 8003536:	d032      	beq.n	800359e <DCD_HandleRxStatusQueueLevel_ISR+0xfa>
    {
      USB_OTG_ReadPacket(pdev,ep->xfer_buff, status.b.bcnt);
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	68da      	ldr	r2, [r3, #12]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f3c3 130a 	ubfx	r3, r3, #4, #11
 8003542:	b29b      	uxth	r3, r3
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	4611      	mov	r1, r2
 8003548:	461a      	mov	r2, r3
 800354a:	f7fe f80f 	bl	800156c <USB_OTG_ReadPacket>
      ep->xfer_buff += status.b.bcnt;
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	68da      	ldr	r2, [r3, #12]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	f3c3 130a 	ubfx	r3, r3, #4, #11
 8003558:	b29b      	uxth	r3, r3
 800355a:	18d2      	adds	r2, r2, r3
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	60da      	str	r2, [r3, #12]
      ep->xfer_count += status.b.bcnt;
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	699a      	ldr	r2, [r3, #24]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f3c3 130a 	ubfx	r3, r3, #4, #11
 800356a:	b29b      	uxth	r3, r3
 800356c:	18d2      	adds	r2, r2, r3
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	619a      	str	r2, [r3, #24]
    }
    break;
 8003572:	e015      	b.n	80035a0 <DCD_HandleRxStatusQueueLevel_ISR+0xfc>
    break;
  case STS_SETUP_COMP:
    break;
  case STS_SETUP_UPDT:
    /* Copy the setup packet received in FIFO into the setup buffer in RAM */
    USB_OTG_ReadPacket(pdev , pdev->dev.setup_packet, 8);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f503 63b9 	add.w	r3, r3, #1480	; 0x5c8
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	4619      	mov	r1, r3
 800357e:	f04f 0208 	mov.w	r2, #8
 8003582:	f7fd fff3 	bl	800156c <USB_OTG_ReadPacket>
    ep->xfer_count += status.b.bcnt;
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	699a      	ldr	r2, [r3, #24]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f3c3 130a 	ubfx	r3, r3, #4, #11
 8003590:	b29b      	uxth	r3, r3
 8003592:	18d2      	adds	r2, r2, r3
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	619a      	str	r2, [r3, #24]
    break;
 8003598:	e002      	b.n	80035a0 <DCD_HandleRxStatusQueueLevel_ISR+0xfc>
  default:
    break;
 800359a:	bf00      	nop
 800359c:	e000      	b.n	80035a0 <DCD_HandleRxStatusQueueLevel_ISR+0xfc>
    {
      USB_OTG_ReadPacket(pdev,ep->xfer_buff, status.b.bcnt);
      ep->xfer_buff += status.b.bcnt;
      ep->xfer_count += status.b.bcnt;
    }
    break;
 800359e:	bf00      	nop
  default:
    break;
  }
  
  /* Enable the Rx Status Queue Level interrupt */
  USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, 0, int_mask.d32);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	68d2      	ldr	r2, [r2, #12]
 80035a8:	6991      	ldr	r1, [r2, #24]
 80035aa:	693a      	ldr	r2, [r7, #16]
 80035ac:	ea41 0202 	orr.w	r2, r1, r2
 80035b0:	619a      	str	r2, [r3, #24]
  
  return 1;
 80035b2:	f04f 0301 	mov.w	r3, #1
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	f107 0718 	add.w	r7, r7, #24
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}

080035c0 <DCD_WriteEmptyTxFifo>:
*         check FIFO for the next packet to be loaded
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_WriteEmptyTxFifo(USB_OTG_CORE_HANDLE *pdev, uint32_t epnum)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b086      	sub	sp, #24
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	6039      	str	r1, [r7, #0]
  USB_OTG_DTXFSTSn_TypeDef  txstatus;
  USB_OTG_EP *ep;
  uint32_t len = 0;
 80035ca:	f04f 0300 	mov.w	r3, #0
 80035ce:	617b      	str	r3, [r7, #20]
  uint32_t len32b;
  txstatus.d32 = 0;
 80035d0:	f04f 0300 	mov.w	r3, #0
 80035d4:	60bb      	str	r3, [r7, #8]
  
  ep = &pdev->dev.in_ep[epnum];    
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f503 718c 	add.w	r1, r3, #280	; 0x118
 80035dc:	683a      	ldr	r2, [r7, #0]
 80035de:	4613      	mov	r3, r2
 80035e0:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80035e4:	189b      	adds	r3, r3, r2
 80035e6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80035ea:	18cb      	adds	r3, r1, r3
 80035ec:	60fb      	str	r3, [r7, #12]
  
  len = ep->xfer_len - ep->xfer_count;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	695a      	ldr	r2, [r3, #20]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	699b      	ldr	r3, [r3, #24]
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	617b      	str	r3, [r7, #20]
  
  if (len > ep->maxpacket)
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	689a      	ldr	r2, [r3, #8]
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	429a      	cmp	r2, r3
 8003602:	d202      	bcs.n	800360a <DCD_WriteEmptyTxFifo+0x4a>
  {
    len = ep->maxpacket;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	617b      	str	r3, [r7, #20]
  }
  
  len32b = (len + 3) / 4;
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	f103 0303 	add.w	r3, r3, #3
 8003610:	ea4f 0393 	mov.w	r3, r3, lsr #2
 8003614:	613b      	str	r3, [r7, #16]
  txstatus.d32 = USB_OTG_READ_REG32( &pdev->regs.INEP_REGS[epnum]->DTXFSTS);
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	f103 0304 	add.w	r3, r3, #4
 800361e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003622:	18d3      	adds	r3, r2, r3
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	699b      	ldr	r3, [r3, #24]
 8003628:	60bb      	str	r3, [r7, #8]
  
  
  
  while  (txstatus.b.txfspcavail > len32b &&
 800362a:	e032      	b.n	8003692 <DCD_WriteEmptyTxFifo+0xd2>
          ep->xfer_count < ep->xfer_len &&
            ep->xfer_len != 0)
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	695a      	ldr	r2, [r3, #20]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	699b      	ldr	r3, [r3, #24]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	617b      	str	r3, [r7, #20]
    
    if (len > ep->maxpacket)
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	689a      	ldr	r2, [r3, #8]
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	429a      	cmp	r2, r3
 8003640:	d202      	bcs.n	8003648 <DCD_WriteEmptyTxFifo+0x88>
    {
      len = ep->maxpacket;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	617b      	str	r3, [r7, #20]
    }
    len32b = (len + 3) / 4;
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	f103 0303 	add.w	r3, r3, #3
 800364e:	ea4f 0393 	mov.w	r3, r3, lsr #2
 8003652:	613b      	str	r3, [r7, #16]
    
    USB_OTG_WritePacket (pdev , ep->xfer_buff, epnum, len);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	68d9      	ldr	r1, [r3, #12]
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	b2da      	uxtb	r2, r3
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	b29b      	uxth	r3, r3
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f7fd ff41 	bl	80014e8 <USB_OTG_WritePacket>
    
    ep->xfer_buff  += len;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	68da      	ldr	r2, [r3, #12]
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	18d2      	adds	r2, r2, r3
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	699a      	ldr	r2, [r3, #24]
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	18d2      	adds	r2, r2, r3
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	619a      	str	r2, [r3, #24]
    
    txstatus.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[epnum]->DTXFSTS);
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	f103 0304 	add.w	r3, r3, #4
 8003686:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800368a:	18d3      	adds	r3, r2, r3
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	699b      	ldr	r3, [r3, #24]
 8003690:	60bb      	str	r3, [r7, #8]
  len32b = (len + 3) / 4;
  txstatus.d32 = USB_OTG_READ_REG32( &pdev->regs.INEP_REGS[epnum]->DTXFSTS);
  
  
  
  while  (txstatus.b.txfspcavail > len32b &&
 8003692:	893b      	ldrh	r3, [r7, #8]
 8003694:	461a      	mov	r2, r3
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	429a      	cmp	r2, r3
 800369a:	d909      	bls.n	80036b0 <DCD_WriteEmptyTxFifo+0xf0>
          ep->xfer_count < ep->xfer_len &&
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	699a      	ldr	r2, [r3, #24]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	695b      	ldr	r3, [r3, #20]
  len32b = (len + 3) / 4;
  txstatus.d32 = USB_OTG_READ_REG32( &pdev->regs.INEP_REGS[epnum]->DTXFSTS);
  
  
  
  while  (txstatus.b.txfspcavail > len32b &&
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d203      	bcs.n	80036b0 <DCD_WriteEmptyTxFifo+0xf0>
          ep->xfer_count < ep->xfer_len &&
            ep->xfer_len != 0)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	695b      	ldr	r3, [r3, #20]
  txstatus.d32 = USB_OTG_READ_REG32( &pdev->regs.INEP_REGS[epnum]->DTXFSTS);
  
  
  
  while  (txstatus.b.txfspcavail > len32b &&
          ep->xfer_count < ep->xfer_len &&
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d1bd      	bne.n	800362c <DCD_WriteEmptyTxFifo+0x6c>
    ep->xfer_count += len;
    
    txstatus.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[epnum]->DTXFSTS);
  }
  
  return 1;
 80036b0:	f04f 0301 	mov.w	r3, #1
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	f107 0718 	add.w	r7, r7, #24
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop

080036c0 <DCD_HandleUsbReset_ISR>:
*         This interrupt occurs when a USB Reset is detected
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_HandleUsbReset_ISR(USB_OTG_CORE_HANDLE *pdev)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b08a      	sub	sp, #40	; 0x28
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  USB_OTG_DCFG_TypeDef     dcfg;
  USB_OTG_DCTL_TypeDef     dctl;
  USB_OTG_GINTSTS_TypeDef  gintsts;
  uint32_t i;
  
  dctl.d32 = 0;
 80036c8:	f04f 0300 	mov.w	r3, #0
 80036cc:	613b      	str	r3, [r7, #16]
  daintmsk.d32 = 0;
 80036ce:	f04f 0300 	mov.w	r3, #0
 80036d2:	623b      	str	r3, [r7, #32]
  doepmsk.d32 = 0;
 80036d4:	f04f 0300 	mov.w	r3, #0
 80036d8:	61fb      	str	r3, [r7, #28]
  diepmsk.d32 = 0;
 80036da:	f04f 0300 	mov.w	r3, #0
 80036de:	61bb      	str	r3, [r7, #24]
  dcfg.d32 = 0;
 80036e0:	f04f 0300 	mov.w	r3, #0
 80036e4:	617b      	str	r3, [r7, #20]
  gintsts.d32 = 0;
 80036e6:	f04f 0300 	mov.w	r3, #0
 80036ea:	60fb      	str	r3, [r7, #12]
  
  /* Clear the Remote Wake-up Signaling */
  dctl.b.rmtwkupsig = 1;
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	f043 0301 	orr.w	r3, r3, #1
 80036f2:	613b      	str	r3, [r7, #16]
  USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DCTL, dctl.d32, 0 );
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	691b      	ldr	r3, [r3, #16]
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	6912      	ldr	r2, [r2, #16]
 80036fc:	6851      	ldr	r1, [r2, #4]
 80036fe:	693a      	ldr	r2, [r7, #16]
 8003700:	ea6f 0202 	mvn.w	r2, r2
 8003704:	ea01 0202 	and.w	r2, r1, r2
 8003708:	605a      	str	r2, [r3, #4]
  
  /* Flush the Tx FIFO */
  USB_OTG_FlushTxFifo(pdev ,  0 );
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f04f 0100 	mov.w	r1, #0
 8003710:	f7fe f972 	bl	80019f8 <USB_OTG_FlushTxFifo>
  
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8003714:	f04f 0300 	mov.w	r3, #0
 8003718:	627b      	str	r3, [r7, #36]	; 0x24
 800371a:	e019      	b.n	8003750 <DCD_HandleUsbReset_ISR+0x90>
  {
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003720:	f103 0304 	add.w	r3, r3, #4
 8003724:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003728:	18d3      	adds	r3, r2, r3
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	f04f 02ff 	mov.w	r2, #255	; 0xff
 8003730:	609a      	str	r2, [r3, #8]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003736:	f103 0314 	add.w	r3, r3, #20
 800373a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800373e:	18d3      	adds	r3, r2, r3
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f04f 02ff 	mov.w	r2, #255	; 0xff
 8003746:	609a      	str	r2, [r3, #8]
  USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DCTL, dctl.d32, 0 );
  
  /* Flush the Tx FIFO */
  USB_OTG_FlushTxFifo(pdev ,  0 );
  
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8003748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374a:	f103 0301 	add.w	r3, r3, #1
 800374e:	627b      	str	r3, [r7, #36]	; 0x24
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	785b      	ldrb	r3, [r3, #1]
 8003754:	461a      	mov	r2, r3
 8003756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003758:	429a      	cmp	r2, r3
 800375a:	d8df      	bhi.n	800371c <DCD_HandleUsbReset_ISR+0x5c>
  {
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
  }
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINT, 0xFFFFFFFF );
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	691b      	ldr	r3, [r3, #16]
 8003760:	f04f 32ff 	mov.w	r2, #4294967295
 8003764:	619a      	str	r2, [r3, #24]
  
  daintmsk.ep.in = 1;
 8003766:	6a3b      	ldr	r3, [r7, #32]
 8003768:	f04f 0201 	mov.w	r2, #1
 800376c:	f362 030f 	bfi	r3, r2, #0, #16
 8003770:	623b      	str	r3, [r7, #32]
  daintmsk.ep.out = 1;
 8003772:	6a3b      	ldr	r3, [r7, #32]
 8003774:	f04f 0201 	mov.w	r2, #1
 8003778:	f362 431f 	bfi	r3, r2, #16, #16
 800377c:	623b      	str	r3, [r7, #32]
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINTMSK, daintmsk.d32 );
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	691b      	ldr	r3, [r3, #16]
 8003782:	6a3a      	ldr	r2, [r7, #32]
 8003784:	61da      	str	r2, [r3, #28]
  
  doepmsk.b.setup = 1;
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	f043 0308 	orr.w	r3, r3, #8
 800378c:	61fb      	str	r3, [r7, #28]
  doepmsk.b.xfercompl = 1;
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	f043 0301 	orr.w	r3, r3, #1
 8003794:	61fb      	str	r3, [r7, #28]
  doepmsk.b.ahberr = 1;
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	f043 0304 	orr.w	r3, r3, #4
 800379c:	61fb      	str	r3, [r7, #28]
  doepmsk.b.epdisabled = 1;
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	f043 0302 	orr.w	r3, r3, #2
 80037a4:	61fb      	str	r3, [r7, #28]
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DOEPMSK, doepmsk.d32 );
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	691b      	ldr	r3, [r3, #16]
 80037aa:	69fa      	ldr	r2, [r7, #28]
 80037ac:	615a      	str	r2, [r3, #20]
#ifdef USB_OTG_HS_DEDICATED_EP1_ENABLED   
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DOUTEP1MSK, doepmsk.d32 );
#endif
  diepmsk.b.xfercompl = 1;
 80037ae:	69bb      	ldr	r3, [r7, #24]
 80037b0:	f043 0301 	orr.w	r3, r3, #1
 80037b4:	61bb      	str	r3, [r7, #24]
  diepmsk.b.timeout = 1;
 80037b6:	69bb      	ldr	r3, [r7, #24]
 80037b8:	f043 0308 	orr.w	r3, r3, #8
 80037bc:	61bb      	str	r3, [r7, #24]
  diepmsk.b.epdisabled = 1;
 80037be:	69bb      	ldr	r3, [r7, #24]
 80037c0:	f043 0302 	orr.w	r3, r3, #2
 80037c4:	61bb      	str	r3, [r7, #24]
  diepmsk.b.ahberr = 1;
 80037c6:	69bb      	ldr	r3, [r7, #24]
 80037c8:	f043 0304 	orr.w	r3, r3, #4
 80037cc:	61bb      	str	r3, [r7, #24]
  diepmsk.b.intknepmis = 1;
 80037ce:	69bb      	ldr	r3, [r7, #24]
 80037d0:	f043 0320 	orr.w	r3, r3, #32
 80037d4:	61bb      	str	r3, [r7, #24]
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DIEPMSK, diepmsk.d32 );
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	69ba      	ldr	r2, [r7, #24]
 80037dc:	611a      	str	r2, [r3, #16]
#ifdef USB_OTG_HS_DEDICATED_EP1_ENABLED  
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DINEP1MSK, diepmsk.d32 );
#endif
  /* Reset Device Address */
  dcfg.d32 = USB_OTG_READ_REG32( &pdev->regs.DREGS->DCFG);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	691b      	ldr	r3, [r3, #16]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	617b      	str	r3, [r7, #20]
  dcfg.b.devaddr = 0;
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	f36f 130a 	bfc	r3, #4, #7
 80037ec:	617b      	str	r3, [r7, #20]
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DCFG, dcfg.d32);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	691b      	ldr	r3, [r3, #16]
 80037f2:	697a      	ldr	r2, [r7, #20]
 80037f4:	601a      	str	r2, [r3, #0]
  
  
  /* setup EP0 to receive SETUP packets */
  USB_OTG_EP0_OutStart(pdev);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f7ff f83a 	bl	8002870 <USB_OTG_EP0_OutStart>
  
  /* Clear interrupt */
  gintsts.d32 = 0;
 80037fc:	f04f 0300 	mov.w	r3, #0
 8003800:	60fb      	str	r3, [r7, #12]
  gintsts.b.usbreset = 1;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003808:	60fb      	str	r3, [r7, #12]
  USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	68fa      	ldr	r2, [r7, #12]
 8003810:	615a      	str	r2, [r3, #20]
  
  /*Reset internal state machine */
  USBD_DCD_INT_fops->Reset(pdev);
 8003812:	4b06      	ldr	r3, [pc, #24]	; (800382c <DCD_HandleUsbReset_ISR+0x16c>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	691b      	ldr	r3, [r3, #16]
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	4798      	blx	r3
  return 1;
 800381c:	f04f 0301 	mov.w	r3, #1
}
 8003820:	4618      	mov	r0, r3
 8003822:	f107 0728 	add.w	r7, r7, #40	; 0x28
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	20000094 	.word	0x20000094

08003830 <DCD_HandleEnumDone_ISR>:
*         Read the device status register and set the device speed
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_HandleEnumDone_ISR(USB_OTG_CORE_HANDLE *pdev)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTSTS_TypeDef  gintsts;
  USB_OTG_GUSBCFG_TypeDef  gusbcfg;
  
  USB_OTG_EP0Activate(pdev);
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f7fe fbc7 	bl	8001fcc <USB_OTG_EP0Activate>
  
  /* Set USB turn-around time based on device speed and PHY interface. */
  gusbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	60bb      	str	r3, [r7, #8]
  
  /* Full or High speed */
  if ( USB_OTG_GetDeviceSpeed(pdev) == USB_SPEED_HIGH)
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f7fe fb98 	bl	8001f7c <USB_OTG_GetDeviceSpeed>
 800384c:	4603      	mov	r3, r0
 800384e:	2b03      	cmp	r3, #3
 8003850:	d10e      	bne.n	8003870 <DCD_HandleEnumDone_ISR+0x40>
  {
    pdev->cfg.speed            = USB_OTG_SPEED_HIGH;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f04f 0200 	mov.w	r2, #0
 8003858:	709a      	strb	r2, [r3, #2]
    pdev->cfg.mps              = USB_OTG_HS_MAX_PACKET_SIZE ;    
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003860:	809a      	strh	r2, [r3, #4]
    gusbcfg.b.usbtrdtim = 9;
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	f04f 0209 	mov.w	r2, #9
 8003868:	f362 238d 	bfi	r3, r2, #10, #4
 800386c:	60bb      	str	r3, [r7, #8]
 800386e:	e00d      	b.n	800388c <DCD_HandleEnumDone_ISR+0x5c>
  }
  else
  {
    pdev->cfg.speed            = USB_OTG_SPEED_FULL;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f04f 0201 	mov.w	r2, #1
 8003876:	709a      	strb	r2, [r3, #2]
    pdev->cfg.mps              = USB_OTG_FS_MAX_PACKET_SIZE ;  
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f04f 0240 	mov.w	r2, #64	; 0x40
 800387e:	809a      	strh	r2, [r3, #4]
    gusbcfg.b.usbtrdtim = 5;
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	f04f 0205 	mov.w	r2, #5
 8003886:	f362 238d 	bfi	r3, r2, #10, #4
 800388a:	60bb      	str	r3, [r7, #8]
  }
  
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GUSBCFG, gusbcfg.d32);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	68ba      	ldr	r2, [r7, #8]
 8003892:	60da      	str	r2, [r3, #12]
  
  /* Clear interrupt */
  gintsts.d32 = 0;
 8003894:	f04f 0300 	mov.w	r3, #0
 8003898:	60fb      	str	r3, [r7, #12]
  gintsts.b.enumdone = 1;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80038a0:	60fb      	str	r3, [r7, #12]
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTSTS, gintsts.d32 );
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	68db      	ldr	r3, [r3, #12]
 80038a6:	68fa      	ldr	r2, [r7, #12]
 80038a8:	615a      	str	r2, [r3, #20]
  return 1;
 80038aa:	f04f 0301 	mov.w	r3, #1
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	f107 0710 	add.w	r7, r7, #16
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}

080038b8 <DCD_IsoINIncomplete_ISR>:
*         handle the ISO IN incomplete interrupt
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_IsoINIncomplete_ISR(USB_OTG_CORE_HANDLE *pdev)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTSTS_TypeDef gintsts;  
  
  gintsts.d32 = 0;
 80038c0:	f04f 0300 	mov.w	r3, #0
 80038c4:	60fb      	str	r3, [r7, #12]

  USBD_DCD_INT_fops->IsoINIncomplete (pdev); 
 80038c6:	4b0a      	ldr	r3, [pc, #40]	; (80038f0 <DCD_IsoINIncomplete_ISR+0x38>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	69db      	ldr	r3, [r3, #28]
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	4798      	blx	r3
  
  /* Clear interrupt */
  gintsts.b.incomplisoin = 1;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038d6:	60fb      	str	r3, [r7, #12]
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	68fa      	ldr	r2, [r7, #12]
 80038de:	615a      	str	r2, [r3, #20]
  
  return 1;
 80038e0:	f04f 0301 	mov.w	r3, #1
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	f107 0710 	add.w	r7, r7, #16
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	20000094 	.word	0x20000094

080038f4 <DCD_IsoOUTIncomplete_ISR>:
*         handle the ISO OUT incomplete interrupt
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_IsoOUTIncomplete_ISR(USB_OTG_CORE_HANDLE *pdev)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTSTS_TypeDef gintsts;  
  
  gintsts.d32 = 0;
 80038fc:	f04f 0300 	mov.w	r3, #0
 8003900:	60fb      	str	r3, [r7, #12]

  USBD_DCD_INT_fops->IsoOUTIncomplete (pdev); 
 8003902:	4b0a      	ldr	r3, [pc, #40]	; (800392c <DCD_IsoOUTIncomplete_ISR+0x38>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	6a1b      	ldr	r3, [r3, #32]
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	4798      	blx	r3
  
  /* Clear interrupt */
  gintsts.b.incomplisoout = 1;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003912:	60fb      	str	r3, [r7, #12]
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	68fa      	ldr	r2, [r7, #12]
 800391a:	615a      	str	r2, [r3, #20]
  return 1;
 800391c:	f04f 0301 	mov.w	r3, #1
}
 8003920:	4618      	mov	r0, r3
 8003922:	f107 0710 	add.w	r7, r7, #16
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	20000094 	.word	0x20000094

08003930 <DCD_ReadDevInEP>:
*         Reads ep flags
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_ReadDevInEP (USB_OTG_CORE_HANDLE *pdev, uint8_t epnum)
{
 8003930:	b480      	push	{r7}
 8003932:	b087      	sub	sp, #28
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	460b      	mov	r3, r1
 800393a:	70fb      	strb	r3, [r7, #3]
  uint32_t v, msk, emp;
  msk = USB_OTG_READ_REG32(&pdev->regs.DREGS->DIEPMSK);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	691b      	ldr	r3, [r3, #16]
 8003940:	691b      	ldr	r3, [r3, #16]
 8003942:	617b      	str	r3, [r7, #20]
  emp = USB_OTG_READ_REG32(&pdev->regs.DREGS->DIEPEMPMSK);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	691b      	ldr	r3, [r3, #16]
 8003948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800394a:	613b      	str	r3, [r7, #16]
  msk |= ((emp >> epnum) & 0x1) << 7;
 800394c:	78fb      	ldrb	r3, [r7, #3]
 800394e:	693a      	ldr	r2, [r7, #16]
 8003950:	fa22 f303 	lsr.w	r3, r2, r3
 8003954:	ea4f 13c3 	mov.w	r3, r3, lsl #7
 8003958:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 800395c:	697a      	ldr	r2, [r7, #20]
 800395e:	ea42 0303 	orr.w	r3, r2, r3
 8003962:	617b      	str	r3, [r7, #20]
  v = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[epnum]->DIEPINT) & msk;
 8003964:	78fb      	ldrb	r3, [r7, #3]
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	f103 0304 	add.w	r3, r3, #4
 800396c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003970:	18d3      	adds	r3, r2, r3
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	689a      	ldr	r2, [r3, #8]
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	ea02 0303 	and.w	r3, r2, r3
 800397c:	60fb      	str	r3, [r7, #12]
  return v;
 800397e:	68fb      	ldr	r3, [r7, #12]
}
 8003980:	4618      	mov	r0, r3
 8003982:	f107 071c 	add.w	r7, r7, #28
 8003986:	46bd      	mov	sp, r7
 8003988:	bc80      	pop	{r7}
 800398a:	4770      	bx	lr

0800398c <USBD_Init>:
void USBD_Init(USB_OTG_CORE_HANDLE *pdev,
               USB_OTG_CORE_ID_TypeDef coreID,
               USBD_DEVICE *pDevice,                  
               USBD_Class_cb_TypeDef *class_cb, 
               USBD_Usr_cb_TypeDef *usr_cb)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b084      	sub	sp, #16
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	607a      	str	r2, [r7, #4]
 8003996:	603b      	str	r3, [r7, #0]
 8003998:	460b      	mov	r3, r1
 800399a:	72fb      	strb	r3, [r7, #11]
  /* Hardware Init */
  USB_OTG_BSP_Init(pdev);  
 800399c:	68f8      	ldr	r0, [r7, #12]
 800399e:	f7fd fa95 	bl	8000ecc <USB_OTG_BSP_Init>
  
  USBD_DeInit(pdev);
 80039a2:	68f8      	ldr	r0, [r7, #12]
 80039a4:	f000 f81e 	bl	80039e4 <USBD_DeInit>
  
  /*Register class and user callbacks */
  pdev->dev.class_cb = class_cb;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	683a      	ldr	r2, [r7, #0]
 80039ac:	f8c3 25e0 	str.w	r2, [r3, #1504]	; 0x5e0
  pdev->dev.usr_cb = usr_cb;  
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	69ba      	ldr	r2, [r7, #24]
 80039b4:	f8c3 25e4 	str.w	r2, [r3, #1508]	; 0x5e4
  pdev->dev.usr_device = pDevice;    
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	f8c3 25e8 	str.w	r2, [r3, #1512]	; 0x5e8
  
  /* set USB OTG core params */
  DCD_Init(pdev , coreID);
 80039c0:	7afb      	ldrb	r3, [r7, #11]
 80039c2:	68f8      	ldr	r0, [r7, #12]
 80039c4:	4619      	mov	r1, r3
 80039c6:	f7fe ffb9 	bl	800293c <DCD_Init>
  
  /* Upon Init call usr callback */
  pdev->dev.usr_cb->Init();
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4798      	blx	r3
  
  /* Enable Interrupts */
  USB_OTG_BSP_EnableInterrupt(pdev);
 80039d4:	68f8      	ldr	r0, [r7, #12]
 80039d6:	f7fd fae5 	bl	8000fa4 <USB_OTG_BSP_EnableInterrupt>
}
 80039da:	f107 0710 	add.w	r7, r7, #16
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop

080039e4 <USBD_DeInit>:
*         Re-Initialize th deviuce library
* @param  pdev: device instance
* @retval status: status
*/
USBD_Status USBD_DeInit(USB_OTG_CORE_HANDLE *pdev)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  /* Software Init */
  
  return USBD_OK;
 80039ec:	f04f 0300 	mov.w	r3, #0
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	f107 070c 	add.w	r7, r7, #12
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bc80      	pop	{r7}
 80039fa:	4770      	bx	lr

080039fc <USBD_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
static uint8_t USBD_SetupStage(USB_OTG_CORE_HANDLE *pdev)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  USB_SETUP_REQ req;
  
  USBD_ParseSetupRequest(pdev , &req);
 8003a04:	f107 0308 	add.w	r3, r7, #8
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	4619      	mov	r1, r3
 8003a0c:	f000 fea0 	bl	8004750 <USBD_ParseSetupRequest>
  
  switch (req.bmRequest & 0x1F) 
 8003a10:	7a3b      	ldrb	r3, [r7, #8]
 8003a12:	f003 031f 	and.w	r3, r3, #31
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d00a      	beq.n	8003a30 <USBD_SetupStage+0x34>
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	d00f      	beq.n	8003a3e <USBD_SetupStage+0x42>
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d114      	bne.n	8003a4c <USBD_SetupStage+0x50>
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &req);
 8003a22:	f107 0308 	add.w	r3, r7, #8
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	4619      	mov	r1, r3
 8003a2a:	f000 fa89 	bl	8003f40 <USBD_StdDevReq>
    break;
 8003a2e:	e016      	b.n	8003a5e <USBD_SetupStage+0x62>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &req);
 8003a30:	f107 0308 	add.w	r3, r7, #8
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	4619      	mov	r1, r3
 8003a38:	f000 fad4 	bl	8003fe4 <USBD_StdItfReq>
    break;
 8003a3c:	e00f      	b.n	8003a5e <USBD_SetupStage+0x62>
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &req);   
 8003a3e:	f107 0308 	add.w	r3, r7, #8
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	4619      	mov	r1, r3
 8003a46:	f000 fb05 	bl	8004054 <USBD_StdEPReq>
    break;
 8003a4a:	e008      	b.n	8003a5e <USBD_SetupStage+0x62>
    
  default:           
    DCD_EP_Stall(pdev , req.bmRequest & 0x80);
 8003a4c:	7a3b      	ldrb	r3, [r7, #8]
 8003a4e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	4619      	mov	r1, r3
 8003a58:	f7ff f922 	bl	8002ca0 <DCD_EP_Stall>
    break;
 8003a5c:	bf00      	nop
  }  
  return USBD_OK;
 8003a5e:	f04f 0300 	mov.w	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	f107 0710 	add.w	r7, r7, #16
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}

08003a6c <USBD_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
static uint8_t USBD_DataOutStage(USB_OTG_CORE_HANDLE *pdev , uint8_t epnum)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	460b      	mov	r3, r1
 8003a76:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EP *ep;
  
  if(epnum == 0) 
 8003a78:	78fb      	ldrb	r3, [r7, #3]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d145      	bne.n	8003b0a <USBD_DataOutStage+0x9e>
  {
    ep = &pdev->dev.out_ep[0];
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f503 735c 	add.w	r3, r3, #880	; 0x370
 8003a84:	60fb      	str	r3, [r7, #12]
    if ( pdev->dev.device_state == USB_OTG_EP0_DATA_OUT)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
 8003a8c:	2b03      	cmp	r3, #3
 8003a8e:	d14f      	bne.n	8003b30 <USBD_DataOutStage+0xc4>
    {
      if(ep->rem_data_len > ep->maxpacket)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	69da      	ldr	r2, [r3, #28]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d921      	bls.n	8003ae0 <USBD_DataOutStage+0x74>
      {
        ep->rem_data_len -=  ep->maxpacket;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	69da      	ldr	r2, [r3, #28]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	1ad2      	subs	r2, r2, r3
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	61da      	str	r2, [r3, #28]
        
        if(pdev->cfg.dma_enable == 1)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	78db      	ldrb	r3, [r3, #3]
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d106      	bne.n	8003ac0 <USBD_DataOutStage+0x54>
        {
          /* in slave mode this, is handled by the RxSTSQLvl ISR */
          ep->xfer_buff += ep->maxpacket; 
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	68da      	ldr	r2, [r3, #12]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	18d2      	adds	r2, r2, r3
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	60da      	str	r2, [r3, #12]
        }        
        USBD_CtlContinueRx (pdev, 
                            ep->xfer_buff,
 8003ac0:	68fb      	ldr	r3, [r7, #12]
        if(pdev->cfg.dma_enable == 1)
        {
          /* in slave mode this, is handled by the RxSTSQLvl ISR */
          ep->xfer_buff += ep->maxpacket; 
        }        
        USBD_CtlContinueRx (pdev, 
 8003ac2:	68da      	ldr	r2, [r3, #12]
                            ep->xfer_buff,
                            MIN(ep->rem_data_len ,ep->maxpacket));
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6899      	ldr	r1, [r3, #8]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	69db      	ldr	r3, [r3, #28]
 8003acc:	4299      	cmp	r1, r3
 8003ace:	bf38      	it	cc
 8003ad0:	460b      	movcc	r3, r1
        if(pdev->cfg.dma_enable == 1)
        {
          /* in slave mode this, is handled by the RxSTSQLvl ISR */
          ep->xfer_buff += ep->maxpacket; 
        }        
        USBD_CtlContinueRx (pdev, 
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	4611      	mov	r1, r2
 8003ad8:	461a      	mov	r2, r3
 8003ada:	f000 f9dd 	bl	8003e98 <USBD_CtlContinueRx>
 8003ade:	e027      	b.n	8003b30 <USBD_DataOutStage+0xc4>
                            ep->xfer_buff,
                            MIN(ep->rem_data_len ,ep->maxpacket));
      }
      else
      {
        if((pdev->dev.class_cb->EP0_RxReady != NULL)&&
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 8003ae6:	691b      	ldr	r3, [r3, #16]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d00a      	beq.n	8003b02 <USBD_DataOutStage+0x96>
           (pdev->dev.device_status == USB_OTG_CONFIGURED))
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
                            ep->xfer_buff,
                            MIN(ep->rem_data_len ,ep->maxpacket));
      }
      else
      {
        if((pdev->dev.class_cb->EP0_RxReady != NULL)&&
 8003af2:	2b03      	cmp	r3, #3
 8003af4:	d105      	bne.n	8003b02 <USBD_DataOutStage+0x96>
           (pdev->dev.device_status == USB_OTG_CONFIGURED))
        {
          pdev->dev.class_cb->EP0_RxReady(pdev); 
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 8003afc:	691b      	ldr	r3, [r3, #16]
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f000 f9e0 	bl	8003ec8 <USBD_CtlSendStatus>
 8003b08:	e012      	b.n	8003b30 <USBD_DataOutStage+0xc4>
      }
    }
  }
  else if((pdev->dev.class_cb->DataOut != NULL)&&
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 8003b10:	699b      	ldr	r3, [r3, #24]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d00c      	beq.n	8003b30 <USBD_DataOutStage+0xc4>
          (pdev->dev.device_status == USB_OTG_CONFIGURED))
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
        }
        USBD_CtlSendStatus(pdev);
      }
    }
  }
  else if((pdev->dev.class_cb->DataOut != NULL)&&
 8003b1c:	2b03      	cmp	r3, #3
 8003b1e:	d107      	bne.n	8003b30 <USBD_DataOutStage+0xc4>
          (pdev->dev.device_status == USB_OTG_CONFIGURED))
  {
    pdev->dev.class_cb->DataOut(pdev, epnum); 
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 8003b26:	699b      	ldr	r3, [r3, #24]
 8003b28:	78fa      	ldrb	r2, [r7, #3]
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	4611      	mov	r1, r2
 8003b2e:	4798      	blx	r3
  }  
  return USBD_OK;
 8003b30:	f04f 0300 	mov.w	r3, #0
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	f107 0710 	add.w	r7, r7, #16
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop

08003b40 <USBD_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
static uint8_t USBD_DataInStage(USB_OTG_CORE_HANDLE *pdev , uint8_t epnum)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b084      	sub	sp, #16
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	460b      	mov	r3, r1
 8003b4a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EP *ep;
  
  if(epnum == 0) 
 8003b4c:	78fb      	ldrb	r3, [r7, #3]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d163      	bne.n	8003c1a <USBD_DataInStage+0xda>
  {
    ep = &pdev->dev.in_ep[0];
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8003b58:	60fb      	str	r3, [r7, #12]
    if ( pdev->dev.device_state == USB_OTG_EP0_DATA_IN)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	d16e      	bne.n	8003c42 <USBD_DataInStage+0x102>
    {
      if(ep->rem_data_len > ep->maxpacket)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	69da      	ldr	r2, [r3, #28]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d91c      	bls.n	8003baa <USBD_DataInStage+0x6a>
      {
        ep->rem_data_len -=  ep->maxpacket;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	69da      	ldr	r2, [r3, #28]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	1ad2      	subs	r2, r2, r3
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	61da      	str	r2, [r3, #28]
        if(pdev->cfg.dma_enable == 1)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	78db      	ldrb	r3, [r3, #3]
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d106      	bne.n	8003b94 <USBD_DataInStage+0x54>
        {
          /* in slave mode this, is handled by the TxFifoEmpty ISR */
          ep->xfer_buff += ep->maxpacket;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	68da      	ldr	r2, [r3, #12]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	18d2      	adds	r2, r2, r3
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	60da      	str	r2, [r3, #12]
        }
        USBD_CtlContinueSendData (pdev, 
                                  ep->xfer_buff, 
 8003b94:	68fb      	ldr	r3, [r7, #12]
        if(pdev->cfg.dma_enable == 1)
        {
          /* in slave mode this, is handled by the TxFifoEmpty ISR */
          ep->xfer_buff += ep->maxpacket;
        }
        USBD_CtlContinueSendData (pdev, 
 8003b96:	68da      	ldr	r2, [r3, #12]
                                  ep->xfer_buff, 
                                  ep->rem_data_len);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	69db      	ldr	r3, [r3, #28]
        if(pdev->cfg.dma_enable == 1)
        {
          /* in slave mode this, is handled by the TxFifoEmpty ISR */
          ep->xfer_buff += ep->maxpacket;
        }
        USBD_CtlContinueSendData (pdev, 
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	4611      	mov	r1, r2
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	f000 f93c 	bl	8003e20 <USBD_CtlContinueSendData>
          if((pdev->dev.class_cb->EP0_TxSent != NULL)&&
             (pdev->dev.device_status == USB_OTG_CONFIGURED))
          {
            pdev->dev.class_cb->EP0_TxSent(pdev); 
          }          
          USBD_CtlReceiveStatus(pdev);
 8003ba8:	e04c      	b.n	8003c44 <USBD_DataInStage+0x104>
                                  ep->xfer_buff, 
                                  ep->rem_data_len);
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((ep->total_data_len % ep->maxpacket == 0) &&
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	6a1b      	ldr	r3, [r3, #32]
 8003bae:	68fa      	ldr	r2, [r7, #12]
 8003bb0:	6892      	ldr	r2, [r2, #8]
 8003bb2:	fbb3 f1f2 	udiv	r1, r3, r2
 8003bb6:	fb02 f201 	mul.w	r2, r2, r1
 8003bba:	1a9b      	subs	r3, r3, r2
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d117      	bne.n	8003bf0 <USBD_DataInStage+0xb0>
           (ep->total_data_len >= ep->maxpacket) &&
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6a1a      	ldr	r2, [r3, #32]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	689b      	ldr	r3, [r3, #8]
                                  ep->xfer_buff, 
                                  ep->rem_data_len);
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((ep->total_data_len % ep->maxpacket == 0) &&
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d311      	bcc.n	8003bf0 <USBD_DataInStage+0xb0>
           (ep->total_data_len >= ep->maxpacket) &&
             (ep->total_data_len < ep->ctl_data_len ))
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6a1a      	ldr	r2, [r3, #32]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                  ep->rem_data_len);
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((ep->total_data_len % ep->maxpacket == 0) &&
           (ep->total_data_len >= ep->maxpacket) &&
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d20b      	bcs.n	8003bf0 <USBD_DataInStage+0xb0>
             (ep->total_data_len < ep->ctl_data_len ))
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f04f 0100 	mov.w	r1, #0
 8003bde:	f04f 0200 	mov.w	r2, #0
 8003be2:	f000 f91d 	bl	8003e20 <USBD_CtlContinueSendData>
          ep->ctl_data_len = 0;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	f04f 0200 	mov.w	r2, #0
 8003bec:	625a      	str	r2, [r3, #36]	; 0x24
 8003bee:	e029      	b.n	8003c44 <USBD_DataInStage+0x104>
        }
        else
        {
          if((pdev->dev.class_cb->EP0_TxSent != NULL)&&
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d00a      	beq.n	8003c12 <USBD_DataInStage+0xd2>
             (pdev->dev.device_status == USB_OTG_CONFIGURED))
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
          USBD_CtlContinueSendData(pdev , NULL, 0);
          ep->ctl_data_len = 0;
        }
        else
        {
          if((pdev->dev.class_cb->EP0_TxSent != NULL)&&
 8003c02:	2b03      	cmp	r3, #3
 8003c04:	d105      	bne.n	8003c12 <USBD_DataInStage+0xd2>
             (pdev->dev.device_status == USB_OTG_CONFIGURED))
          {
            pdev->dev.class_cb->EP0_TxSent(pdev); 
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	4798      	blx	r3
          }          
          USBD_CtlReceiveStatus(pdev);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f000 f976 	bl	8003f04 <USBD_CtlReceiveStatus>
 8003c18:	e014      	b.n	8003c44 <USBD_DataInStage+0x104>
        }
      }
    }
  }
  else if((pdev->dev.class_cb->DataIn != NULL)&& 
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 8003c20:	695b      	ldr	r3, [r3, #20]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d00e      	beq.n	8003c44 <USBD_DataInStage+0x104>
          (pdev->dev.device_status == USB_OTG_CONFIGURED))
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
  }
  else if((pdev->dev.class_cb->DataIn != NULL)&& 
 8003c2c:	2b03      	cmp	r3, #3
 8003c2e:	d109      	bne.n	8003c44 <USBD_DataInStage+0x104>
          (pdev->dev.device_status == USB_OTG_CONFIGURED))
  {
    pdev->dev.class_cb->DataIn(pdev, epnum); 
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 8003c36:	695b      	ldr	r3, [r3, #20]
 8003c38:	78fa      	ldrb	r2, [r7, #3]
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	4611      	mov	r1, r2
 8003c3e:	4798      	blx	r3
 8003c40:	e000      	b.n	8003c44 <USBD_DataInStage+0x104>
          if((pdev->dev.class_cb->EP0_TxSent != NULL)&&
             (pdev->dev.device_status == USB_OTG_CONFIGURED))
          {
            pdev->dev.class_cb->EP0_TxSent(pdev); 
          }          
          USBD_CtlReceiveStatus(pdev);
 8003c42:	bf00      	nop
  else if((pdev->dev.class_cb->DataIn != NULL)&& 
          (pdev->dev.device_status == USB_OTG_CONFIGURED))
  {
    pdev->dev.class_cb->DataIn(pdev, epnum); 
  }  
  return USBD_OK;
 8003c44:	f04f 0300 	mov.w	r3, #0
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f107 0710 	add.w	r7, r7, #16
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop

08003c54 <USBD_Reset>:
* @param  pdev: device instance
* @retval status
*/

static uint8_t USBD_Reset(USB_OTG_CORE_HANDLE  *pdev)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  DCD_EP_Open(pdev,
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f04f 0100 	mov.w	r1, #0
 8003c62:	f04f 0208 	mov.w	r2, #8
 8003c66:	f04f 0300 	mov.w	r3, #0
 8003c6a:	f7fe fefd 	bl	8002a68 <DCD_EP_Open>
              0x00,
              USB_OTG_MAX_EP0_SIZE,
              EP_TYPE_CTRL);
  
  /* Open EP0 IN */
  DCD_EP_Open(pdev,
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f04f 0180 	mov.w	r1, #128	; 0x80
 8003c74:	f04f 0208 	mov.w	r2, #8
 8003c78:	f04f 0300 	mov.w	r3, #0
 8003c7c:	f7fe fef4 	bl	8002a68 <DCD_EP_Open>
              0x80,
              USB_OTG_MAX_EP0_SIZE,
              EP_TYPE_CTRL);
  
  /* Upon Reset call usr call back */
  pdev->dev.device_status = USB_OTG_DEFAULT;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f04f 0201 	mov.w	r2, #1
 8003c86:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
  pdev->dev.usr_cb->DeviceReset(pdev->cfg.speed);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	7892      	ldrb	r2, [r2, #2]
 8003c96:	4610      	mov	r0, r2
 8003c98:	4798      	blx	r3
  
  return USBD_OK;
 8003c9a:	f04f 0300 	mov.w	r3, #0
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f107 0708 	add.w	r7, r7, #8
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <USBD_Resume>:
* @param  pdev: device instance
* @retval status
*/

static uint8_t USBD_Resume(USB_OTG_CORE_HANDLE  *pdev)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b082      	sub	sp, #8
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  /* Upon Resume call usr call back */
  pdev->dev.usr_cb->DeviceResumed(); 
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 8003cb6:	691b      	ldr	r3, [r3, #16]
 8003cb8:	4798      	blx	r3
  pdev->dev.device_status = USB_OTG_CONFIGURED;  
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f04f 0203 	mov.w	r2, #3
 8003cc0:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
  return USBD_OK;
 8003cc4:	f04f 0300 	mov.w	r3, #0
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f107 0708 	add.w	r7, r7, #8
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop

08003cd4 <USBD_Suspend>:
* @param  pdev: device instance
* @retval status
*/

static uint8_t USBD_Suspend(USB_OTG_CORE_HANDLE  *pdev)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  
  pdev->dev.device_status  = USB_OTG_SUSPENDED;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f04f 0204 	mov.w	r2, #4
 8003ce2:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
  /* Upon Resume call usr call back */
  pdev->dev.usr_cb->DeviceSuspended(); 
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 8003cec:	68db      	ldr	r3, [r3, #12]
 8003cee:	4798      	blx	r3
  return USBD_OK;
 8003cf0:	f04f 0300 	mov.w	r3, #0
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f107 0708 	add.w	r7, r7, #8
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop

08003d00 <USBD_SOF>:
* @param  pdev: device instance
* @retval status
*/

static uint8_t USBD_SOF(USB_OTG_CORE_HANDLE  *pdev)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b082      	sub	sp, #8
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  if(pdev->dev.class_cb->SOF)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 8003d0e:	69db      	ldr	r3, [r3, #28]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d005      	beq.n	8003d20 <USBD_SOF+0x20>
  {
    pdev->dev.class_cb->SOF(pdev); 
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 8003d1a:	69db      	ldr	r3, [r3, #28]
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	4798      	blx	r3
  }
  return USBD_OK;
 8003d20:	f04f 0300 	mov.w	r3, #0
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	f107 0708 	add.w	r7, r7, #8
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	bf00      	nop

08003d30 <USBD_SetCfg>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_Status USBD_SetCfg(USB_OTG_CORE_HANDLE  *pdev, uint8_t cfgidx)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b082      	sub	sp, #8
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	460b      	mov	r3, r1
 8003d3a:	70fb      	strb	r3, [r7, #3]
  pdev->dev.class_cb->Init(pdev, cfgidx); 
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	78fa      	ldrb	r2, [r7, #3]
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	4611      	mov	r1, r2
 8003d4a:	4798      	blx	r3
  
  /* Upon set config call usr call back */
  pdev->dev.usr_cb->DeviceConfigured();
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	4798      	blx	r3
  return USBD_OK; 
 8003d56:	f04f 0300 	mov.w	r3, #0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f107 0708 	add.w	r7, r7, #8
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}

08003d64 <USBD_ClrCfg>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_Status
*/
USBD_Status USBD_ClrCfg(USB_OTG_CORE_HANDLE  *pdev, uint8_t cfgidx)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b082      	sub	sp, #8
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	460b      	mov	r3, r1
 8003d6e:	70fb      	strb	r3, [r7, #3]
  pdev->dev.class_cb->DeInit(pdev, cfgidx);   
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	78fa      	ldrb	r2, [r7, #3]
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	4611      	mov	r1, r2
 8003d7e:	4798      	blx	r3
  return USBD_OK;
 8003d80:	f04f 0300 	mov.w	r3, #0
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	f107 0708 	add.w	r7, r7, #8
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop

08003d90 <USBD_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
static uint8_t USBD_IsoINIncomplete(USB_OTG_CORE_HANDLE  *pdev)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  pdev->dev.class_cb->IsoINIncomplete(pdev);   
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 8003d9e:	6a1b      	ldr	r3, [r3, #32]
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	4798      	blx	r3
  return USBD_OK;
 8003da4:	f04f 0300 	mov.w	r3, #0
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	f107 0708 	add.w	r7, r7, #8
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop

08003db4 <USBD_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
static uint8_t USBD_IsoOUTIncomplete(USB_OTG_CORE_HANDLE  *pdev)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b082      	sub	sp, #8
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  pdev->dev.class_cb->IsoOUTIncomplete(pdev);   
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 8003dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	4798      	blx	r3
  return USBD_OK;
 8003dc8:	f04f 0300 	mov.w	r3, #0
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f107 0708 	add.w	r7, r7, #8
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop

08003dd8 <USBD_CtlSendData>:
* @retval status
*/
USBD_Status  USBD_CtlSendData (USB_OTG_CORE_HANDLE  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b086      	sub	sp, #24
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	60f8      	str	r0, [r7, #12]
 8003de0:	60b9      	str	r1, [r7, #8]
 8003de2:	4613      	mov	r3, r2
 8003de4:	80fb      	strh	r3, [r7, #6]
  USBD_Status ret = USBD_OK;
 8003de6:	f04f 0300 	mov.w	r3, #0
 8003dea:	75fb      	strb	r3, [r7, #23]
  
  pdev->dev.in_ep[0].total_data_len = len;
 8003dec:	88fa      	ldrh	r2, [r7, #6]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
  pdev->dev.in_ep[0].rem_data_len   = len;
 8003df4:	88fa      	ldrh	r2, [r7, #6]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
  pdev->dev.device_state = USB_OTG_EP0_DATA_IN;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f04f 0202 	mov.w	r2, #2
 8003e02:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111

  DCD_EP_Tx (pdev, 0, pbuf, len);
 8003e06:	88fb      	ldrh	r3, [r7, #6]
 8003e08:	68f8      	ldr	r0, [r7, #12]
 8003e0a:	f04f 0100 	mov.w	r1, #0
 8003e0e:	68ba      	ldr	r2, [r7, #8]
 8003e10:	f7fe ff04 	bl	8002c1c <DCD_EP_Tx>
 
  return ret;
 8003e14:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	f107 0718 	add.w	r7, r7, #24
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_Status  USBD_CtlContinueSendData (USB_OTG_CORE_HANDLE  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b086      	sub	sp, #24
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	60f8      	str	r0, [r7, #12]
 8003e28:	60b9      	str	r1, [r7, #8]
 8003e2a:	4613      	mov	r3, r2
 8003e2c:	80fb      	strh	r3, [r7, #6]
  USBD_Status ret = USBD_OK;
 8003e2e:	f04f 0300 	mov.w	r3, #0
 8003e32:	75fb      	strb	r3, [r7, #23]
  
  DCD_EP_Tx (pdev, 0, pbuf, len);
 8003e34:	88fb      	ldrh	r3, [r7, #6]
 8003e36:	68f8      	ldr	r0, [r7, #12]
 8003e38:	f04f 0100 	mov.w	r1, #0
 8003e3c:	68ba      	ldr	r2, [r7, #8]
 8003e3e:	f7fe feed 	bl	8002c1c <DCD_EP_Tx>
  
  
  return ret;
 8003e42:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	f107 0718 	add.w	r7, r7, #24
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop

08003e50 <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_Status  USBD_CtlPrepareRx (USB_OTG_CORE_HANDLE  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b086      	sub	sp, #24
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	60f8      	str	r0, [r7, #12]
 8003e58:	60b9      	str	r1, [r7, #8]
 8003e5a:	4613      	mov	r3, r2
 8003e5c:	80fb      	strh	r3, [r7, #6]
  USBD_Status ret = USBD_OK;
 8003e5e:	f04f 0300 	mov.w	r3, #0
 8003e62:	75fb      	strb	r3, [r7, #23]
  
  pdev->dev.out_ep[0].total_data_len = len;
 8003e64:	88fa      	ldrh	r2, [r7, #6]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390
  pdev->dev.out_ep[0].rem_data_len   = len;
 8003e6c:	88fa      	ldrh	r2, [r7, #6]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c
  pdev->dev.device_state = USB_OTG_EP0_DATA_OUT;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f04f 0203 	mov.w	r2, #3
 8003e7a:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
  
  DCD_EP_PrepareRx (pdev,
 8003e7e:	88fb      	ldrh	r3, [r7, #6]
 8003e80:	68f8      	ldr	r0, [r7, #12]
 8003e82:	f04f 0100 	mov.w	r1, #0
 8003e86:	68ba      	ldr	r2, [r7, #8]
 8003e88:	f7fe fe82 	bl	8002b90 <DCD_EP_PrepareRx>
                    0,
                    pbuf,
                    len);
  

  return ret;
 8003e8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f107 0718 	add.w	r7, r7, #24
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_Status  USBD_CtlContinueRx (USB_OTG_CORE_HANDLE  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b086      	sub	sp, #24
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	60f8      	str	r0, [r7, #12]
 8003ea0:	60b9      	str	r1, [r7, #8]
 8003ea2:	4613      	mov	r3, r2
 8003ea4:	80fb      	strh	r3, [r7, #6]
  USBD_Status ret = USBD_OK;
 8003ea6:	f04f 0300 	mov.w	r3, #0
 8003eaa:	75fb      	strb	r3, [r7, #23]
  
  DCD_EP_PrepareRx (pdev,
 8003eac:	88fb      	ldrh	r3, [r7, #6]
 8003eae:	68f8      	ldr	r0, [r7, #12]
 8003eb0:	f04f 0100 	mov.w	r1, #0
 8003eb4:	68ba      	ldr	r2, [r7, #8]
 8003eb6:	f7fe fe6b 	bl	8002b90 <DCD_EP_PrepareRx>
                    0,                     
                    pbuf,                         
                    len);
  return ret;
 8003eba:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f107 0718 	add.w	r7, r7, #24
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop

08003ec8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: USB OTG device instance
* @retval status
*/
USBD_Status  USBD_CtlSendStatus (USB_OTG_CORE_HANDLE  *pdev)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  USBD_Status ret = USBD_OK;
 8003ed0:	f04f 0300 	mov.w	r3, #0
 8003ed4:	73fb      	strb	r3, [r7, #15]
  pdev->dev.device_state = USB_OTG_EP0_STATUS_IN;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f04f 0204 	mov.w	r2, #4
 8003edc:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
  DCD_EP_Tx (pdev,
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f04f 0100 	mov.w	r1, #0
 8003ee6:	f04f 0200 	mov.w	r2, #0
 8003eea:	f04f 0300 	mov.w	r3, #0
 8003eee:	f7fe fe95 	bl	8002c1c <DCD_EP_Tx>
             0,
             NULL, 
             0); 
  
  USB_OTG_EP0_OutStart(pdev);  
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f7fe fcbc 	bl	8002870 <USB_OTG_EP0_OutStart>
  
  return ret;
 8003ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	f107 0710 	add.w	r7, r7, #16
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: USB OTG device instance
* @retval status
*/
USBD_Status  USBD_CtlReceiveStatus (USB_OTG_CORE_HANDLE  *pdev)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b084      	sub	sp, #16
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  USBD_Status ret = USBD_OK;
 8003f0c:	f04f 0300 	mov.w	r3, #0
 8003f10:	73fb      	strb	r3, [r7, #15]
  pdev->dev.device_state = USB_OTG_EP0_STATUS_OUT;  
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f04f 0205 	mov.w	r2, #5
 8003f18:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
  DCD_EP_PrepareRx ( pdev,
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f04f 0100 	mov.w	r1, #0
 8003f22:	f04f 0200 	mov.w	r2, #0
 8003f26:	f04f 0300 	mov.w	r3, #0
 8003f2a:	f7fe fe31 	bl	8002b90 <DCD_EP_PrepareRx>
                    0,
                    NULL,
                    0);  

  USB_OTG_EP0_OutStart(pdev);
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f7fe fc9e 	bl	8002870 <USB_OTG_EP0_OutStart>
  
  return ret;
 8003f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	f107 0710 	add.w	r7, r7, #16
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_Status  USBD_StdDevReq (USB_OTG_CORE_HANDLE  *pdev, USB_SETUP_REQ  *req)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
  USBD_Status ret = USBD_OK;  
 8003f4a:	f04f 0300 	mov.w	r3, #0
 8003f4e:	73fb      	strb	r3, [r7, #15]
  
  switch (req->bRequest) 
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	785b      	ldrb	r3, [r3, #1]
 8003f54:	2b09      	cmp	r3, #9
 8003f56:	d83a      	bhi.n	8003fce <USBD_StdDevReq+0x8e>
 8003f58:	a201      	add	r2, pc, #4	; (adr r2, 8003f60 <USBD_StdDevReq+0x20>)
 8003f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f5e:	bf00      	nop
 8003f60:	08003fb1 	.word	0x08003fb1
 8003f64:	08003fc5 	.word	0x08003fc5
 8003f68:	08003fcf 	.word	0x08003fcf
 8003f6c:	08003fbb 	.word	0x08003fbb
 8003f70:	08003fcf 	.word	0x08003fcf
 8003f74:	08003f93 	.word	0x08003f93
 8003f78:	08003f89 	.word	0x08003f89
 8003f7c:	08003fcf 	.word	0x08003fcf
 8003f80:	08003fa7 	.word	0x08003fa7
 8003f84:	08003f9d 	.word	0x08003f9d
  {
  case USB_REQ_GET_DESCRIPTOR: 
    
    USBD_GetDescriptor (pdev, req) ;
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	6839      	ldr	r1, [r7, #0]
 8003f8c:	f000 f942 	bl	8004214 <USBD_GetDescriptor>
    break;
 8003f90:	e022      	b.n	8003fd8 <USBD_StdDevReq+0x98>
    
  case USB_REQ_SET_ADDRESS:                      
    USBD_SetAddress(pdev, req);
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	6839      	ldr	r1, [r7, #0]
 8003f96:	f000 fa21 	bl	80043dc <USBD_SetAddress>
    break;
 8003f9a:	e01d      	b.n	8003fd8 <USBD_StdDevReq+0x98>
    
  case USB_REQ_SET_CONFIGURATION:                    
    USBD_SetConfig (pdev , req);
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	6839      	ldr	r1, [r7, #0]
 8003fa0:	f000 fa5c 	bl	800445c <USBD_SetConfig>
    break;
 8003fa4:	e018      	b.n	8003fd8 <USBD_StdDevReq+0x98>
    
  case USB_REQ_GET_CONFIGURATION:                 
    USBD_GetConfig (pdev , req);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	6839      	ldr	r1, [r7, #0]
 8003faa:	f000 fad3 	bl	8004554 <USBD_GetConfig>
    break;
 8003fae:	e013      	b.n	8003fd8 <USBD_StdDevReq+0x98>
    
  case USB_REQ_GET_STATUS:                                  
    USBD_GetStatus (pdev , req);
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	6839      	ldr	r1, [r7, #0]
 8003fb4:	f000 fb02 	bl	80045bc <USBD_GetStatus>
    break;
 8003fb8:	e00e      	b.n	8003fd8 <USBD_StdDevReq+0x98>
    
    
  case USB_REQ_SET_FEATURE:   
    USBD_SetFeature (pdev , req);    
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	6839      	ldr	r1, [r7, #0]
 8003fbe:	f000 fb2b 	bl	8004618 <USBD_SetFeature>
    break;
 8003fc2:	e009      	b.n	8003fd8 <USBD_StdDevReq+0x98>
    
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	6839      	ldr	r1, [r7, #0]
 8003fc8:	f000 fb96 	bl	80046f8 <USBD_ClrFeature>
    break;
 8003fcc:	e004      	b.n	8003fd8 <USBD_StdDevReq+0x98>
    
  default:  
    USBD_CtlError(pdev , req);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	6839      	ldr	r1, [r7, #0]
 8003fd2:	f000 fc1b 	bl	800480c <USBD_CtlError>
    break;
 8003fd6:	bf00      	nop
  }
  
  return ret;
 8003fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f107 0710 	add.w	r7, r7, #16
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}

08003fe4 <USBD_StdItfReq>:
* @param  pdev: USB OTG device instance
* @param  req: usb request
* @retval status
*/
USBD_Status  USBD_StdItfReq (USB_OTG_CORE_HANDLE  *pdev, USB_SETUP_REQ  *req)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b084      	sub	sp, #16
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]
  USBD_Status ret = USBD_OK; 
 8003fee:	f04f 0300 	mov.w	r3, #0
 8003ff2:	73fb      	strb	r3, [r7, #15]
  
  switch (pdev->dev.device_status) 
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8003ffa:	2b03      	cmp	r3, #3
 8003ffc:	d11b      	bne.n	8004036 <USBD_StdItfReq+0x52>
  {
  case USB_OTG_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_ITF_MAX_NUM) 
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	889b      	ldrh	r3, [r3, #4]
 8004002:	b2db      	uxtb	r3, r3
 8004004:	2b01      	cmp	r3, #1
 8004006:	d811      	bhi.n	800402c <USBD_StdItfReq+0x48>
    {
      pdev->dev.class_cb->Setup (pdev, req); 
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	6839      	ldr	r1, [r7, #0]
 8004014:	4798      	blx	r3
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	88db      	ldrh	r3, [r3, #6]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d110      	bne.n	8004040 <USBD_StdItfReq+0x5c>
 800401e:	7bfb      	ldrb	r3, [r7, #15]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d10f      	bne.n	8004044 <USBD_StdItfReq+0x60>
      {
         USBD_CtlSendStatus(pdev);
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f7ff ff4f 	bl	8003ec8 <USBD_CtlSendStatus>
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
    }
    break;
 800402a:	e00c      	b.n	8004046 <USBD_StdItfReq+0x62>
         USBD_CtlSendStatus(pdev);
      }
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	6839      	ldr	r1, [r7, #0]
 8004030:	f000 fbec 	bl	800480c <USBD_CtlError>
    }
    break;
 8004034:	e007      	b.n	8004046 <USBD_StdItfReq+0x62>
    
  default:
     USBD_CtlError(pdev , req);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	6839      	ldr	r1, [r7, #0]
 800403a:	f000 fbe7 	bl	800480c <USBD_CtlError>
    break;
 800403e:	e002      	b.n	8004046 <USBD_StdItfReq+0x62>
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
    }
    break;
 8004040:	bf00      	nop
 8004042:	e000      	b.n	8004046 <USBD_StdItfReq+0x62>
 8004044:	bf00      	nop
    
  default:
     USBD_CtlError(pdev , req);
    break;
  }
  return ret;
 8004046:	7bfb      	ldrb	r3, [r7, #15]
}
 8004048:	4618      	mov	r0, r3
 800404a:	f107 0710 	add.w	r7, r7, #16
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop

08004054 <USBD_StdEPReq>:
* @param  pdev: USB OTG device instance
* @param  req: usb request
* @retval status
*/
USBD_Status  USBD_StdEPReq (USB_OTG_CORE_HANDLE  *pdev, USB_SETUP_REQ  *req)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6039      	str	r1, [r7, #0]
  
  uint8_t   ep_addr;
  USBD_Status ret = USBD_OK; 
 800405e:	f04f 0300 	mov.w	r3, #0
 8004062:	73fb      	strb	r3, [r7, #15]
  
  ep_addr  = LOBYTE(req->wIndex);   
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	889b      	ldrh	r3, [r3, #4]
 8004068:	73bb      	strb	r3, [r7, #14]
  
  switch (req->bRequest) 
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	785b      	ldrb	r3, [r3, #1]
 800406e:	2b01      	cmp	r3, #1
 8004070:	d038      	beq.n	80040e4 <USBD_StdEPReq+0x90>
 8004072:	2b03      	cmp	r3, #3
 8004074:	d002      	beq.n	800407c <USBD_StdEPReq+0x28>
 8004076:	2b00      	cmp	r3, #0
 8004078:	d068      	beq.n	800414c <USBD_StdEPReq+0xf8>
      break;
    }
    break;
    
  default:
    break;
 800407a:	e0c2      	b.n	8004202 <USBD_StdEPReq+0x1ae>
  switch (req->bRequest) 
  {
    
  case USB_REQ_SET_FEATURE :
    
    switch (pdev->dev.device_status) 
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8004082:	2b02      	cmp	r3, #2
 8004084:	d002      	beq.n	800408c <USBD_StdEPReq+0x38>
 8004086:	2b03      	cmp	r3, #3
 8004088:	d00c      	beq.n	80040a4 <USBD_StdEPReq+0x50>
 800408a:	e025      	b.n	80040d8 <USBD_StdEPReq+0x84>
    {
    case USB_OTG_ADDRESSED:          
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800408c:	7bbb      	ldrb	r3, [r7, #14]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d007      	beq.n	80040a2 <USBD_StdEPReq+0x4e>
 8004092:	7bbb      	ldrb	r3, [r7, #14]
 8004094:	2b80      	cmp	r3, #128	; 0x80
 8004096:	d004      	beq.n	80040a2 <USBD_StdEPReq+0x4e>
      {
        DCD_EP_Stall(pdev , ep_addr);
 8004098:	7bbb      	ldrb	r3, [r7, #14]
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	4619      	mov	r1, r3
 800409e:	f7fe fdff 	bl	8002ca0 <DCD_EP_Stall>
      }
      break;	
 80040a2:	e01e      	b.n	80040e2 <USBD_StdEPReq+0x8e>
      
    case USB_OTG_CONFIGURED:   
      if (req->wValue == USB_FEATURE_EP_HALT)
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	885b      	ldrh	r3, [r3, #2]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d10a      	bne.n	80040c2 <USBD_StdEPReq+0x6e>
      {
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 80040ac:	7bbb      	ldrb	r3, [r7, #14]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d007      	beq.n	80040c2 <USBD_StdEPReq+0x6e>
 80040b2:	7bbb      	ldrb	r3, [r7, #14]
 80040b4:	2b80      	cmp	r3, #128	; 0x80
 80040b6:	d004      	beq.n	80040c2 <USBD_StdEPReq+0x6e>
        { 
          DCD_EP_Stall(pdev , ep_addr);
 80040b8:	7bbb      	ldrb	r3, [r7, #14]
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	4619      	mov	r1, r3
 80040be:	f7fe fdef 	bl	8002ca0 <DCD_EP_Stall>
          
        }
      }
      pdev->dev.class_cb->Setup (pdev, req);   
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	6839      	ldr	r1, [r7, #0]
 80040ce:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f7ff fef9 	bl	8003ec8 <USBD_CtlSendStatus>
      
      break;
 80040d6:	e004      	b.n	80040e2 <USBD_StdEPReq+0x8e>
      
    default:                         
      USBD_CtlError(pdev , req);
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	6839      	ldr	r1, [r7, #0]
 80040dc:	f000 fb96 	bl	800480c <USBD_CtlError>
      break;    
 80040e0:	bf00      	nop
    }
    break;
 80040e2:	e08e      	b.n	8004202 <USBD_StdEPReq+0x1ae>
    
  case USB_REQ_CLEAR_FEATURE :
    
    switch (pdev->dev.device_status) 
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d002      	beq.n	80040f4 <USBD_StdEPReq+0xa0>
 80040ee:	2b03      	cmp	r3, #3
 80040f0:	d00c      	beq.n	800410c <USBD_StdEPReq+0xb8>
 80040f2:	e025      	b.n	8004140 <USBD_StdEPReq+0xec>
    {
    case USB_OTG_ADDRESSED:          
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 80040f4:	7bbb      	ldrb	r3, [r7, #14]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d007      	beq.n	800410a <USBD_StdEPReq+0xb6>
 80040fa:	7bbb      	ldrb	r3, [r7, #14]
 80040fc:	2b80      	cmp	r3, #128	; 0x80
 80040fe:	d004      	beq.n	800410a <USBD_StdEPReq+0xb6>
      {
        DCD_EP_Stall(pdev , ep_addr);
 8004100:	7bbb      	ldrb	r3, [r7, #14]
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	4619      	mov	r1, r3
 8004106:	f7fe fdcb 	bl	8002ca0 <DCD_EP_Stall>
      }
      break;	
 800410a:	e01e      	b.n	800414a <USBD_StdEPReq+0xf6>
      
    case USB_OTG_CONFIGURED:   
      if (req->wValue == USB_FEATURE_EP_HALT)
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	885b      	ldrh	r3, [r3, #2]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d114      	bne.n	800413e <USBD_StdEPReq+0xea>
      {
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8004114:	7bbb      	ldrb	r3, [r7, #14]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d00e      	beq.n	8004138 <USBD_StdEPReq+0xe4>
 800411a:	7bbb      	ldrb	r3, [r7, #14]
 800411c:	2b80      	cmp	r3, #128	; 0x80
 800411e:	d00b      	beq.n	8004138 <USBD_StdEPReq+0xe4>
        {        
          DCD_EP_ClrStall(pdev , ep_addr);
 8004120:	7bbb      	ldrb	r3, [r7, #14]
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	4619      	mov	r1, r3
 8004126:	f7fe fdfb 	bl	8002d20 <DCD_EP_ClrStall>
          pdev->dev.class_cb->Setup (pdev, req);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	6839      	ldr	r1, [r7, #0]
 8004136:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f7ff fec5 	bl	8003ec8 <USBD_CtlSendStatus>
      }
      break;
 800413e:	e004      	b.n	800414a <USBD_StdEPReq+0xf6>
      
    default:                         
       USBD_CtlError(pdev , req);
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	6839      	ldr	r1, [r7, #0]
 8004144:	f000 fb62 	bl	800480c <USBD_CtlError>
      break;    
 8004148:	bf00      	nop
    }
    break;
 800414a:	e05a      	b.n	8004202 <USBD_StdEPReq+0x1ae>
    
  case USB_REQ_GET_STATUS:                  
    switch (pdev->dev.device_status) 
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8004152:	2b02      	cmp	r3, #2
 8004154:	d002      	beq.n	800415c <USBD_StdEPReq+0x108>
 8004156:	2b03      	cmp	r3, #3
 8004158:	d00c      	beq.n	8004174 <USBD_StdEPReq+0x120>
 800415a:	e04c      	b.n	80041f6 <USBD_StdEPReq+0x1a2>
    {
    case USB_OTG_ADDRESSED:          
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800415c:	7bbb      	ldrb	r3, [r7, #14]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d007      	beq.n	8004172 <USBD_StdEPReq+0x11e>
 8004162:	7bbb      	ldrb	r3, [r7, #14]
 8004164:	2b80      	cmp	r3, #128	; 0x80
 8004166:	d004      	beq.n	8004172 <USBD_StdEPReq+0x11e>
      {
        DCD_EP_Stall(pdev , ep_addr);
 8004168:	7bbb      	ldrb	r3, [r7, #14]
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	4619      	mov	r1, r3
 800416e:	f7fe fd97 	bl	8002ca0 <DCD_EP_Stall>
      }
      break;	
 8004172:	e045      	b.n	8004200 <USBD_StdEPReq+0x1ac>
      
    case USB_OTG_CONFIGURED:         
      
      
      if ((ep_addr & 0x80)== 0x80)
 8004174:	7bbb      	ldrb	r3, [r7, #14]
 8004176:	b25b      	sxtb	r3, r3
 8004178:	2b00      	cmp	r3, #0
 800417a:	da19      	bge.n	80041b0 <USBD_StdEPReq+0x15c>
      {
        if(pdev->dev.in_ep[ep_addr & 0x7F].is_stall)
 800417c:	7bbb      	ldrb	r3, [r7, #14]
 800417e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004182:	6879      	ldr	r1, [r7, #4]
 8004184:	4613      	mov	r3, r2
 8004186:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800418a:	189b      	adds	r3, r3, r2
 800418c:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8004190:	18cb      	adds	r3, r1, r3
 8004192:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8004196:	789b      	ldrb	r3, [r3, #2]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d004      	beq.n	80041a6 <USBD_StdEPReq+0x152>
        {
          USBD_ep_status = 0x0001;     
 800419c:	4b1c      	ldr	r3, [pc, #112]	; (8004210 <USBD_StdEPReq+0x1bc>)
 800419e:	f04f 0201 	mov.w	r2, #1
 80041a2:	601a      	str	r2, [r3, #0]
 80041a4:	e01f      	b.n	80041e6 <USBD_StdEPReq+0x192>
        }
        else
        {
          USBD_ep_status = 0x0000;  
 80041a6:	4b1a      	ldr	r3, [pc, #104]	; (8004210 <USBD_StdEPReq+0x1bc>)
 80041a8:	f04f 0200 	mov.w	r2, #0
 80041ac:	601a      	str	r2, [r3, #0]
 80041ae:	e01a      	b.n	80041e6 <USBD_StdEPReq+0x192>
        }
      }
      else if ((ep_addr & 0x80)== 0x00)
 80041b0:	7bbb      	ldrb	r3, [r7, #14]
 80041b2:	b25b      	sxtb	r3, r3
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	db16      	blt.n	80041e6 <USBD_StdEPReq+0x192>
      {
        if(pdev->dev.out_ep[ep_addr].is_stall)
 80041b8:	7bba      	ldrb	r2, [r7, #14]
 80041ba:	6879      	ldr	r1, [r7, #4]
 80041bc:	4613      	mov	r3, r2
 80041be:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80041c2:	189b      	adds	r3, r3, r2
 80041c4:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80041c8:	18cb      	adds	r3, r1, r3
 80041ca:	f503 735c 	add.w	r3, r3, #880	; 0x370
 80041ce:	789b      	ldrb	r3, [r3, #2]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d004      	beq.n	80041de <USBD_StdEPReq+0x18a>
        {
          USBD_ep_status = 0x0001;     
 80041d4:	4b0e      	ldr	r3, [pc, #56]	; (8004210 <USBD_StdEPReq+0x1bc>)
 80041d6:	f04f 0201 	mov.w	r2, #1
 80041da:	601a      	str	r2, [r3, #0]
 80041dc:	e003      	b.n	80041e6 <USBD_StdEPReq+0x192>
        }
        
        else 
        {
          USBD_ep_status = 0x0000;     
 80041de:	4b0c      	ldr	r3, [pc, #48]	; (8004210 <USBD_StdEPReq+0x1bc>)
 80041e0:	f04f 0200 	mov.w	r2, #0
 80041e4:	601a      	str	r2, [r3, #0]
        }      
      }
      USBD_CtlSendData (pdev,
 80041e6:	4b0a      	ldr	r3, [pc, #40]	; (8004210 <USBD_StdEPReq+0x1bc>)
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	4619      	mov	r1, r3
 80041ec:	f04f 0202 	mov.w	r2, #2
 80041f0:	f7ff fdf2 	bl	8003dd8 <USBD_CtlSendData>
                        (uint8_t *)&USBD_ep_status,
                        2);
      break;
 80041f4:	e004      	b.n	8004200 <USBD_StdEPReq+0x1ac>
      
    default:                         
       USBD_CtlError(pdev , req);
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	6839      	ldr	r1, [r7, #0]
 80041fa:	f000 fb07 	bl	800480c <USBD_CtlError>
      break;
 80041fe:	bf00      	nop
    }
    break;
 8004200:	bf00      	nop
    
  default:
    break;
  }
  return ret;
 8004202:	7bfb      	ldrb	r3, [r7, #15]
}
 8004204:	4618      	mov	r0, r3
 8004206:	f107 0710 	add.w	r7, r7, #16
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop
 8004210:	2000011c 	.word	0x2000011c

08004214 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USB_OTG_CORE_HANDLE  *pdev, 
                               USB_SETUP_REQ *req)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;
  
  switch (req->wValue >> 8)
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	885b      	ldrh	r3, [r3, #2]
 8004222:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8004226:	b29b      	uxth	r3, r3
 8004228:	f103 33ff 	add.w	r3, r3, #4294967295
 800422c:	2b06      	cmp	r3, #6
 800422e:	f200 80b5 	bhi.w	800439c <USBD_GetDescriptor+0x188>
 8004232:	a201      	add	r2, pc, #4	; (adr r2, 8004238 <USBD_GetDescriptor+0x24>)
 8004234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004238:	08004255 	.word	0x08004255
 800423c:	08004289 	.word	0x08004289
 8004240:	080042b7 	.word	0x080042b7
 8004244:	0800439d 	.word	0x0800439d
 8004248:	0800439d 	.word	0x0800439d
 800424c:	08004389 	.word	0x08004389
 8004250:	08004393 	.word	0x08004393
  {
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->dev.usr_device->GetDeviceDescriptor(pdev->cfg.speed, &len);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f8d3 35e8 	ldr.w	r3, [r3, #1512]	; 0x5e8
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	7891      	ldrb	r1, [r2, #2]
 8004260:	f107 020a 	add.w	r2, r7, #10
 8004264:	4608      	mov	r0, r1
 8004266:	4611      	mov	r1, r2
 8004268:	4798      	blx	r3
 800426a:	60f8      	str	r0, [r7, #12]
    if ((req->wLength == 64) ||( pdev->dev.device_status == USB_OTG_DEFAULT))  
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	88db      	ldrh	r3, [r3, #6]
 8004270:	2b40      	cmp	r3, #64	; 0x40
 8004272:	d005      	beq.n	8004280 <USBD_GetDescriptor+0x6c>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 800427a:	2b01      	cmp	r3, #1
 800427c:	f040 8093 	bne.w	80043a6 <USBD_GetDescriptor+0x192>
    {                  
      len = 8;
 8004280:	f04f 0308 	mov.w	r3, #8
 8004284:	817b      	strh	r3, [r7, #10]
    }
    break;
 8004286:	e08f      	b.n	80043a8 <USBD_GetDescriptor+0x194>
    
  case USB_DESC_TYPE_CONFIGURATION:
      pbuf   = (uint8_t *)pdev->dev.class_cb->GetConfigDescriptor(pdev->cfg.speed, &len);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 800428e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	7891      	ldrb	r1, [r2, #2]
 8004294:	f107 020a 	add.w	r2, r7, #10
 8004298:	4608      	mov	r0, r1
 800429a:	4611      	mov	r1, r2
 800429c:	4798      	blx	r3
 800429e:	60f8      	str	r0, [r7, #12]
       (pdev->cfg.phy_itface  == USB_OTG_ULPI_PHY))
    {
      pbuf   = (uint8_t *)pdev->dev.class_cb->GetOtherConfigDescriptor(pdev->cfg.speed, &len);
    }
#endif  
    pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f103 0301 	add.w	r3, r3, #1
 80042a6:	f04f 0202 	mov.w	r2, #2
 80042aa:	701a      	strb	r2, [r3, #0]
    pdev->dev.pConfig_descriptor = pbuf;    
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	68fa      	ldr	r2, [r7, #12]
 80042b0:	f8c3 25ec 	str.w	r2, [r3, #1516]	; 0x5ec
    break;
 80042b4:	e078      	b.n	80043a8 <USBD_GetDescriptor+0x194>
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	885b      	ldrh	r3, [r3, #2]
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	2b05      	cmp	r3, #5
 80042be:	d85d      	bhi.n	800437c <USBD_GetDescriptor+0x168>
 80042c0:	a201      	add	r2, pc, #4	; (adr r2, 80042c8 <USBD_GetDescriptor+0xb4>)
 80042c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042c6:	bf00      	nop
 80042c8:	080042e1 	.word	0x080042e1
 80042cc:	080042fb 	.word	0x080042fb
 80042d0:	08004315 	.word	0x08004315
 80042d4:	0800432f 	.word	0x0800432f
 80042d8:	08004349 	.word	0x08004349
 80042dc:	08004363 	.word	0x08004363
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->dev.usr_device->GetLangIDStrDescriptor(pdev->cfg.speed, &len);        
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f8d3 35e8 	ldr.w	r3, [r3, #1512]	; 0x5e8
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	7891      	ldrb	r1, [r2, #2]
 80042ec:	f107 020a 	add.w	r2, r7, #10
 80042f0:	4608      	mov	r0, r1
 80042f2:	4611      	mov	r1, r2
 80042f4:	4798      	blx	r3
 80042f6:	60f8      	str	r0, [r7, #12]
      break;
 80042f8:	e045      	b.n	8004386 <USBD_GetDescriptor+0x172>
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->dev.usr_device->GetManufacturerStrDescriptor(pdev->cfg.speed, &len);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f8d3 35e8 	ldr.w	r3, [r3, #1512]	; 0x5e8
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	7891      	ldrb	r1, [r2, #2]
 8004306:	f107 020a 	add.w	r2, r7, #10
 800430a:	4608      	mov	r0, r1
 800430c:	4611      	mov	r1, r2
 800430e:	4798      	blx	r3
 8004310:	60f8      	str	r0, [r7, #12]
      break;
 8004312:	e038      	b.n	8004386 <USBD_GetDescriptor+0x172>
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->dev.usr_device->GetProductStrDescriptor(pdev->cfg.speed, &len);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f8d3 35e8 	ldr.w	r3, [r3, #1512]	; 0x5e8
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	7891      	ldrb	r1, [r2, #2]
 8004320:	f107 020a 	add.w	r2, r7, #10
 8004324:	4608      	mov	r0, r1
 8004326:	4611      	mov	r1, r2
 8004328:	4798      	blx	r3
 800432a:	60f8      	str	r0, [r7, #12]
      break;
 800432c:	e02b      	b.n	8004386 <USBD_GetDescriptor+0x172>
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->dev.usr_device->GetSerialStrDescriptor(pdev->cfg.speed, &len);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f8d3 35e8 	ldr.w	r3, [r3, #1512]	; 0x5e8
 8004334:	691b      	ldr	r3, [r3, #16]
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	7891      	ldrb	r1, [r2, #2]
 800433a:	f107 020a 	add.w	r2, r7, #10
 800433e:	4608      	mov	r0, r1
 8004340:	4611      	mov	r1, r2
 8004342:	4798      	blx	r3
 8004344:	60f8      	str	r0, [r7, #12]
      break;
 8004346:	e01e      	b.n	8004386 <USBD_GetDescriptor+0x172>
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->dev.usr_device->GetConfigurationStrDescriptor(pdev->cfg.speed, &len);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f8d3 35e8 	ldr.w	r3, [r3, #1512]	; 0x5e8
 800434e:	695b      	ldr	r3, [r3, #20]
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	7891      	ldrb	r1, [r2, #2]
 8004354:	f107 020a 	add.w	r2, r7, #10
 8004358:	4608      	mov	r0, r1
 800435a:	4611      	mov	r1, r2
 800435c:	4798      	blx	r3
 800435e:	60f8      	str	r0, [r7, #12]
      break;
 8004360:	e011      	b.n	8004386 <USBD_GetDescriptor+0x172>
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->dev.usr_device->GetInterfaceStrDescriptor(pdev->cfg.speed, &len);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f8d3 35e8 	ldr.w	r3, [r3, #1512]	; 0x5e8
 8004368:	699b      	ldr	r3, [r3, #24]
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	7891      	ldrb	r1, [r2, #2]
 800436e:	f107 020a 	add.w	r2, r7, #10
 8004372:	4608      	mov	r0, r1
 8004374:	4611      	mov	r1, r2
 8004376:	4798      	blx	r3
 8004378:	60f8      	str	r0, [r7, #12]
      break;
 800437a:	e004      	b.n	8004386 <USBD_GetDescriptor+0x172>
    default:
#ifdef USB_SUPPORT_USER_STRING_DESC
      pbuf = pdev->dev.class_cb->GetUsrStrDescriptor(pdev->cfg.speed, (req->wValue) , &len);
      break;
#else      
       USBD_CtlError(pdev , req);
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	6839      	ldr	r1, [r7, #0]
 8004380:	f000 fa44 	bl	800480c <USBD_CtlError>
      return;
 8004384:	e025      	b.n	80043d2 <USBD_GetDescriptor+0x1be>
#endif /* USBD_CtlError(pdev , req); */      
    }
    break;
 8004386:	e00f      	b.n	80043a8 <USBD_GetDescriptor+0x194>
    {
      USBD_CtlError(pdev , req);
      return;
    }
#else
      USBD_CtlError(pdev , req);
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	6839      	ldr	r1, [r7, #0]
 800438c:	f000 fa3e 	bl	800480c <USBD_CtlError>
      return;
 8004390:	e01f      	b.n	80043d2 <USBD_GetDescriptor+0x1be>
    {
      USBD_CtlError(pdev , req);
      return;
    }
#else
      USBD_CtlError(pdev , req);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	6839      	ldr	r1, [r7, #0]
 8004396:	f000 fa39 	bl	800480c <USBD_CtlError>
      return;
 800439a:	e01a      	b.n	80043d2 <USBD_GetDescriptor+0x1be>
#endif     

    
  default: 
     USBD_CtlError(pdev , req);
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	6839      	ldr	r1, [r7, #0]
 80043a0:	f000 fa34 	bl	800480c <USBD_CtlError>
    return;
 80043a4:	e015      	b.n	80043d2 <USBD_GetDescriptor+0x1be>
    pbuf = pdev->dev.usr_device->GetDeviceDescriptor(pdev->cfg.speed, &len);
    if ((req->wLength == 64) ||( pdev->dev.device_status == USB_OTG_DEFAULT))  
    {                  
      len = 8;
    }
    break;
 80043a6:	bf00      	nop
  default: 
     USBD_CtlError(pdev , req);
    return;
  }
  
  if((len != 0)&& (req->wLength != 0))
 80043a8:	897b      	ldrh	r3, [r7, #10]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d011      	beq.n	80043d2 <USBD_GetDescriptor+0x1be>
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	88db      	ldrh	r3, [r3, #6]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d00d      	beq.n	80043d2 <USBD_GetDescriptor+0x1be>
  {
    
    len = MIN(len , req->wLength);
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	88da      	ldrh	r2, [r3, #6]
 80043ba:	897b      	ldrh	r3, [r7, #10]
 80043bc:	429a      	cmp	r2, r3
 80043be:	bf38      	it	cc
 80043c0:	4613      	movcc	r3, r2
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	817b      	strh	r3, [r7, #10]
    
    USBD_CtlSendData (pdev, 
 80043c6:	897b      	ldrh	r3, [r7, #10]
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	68f9      	ldr	r1, [r7, #12]
 80043cc:	461a      	mov	r2, r3
 80043ce:	f7ff fd03 	bl	8003dd8 <USBD_CtlSendData>
                      pbuf,
                      len);
  }
  
}
 80043d2:	f107 0710 	add.w	r7, r7, #16
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop

080043dc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USB_OTG_CORE_HANDLE  *pdev, 
                            USB_SETUP_REQ *req)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	889b      	ldrh	r3, [r3, #4]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d12e      	bne.n	800444c <USBD_SetAddress+0x70>
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	88db      	ldrh	r3, [r3, #6]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d12a      	bne.n	800444c <USBD_SetAddress+0x70>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	885b      	ldrh	r3, [r3, #2]
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004400:	73fb      	strb	r3, [r7, #15]
    
    if (pdev->dev.device_status == USB_OTG_CONFIGURED) 
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8004408:	2b03      	cmp	r3, #3
 800440a:	d104      	bne.n	8004416 <USBD_SetAddress+0x3a>
    {
      USBD_CtlError(pdev , req);
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	6839      	ldr	r1, [r7, #0]
 8004410:	f000 f9fc 	bl	800480c <USBD_CtlError>
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
    
    if (pdev->dev.device_status == USB_OTG_CONFIGURED) 
 8004414:	e01e      	b.n	8004454 <USBD_SetAddress+0x78>
    {
      USBD_CtlError(pdev , req);
    } 
    else 
    {
      pdev->dev.device_address = dev_addr;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	7bfa      	ldrb	r2, [r7, #15]
 800441a:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
      DCD_EP_SetAddress(pdev, dev_addr);               
 800441e:	7bfb      	ldrb	r3, [r7, #15]
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	4619      	mov	r1, r3
 8004424:	f7fe fcbc 	bl	8002da0 <DCD_EP_SetAddress>
      USBD_CtlSendStatus(pdev);                         
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f7ff fd4d 	bl	8003ec8 <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 800442e:	7bfb      	ldrb	r3, [r7, #15]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d005      	beq.n	8004440 <USBD_SetAddress+0x64>
      {
        pdev->dev.device_status  = USB_OTG_ADDRESSED;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f04f 0202 	mov.w	r2, #2
 800443a:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
    
    if (pdev->dev.device_status == USB_OTG_CONFIGURED) 
 800443e:	e009      	b.n	8004454 <USBD_SetAddress+0x78>
      {
        pdev->dev.device_status  = USB_OTG_ADDRESSED;
      } 
      else 
      {
        pdev->dev.device_status  = USB_OTG_DEFAULT; 
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f04f 0201 	mov.w	r2, #1
 8004446:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
    
    if (pdev->dev.device_status == USB_OTG_CONFIGURED) 
 800444a:	e003      	b.n	8004454 <USBD_SetAddress+0x78>
      }
    }
  } 
  else 
  {
     USBD_CtlError(pdev , req);                        
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	6839      	ldr	r1, [r7, #0]
 8004450:	f000 f9dc 	bl	800480c <USBD_CtlError>
  } 
}
 8004454:	f107 0710 	add.w	r7, r7, #16
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}

0800445c <USBD_SetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USB_OTG_CORE_HANDLE  *pdev, 
                           USB_SETUP_REQ *req)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b082      	sub	sp, #8
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6039      	str	r1, [r7, #0]
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	885b      	ldrh	r3, [r3, #2]
 800446a:	b2da      	uxtb	r2, r3
 800446c:	4b38      	ldr	r3, [pc, #224]	; (8004550 <USBD_SetConfig+0xf4>)
 800446e:	701a      	strb	r2, [r3, #0]
  
  if (cfgidx > USBD_CFG_MAX_NUM ) 
 8004470:	4b37      	ldr	r3, [pc, #220]	; (8004550 <USBD_SetConfig+0xf4>)
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	2b01      	cmp	r3, #1
 8004476:	d904      	bls.n	8004482 <USBD_SetConfig+0x26>
  {            
     USBD_CtlError(pdev , req);                              
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	6839      	ldr	r1, [r7, #0]
 800447c:	f000 f9c6 	bl	800480c <USBD_CtlError>
 8004480:	e061      	b.n	8004546 <USBD_SetConfig+0xea>
  } 
  else 
  {
    switch (pdev->dev.device_status) 
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8004488:	2b02      	cmp	r3, #2
 800448a:	d002      	beq.n	8004492 <USBD_SetConfig+0x36>
 800448c:	2b03      	cmp	r3, #3
 800448e:	d01c      	beq.n	80044ca <USBD_SetConfig+0x6e>
 8004490:	e054      	b.n	800453c <USBD_SetConfig+0xe0>
    {
    case USB_OTG_ADDRESSED:
      if (cfgidx) 
 8004492:	4b2f      	ldr	r3, [pc, #188]	; (8004550 <USBD_SetConfig+0xf4>)
 8004494:	781b      	ldrb	r3, [r3, #0]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d013      	beq.n	80044c2 <USBD_SetConfig+0x66>
      {                                			   							   							   				
        pdev->dev.device_config = cfgidx;
 800449a:	4b2d      	ldr	r3, [pc, #180]	; (8004550 <USBD_SetConfig+0xf4>)
 800449c:	781a      	ldrb	r2, [r3, #0]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        pdev->dev.device_status = USB_OTG_CONFIGURED;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f04f 0203 	mov.w	r2, #3
 80044aa:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        USBD_SetCfg(pdev , cfgidx);
 80044ae:	4b28      	ldr	r3, [pc, #160]	; (8004550 <USBD_SetConfig+0xf4>)
 80044b0:	781b      	ldrb	r3, [r3, #0]
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	4619      	mov	r1, r3
 80044b6:	f7ff fc3b 	bl	8003d30 <USBD_SetCfg>
        USBD_CtlSendStatus(pdev);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f7ff fd04 	bl	8003ec8 <USBD_CtlSendStatus>
      }
      else 
      {
         USBD_CtlSendStatus(pdev);
      }
      break;
 80044c0:	e041      	b.n	8004546 <USBD_SetConfig+0xea>
        USBD_SetCfg(pdev , cfgidx);
        USBD_CtlSendStatus(pdev);
      }
      else 
      {
         USBD_CtlSendStatus(pdev);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f7ff fd00 	bl	8003ec8 <USBD_CtlSendStatus>
      }
      break;
 80044c8:	e03d      	b.n	8004546 <USBD_SetConfig+0xea>
      
    case USB_OTG_CONFIGURED:
      if (cfgidx == 0) 
 80044ca:	4b21      	ldr	r3, [pc, #132]	; (8004550 <USBD_SetConfig+0xf4>)
 80044cc:	781b      	ldrb	r3, [r3, #0]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d113      	bne.n	80044fa <USBD_SetConfig+0x9e>
      {                           
        pdev->dev.device_status = USB_OTG_ADDRESSED;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f04f 0202 	mov.w	r2, #2
 80044d8:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        pdev->dev.device_config = cfgidx;          
 80044dc:	4b1c      	ldr	r3, [pc, #112]	; (8004550 <USBD_SetConfig+0xf4>)
 80044de:	781a      	ldrb	r2, [r3, #0]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        USBD_ClrCfg(pdev , cfgidx);
 80044e6:	4b1a      	ldr	r3, [pc, #104]	; (8004550 <USBD_SetConfig+0xf4>)
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	4619      	mov	r1, r3
 80044ee:	f7ff fc39 	bl	8003d64 <USBD_ClrCfg>
        USBD_CtlSendStatus(pdev);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f7ff fce8 	bl	8003ec8 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80044f8:	e025      	b.n	8004546 <USBD_SetConfig+0xea>
        pdev->dev.device_config = cfgidx;          
        USBD_ClrCfg(pdev , cfgidx);
        USBD_CtlSendStatus(pdev);
        
      } 
      else  if (cfgidx != pdev->dev.device_config) 
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f893 2110 	ldrb.w	r2, [r3, #272]	; 0x110
 8004500:	4b13      	ldr	r3, [pc, #76]	; (8004550 <USBD_SetConfig+0xf4>)
 8004502:	781b      	ldrb	r3, [r3, #0]
 8004504:	429a      	cmp	r2, r3
 8004506:	d015      	beq.n	8004534 <USBD_SetConfig+0xd8>
      {
        /* Clear old configuration */
        USBD_ClrCfg(pdev , pdev->dev.device_config);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	4619      	mov	r1, r3
 8004512:	f7ff fc27 	bl	8003d64 <USBD_ClrCfg>
        
        /* set new configuration */
        pdev->dev.device_config = cfgidx;
 8004516:	4b0e      	ldr	r3, [pc, #56]	; (8004550 <USBD_SetConfig+0xf4>)
 8004518:	781a      	ldrb	r2, [r3, #0]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        USBD_SetCfg(pdev , cfgidx);
 8004520:	4b0b      	ldr	r3, [pc, #44]	; (8004550 <USBD_SetConfig+0xf4>)
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	4619      	mov	r1, r3
 8004528:	f7ff fc02 	bl	8003d30 <USBD_SetCfg>
        USBD_CtlSendStatus(pdev);
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f7ff fccb 	bl	8003ec8 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8004532:	e008      	b.n	8004546 <USBD_SetConfig+0xea>
        USBD_SetCfg(pdev , cfgidx);
        USBD_CtlSendStatus(pdev);
      }
      else
      {
        USBD_CtlSendStatus(pdev);
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f7ff fcc7 	bl	8003ec8 <USBD_CtlSendStatus>
      }
      break;
 800453a:	e004      	b.n	8004546 <USBD_SetConfig+0xea>
      
    default:					
       USBD_CtlError(pdev , req);                     
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	6839      	ldr	r1, [r7, #0]
 8004540:	f000 f964 	bl	800480c <USBD_CtlError>
      break;
 8004544:	bf00      	nop
    }
  }
}
 8004546:	f107 0708 	add.w	r7, r7, #8
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
 800454e:	bf00      	nop
 8004550:	20000128 	.word	0x20000128

08004554 <USBD_GetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USB_OTG_CORE_HANDLE  *pdev, 
                           USB_SETUP_REQ *req)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b082      	sub	sp, #8
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	6039      	str	r1, [r7, #0]
 
  if (req->wLength != 1) 
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	88db      	ldrh	r3, [r3, #6]
 8004562:	2b01      	cmp	r3, #1
 8004564:	d004      	beq.n	8004570 <USBD_GetConfig+0x1c>
  {                   
     USBD_CtlError(pdev , req);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	6839      	ldr	r1, [r7, #0]
 800456a:	f000 f94f 	bl	800480c <USBD_CtlError>
 800456e:	e01e      	b.n	80045ae <USBD_GetConfig+0x5a>
  }
  else 
  {
    switch (pdev->dev.device_status )  
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8004576:	2b02      	cmp	r3, #2
 8004578:	d002      	beq.n	8004580 <USBD_GetConfig+0x2c>
 800457a:	2b03      	cmp	r3, #3
 800457c:	d008      	beq.n	8004590 <USBD_GetConfig+0x3c>
 800457e:	e011      	b.n	80045a4 <USBD_GetConfig+0x50>
    {
    case USB_OTG_ADDRESSED:                     
      
      USBD_CtlSendData (pdev, 
 8004580:	4b0d      	ldr	r3, [pc, #52]	; (80045b8 <USBD_GetConfig+0x64>)
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	4619      	mov	r1, r3
 8004586:	f04f 0201 	mov.w	r2, #1
 800458a:	f7ff fc25 	bl	8003dd8 <USBD_CtlSendData>
                        (uint8_t *)&USBD_default_cfg,
                        1);
      break;
 800458e:	e00e      	b.n	80045ae <USBD_GetConfig+0x5a>
      
    case USB_OTG_CONFIGURED:                   
      
      USBD_CtlSendData (pdev, 
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	4619      	mov	r1, r3
 800459a:	f04f 0201 	mov.w	r2, #1
 800459e:	f7ff fc1b 	bl	8003dd8 <USBD_CtlSendData>
                        &pdev->dev.device_config,
                        1);
      break;
 80045a2:	e004      	b.n	80045ae <USBD_GetConfig+0x5a>
      
    default:
       USBD_CtlError(pdev , req);
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	6839      	ldr	r1, [r7, #0]
 80045a8:	f000 f930 	bl	800480c <USBD_CtlError>
      break;
 80045ac:	bf00      	nop
    }
  }
}
 80045ae:	f107 0708 	add.w	r7, r7, #8
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}
 80045b6:	bf00      	nop
 80045b8:	20000120 	.word	0x20000120

080045bc <USBD_GetStatus>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USB_OTG_CORE_HANDLE  *pdev, 
                           USB_SETUP_REQ *req)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b082      	sub	sp, #8
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	6039      	str	r1, [r7, #0]
  
  switch (pdev->dev.device_status) 
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 80045cc:	f1a3 0302 	sub.w	r3, r3, #2
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d815      	bhi.n	8004600 <USBD_GetStatus+0x44>
  {
  case USB_OTG_ADDRESSED:
  case USB_OTG_CONFIGURED:
    
    if (pdev->dev.DevRemoteWakeup) 
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d004      	beq.n	80045e8 <USBD_GetStatus+0x2c>
    {
      USBD_cfg_status = USB_CONFIG_SELF_POWERED | USB_CONFIG_REMOTE_WAKEUP;                                
 80045de:	4b0d      	ldr	r3, [pc, #52]	; (8004614 <USBD_GetStatus+0x58>)
 80045e0:	f04f 0203 	mov.w	r2, #3
 80045e4:	601a      	str	r2, [r3, #0]
 80045e6:	e003      	b.n	80045f0 <USBD_GetStatus+0x34>
    }
    else
    {
      USBD_cfg_status = USB_CONFIG_SELF_POWERED;   
 80045e8:	4b0a      	ldr	r3, [pc, #40]	; (8004614 <USBD_GetStatus+0x58>)
 80045ea:	f04f 0201 	mov.w	r2, #1
 80045ee:	601a      	str	r2, [r3, #0]
    }
    
    USBD_CtlSendData (pdev, 
 80045f0:	4b08      	ldr	r3, [pc, #32]	; (8004614 <USBD_GetStatus+0x58>)
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	4619      	mov	r1, r3
 80045f6:	f04f 0201 	mov.w	r2, #1
 80045fa:	f7ff fbed 	bl	8003dd8 <USBD_CtlSendData>
                      (uint8_t *)&USBD_cfg_status,
                      1);
    break;
 80045fe:	e004      	b.n	800460a <USBD_GetStatus+0x4e>
    
  default :
    USBD_CtlError(pdev , req);                        
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	6839      	ldr	r1, [r7, #0]
 8004604:	f000 f902 	bl	800480c <USBD_CtlError>
    break;
 8004608:	bf00      	nop
  }
}
 800460a:	f107 0708 	add.w	r7, r7, #8
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	20000124 	.word	0x20000124

08004618 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USB_OTG_CORE_HANDLE  *pdev, 
                            USB_SETUP_REQ *req)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b084      	sub	sp, #16
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	6039      	str	r1, [r7, #0]

  USB_OTG_DCTL_TypeDef     dctl;
  uint8_t test_mode = 0;
 8004622:	f04f 0300 	mov.w	r3, #0
 8004626:	73fb      	strb	r3, [r7, #15]
 
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	885b      	ldrh	r3, [r3, #2]
 800462c:	2b01      	cmp	r3, #1
 800462e:	d10f      	bne.n	8004650 <USBD_SetFeature+0x38>
  {
    pdev->dev.DevRemoteWakeup = 1;  
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f04f 0201 	mov.w	r2, #1
 8004636:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    pdev->dev.class_cb->Setup (pdev, req);   
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	6839      	ldr	r1, [r7, #0]
 8004646:	4798      	blx	r3
    USBD_CtlSendStatus(pdev);
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f7ff fc3d 	bl	8003ec8 <USBD_CtlSendStatus>
 800464e:	e04f      	b.n	80046f0 <USBD_SetFeature+0xd8>
  }

  else if ((req->wValue == USB_FEATURE_TEST_MODE) && 
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	885b      	ldrh	r3, [r3, #2]
 8004654:	2b02      	cmp	r3, #2
 8004656:	d14b      	bne.n	80046f0 <USBD_SetFeature+0xd8>
           ((req->wIndex & 0xFF) == 0))
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	889b      	ldrh	r3, [r3, #4]
 800465c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    pdev->dev.DevRemoteWakeup = 1;  
    pdev->dev.class_cb->Setup (pdev, req);   
    USBD_CtlSendStatus(pdev);
  }

  else if ((req->wValue == USB_FEATURE_TEST_MODE) && 
 8004660:	2b00      	cmp	r3, #0
 8004662:	d145      	bne.n	80046f0 <USBD_SetFeature+0xd8>
           ((req->wIndex & 0xFF) == 0))
  {
    dctl.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DCTL);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	691b      	ldr	r3, [r3, #16]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	60bb      	str	r3, [r7, #8]
    
    test_mode = req->wIndex >> 8;
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	889b      	ldrh	r3, [r3, #4]
 8004670:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8004674:	b29b      	uxth	r3, r3
 8004676:	73fb      	strb	r3, [r7, #15]
    switch (test_mode) 
 8004678:	7bfb      	ldrb	r3, [r7, #15]
 800467a:	f103 33ff 	add.w	r3, r3, #4294967295
 800467e:	2b04      	cmp	r3, #4
 8004680:	d82f      	bhi.n	80046e2 <USBD_SetFeature+0xca>
 8004682:	a201      	add	r2, pc, #4	; (adr r2, 8004688 <USBD_SetFeature+0x70>)
 8004684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004688:	0800469d 	.word	0x0800469d
 800468c:	080046ab 	.word	0x080046ab
 8004690:	080046b9 	.word	0x080046b9
 8004694:	080046c7 	.word	0x080046c7
 8004698:	080046d5 	.word	0x080046d5
    {
    case 1: // TEST_J
      dctl.b.tstctl = 1;
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	f04f 0201 	mov.w	r2, #1
 80046a2:	f362 1306 	bfi	r3, r2, #4, #3
 80046a6:	60bb      	str	r3, [r7, #8]
      break;
 80046a8:	e01b      	b.n	80046e2 <USBD_SetFeature+0xca>
      
    case 2: // TEST_K	
      dctl.b.tstctl = 2;
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	f04f 0202 	mov.w	r2, #2
 80046b0:	f362 1306 	bfi	r3, r2, #4, #3
 80046b4:	60bb      	str	r3, [r7, #8]
      break;
 80046b6:	e014      	b.n	80046e2 <USBD_SetFeature+0xca>
      
    case 3: // TEST_SE0_NAK
      dctl.b.tstctl = 3;
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	f04f 0203 	mov.w	r2, #3
 80046be:	f362 1306 	bfi	r3, r2, #4, #3
 80046c2:	60bb      	str	r3, [r7, #8]
      break;
 80046c4:	e00d      	b.n	80046e2 <USBD_SetFeature+0xca>
      
    case 4: // TEST_PACKET
      dctl.b.tstctl = 4;
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	f04f 0204 	mov.w	r2, #4
 80046cc:	f362 1306 	bfi	r3, r2, #4, #3
 80046d0:	60bb      	str	r3, [r7, #8]
      break;
 80046d2:	e006      	b.n	80046e2 <USBD_SetFeature+0xca>
      
    case 5: // TEST_FORCE_ENABLE
      dctl.b.tstctl = 5;
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	f04f 0205 	mov.w	r2, #5
 80046da:	f362 1306 	bfi	r3, r2, #4, #3
 80046de:	60bb      	str	r3, [r7, #8]
      break;
 80046e0:	bf00      	nop
    }
    USB_OTG_WRITE_REG32(&pdev->regs.DREGS->DCTL, dctl.d32);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	691b      	ldr	r3, [r3, #16]
 80046e6:	68ba      	ldr	r2, [r7, #8]
 80046e8:	605a      	str	r2, [r3, #4]
    USBD_CtlSendStatus(pdev);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f7ff fbec 	bl	8003ec8 <USBD_CtlSendStatus>
  }

}
 80046f0:	f107 0710 	add.w	r7, r7, #16
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}

080046f8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USB_OTG_CORE_HANDLE  *pdev, 
                            USB_SETUP_REQ *req)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b082      	sub	sp, #8
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	6039      	str	r1, [r7, #0]
  switch (pdev->dev.device_status)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8004708:	f1a3 0302 	sub.w	r3, r3, #2
 800470c:	2b01      	cmp	r3, #1
 800470e:	d813      	bhi.n	8004738 <USBD_ClrFeature+0x40>
  {
  case USB_OTG_ADDRESSED:
  case USB_OTG_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	885b      	ldrh	r3, [r3, #2]
 8004714:	2b01      	cmp	r3, #1
 8004716:	d115      	bne.n	8004744 <USBD_ClrFeature+0x4c>
    {
      pdev->dev.DevRemoteWakeup = 0; 
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f04f 0200 	mov.w	r2, #0
 800471e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
      pdev->dev.class_cb->Setup (pdev, req);   
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	6839      	ldr	r1, [r7, #0]
 800472e:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f7ff fbc9 	bl	8003ec8 <USBD_CtlSendStatus>
    }
    break;
 8004736:	e006      	b.n	8004746 <USBD_ClrFeature+0x4e>
    
  default :
     USBD_CtlError(pdev , req);
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	6839      	ldr	r1, [r7, #0]
 800473c:	f000 f866 	bl	800480c <USBD_CtlError>
    break;
 8004740:	bf00      	nop
 8004742:	e000      	b.n	8004746 <USBD_ClrFeature+0x4e>
    {
      pdev->dev.DevRemoteWakeup = 0; 
      pdev->dev.class_cb->Setup (pdev, req);   
      USBD_CtlSendStatus(pdev);
    }
    break;
 8004744:	bf00      	nop
    
  default :
     USBD_CtlError(pdev , req);
    break;
  }
}
 8004746:	f107 0708 	add.w	r7, r7, #8
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
 800474e:	bf00      	nop

08004750 <USBD_ParseSetupRequest>:
* @retval None
*/

void USBD_ParseSetupRequest( USB_OTG_CORE_HANDLE  *pdev,
                            USB_SETUP_REQ *req)
{
 8004750:	b480      	push	{r7}
 8004752:	b083      	sub	sp, #12
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdev->dev.setup_packet);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f893 25c8 	ldrb.w	r2, [r3, #1480]	; 0x5c8
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdev->dev.setup_packet +  1);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f503 63b8 	add.w	r3, r3, #1472	; 0x5c0
 800476a:	f103 0309 	add.w	r3, r3, #9
 800476e:	781a      	ldrb	r2, [r3, #0]
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdev->dev.setup_packet +  2);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f503 63b8 	add.w	r3, r3, #1472	; 0x5c0
 800477a:	f103 030a 	add.w	r3, r3, #10
 800477e:	781b      	ldrb	r3, [r3, #0]
 8004780:	461a      	mov	r2, r3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f503 63b8 	add.w	r3, r3, #1472	; 0x5c0
 8004788:	f103 030b 	add.w	r3, r3, #11
 800478c:	781b      	ldrb	r3, [r3, #0]
 800478e:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8004792:	b29b      	uxth	r3, r3
 8004794:	18d3      	adds	r3, r2, r3
 8004796:	b29a      	uxth	r2, r3
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdev->dev.setup_packet +  4);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	f503 63b8 	add.w	r3, r3, #1472	; 0x5c0
 80047a2:	f103 030c 	add.w	r3, r3, #12
 80047a6:	781b      	ldrb	r3, [r3, #0]
 80047a8:	461a      	mov	r2, r3
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f503 63b8 	add.w	r3, r3, #1472	; 0x5c0
 80047b0:	f103 030d 	add.w	r3, r3, #13
 80047b4:	781b      	ldrb	r3, [r3, #0]
 80047b6:	ea4f 2303 	mov.w	r3, r3, lsl #8
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	18d3      	adds	r3, r2, r3
 80047be:	b29a      	uxth	r2, r3
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdev->dev.setup_packet +  6);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f503 63b8 	add.w	r3, r3, #1472	; 0x5c0
 80047ca:	f103 030e 	add.w	r3, r3, #14
 80047ce:	781b      	ldrb	r3, [r3, #0]
 80047d0:	461a      	mov	r2, r3
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f503 63b8 	add.w	r3, r3, #1472	; 0x5c0
 80047d8:	f103 030f 	add.w	r3, r3, #15
 80047dc:	781b      	ldrb	r3, [r3, #0]
 80047de:	ea4f 2303 	mov.w	r3, r3, lsl #8
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	18d3      	adds	r3, r2, r3
 80047e6:	b29a      	uxth	r2, r3
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	80da      	strh	r2, [r3, #6]
  
  pdev->dev.in_ep[0].ctl_data_len = req->wLength  ;
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	88db      	ldrh	r3, [r3, #6]
 80047f0:	461a      	mov	r2, r3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
  pdev->dev.device_state = USB_OTG_EP0_SETUP;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f04f 0201 	mov.w	r2, #1
 80047fe:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
}
 8004802:	f107 070c 	add.w	r7, r7, #12
 8004806:	46bd      	mov	sp, r7
 8004808:	bc80      	pop	{r7}
 800480a:	4770      	bx	lr

0800480c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USB_OTG_CORE_HANDLE  *pdev,
                            USB_SETUP_REQ *req)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b082      	sub	sp, #8
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	6039      	str	r1, [r7, #0]
  if((req->bmRequest & 0x80) == 0x80)
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	781b      	ldrb	r3, [r3, #0]
 800481a:	b2db      	uxtb	r3, r3
 800481c:	b25b      	sxtb	r3, r3
 800481e:	2b00      	cmp	r3, #0
 8004820:	da05      	bge.n	800482e <USBD_CtlError+0x22>
  {
    DCD_EP_Stall(pdev , 0x80);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f04f 0180 	mov.w	r1, #128	; 0x80
 8004828:	f7fe fa3a 	bl	8002ca0 <DCD_EP_Stall>
 800482c:	e00e      	b.n	800484c <USBD_CtlError+0x40>
  }
  else 
  {
    if(req->wLength == 0)
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	88db      	ldrh	r3, [r3, #6]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d105      	bne.n	8004842 <USBD_CtlError+0x36>
    {
       DCD_EP_Stall(pdev , 0x80);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f04f 0180 	mov.w	r1, #128	; 0x80
 800483c:	f7fe fa30 	bl	8002ca0 <DCD_EP_Stall>
 8004840:	e004      	b.n	800484c <USBD_CtlError+0x40>
    }
    else
    {
      DCD_EP_Stall(pdev , 0);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f04f 0100 	mov.w	r1, #0
 8004848:	f7fe fa2a 	bl	8002ca0 <DCD_EP_Stall>
    }
  }
  USB_OTG_EP0_OutStart(pdev);  
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f7fe f80f 	bl	8002870 <USB_OTG_EP0_OutStart>
}
 8004852:	f107 0708 	add.w	r7, r7, #8
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
 800485a:	bf00      	nop

0800485c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b086      	sub	sp, #24
 8004860:	af00      	add	r7, sp, #0
 8004862:	60f8      	str	r0, [r7, #12]
 8004864:	60b9      	str	r1, [r7, #8]
 8004866:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0;
 8004868:	f04f 0300 	mov.w	r3, #0
 800486c:	75fb      	strb	r3, [r7, #23]
  
  if (desc != NULL) 
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d03d      	beq.n	80048f0 <USBD_GetString+0x94>
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8004874:	68f8      	ldr	r0, [r7, #12]
 8004876:	f000 f83f 	bl	80048f8 <USBD_GetLen>
 800487a:	4603      	mov	r3, r0
 800487c:	f103 0301 	add.w	r3, r3, #1
 8004880:	b29b      	uxth	r3, r3
 8004882:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004886:	b29a      	uxth	r2, r3
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *len;
 800488c:	7dfb      	ldrb	r3, [r7, #23]
 800488e:	68ba      	ldr	r2, [r7, #8]
 8004890:	18d3      	adds	r3, r2, r3
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	8812      	ldrh	r2, [r2, #0]
 8004896:	b2d2      	uxtb	r2, r2
 8004898:	701a      	strb	r2, [r3, #0]
 800489a:	7dfb      	ldrb	r3, [r7, #23]
 800489c:	f103 0301 	add.w	r3, r3, #1
 80048a0:	75fb      	strb	r3, [r7, #23]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 80048a2:	7dfb      	ldrb	r3, [r7, #23]
 80048a4:	68ba      	ldr	r2, [r7, #8]
 80048a6:	18d3      	adds	r3, r2, r3
 80048a8:	f04f 0203 	mov.w	r2, #3
 80048ac:	701a      	strb	r2, [r3, #0]
 80048ae:	7dfb      	ldrb	r3, [r7, #23]
 80048b0:	f103 0301 	add.w	r3, r3, #1
 80048b4:	75fb      	strb	r3, [r7, #23]
    
    while (*desc != NULL) 
 80048b6:	e017      	b.n	80048e8 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 80048b8:	7dfb      	ldrb	r3, [r7, #23]
 80048ba:	68ba      	ldr	r2, [r7, #8]
 80048bc:	18d3      	adds	r3, r2, r3
 80048be:	68fa      	ldr	r2, [r7, #12]
 80048c0:	7812      	ldrb	r2, [r2, #0]
 80048c2:	701a      	strb	r2, [r3, #0]
 80048c4:	7dfb      	ldrb	r3, [r7, #23]
 80048c6:	f103 0301 	add.w	r3, r3, #1
 80048ca:	75fb      	strb	r3, [r7, #23]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f103 0301 	add.w	r3, r3, #1
 80048d2:	60fb      	str	r3, [r7, #12]
      unicode[idx++] =  0x00;
 80048d4:	7dfb      	ldrb	r3, [r7, #23]
 80048d6:	68ba      	ldr	r2, [r7, #8]
 80048d8:	18d3      	adds	r3, r2, r3
 80048da:	f04f 0200 	mov.w	r2, #0
 80048de:	701a      	strb	r2, [r3, #0]
 80048e0:	7dfb      	ldrb	r3, [r7, #23]
 80048e2:	f103 0301 	add.w	r3, r3, #1
 80048e6:	75fb      	strb	r3, [r7, #23]
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
    unicode[idx++] = *len;
    unicode[idx++] =  USB_DESC_TYPE_STRING;
    
    while (*desc != NULL) 
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d1e3      	bne.n	80048b8 <USBD_GetString+0x5c>
    {
      unicode[idx++] = *desc++;
      unicode[idx++] =  0x00;
    }
  } 
}
 80048f0:	f107 0718 	add.w	r7, r7, #24
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}

080048f8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b085      	sub	sp, #20
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0;
 8004900:	f04f 0300 	mov.w	r3, #0
 8004904:	73fb      	strb	r3, [r7, #15]

    while (*buf != NULL) 
 8004906:	e007      	b.n	8004918 <USBD_GetLen+0x20>
    {
        len++;
 8004908:	7bfb      	ldrb	r3, [r7, #15]
 800490a:	f103 0301 	add.w	r3, r3, #1
 800490e:	73fb      	strb	r3, [r7, #15]
        buf++;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f103 0301 	add.w	r3, r3, #1
 8004916:	607b      	str	r3, [r7, #4]
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != NULL) 
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	781b      	ldrb	r3, [r3, #0]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d1f3      	bne.n	8004908 <USBD_GetLen+0x10>
    {
        len++;
        buf++;
    }

    return len;
 8004920:	7bfb      	ldrb	r3, [r7, #15]
}
 8004922:	4618      	mov	r0, r3
 8004924:	f107 0714 	add.w	r7, r7, #20
 8004928:	46bd      	mov	sp, r7
 800492a:	bc80      	pop	{r7}
 800492c:	4770      	bx	lr
 800492e:	bf00      	nop

08004930 <usbd_cdc_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  usbd_cdc_Init (void  *pdev, 
                               uint8_t cfgidx)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b084      	sub	sp, #16
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	460b      	mov	r3, r1
 800493a:	70fb      	strb	r3, [r7, #3]
  uint8_t *pbuf;

  /* Open EP IN */
  DCD_EP_Open(pdev,
 800493c:	687a      	ldr	r2, [r7, #4]
              CDC_IN_EP,
              CDC_DATA_IN_PACKET_SIZE,
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	f8d3 35ec 	ldr.w	r3, [r3, #1516]	; 0x5ec
 8004944:	f103 0339 	add.w	r3, r3, #57	; 0x39
                               uint8_t cfgidx)
{
  uint8_t *pbuf;

  /* Open EP IN */
  DCD_EP_Open(pdev,
 8004948:	881b      	ldrh	r3, [r3, #0]
 800494a:	4610      	mov	r0, r2
 800494c:	f04f 0181 	mov.w	r1, #129	; 0x81
 8004950:	461a      	mov	r2, r3
 8004952:	f04f 0302 	mov.w	r3, #2
 8004956:	f7fe f887 	bl	8002a68 <DCD_EP_Open>
              CDC_IN_EP,
              CDC_DATA_IN_PACKET_SIZE,
              USB_OTG_EP_BULK);
  
  /* Open EP OUT */
  DCD_EP_Open(pdev,
 800495a:	687a      	ldr	r2, [r7, #4]
              CDC_OUT_EP,
              CDC_DATA_OUT_PACKET_SIZE,
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f8d3 35ec 	ldr.w	r3, [r3, #1516]	; 0x5ec
 8004962:	f103 0340 	add.w	r3, r3, #64	; 0x40
              CDC_IN_EP,
              CDC_DATA_IN_PACKET_SIZE,
              USB_OTG_EP_BULK);
  
  /* Open EP OUT */
  DCD_EP_Open(pdev,
 8004966:	881b      	ldrh	r3, [r3, #0]
 8004968:	4610      	mov	r0, r2
 800496a:	f04f 0101 	mov.w	r1, #1
 800496e:	461a      	mov	r2, r3
 8004970:	f04f 0302 	mov.w	r3, #2
 8004974:	f7fe f878 	bl	8002a68 <DCD_EP_Open>
              CDC_OUT_EP,
              CDC_DATA_OUT_PACKET_SIZE,
              USB_OTG_EP_BULK);
  
  /* Open Command IN EP */
  DCD_EP_Open(pdev,
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	4618      	mov	r0, r3
 800497c:	f04f 0182 	mov.w	r1, #130	; 0x82
 8004980:	f04f 0208 	mov.w	r2, #8
 8004984:	f04f 0303 	mov.w	r3, #3
 8004988:	f7fe f86e 	bl	8002a68 <DCD_EP_Open>
              CDC_CMD_EP,
              CDC_CMD_PACKET_SZE,
              USB_OTG_EP_INT);
  
  pbuf = (uint8_t *)USBD_DeviceDesc;
 800498c:	4b12      	ldr	r3, [pc, #72]	; (80049d8 <usbd_cdc_Init+0xa8>)
 800498e:	60fb      	str	r3, [r7, #12]
  pbuf[4] = DEVICE_CLASS_CDC;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f103 0304 	add.w	r3, r3, #4
 8004996:	f04f 0202 	mov.w	r2, #2
 800499a:	701a      	strb	r2, [r3, #0]
  pbuf[5] = DEVICE_SUBCLASS_CDC;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f103 0305 	add.w	r3, r3, #5
 80049a2:	f04f 0200 	mov.w	r2, #0
 80049a6:	701a      	strb	r2, [r3, #0]
  
  /* Initialize the Interface physical components */
  APP_FOPS.pIf_Init();
 80049a8:	4b0c      	ldr	r3, [pc, #48]	; (80049dc <usbd_cdc_Init+0xac>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4798      	blx	r3

  /* Prepare Out endpoint to receive next packet */
  DCD_EP_PrepareRx(pdev,
 80049ae:	687a      	ldr	r2, [r7, #4]
                   CDC_OUT_EP,
                   (uint8_t*)(USB_Rx_Buffer),
                   CDC_DATA_OUT_PACKET_SIZE);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f8d3 35ec 	ldr.w	r3, [r3, #1516]	; 0x5ec
 80049b6:	f103 0340 	add.w	r3, r3, #64	; 0x40
  
  /* Initialize the Interface physical components */
  APP_FOPS.pIf_Init();

  /* Prepare Out endpoint to receive next packet */
  DCD_EP_PrepareRx(pdev,
 80049ba:	881b      	ldrh	r3, [r3, #0]
 80049bc:	4610      	mov	r0, r2
 80049be:	f04f 0101 	mov.w	r1, #1
 80049c2:	4a07      	ldr	r2, [pc, #28]	; (80049e0 <usbd_cdc_Init+0xb0>)
 80049c4:	f7fe f8e4 	bl	8002b90 <DCD_EP_PrepareRx>
                   CDC_OUT_EP,
                   (uint8_t*)(USB_Rx_Buffer),
                   CDC_DATA_OUT_PACKET_SIZE);
  
  return USBD_OK;
 80049c8:	f04f 0300 	mov.w	r3, #0
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	f107 0710 	add.w	r7, r7, #16
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	20000034 	.word	0x20000034
 80049dc:	20000004 	.word	0x20000004
 80049e0:	20000fb8 	.word	0x20000fb8

080049e4 <usbd_cdc_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  usbd_cdc_DeInit (void  *pdev, 
                                 uint8_t cfgidx)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b082      	sub	sp, #8
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	460b      	mov	r3, r1
 80049ee:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  DCD_EP_Close(pdev,
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	4618      	mov	r0, r3
 80049f4:	f04f 0181 	mov.w	r1, #129	; 0x81
 80049f8:	f7fe f88c 	bl	8002b14 <DCD_EP_Close>
              CDC_IN_EP);
  
  /* Open EP OUT */
  DCD_EP_Close(pdev,
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	4618      	mov	r0, r3
 8004a00:	f04f 0101 	mov.w	r1, #1
 8004a04:	f7fe f886 	bl	8002b14 <DCD_EP_Close>
              CDC_OUT_EP);
  
  /* Open Command IN EP */
  DCD_EP_Close(pdev,
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f04f 0182 	mov.w	r1, #130	; 0x82
 8004a10:	f7fe f880 	bl	8002b14 <DCD_EP_Close>
              CDC_CMD_EP);

  /* Restore default state of the Interface physical components */
  APP_FOPS.pIf_DeInit();
 8004a14:	4b04      	ldr	r3, [pc, #16]	; (8004a28 <usbd_cdc_DeInit+0x44>)
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	4798      	blx	r3
  
  return USBD_OK;
 8004a1a:	f04f 0300 	mov.w	r3, #0
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f107 0708 	add.w	r7, r7, #8
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	20000004 	.word	0x20000004

08004a2c <usbd_cdc_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  usbd_cdc_Setup (void  *pdev, 
                                USB_SETUP_REQ *req)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b084      	sub	sp, #16
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t  *pbuf;
  
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	781b      	ldrb	r3, [r3, #0]
 8004a3a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d046      	beq.n	8004ad0 <usbd_cdc_Setup+0xa4>
 8004a42:	2b20      	cmp	r3, #32
 8004a44:	d13c      	bne.n	8004ac0 <usbd_cdc_Setup+0x94>
  {
    /* CDC Class Requests -------------------------------*/
  case USB_REQ_TYPE_CLASS :
      /* Check if the request is a data setup packet */
      if (req->wLength)
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	88db      	ldrh	r3, [r3, #6]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d02b      	beq.n	8004aa6 <usbd_cdc_Setup+0x7a>
      {
        /* Check if the request is Device-to-Host */
        if (req->bmRequest & 0x80)
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	781b      	ldrb	r3, [r3, #0]
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	b25b      	sxtb	r3, r3
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	da12      	bge.n	8004a80 <usbd_cdc_Setup+0x54>
        {
          /* Get the data to be sent to Host from interface layer */
          APP_FOPS.pIf_Ctrl(req->bRequest, CmdBuff, req->wLength);
 8004a5a:	4b3e      	ldr	r3, [pc, #248]	; (8004b54 <usbd_cdc_Setup+0x128>)
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	683a      	ldr	r2, [r7, #0]
 8004a60:	7852      	ldrb	r2, [r2, #1]
 8004a62:	4611      	mov	r1, r2
 8004a64:	683a      	ldr	r2, [r7, #0]
 8004a66:	88d2      	ldrh	r2, [r2, #6]
 8004a68:	4608      	mov	r0, r1
 8004a6a:	493b      	ldr	r1, [pc, #236]	; (8004b58 <usbd_cdc_Setup+0x12c>)
 8004a6c:	4798      	blx	r3
          
          /* Send the data to the host */
          USBD_CtlSendData (pdev, 
 8004a6e:	687a      	ldr	r2, [r7, #4]
                            CmdBuff,
                            req->wLength);          
 8004a70:	683b      	ldr	r3, [r7, #0]
        {
          /* Get the data to be sent to Host from interface layer */
          APP_FOPS.pIf_Ctrl(req->bRequest, CmdBuff, req->wLength);
          
          /* Send the data to the host */
          USBD_CtlSendData (pdev, 
 8004a72:	88db      	ldrh	r3, [r3, #6]
 8004a74:	4610      	mov	r0, r2
 8004a76:	4938      	ldr	r1, [pc, #224]	; (8004b58 <usbd_cdc_Setup+0x12c>)
 8004a78:	461a      	mov	r2, r3
 8004a7a:	f7ff f9ad 	bl	8003dd8 <USBD_CtlSendData>
 8004a7e:	e01c      	b.n	8004aba <usbd_cdc_Setup+0x8e>
                            req->wLength);          
        }
        else /* Host-to-Device requeset */
        {
          /* Set the value of the current command to be processed */
          cdcCmd = req->bRequest;
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	785b      	ldrb	r3, [r3, #1]
 8004a84:	461a      	mov	r2, r3
 8004a86:	4b35      	ldr	r3, [pc, #212]	; (8004b5c <usbd_cdc_Setup+0x130>)
 8004a88:	601a      	str	r2, [r3, #0]
          cdcLen = req->wLength;
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	88db      	ldrh	r3, [r3, #6]
 8004a8e:	461a      	mov	r2, r3
 8004a90:	4b33      	ldr	r3, [pc, #204]	; (8004b60 <usbd_cdc_Setup+0x134>)
 8004a92:	601a      	str	r2, [r3, #0]
          
          /* Prepare the reception of the buffer over EP0
          Next step: the received data will be managed in usbd_cdc_EP0_TxSent() 
          function. */
          USBD_CtlPrepareRx (pdev,
 8004a94:	687a      	ldr	r2, [r7, #4]
                             CmdBuff,
                             req->wLength);          
 8004a96:	683b      	ldr	r3, [r7, #0]
          cdcLen = req->wLength;
          
          /* Prepare the reception of the buffer over EP0
          Next step: the received data will be managed in usbd_cdc_EP0_TxSent() 
          function. */
          USBD_CtlPrepareRx (pdev,
 8004a98:	88db      	ldrh	r3, [r3, #6]
 8004a9a:	4610      	mov	r0, r2
 8004a9c:	492e      	ldr	r1, [pc, #184]	; (8004b58 <usbd_cdc_Setup+0x12c>)
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	f7ff f9d6 	bl	8003e50 <USBD_CtlPrepareRx>
 8004aa4:	e009      	b.n	8004aba <usbd_cdc_Setup+0x8e>
        }
      }
      else /* No Data request */
      {
        /* Transfer the command to the interface layer */
        APP_FOPS.pIf_Ctrl(req->bRequest, NULL, 0);
 8004aa6:	4b2b      	ldr	r3, [pc, #172]	; (8004b54 <usbd_cdc_Setup+0x128>)
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	683a      	ldr	r2, [r7, #0]
 8004aac:	7852      	ldrb	r2, [r2, #1]
 8004aae:	4610      	mov	r0, r2
 8004ab0:	f04f 0100 	mov.w	r1, #0
 8004ab4:	f04f 0200 	mov.w	r2, #0
 8004ab8:	4798      	blx	r3
      }
      
      return USBD_OK;
 8004aba:	f04f 0300 	mov.w	r3, #0
 8004abe:	e043      	b.n	8004b48 <usbd_cdc_Setup+0x11c>
      
    default:
      USBD_CtlError (pdev, req);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	6839      	ldr	r1, [r7, #0]
 8004ac6:	f7ff fea1 	bl	800480c <USBD_CtlError>
      return USBD_FAIL;
 8004aca:	f04f 0302 	mov.w	r3, #2
 8004ace:	e03b      	b.n	8004b48 <usbd_cdc_Setup+0x11c>
    
      
      
    /* Standard Requests -------------------------------*/
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	785b      	ldrb	r3, [r3, #1]
 8004ad4:	2b0a      	cmp	r3, #10
 8004ad6:	d01a      	beq.n	8004b0e <usbd_cdc_Setup+0xe2>
 8004ad8:	2b0b      	cmp	r3, #11
 8004ada:	d021      	beq.n	8004b20 <usbd_cdc_Setup+0xf4>
 8004adc:	2b06      	cmp	r3, #6
 8004ade:	d131      	bne.n	8004b44 <usbd_cdc_Setup+0x118>
    {
    case USB_REQ_GET_DESCRIPTOR: 
      if( (req->wValue >> 8) == CDC_DESCRIPTOR_TYPE)
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	885b      	ldrh	r3, [r3, #2]
 8004ae4:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	2b21      	cmp	r3, #33	; 0x21
 8004aec:	d107      	bne.n	8004afe <usbd_cdc_Setup+0xd2>
      {
#ifdef USB_OTG_HS_INTERNAL_DMA_ENABLED
        pbuf = usbd_cdc_Desc;   
#else
        pbuf = usbd_cdc_CfgDesc + 9 + (9 * USBD_ITF_MAX_NUM);
 8004aee:	4b1d      	ldr	r3, [pc, #116]	; (8004b64 <usbd_cdc_Setup+0x138>)
 8004af0:	60bb      	str	r3, [r7, #8]
#endif 
        len = MIN(USB_CDC_DESC_SIZ , req->wLength);
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	88db      	ldrh	r3, [r3, #6]
 8004af6:	2b3a      	cmp	r3, #58	; 0x3a
 8004af8:	bf28      	it	cs
 8004afa:	233a      	movcs	r3, #58	; 0x3a
 8004afc:	81fb      	strh	r3, [r7, #14]
      }
      
      USBD_CtlSendData (pdev, 
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	89fb      	ldrh	r3, [r7, #14]
 8004b02:	4610      	mov	r0, r2
 8004b04:	68b9      	ldr	r1, [r7, #8]
 8004b06:	461a      	mov	r2, r3
 8004b08:	f7ff f966 	bl	8003dd8 <USBD_CtlSendData>
                        pbuf,
                        len);
      break;
 8004b0c:	e01a      	b.n	8004b44 <usbd_cdc_Setup+0x118>
      
    case USB_REQ_GET_INTERFACE :
      USBD_CtlSendData (pdev,
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	4b15      	ldr	r3, [pc, #84]	; (8004b68 <usbd_cdc_Setup+0x13c>)
 8004b12:	4610      	mov	r0, r2
 8004b14:	4619      	mov	r1, r3
 8004b16:	f04f 0201 	mov.w	r2, #1
 8004b1a:	f7ff f95d 	bl	8003dd8 <USBD_CtlSendData>
                        (uint8_t *)&usbd_cdc_AltSet,
                        1);
      break;
 8004b1e:	e011      	b.n	8004b44 <usbd_cdc_Setup+0x118>
      
    case USB_REQ_SET_INTERFACE :
      if ((uint8_t)(req->wValue) < USBD_ITF_MAX_NUM)
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	885b      	ldrh	r3, [r3, #2]
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d106      	bne.n	8004b38 <usbd_cdc_Setup+0x10c>
      {
        usbd_cdc_AltSet = (uint8_t)(req->wValue);
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	885b      	ldrh	r3, [r3, #2]
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	461a      	mov	r2, r3
 8004b32:	4b0d      	ldr	r3, [pc, #52]	; (8004b68 <usbd_cdc_Setup+0x13c>)
 8004b34:	601a      	str	r2, [r3, #0]
      else
      {
        /* Call the error management function (command will be nacked */
        USBD_CtlError (pdev, req);
      }
      break;
 8004b36:	e005      	b.n	8004b44 <usbd_cdc_Setup+0x118>
        usbd_cdc_AltSet = (uint8_t)(req->wValue);
      }
      else
      {
        /* Call the error management function (command will be nacked */
        USBD_CtlError (pdev, req);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	6839      	ldr	r1, [r7, #0]
 8004b3e:	f7ff fe65 	bl	800480c <USBD_CtlError>
      }
      break;
 8004b42:	bf00      	nop
    }
        break;
  }
  return USBD_OK;
 8004b44:	f04f 0300 	mov.w	r3, #0
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f107 0710 	add.w	r7, r7, #16
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}
 8004b52:	bf00      	nop
 8004b54:	20000004 	.word	0x20000004
 8004b58:	20000ff8 	.word	0x20000ff8
 8004b5c:	200000dc 	.word	0x200000dc
 8004b60:	20000140 	.word	0x20000140
 8004b64:	200000aa 	.word	0x200000aa
 8004b68:	2000012c 	.word	0x2000012c

08004b6c <usbd_cdc_EP0_RxReady>:
  *         Data received on control endpoint
  * @param  pdev: device device instance
  * @retval status
  */
static uint8_t  usbd_cdc_EP0_RxReady (void  *pdev)
{ 
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b082      	sub	sp, #8
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  if (cdcCmd != NO_CMD)
 8004b74:	4b0b      	ldr	r3, [pc, #44]	; (8004ba4 <usbd_cdc_EP0_RxReady+0x38>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	2bff      	cmp	r3, #255	; 0xff
 8004b7a:	d00c      	beq.n	8004b96 <usbd_cdc_EP0_RxReady+0x2a>
  {
    /* Process the data */
    APP_FOPS.pIf_Ctrl(cdcCmd, CmdBuff, cdcLen);
 8004b7c:	4b0a      	ldr	r3, [pc, #40]	; (8004ba8 <usbd_cdc_EP0_RxReady+0x3c>)
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	4a08      	ldr	r2, [pc, #32]	; (8004ba4 <usbd_cdc_EP0_RxReady+0x38>)
 8004b82:	6811      	ldr	r1, [r2, #0]
 8004b84:	4a09      	ldr	r2, [pc, #36]	; (8004bac <usbd_cdc_EP0_RxReady+0x40>)
 8004b86:	6812      	ldr	r2, [r2, #0]
 8004b88:	4608      	mov	r0, r1
 8004b8a:	4909      	ldr	r1, [pc, #36]	; (8004bb0 <usbd_cdc_EP0_RxReady+0x44>)
 8004b8c:	4798      	blx	r3
    
    /* Reset the command variable to default value */
    cdcCmd = NO_CMD;
 8004b8e:	4b05      	ldr	r3, [pc, #20]	; (8004ba4 <usbd_cdc_EP0_RxReady+0x38>)
 8004b90:	f04f 02ff 	mov.w	r2, #255	; 0xff
 8004b94:	601a      	str	r2, [r3, #0]
  }
  
  return USBD_OK;
 8004b96:	f04f 0300 	mov.w	r3, #0
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f107 0708 	add.w	r7, r7, #8
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}
 8004ba4:	200000dc 	.word	0x200000dc
 8004ba8:	20000004 	.word	0x20000004
 8004bac:	20000140 	.word	0x20000140
 8004bb0:	20000ff8 	.word	0x20000ff8

08004bb4 <usbd_cdc_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  usbd_cdc_DataIn (void *pdev, uint8_t epnum)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b084      	sub	sp, #16
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	460b      	mov	r3, r1
 8004bbe:	70fb      	strb	r3, [r7, #3]
  uint16_t USB_Tx_ptr;
  uint16_t USB_Tx_length;

  if (USB_Tx_State == 1)
 8004bc0:	4b2d      	ldr	r3, [pc, #180]	; (8004c78 <usbd_cdc_DataIn+0xc4>)
 8004bc2:	781b      	ldrb	r3, [r3, #0]
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d150      	bne.n	8004c6a <usbd_cdc_DataIn+0xb6>
  {
    if (APP_Rx_length == 0) 
 8004bc8:	4b2c      	ldr	r3, [pc, #176]	; (8004c7c <usbd_cdc_DataIn+0xc8>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d104      	bne.n	8004bda <usbd_cdc_DataIn+0x26>
    {
      USB_Tx_State = 0;
 8004bd0:	4b29      	ldr	r3, [pc, #164]	; (8004c78 <usbd_cdc_DataIn+0xc4>)
 8004bd2:	f04f 0200 	mov.w	r2, #0
 8004bd6:	701a      	strb	r2, [r3, #0]
 8004bd8:	e047      	b.n	8004c6a <usbd_cdc_DataIn+0xb6>
    }
    else 
    {
      if (APP_Rx_length > CDC_DATA_IN_PACKET_SIZE){
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f8d3 35ec 	ldr.w	r3, [r3, #1516]	; 0x5ec
 8004be0:	f103 0339 	add.w	r3, r3, #57	; 0x39
 8004be4:	881b      	ldrh	r3, [r3, #0]
 8004be6:	461a      	mov	r2, r3
 8004be8:	4b24      	ldr	r3, [pc, #144]	; (8004c7c <usbd_cdc_DataIn+0xc8>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d221      	bcs.n	8004c34 <usbd_cdc_DataIn+0x80>
        USB_Tx_ptr = APP_Rx_ptr_out;
 8004bf0:	4b23      	ldr	r3, [pc, #140]	; (8004c80 <usbd_cdc_DataIn+0xcc>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	81fb      	strh	r3, [r7, #14]
        USB_Tx_length = CDC_DATA_IN_PACKET_SIZE;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f8d3 35ec 	ldr.w	r3, [r3, #1516]	; 0x5ec
 8004bfc:	f103 0339 	add.w	r3, r3, #57	; 0x39
 8004c00:	881b      	ldrh	r3, [r3, #0]
 8004c02:	81bb      	strh	r3, [r7, #12]
        
        APP_Rx_ptr_out += CDC_DATA_IN_PACKET_SIZE;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f8d3 35ec 	ldr.w	r3, [r3, #1516]	; 0x5ec
 8004c0a:	f103 0339 	add.w	r3, r3, #57	; 0x39
 8004c0e:	881b      	ldrh	r3, [r3, #0]
 8004c10:	461a      	mov	r2, r3
 8004c12:	4b1b      	ldr	r3, [pc, #108]	; (8004c80 <usbd_cdc_DataIn+0xcc>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	18d2      	adds	r2, r2, r3
 8004c18:	4b19      	ldr	r3, [pc, #100]	; (8004c80 <usbd_cdc_DataIn+0xcc>)
 8004c1a:	601a      	str	r2, [r3, #0]
        APP_Rx_length -= CDC_DATA_IN_PACKET_SIZE;    
 8004c1c:	4b17      	ldr	r3, [pc, #92]	; (8004c7c <usbd_cdc_DataIn+0xc8>)
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f8d3 35ec 	ldr.w	r3, [r3, #1516]	; 0x5ec
 8004c26:	f103 0339 	add.w	r3, r3, #57	; 0x39
 8004c2a:	881b      	ldrh	r3, [r3, #0]
 8004c2c:	1ad2      	subs	r2, r2, r3
 8004c2e:	4b13      	ldr	r3, [pc, #76]	; (8004c7c <usbd_cdc_DataIn+0xc8>)
 8004c30:	601a      	str	r2, [r3, #0]
 8004c32:	e010      	b.n	8004c56 <usbd_cdc_DataIn+0xa2>
      }
      else 
      {
        USB_Tx_ptr = APP_Rx_ptr_out;
 8004c34:	4b12      	ldr	r3, [pc, #72]	; (8004c80 <usbd_cdc_DataIn+0xcc>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	81fb      	strh	r3, [r7, #14]
        USB_Tx_length = APP_Rx_length;
 8004c3a:	4b10      	ldr	r3, [pc, #64]	; (8004c7c <usbd_cdc_DataIn+0xc8>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	81bb      	strh	r3, [r7, #12]
        
        APP_Rx_ptr_out += APP_Rx_length;
 8004c40:	4b0f      	ldr	r3, [pc, #60]	; (8004c80 <usbd_cdc_DataIn+0xcc>)
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	4b0d      	ldr	r3, [pc, #52]	; (8004c7c <usbd_cdc_DataIn+0xc8>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	18d2      	adds	r2, r2, r3
 8004c4a:	4b0d      	ldr	r3, [pc, #52]	; (8004c80 <usbd_cdc_DataIn+0xcc>)
 8004c4c:	601a      	str	r2, [r3, #0]
        APP_Rx_length = 0;
 8004c4e:	4b0b      	ldr	r3, [pc, #44]	; (8004c7c <usbd_cdc_DataIn+0xc8>)
 8004c50:	f04f 0200 	mov.w	r2, #0
 8004c54:	601a      	str	r2, [r3, #0]
      }
      
      /* Prepare the available data buffer to be sent on IN endpoint */
      DCD_EP_Tx (pdev,
 8004c56:	6879      	ldr	r1, [r7, #4]
 8004c58:	89fa      	ldrh	r2, [r7, #14]
 8004c5a:	4b0a      	ldr	r3, [pc, #40]	; (8004c84 <usbd_cdc_DataIn+0xd0>)
 8004c5c:	18d2      	adds	r2, r2, r3
 8004c5e:	89bb      	ldrh	r3, [r7, #12]
 8004c60:	4608      	mov	r0, r1
 8004c62:	f04f 0181 	mov.w	r1, #129	; 0x81
 8004c66:	f7fd ffd9 	bl	8002c1c <DCD_EP_Tx>
                 (uint8_t*)&APP_Rx_Buffer[USB_Tx_ptr],
                 USB_Tx_length);
    }
  }  
  
  return USBD_OK;
 8004c6a:	f04f 0300 	mov.w	r3, #0
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f107 0710 	add.w	r7, r7, #16
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}
 8004c78:	2000013c 	.word	0x2000013c
 8004c7c:	20000138 	.word	0x20000138
 8004c80:	20000134 	.word	0x20000134
 8004c84:	20001000 	.word	0x20001000

08004c88 <usbd_cdc_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  usbd_cdc_DataOut (void *pdev, uint8_t epnum)
{      
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b084      	sub	sp, #16
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	460b      	mov	r3, r1
 8004c92:	70fb      	strb	r3, [r7, #3]
  uint16_t USB_Rx_Cnt;
  
  /* Get the received data buffer and update the counter */
  USB_Rx_Cnt = ((USB_OTG_CORE_HANDLE*)pdev)->dev.out_ep[epnum].xfer_count;
 8004c94:	6879      	ldr	r1, [r7, #4]
 8004c96:	78fa      	ldrb	r2, [r7, #3]
 8004c98:	4613      	mov	r3, r2
 8004c9a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8004c9e:	189b      	adds	r3, r3, r2
 8004ca0:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8004ca4:	18cb      	adds	r3, r1, r3
 8004ca6:	f503 7362 	add.w	r3, r3, #904	; 0x388
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	81fb      	strh	r3, [r7, #14]
  
  /* USB data will be immediately processed, this allow next USB traffic being 
     NAKed till the end of the application Xfer */
  APP_FOPS.pIf_DataRx(USB_Rx_Buffer, USB_Rx_Cnt);
 8004cae:	4b0d      	ldr	r3, [pc, #52]	; (8004ce4 <usbd_cdc_DataOut+0x5c>)
 8004cb0:	691b      	ldr	r3, [r3, #16]
 8004cb2:	89fa      	ldrh	r2, [r7, #14]
 8004cb4:	480c      	ldr	r0, [pc, #48]	; (8004ce8 <usbd_cdc_DataOut+0x60>)
 8004cb6:	4611      	mov	r1, r2
 8004cb8:	4798      	blx	r3
  
  /* Prepare Out endpoint to receive next packet */
  DCD_EP_PrepareRx(pdev,
 8004cba:	687a      	ldr	r2, [r7, #4]
                   CDC_OUT_EP,
                   (uint8_t*)(USB_Rx_Buffer),
                   CDC_DATA_OUT_PACKET_SIZE);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f8d3 35ec 	ldr.w	r3, [r3, #1516]	; 0x5ec
 8004cc2:	f103 0340 	add.w	r3, r3, #64	; 0x40
  /* USB data will be immediately processed, this allow next USB traffic being 
     NAKed till the end of the application Xfer */
  APP_FOPS.pIf_DataRx(USB_Rx_Buffer, USB_Rx_Cnt);
  
  /* Prepare Out endpoint to receive next packet */
  DCD_EP_PrepareRx(pdev,
 8004cc6:	881b      	ldrh	r3, [r3, #0]
 8004cc8:	4610      	mov	r0, r2
 8004cca:	f04f 0101 	mov.w	r1, #1
 8004cce:	4a06      	ldr	r2, [pc, #24]	; (8004ce8 <usbd_cdc_DataOut+0x60>)
 8004cd0:	f7fd ff5e 	bl	8002b90 <DCD_EP_PrepareRx>
                   CDC_OUT_EP,
                   (uint8_t*)(USB_Rx_Buffer),
                   CDC_DATA_OUT_PACKET_SIZE);

  return USBD_OK;
 8004cd4:	f04f 0300 	mov.w	r3, #0
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f107 0710 	add.w	r7, r7, #16
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}
 8004ce2:	bf00      	nop
 8004ce4:	20000004 	.word	0x20000004
 8004ce8:	20000fb8 	.word	0x20000fb8

08004cec <usbd_cdc_SOF>:
  * @param  pdev: instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  usbd_cdc_SOF (void *pdev)
{      
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b082      	sub	sp, #8
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  static uint32_t FrameCount = 0;
  
  if (FrameCount++ == CDC_IN_FRAME_INTERVAL)
 8004cf4:	4b0d      	ldr	r3, [pc, #52]	; (8004d2c <usbd_cdc_SOF+0x40>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	2b05      	cmp	r3, #5
 8004cfa:	bf14      	ite	ne
 8004cfc:	2200      	movne	r2, #0
 8004cfe:	2201      	moveq	r2, #1
 8004d00:	b2d2      	uxtb	r2, r2
 8004d02:	f103 0101 	add.w	r1, r3, #1
 8004d06:	4b09      	ldr	r3, [pc, #36]	; (8004d2c <usbd_cdc_SOF+0x40>)
 8004d08:	6019      	str	r1, [r3, #0]
 8004d0a:	2a00      	cmp	r2, #0
 8004d0c:	d006      	beq.n	8004d1c <usbd_cdc_SOF+0x30>
  {
    /* Reset the frame counter */
    FrameCount = 0;
 8004d0e:	4b07      	ldr	r3, [pc, #28]	; (8004d2c <usbd_cdc_SOF+0x40>)
 8004d10:	f04f 0200 	mov.w	r2, #0
 8004d14:	601a      	str	r2, [r3, #0]
    
    /* Check the data to be sent through IN pipe */
    Handle_USBAsynchXfer(pdev);
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f000 f80a 	bl	8004d30 <Handle_USBAsynchXfer>
  }
  
  return USBD_OK;
 8004d1c:	f04f 0300 	mov.w	r3, #0
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	f107 0708 	add.w	r7, r7, #8
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	bf00      	nop
 8004d2c:	20000144 	.word	0x20000144

08004d30 <Handle_USBAsynchXfer>:
  *         Send data to USB
  * @param  pdev: instance
  * @retval None
  */
static void Handle_USBAsynchXfer (void *pdev)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b084      	sub	sp, #16
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  uint16_t USB_Tx_ptr;
  uint16_t USB_Tx_length;
  
  if(USB_Tx_State != 1)
 8004d38:	4b3d      	ldr	r3, [pc, #244]	; (8004e30 <Handle_USBAsynchXfer+0x100>)
 8004d3a:	781b      	ldrb	r3, [r3, #0]
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d073      	beq.n	8004e28 <Handle_USBAsynchXfer+0xf8>
  {
    if (APP_Rx_ptr_out == APP_RX_DATA_SIZE)
 8004d40:	4b3c      	ldr	r3, [pc, #240]	; (8004e34 <Handle_USBAsynchXfer+0x104>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d48:	d103      	bne.n	8004d52 <Handle_USBAsynchXfer+0x22>
    {
      APP_Rx_ptr_out = 0;
 8004d4a:	4b3a      	ldr	r3, [pc, #232]	; (8004e34 <Handle_USBAsynchXfer+0x104>)
 8004d4c:	f04f 0200 	mov.w	r2, #0
 8004d50:	601a      	str	r2, [r3, #0]
    }
    
    if(APP_Rx_ptr_out == APP_Rx_ptr_in) 
 8004d52:	4b38      	ldr	r3, [pc, #224]	; (8004e34 <Handle_USBAsynchXfer+0x104>)
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	4b38      	ldr	r3, [pc, #224]	; (8004e38 <Handle_USBAsynchXfer+0x108>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d104      	bne.n	8004d68 <Handle_USBAsynchXfer+0x38>
    {
      USB_Tx_State = 0; 
 8004d5e:	4b34      	ldr	r3, [pc, #208]	; (8004e30 <Handle_USBAsynchXfer+0x100>)
 8004d60:	f04f 0200 	mov.w	r2, #0
 8004d64:	701a      	strb	r2, [r3, #0]
      return;
 8004d66:	e05f      	b.n	8004e28 <Handle_USBAsynchXfer+0xf8>
    }
    
    if(APP_Rx_ptr_out > APP_Rx_ptr_in) /* rollback */
 8004d68:	4b32      	ldr	r3, [pc, #200]	; (8004e34 <Handle_USBAsynchXfer+0x104>)
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	4b32      	ldr	r3, [pc, #200]	; (8004e38 <Handle_USBAsynchXfer+0x108>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d906      	bls.n	8004d82 <Handle_USBAsynchXfer+0x52>
    { 
      APP_Rx_length = APP_RX_DATA_SIZE - APP_Rx_ptr_out;
 8004d74:	4b2f      	ldr	r3, [pc, #188]	; (8004e34 <Handle_USBAsynchXfer+0x104>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f5c3 6200 	rsb	r2, r3, #2048	; 0x800
 8004d7c:	4b2f      	ldr	r3, [pc, #188]	; (8004e3c <Handle_USBAsynchXfer+0x10c>)
 8004d7e:	601a      	str	r2, [r3, #0]
 8004d80:	e006      	b.n	8004d90 <Handle_USBAsynchXfer+0x60>
    
    }
    else 
    {
      APP_Rx_length = APP_Rx_ptr_in - APP_Rx_ptr_out;
 8004d82:	4b2d      	ldr	r3, [pc, #180]	; (8004e38 <Handle_USBAsynchXfer+0x108>)
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	4b2b      	ldr	r3, [pc, #172]	; (8004e34 <Handle_USBAsynchXfer+0x104>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	1ad2      	subs	r2, r2, r3
 8004d8c:	4b2b      	ldr	r3, [pc, #172]	; (8004e3c <Handle_USBAsynchXfer+0x10c>)
 8004d8e:	601a      	str	r2, [r3, #0]
    }
#ifdef USB_OTG_HS_INTERNAL_DMA_ENABLED
     APP_Rx_length &= ~0x03;
#endif /* USB_OTG_HS_INTERNAL_DMA_ENABLED */
    
    if (APP_Rx_length > CDC_DATA_IN_PACKET_SIZE)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	f8d3 35ec 	ldr.w	r3, [r3, #1516]	; 0x5ec
 8004d96:	f103 0339 	add.w	r3, r3, #57	; 0x39
 8004d9a:	881b      	ldrh	r3, [r3, #0]
 8004d9c:	461a      	mov	r2, r3
 8004d9e:	4b27      	ldr	r3, [pc, #156]	; (8004e3c <Handle_USBAsynchXfer+0x10c>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d221      	bcs.n	8004dea <Handle_USBAsynchXfer+0xba>
    {
      USB_Tx_ptr = APP_Rx_ptr_out;
 8004da6:	4b23      	ldr	r3, [pc, #140]	; (8004e34 <Handle_USBAsynchXfer+0x104>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	81fb      	strh	r3, [r7, #14]
      USB_Tx_length = CDC_DATA_IN_PACKET_SIZE;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f8d3 35ec 	ldr.w	r3, [r3, #1516]	; 0x5ec
 8004db2:	f103 0339 	add.w	r3, r3, #57	; 0x39
 8004db6:	881b      	ldrh	r3, [r3, #0]
 8004db8:	81bb      	strh	r3, [r7, #12]
      
      APP_Rx_ptr_out += CDC_DATA_IN_PACKET_SIZE;	
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f8d3 35ec 	ldr.w	r3, [r3, #1516]	; 0x5ec
 8004dc0:	f103 0339 	add.w	r3, r3, #57	; 0x39
 8004dc4:	881b      	ldrh	r3, [r3, #0]
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	4b1a      	ldr	r3, [pc, #104]	; (8004e34 <Handle_USBAsynchXfer+0x104>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	18d2      	adds	r2, r2, r3
 8004dce:	4b19      	ldr	r3, [pc, #100]	; (8004e34 <Handle_USBAsynchXfer+0x104>)
 8004dd0:	601a      	str	r2, [r3, #0]
      APP_Rx_length -= CDC_DATA_IN_PACKET_SIZE;
 8004dd2:	4b1a      	ldr	r3, [pc, #104]	; (8004e3c <Handle_USBAsynchXfer+0x10c>)
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f8d3 35ec 	ldr.w	r3, [r3, #1516]	; 0x5ec
 8004ddc:	f103 0339 	add.w	r3, r3, #57	; 0x39
 8004de0:	881b      	ldrh	r3, [r3, #0]
 8004de2:	1ad2      	subs	r2, r2, r3
 8004de4:	4b15      	ldr	r3, [pc, #84]	; (8004e3c <Handle_USBAsynchXfer+0x10c>)
 8004de6:	601a      	str	r2, [r3, #0]
 8004de8:	e010      	b.n	8004e0c <Handle_USBAsynchXfer+0xdc>
    }
    else
    {
      USB_Tx_ptr = APP_Rx_ptr_out;
 8004dea:	4b12      	ldr	r3, [pc, #72]	; (8004e34 <Handle_USBAsynchXfer+0x104>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	81fb      	strh	r3, [r7, #14]
      USB_Tx_length = APP_Rx_length;
 8004df0:	4b12      	ldr	r3, [pc, #72]	; (8004e3c <Handle_USBAsynchXfer+0x10c>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	81bb      	strh	r3, [r7, #12]
      
      APP_Rx_ptr_out += APP_Rx_length;
 8004df6:	4b0f      	ldr	r3, [pc, #60]	; (8004e34 <Handle_USBAsynchXfer+0x104>)
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	4b10      	ldr	r3, [pc, #64]	; (8004e3c <Handle_USBAsynchXfer+0x10c>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	18d2      	adds	r2, r2, r3
 8004e00:	4b0c      	ldr	r3, [pc, #48]	; (8004e34 <Handle_USBAsynchXfer+0x104>)
 8004e02:	601a      	str	r2, [r3, #0]
      APP_Rx_length = 0;
 8004e04:	4b0d      	ldr	r3, [pc, #52]	; (8004e3c <Handle_USBAsynchXfer+0x10c>)
 8004e06:	f04f 0200 	mov.w	r2, #0
 8004e0a:	601a      	str	r2, [r3, #0]
    }
    USB_Tx_State = 1; 
 8004e0c:	4b08      	ldr	r3, [pc, #32]	; (8004e30 <Handle_USBAsynchXfer+0x100>)
 8004e0e:	f04f 0201 	mov.w	r2, #1
 8004e12:	701a      	strb	r2, [r3, #0]

    DCD_EP_Tx (pdev,
 8004e14:	6879      	ldr	r1, [r7, #4]
 8004e16:	89fa      	ldrh	r2, [r7, #14]
 8004e18:	4b09      	ldr	r3, [pc, #36]	; (8004e40 <Handle_USBAsynchXfer+0x110>)
 8004e1a:	18d2      	adds	r2, r2, r3
 8004e1c:	89bb      	ldrh	r3, [r7, #12]
 8004e1e:	4608      	mov	r0, r1
 8004e20:	f04f 0181 	mov.w	r1, #129	; 0x81
 8004e24:	f7fd fefa 	bl	8002c1c <DCD_EP_Tx>
               CDC_IN_EP,
               (uint8_t*)&APP_Rx_Buffer[USB_Tx_ptr],
               USB_Tx_length);
  }  
  
}
 8004e28:	f107 0710 	add.w	r7, r7, #16
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	2000013c 	.word	0x2000013c
 8004e34:	20000134 	.word	0x20000134
 8004e38:	20000130 	.word	0x20000130
 8004e3c:	20000138 	.word	0x20000138
 8004e40:	20001000 	.word	0x20001000

08004e44 <USBD_cdc_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_cdc_GetCfgDesc (uint8_t speed, uint16_t *length)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	6039      	str	r1, [r7, #0]
 8004e4e:	71fb      	strb	r3, [r7, #7]
  *length = sizeof (usbd_cdc_CfgDesc);
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	f04f 0243 	mov.w	r2, #67	; 0x43
 8004e56:	801a      	strh	r2, [r3, #0]
  return usbd_cdc_CfgDesc;
 8004e58:	4b03      	ldr	r3, [pc, #12]	; (8004e68 <USBD_cdc_GetCfgDesc+0x24>)
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f107 070c 	add.w	r7, r7, #12
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bc80      	pop	{r7}
 8004e64:	4770      	bx	lr
 8004e66:	bf00      	nop
 8004e68:	20000098 	.word	0x20000098

08004e6c <NVIC_PriorityGroupConfig>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b083      	sub	sp, #12
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8004e74:	4a05      	ldr	r2, [pc, #20]	; (8004e8c <NVIC_PriorityGroupConfig+0x20>)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f043 63be 	orr.w	r3, r3, #99614720	; 0x5f00000
 8004e7c:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 8004e80:	60d3      	str	r3, [r2, #12]
}
 8004e82:	f107 070c 	add.w	r7, r7, #12
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bc80      	pop	{r7}
 8004e8a:	4770      	bx	lr
 8004e8c:	e000ed00 	.word	0xe000ed00

08004e90 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b085      	sub	sp, #20
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8004e98:	f04f 0300 	mov.w	r3, #0
 8004e9c:	73fb      	strb	r3, [r7, #15]
 8004e9e:	f04f 0300 	mov.w	r3, #0
 8004ea2:	73bb      	strb	r3, [r7, #14]
 8004ea4:	f04f 030f 	mov.w	r3, #15
 8004ea8:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	78db      	ldrb	r3, [r3, #3]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d03e      	beq.n	8004f30 <NVIC_Init+0xa0>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8004eb2:	4b2b      	ldr	r3, [pc, #172]	; (8004f60 <NVIC_Init+0xd0>)
 8004eb4:	68db      	ldr	r3, [r3, #12]
 8004eb6:	ea6f 0303 	mvn.w	r3, r3
 8004eba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004ebe:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8004ec2:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8004ec4:	7bfb      	ldrb	r3, [r7, #15]
 8004ec6:	f1c3 0304 	rsb	r3, r3, #4
 8004eca:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8004ecc:	7b7a      	ldrb	r2, [r7, #13]
 8004ece:	7bfb      	ldrb	r3, [r7, #15]
 8004ed0:	fa42 f303 	asr.w	r3, r2, r3
 8004ed4:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	785b      	ldrb	r3, [r3, #1]
 8004eda:	461a      	mov	r2, r3
 8004edc:	7bbb      	ldrb	r3, [r7, #14]
 8004ede:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee2:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	789a      	ldrb	r2, [r3, #2]
 8004ee8:	7b7b      	ldrb	r3, [r7, #13]
 8004eea:	ea02 0303 	and.w	r3, r2, r3
 8004eee:	b2da      	uxtb	r2, r3
 8004ef0:	7bfb      	ldrb	r3, [r7, #15]
 8004ef2:	ea42 0303 	orr.w	r3, r2, r3
 8004ef6:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8004ef8:	7bfb      	ldrb	r3, [r7, #15]
 8004efa:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8004efe:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8004f00:	4a18      	ldr	r2, [pc, #96]	; (8004f64 <NVIC_Init+0xd4>)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	781b      	ldrb	r3, [r3, #0]
 8004f06:	18d3      	adds	r3, r2, r3
 8004f08:	7bfa      	ldrb	r2, [r7, #15]
 8004f0a:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8004f0e:	4b15      	ldr	r3, [pc, #84]	; (8004f64 <NVIC_Init+0xd4>)
 8004f10:	687a      	ldr	r2, [r7, #4]
 8004f12:	7812      	ldrb	r2, [r2, #0]
 8004f14:	ea4f 1252 	mov.w	r2, r2, lsr #5
 8004f18:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8004f1a:	6879      	ldr	r1, [r7, #4]
 8004f1c:	7809      	ldrb	r1, [r1, #0]
 8004f1e:	f001 011f 	and.w	r1, r1, #31
 8004f22:	f04f 0001 	mov.w	r0, #1
 8004f26:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8004f2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004f2e:	e011      	b.n	8004f54 <NVIC_Init+0xc4>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8004f30:	4b0c      	ldr	r3, [pc, #48]	; (8004f64 <NVIC_Init+0xd4>)
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	7812      	ldrb	r2, [r2, #0]
 8004f36:	ea4f 1252 	mov.w	r2, r2, lsr #5
 8004f3a:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8004f3c:	6879      	ldr	r1, [r7, #4]
 8004f3e:	7809      	ldrb	r1, [r1, #0]
 8004f40:	f001 011f 	and.w	r1, r1, #31
 8004f44:	f04f 0001 	mov.w	r0, #1
 8004f48:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8004f4c:	f102 0220 	add.w	r2, r2, #32
 8004f50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8004f54:	f107 0714 	add.w	r7, r7, #20
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bc80      	pop	{r7}
 8004f5c:	4770      	bx	lr
 8004f5e:	bf00      	nop
 8004f60:	e000ed00 	.word	0xe000ed00
 8004f64:	e000e100 	.word	0xe000e100

08004f68 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8004f70:	4b03      	ldr	r3, [pc, #12]	; (8004f80 <EXTI_ClearITPendingBit+0x18>)
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	615a      	str	r2, [r3, #20]
}
 8004f76:	f107 070c 	add.w	r7, r7, #12
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bc80      	pop	{r7}
 8004f7e:	4770      	bx	lr
 8004f80:	40013c00 	.word	0x40013c00

08004f84 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b087      	sub	sp, #28
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8004f8e:	f04f 0300 	mov.w	r3, #0
 8004f92:	617b      	str	r3, [r7, #20]
 8004f94:	f04f 0300 	mov.w	r3, #0
 8004f98:	613b      	str	r3, [r7, #16]
 8004f9a:	f04f 0300 	mov.w	r3, #0
 8004f9e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8004fa0:	f04f 0300 	mov.w	r3, #0
 8004fa4:	617b      	str	r3, [r7, #20]
 8004fa6:	e087      	b.n	80050b8 <GPIO_Init+0x134>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	f04f 0201 	mov.w	r2, #1
 8004fae:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb2:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	ea02 0303 	and.w	r3, r2, r3
 8004fbe:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8004fc0:	68fa      	ldr	r2, [r7, #12]
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d173      	bne.n	80050b0 <GPIO_Init+0x12c>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004fd2:	f04f 0103 	mov.w	r1, #3
 8004fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8004fda:	ea6f 0303 	mvn.w	r3, r3
 8004fde:	401a      	ands	r2, r3
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	791b      	ldrb	r3, [r3, #4]
 8004fec:	4619      	mov	r1, r3
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ff8:	431a      	orrs	r2, r3
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	791b      	ldrb	r3, [r3, #4]
 8005002:	2b01      	cmp	r3, #1
 8005004:	d003      	beq.n	800500e <GPIO_Init+0x8a>
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	791b      	ldrb	r3, [r3, #4]
 800500a:	2b02      	cmp	r3, #2
 800500c:	d134      	bne.n	8005078 <GPIO_Init+0xf4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	689a      	ldr	r2, [r3, #8]
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005018:	f04f 0103 	mov.w	r1, #3
 800501c:	fa01 f303 	lsl.w	r3, r1, r3
 8005020:	ea6f 0303 	mvn.w	r3, r3
 8005024:	401a      	ands	r2, r3
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	689a      	ldr	r2, [r3, #8]
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	795b      	ldrb	r3, [r3, #5]
 8005032:	4619      	mov	r1, r3
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800503a:	fa01 f303 	lsl.w	r3, r1, r3
 800503e:	431a      	orrs	r2, r3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	685a      	ldr	r2, [r3, #4]
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	b29b      	uxth	r3, r3
 800504c:	f04f 0101 	mov.w	r1, #1
 8005050:	fa01 f303 	lsl.w	r3, r1, r3
 8005054:	ea6f 0303 	mvn.w	r3, r3
 8005058:	401a      	ands	r2, r3
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	685a      	ldr	r2, [r3, #4]
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	799b      	ldrb	r3, [r3, #6]
 8005066:	4619      	mov	r1, r3
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	b29b      	uxth	r3, r3
 800506c:	fa01 f303 	lsl.w	r3, r1, r3
 8005070:	b29b      	uxth	r3, r3
 8005072:	431a      	orrs	r2, r3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	68da      	ldr	r2, [r3, #12]
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	b29b      	uxth	r3, r3
 8005080:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005084:	f04f 0103 	mov.w	r1, #3
 8005088:	fa01 f303 	lsl.w	r3, r1, r3
 800508c:	ea6f 0303 	mvn.w	r3, r3
 8005090:	401a      	ands	r2, r3
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	68da      	ldr	r2, [r3, #12]
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	79db      	ldrb	r3, [r3, #7]
 800509e:	4619      	mov	r1, r3
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80050a6:	fa01 f303 	lsl.w	r3, r1, r3
 80050aa:	431a      	orrs	r2, r3
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	f103 0301 	add.w	r3, r3, #1
 80050b6:	617b      	str	r3, [r7, #20]
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	2b0f      	cmp	r3, #15
 80050bc:	f67f af74 	bls.w	8004fa8 <GPIO_Init+0x24>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 80050c0:	f107 071c 	add.w	r7, r7, #28
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bc80      	pop	{r7}
 80050c8:	4770      	bx	lr
 80050ca:	bf00      	nop

080050cc <GPIO_StructInit>:
  * @brief  Fills each GPIO_InitStruct member with its default value.
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b083      	sub	sp, #12
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80050da:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f04f 0200 	mov.w	r2, #0
 80050e2:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f04f 0200 	mov.w	r2, #0
 80050ea:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f04f 0200 	mov.w	r2, #0
 80050f2:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f04f 0200 	mov.w	r2, #0
 80050fa:	71da      	strb	r2, [r3, #7]
}
 80050fc:	f107 070c 	add.w	r7, r7, #12
 8005100:	46bd      	mov	sp, r7
 8005102:	bc80      	pop	{r7}
 8005104:	4770      	bx	lr
 8005106:	bf00      	nop

08005108 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005108:	b480      	push	{r7}
 800510a:	b083      	sub	sp, #12
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	460b      	mov	r3, r1
 8005112:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	887a      	ldrh	r2, [r7, #2]
 8005118:	831a      	strh	r2, [r3, #24]
}
 800511a:	f107 070c 	add.w	r7, r7, #12
 800511e:	46bd      	mov	sp, r7
 8005120:	bc80      	pop	{r7}
 8005122:	4770      	bx	lr

08005124 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005124:	b480      	push	{r7}
 8005126:	b083      	sub	sp, #12
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	460b      	mov	r3, r1
 800512e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	887a      	ldrh	r2, [r7, #2]
 8005134:	835a      	strh	r2, [r3, #26]
}
 8005136:	f107 070c 	add.w	r7, r7, #12
 800513a:	46bd      	mov	sp, r7
 800513c:	bc80      	pop	{r7}
 800513e:	4770      	bx	lr

08005140 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8005140:	b480      	push	{r7}
 8005142:	b085      	sub	sp, #20
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
 8005148:	4613      	mov	r3, r2
 800514a:	460a      	mov	r2, r1
 800514c:	807a      	strh	r2, [r7, #2]
 800514e:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8005150:	f04f 0300 	mov.w	r3, #0
 8005154:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8005156:	f04f 0300 	mov.w	r3, #0
 800515a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800515c:	787a      	ldrb	r2, [r7, #1]
 800515e:	887b      	ldrh	r3, [r7, #2]
 8005160:	f003 0307 	and.w	r3, r3, #7
 8005164:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8005168:	fa02 f303 	lsl.w	r3, r2, r3
 800516c:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800516e:	887b      	ldrh	r3, [r7, #2]
 8005170:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8005174:	b29b      	uxth	r3, r3
 8005176:	461a      	mov	r2, r3
 8005178:	887b      	ldrh	r3, [r7, #2]
 800517a:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 800517e:	b29b      	uxth	r3, r3
 8005180:	4619      	mov	r1, r3
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f101 0108 	add.w	r1, r1, #8
 8005188:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800518c:	887b      	ldrh	r3, [r7, #2]
 800518e:	f003 0307 	and.w	r3, r3, #7
 8005192:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8005196:	f04f 000f 	mov.w	r0, #15
 800519a:	fa00 f303 	lsl.w	r3, r0, r3
 800519e:	ea6f 0303 	mvn.w	r3, r3
 80051a2:	4019      	ands	r1, r3
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f102 0208 	add.w	r2, r2, #8
 80051aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80051ae:	887b      	ldrh	r3, [r7, #2]
 80051b0:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	461a      	mov	r2, r3
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	f102 0208 	add.w	r2, r2, #8
 80051be:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	ea42 0303 	orr.w	r3, r2, r3
 80051c8:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80051ca:	887b      	ldrh	r3, [r7, #2]
 80051cc:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	461a      	mov	r2, r3
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f102 0208 	add.w	r2, r2, #8
 80051da:	68b9      	ldr	r1, [r7, #8]
 80051dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80051e0:	f107 0714 	add.w	r7, r7, #20
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bc80      	pop	{r7}
 80051e8:	4770      	bx	lr
 80051ea:	bf00      	nop

080051ec <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b089      	sub	sp, #36	; 0x24
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80051f4:	f04f 0300 	mov.w	r3, #0
 80051f8:	61bb      	str	r3, [r7, #24]
 80051fa:	f04f 0300 	mov.w	r3, #0
 80051fe:	617b      	str	r3, [r7, #20]
 8005200:	f04f 0300 	mov.w	r3, #0
 8005204:	61fb      	str	r3, [r7, #28]
 8005206:	f04f 0302 	mov.w	r3, #2
 800520a:	613b      	str	r3, [r7, #16]
 800520c:	f04f 0300 	mov.w	r3, #0
 8005210:	60fb      	str	r3, [r7, #12]
 8005212:	f04f 0302 	mov.w	r3, #2
 8005216:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8005218:	4b4f      	ldr	r3, [pc, #316]	; (8005358 <RCC_GetClocksFreq+0x16c>)
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	f003 030c 	and.w	r3, r3, #12
 8005220:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8005222:	69bb      	ldr	r3, [r7, #24]
 8005224:	2b04      	cmp	r3, #4
 8005226:	d007      	beq.n	8005238 <RCC_GetClocksFreq+0x4c>
 8005228:	2b08      	cmp	r3, #8
 800522a:	d009      	beq.n	8005240 <RCC_GetClocksFreq+0x54>
 800522c:	2b00      	cmp	r3, #0
 800522e:	d147      	bne.n	80052c0 <RCC_GetClocksFreq+0xd4>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	4a4a      	ldr	r2, [pc, #296]	; (800535c <RCC_GetClocksFreq+0x170>)
 8005234:	601a      	str	r2, [r3, #0]
      break;
 8005236:	e047      	b.n	80052c8 <RCC_GetClocksFreq+0xdc>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	4a49      	ldr	r2, [pc, #292]	; (8005360 <RCC_GetClocksFreq+0x174>)
 800523c:	601a      	str	r2, [r3, #0]
      break;
 800523e:	e043      	b.n	80052c8 <RCC_GetClocksFreq+0xdc>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8005240:	4b45      	ldr	r3, [pc, #276]	; (8005358 <RCC_GetClocksFreq+0x16c>)
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005248:	ea4f 5393 	mov.w	r3, r3, lsr #22
 800524c:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800524e:	4b42      	ldr	r3, [pc, #264]	; (8005358 <RCC_GetClocksFreq+0x16c>)
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005256:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d00f      	beq.n	800527e <RCC_GetClocksFreq+0x92>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800525e:	4a40      	ldr	r2, [pc, #256]	; (8005360 <RCC_GetClocksFreq+0x174>)
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	fbb2 f2f3 	udiv	r2, r2, r3
 8005266:	4b3c      	ldr	r3, [pc, #240]	; (8005358 <RCC_GetClocksFreq+0x16c>)
 8005268:	6859      	ldr	r1, [r3, #4]
 800526a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800526e:	ea01 0303 	and.w	r3, r1, r3
 8005272:	ea4f 1393 	mov.w	r3, r3, lsr #6
 8005276:	fb03 f302 	mul.w	r3, r3, r2
 800527a:	61fb      	str	r3, [r7, #28]
 800527c:	e00e      	b.n	800529c <RCC_GetClocksFreq+0xb0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800527e:	4a37      	ldr	r2, [pc, #220]	; (800535c <RCC_GetClocksFreq+0x170>)
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	fbb2 f2f3 	udiv	r2, r2, r3
 8005286:	4b34      	ldr	r3, [pc, #208]	; (8005358 <RCC_GetClocksFreq+0x16c>)
 8005288:	6859      	ldr	r1, [r3, #4]
 800528a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800528e:	ea01 0303 	and.w	r3, r1, r3
 8005292:	ea4f 1393 	mov.w	r3, r3, lsr #6
 8005296:	fb03 f302 	mul.w	r3, r3, r2
 800529a:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800529c:	4b2e      	ldr	r3, [pc, #184]	; (8005358 <RCC_GetClocksFreq+0x16c>)
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80052a4:	ea4f 4313 	mov.w	r3, r3, lsr #16
 80052a8:	f103 0301 	add.w	r3, r3, #1
 80052ac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80052b0:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 80052b2:	69fa      	ldr	r2, [r7, #28]
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	fbb2 f2f3 	udiv	r2, r2, r3
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	601a      	str	r2, [r3, #0]
      break;
 80052be:	e003      	b.n	80052c8 <RCC_GetClocksFreq+0xdc>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	4a26      	ldr	r2, [pc, #152]	; (800535c <RCC_GetClocksFreq+0x170>)
 80052c4:	601a      	str	r2, [r3, #0]
      break;
 80052c6:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80052c8:	4b23      	ldr	r3, [pc, #140]	; (8005358 <RCC_GetClocksFreq+0x16c>)
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80052d0:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 80052d2:	69bb      	ldr	r3, [r7, #24]
 80052d4:	ea4f 1313 	mov.w	r3, r3, lsr #4
 80052d8:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80052da:	4a22      	ldr	r2, [pc, #136]	; (8005364 <RCC_GetClocksFreq+0x178>)
 80052dc:	69bb      	ldr	r3, [r7, #24]
 80052de:	18d3      	adds	r3, r2, r3
 80052e0:	781b      	ldrb	r3, [r3, #0]
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	fa22 f203 	lsr.w	r2, r2, r3
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80052f4:	4b18      	ldr	r3, [pc, #96]	; (8005358 <RCC_GetClocksFreq+0x16c>)
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80052fc:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 80052fe:	69bb      	ldr	r3, [r7, #24]
 8005300:	ea4f 2393 	mov.w	r3, r3, lsr #10
 8005304:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8005306:	4a17      	ldr	r2, [pc, #92]	; (8005364 <RCC_GetClocksFreq+0x178>)
 8005308:	69bb      	ldr	r3, [r7, #24]
 800530a:	18d3      	adds	r3, r2, r3
 800530c:	781b      	ldrb	r3, [r3, #0]
 800530e:	b2db      	uxtb	r3, r3
 8005310:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	685a      	ldr	r2, [r3, #4]
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	fa22 f203 	lsr.w	r2, r2, r3
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8005320:	4b0d      	ldr	r3, [pc, #52]	; (8005358 <RCC_GetClocksFreq+0x16c>)
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005328:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 800532a:	69bb      	ldr	r3, [r7, #24]
 800532c:	ea4f 3353 	mov.w	r3, r3, lsr #13
 8005330:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8005332:	4a0c      	ldr	r2, [pc, #48]	; (8005364 <RCC_GetClocksFreq+0x178>)
 8005334:	69bb      	ldr	r3, [r7, #24]
 8005336:	18d3      	adds	r3, r2, r3
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	b2db      	uxtb	r3, r3
 800533c:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	685a      	ldr	r2, [r3, #4]
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	fa22 f203 	lsr.w	r2, r2, r3
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	60da      	str	r2, [r3, #12]
}
 800534c:	f107 0724 	add.w	r7, r7, #36	; 0x24
 8005350:	46bd      	mov	sp, r7
 8005352:	bc80      	pop	{r7}
 8005354:	4770      	bx	lr
 8005356:	bf00      	nop
 8005358:	40023800 	.word	0x40023800
 800535c:	00f42400 	.word	0x00f42400
 8005360:	007a1200 	.word	0x007a1200
 8005364:	2000010c 	.word	0x2000010c

08005368 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8005368:	b480      	push	{r7}
 800536a:	b083      	sub	sp, #12
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	460b      	mov	r3, r1
 8005372:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8005374:	78fb      	ldrb	r3, [r7, #3]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d007      	beq.n	800538a <RCC_AHB1PeriphClockCmd+0x22>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800537a:	4b0b      	ldr	r3, [pc, #44]	; (80053a8 <RCC_AHB1PeriphClockCmd+0x40>)
 800537c:	4a0a      	ldr	r2, [pc, #40]	; (80053a8 <RCC_AHB1PeriphClockCmd+0x40>)
 800537e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	ea41 0202 	orr.w	r2, r1, r2
 8005386:	631a      	str	r2, [r3, #48]	; 0x30
 8005388:	e008      	b.n	800539c <RCC_AHB1PeriphClockCmd+0x34>
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 800538a:	4b07      	ldr	r3, [pc, #28]	; (80053a8 <RCC_AHB1PeriphClockCmd+0x40>)
 800538c:	4a06      	ldr	r2, [pc, #24]	; (80053a8 <RCC_AHB1PeriphClockCmd+0x40>)
 800538e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8005390:	687a      	ldr	r2, [r7, #4]
 8005392:	ea6f 0202 	mvn.w	r2, r2
 8005396:	ea01 0202 	and.w	r2, r1, r2
 800539a:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 800539c:	f107 070c 	add.w	r7, r7, #12
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bc80      	pop	{r7}
 80053a4:	4770      	bx	lr
 80053a6:	bf00      	nop
 80053a8:	40023800 	.word	0x40023800

080053ac <RCC_AHB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b083      	sub	sp, #12
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	460b      	mov	r3, r1
 80053b6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80053b8:	78fb      	ldrb	r3, [r7, #3]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d007      	beq.n	80053ce <RCC_AHB2PeriphClockCmd+0x22>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 80053be:	4b0b      	ldr	r3, [pc, #44]	; (80053ec <RCC_AHB2PeriphClockCmd+0x40>)
 80053c0:	4a0a      	ldr	r2, [pc, #40]	; (80053ec <RCC_AHB2PeriphClockCmd+0x40>)
 80053c2:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80053c4:	687a      	ldr	r2, [r7, #4]
 80053c6:	ea41 0202 	orr.w	r2, r1, r2
 80053ca:	635a      	str	r2, [r3, #52]	; 0x34
 80053cc:	e008      	b.n	80053e0 <RCC_AHB2PeriphClockCmd+0x34>
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
 80053ce:	4b07      	ldr	r3, [pc, #28]	; (80053ec <RCC_AHB2PeriphClockCmd+0x40>)
 80053d0:	4a06      	ldr	r2, [pc, #24]	; (80053ec <RCC_AHB2PeriphClockCmd+0x40>)
 80053d2:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	ea6f 0202 	mvn.w	r2, r2
 80053da:	ea01 0202 	and.w	r2, r1, r2
 80053de:	635a      	str	r2, [r3, #52]	; 0x34
  }
}
 80053e0:	f107 070c 	add.w	r7, r7, #12
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bc80      	pop	{r7}
 80053e8:	4770      	bx	lr
 80053ea:	bf00      	nop
 80053ec:	40023800 	.word	0x40023800

080053f0 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b083      	sub	sp, #12
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	460b      	mov	r3, r1
 80053fa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80053fc:	78fb      	ldrb	r3, [r7, #3]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d007      	beq.n	8005412 <RCC_APB1PeriphClockCmd+0x22>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8005402:	4b0b      	ldr	r3, [pc, #44]	; (8005430 <RCC_APB1PeriphClockCmd+0x40>)
 8005404:	4a0a      	ldr	r2, [pc, #40]	; (8005430 <RCC_APB1PeriphClockCmd+0x40>)
 8005406:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	ea41 0202 	orr.w	r2, r1, r2
 800540e:	641a      	str	r2, [r3, #64]	; 0x40
 8005410:	e008      	b.n	8005424 <RCC_APB1PeriphClockCmd+0x34>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8005412:	4b07      	ldr	r3, [pc, #28]	; (8005430 <RCC_APB1PeriphClockCmd+0x40>)
 8005414:	4a06      	ldr	r2, [pc, #24]	; (8005430 <RCC_APB1PeriphClockCmd+0x40>)
 8005416:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8005418:	687a      	ldr	r2, [r7, #4]
 800541a:	ea6f 0202 	mvn.w	r2, r2
 800541e:	ea01 0202 	and.w	r2, r1, r2
 8005422:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 8005424:	f107 070c 	add.w	r7, r7, #12
 8005428:	46bd      	mov	sp, r7
 800542a:	bc80      	pop	{r7}
 800542c:	4770      	bx	lr
 800542e:	bf00      	nop
 8005430:	40023800 	.word	0x40023800

08005434 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8005434:	b480      	push	{r7}
 8005436:	b083      	sub	sp, #12
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	460b      	mov	r3, r1
 800543e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005440:	78fb      	ldrb	r3, [r7, #3]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d007      	beq.n	8005456 <RCC_APB2PeriphClockCmd+0x22>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8005446:	4b0b      	ldr	r3, [pc, #44]	; (8005474 <RCC_APB2PeriphClockCmd+0x40>)
 8005448:	4a0a      	ldr	r2, [pc, #40]	; (8005474 <RCC_APB2PeriphClockCmd+0x40>)
 800544a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	ea41 0202 	orr.w	r2, r1, r2
 8005452:	645a      	str	r2, [r3, #68]	; 0x44
 8005454:	e008      	b.n	8005468 <RCC_APB2PeriphClockCmd+0x34>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8005456:	4b07      	ldr	r3, [pc, #28]	; (8005474 <RCC_APB2PeriphClockCmd+0x40>)
 8005458:	4a06      	ldr	r2, [pc, #24]	; (8005474 <RCC_APB2PeriphClockCmd+0x40>)
 800545a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800545c:	687a      	ldr	r2, [r7, #4]
 800545e:	ea6f 0202 	mvn.w	r2, r2
 8005462:	ea01 0202 	and.w	r2, r1, r2
 8005466:	645a      	str	r2, [r3, #68]	; 0x44
  }
}
 8005468:	f107 070c 	add.w	r7, r7, #12
 800546c:	46bd      	mov	sp, r7
 800546e:	bc80      	pop	{r7}
 8005470:	4770      	bx	lr
 8005472:	bf00      	nop
 8005474:	40023800 	.word	0x40023800

08005478 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8005478:	b480      	push	{r7}
 800547a:	b083      	sub	sp, #12
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	460b      	mov	r3, r1
 8005482:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8005484:	78fb      	ldrb	r3, [r7, #3]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d007      	beq.n	800549a <RCC_APB1PeriphResetCmd+0x22>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 800548a:	4b0b      	ldr	r3, [pc, #44]	; (80054b8 <RCC_APB1PeriphResetCmd+0x40>)
 800548c:	4a0a      	ldr	r2, [pc, #40]	; (80054b8 <RCC_APB1PeriphResetCmd+0x40>)
 800548e:	6a11      	ldr	r1, [r2, #32]
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	ea41 0202 	orr.w	r2, r1, r2
 8005496:	621a      	str	r2, [r3, #32]
 8005498:	e008      	b.n	80054ac <RCC_APB1PeriphResetCmd+0x34>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 800549a:	4b07      	ldr	r3, [pc, #28]	; (80054b8 <RCC_APB1PeriphResetCmd+0x40>)
 800549c:	4a06      	ldr	r2, [pc, #24]	; (80054b8 <RCC_APB1PeriphResetCmd+0x40>)
 800549e:	6a11      	ldr	r1, [r2, #32]
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	ea6f 0202 	mvn.w	r2, r2
 80054a6:	ea01 0202 	and.w	r2, r1, r2
 80054aa:	621a      	str	r2, [r3, #32]
  }
}
 80054ac:	f107 070c 	add.w	r7, r7, #12
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bc80      	pop	{r7}
 80054b4:	4770      	bx	lr
 80054b6:	bf00      	nop
 80054b8:	40023800 	.word	0x40023800

080054bc <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80054bc:	b480      	push	{r7}
 80054be:	b083      	sub	sp, #12
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
 80054c4:	460b      	mov	r3, r1
 80054c6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80054c8:	78fb      	ldrb	r3, [r7, #3]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d007      	beq.n	80054de <RCC_APB2PeriphResetCmd+0x22>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 80054ce:	4b0b      	ldr	r3, [pc, #44]	; (80054fc <RCC_APB2PeriphResetCmd+0x40>)
 80054d0:	4a0a      	ldr	r2, [pc, #40]	; (80054fc <RCC_APB2PeriphResetCmd+0x40>)
 80054d2:	6a51      	ldr	r1, [r2, #36]	; 0x24
 80054d4:	687a      	ldr	r2, [r7, #4]
 80054d6:	ea41 0202 	orr.w	r2, r1, r2
 80054da:	625a      	str	r2, [r3, #36]	; 0x24
 80054dc:	e008      	b.n	80054f0 <RCC_APB2PeriphResetCmd+0x34>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 80054de:	4b07      	ldr	r3, [pc, #28]	; (80054fc <RCC_APB2PeriphResetCmd+0x40>)
 80054e0:	4a06      	ldr	r2, [pc, #24]	; (80054fc <RCC_APB2PeriphResetCmd+0x40>)
 80054e2:	6a51      	ldr	r1, [r2, #36]	; 0x24
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	ea6f 0202 	mvn.w	r2, r2
 80054ea:	ea01 0202 	and.w	r2, r1, r2
 80054ee:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80054f0:	f107 070c 	add.w	r7, r7, #12
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bc80      	pop	{r7}
 80054f8:	4770      	bx	lr
 80054fa:	bf00      	nop
 80054fc:	40023800 	.word	0x40023800

08005500 <SPI_I2S_DeInit>:
  *         is managed by the I2S peripheral clock).
  *             
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b082      	sub	sp, #8
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	4b1a      	ldr	r3, [pc, #104]	; (8005574 <SPI_I2S_DeInit+0x74>)
 800550c:	429a      	cmp	r2, r3
 800550e:	d10c      	bne.n	800552a <SPI_I2S_DeInit+0x2a>
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 8005510:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005514:	f04f 0101 	mov.w	r1, #1
 8005518:	f7ff ffd0 	bl	80054bc <RCC_APB2PeriphResetCmd>
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 800551c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005520:	f04f 0100 	mov.w	r1, #0
 8005524:	f7ff ffca 	bl	80054bc <RCC_APB2PeriphResetCmd>
 8005528:	e020      	b.n	800556c <SPI_I2S_DeInit+0x6c>
  }
  else if (SPIx == SPI2)
 800552a:	687a      	ldr	r2, [r7, #4]
 800552c:	4b12      	ldr	r3, [pc, #72]	; (8005578 <SPI_I2S_DeInit+0x78>)
 800552e:	429a      	cmp	r2, r3
 8005530:	d10c      	bne.n	800554c <SPI_I2S_DeInit+0x4c>
  {
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 8005532:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8005536:	f04f 0101 	mov.w	r1, #1
 800553a:	f7ff ff9d 	bl	8005478 <RCC_APB1PeriphResetCmd>
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 800553e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8005542:	f04f 0100 	mov.w	r1, #0
 8005546:	f7ff ff97 	bl	8005478 <RCC_APB1PeriphResetCmd>
 800554a:	e00f      	b.n	800556c <SPI_I2S_DeInit+0x6c>
    }
  else
  {
    if (SPIx == SPI3)
 800554c:	687a      	ldr	r2, [r7, #4]
 800554e:	4b0b      	ldr	r3, [pc, #44]	; (800557c <SPI_I2S_DeInit+0x7c>)
 8005550:	429a      	cmp	r2, r3
 8005552:	d10b      	bne.n	800556c <SPI_I2S_DeInit+0x6c>
    {
      /* Enable SPI3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 8005554:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005558:	f04f 0101 	mov.w	r1, #1
 800555c:	f7ff ff8c 	bl	8005478 <RCC_APB1PeriphResetCmd>
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 8005560:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005564:	f04f 0100 	mov.w	r1, #0
 8005568:	f7ff ff86 	bl	8005478 <RCC_APB1PeriphResetCmd>
    }
  }
}
 800556c:	f107 0708 	add.w	r7, r7, #8
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}
 8005574:	40013000 	.word	0x40013000
 8005578:	40003800 	.word	0x40003800
 800557c:	40003c00 	.word	0x40003c00

08005580 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8005580:	b480      	push	{r7}
 8005582:	b085      	sub	sp, #20
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800558a:	f04f 0300 	mov.w	r3, #0
 800558e:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	881b      	ldrh	r3, [r3, #0]
 8005594:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 8005596:	89fb      	ldrh	r3, [r7, #14]
 8005598:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 800559c:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	881a      	ldrh	r2, [r3, #0]
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	885b      	ldrh	r3, [r3, #2]
 80055a6:	ea42 0303 	orr.w	r3, r2, r3
 80055aa:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	889b      	ldrh	r3, [r3, #4]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80055b0:	ea42 0303 	orr.w	r3, r2, r3
 80055b4:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	88db      	ldrh	r3, [r3, #6]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80055ba:	ea42 0303 	orr.w	r3, r2, r3
 80055be:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	891b      	ldrh	r3, [r3, #8]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80055c4:	ea42 0303 	orr.w	r3, r2, r3
 80055c8:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	895b      	ldrh	r3, [r3, #10]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80055ce:	ea42 0303 	orr.w	r3, r2, r3
 80055d2:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	899b      	ldrh	r3, [r3, #12]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80055d8:	ea42 0303 	orr.w	r3, r2, r3
 80055dc:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	89db      	ldrh	r3, [r3, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80055e2:	ea42 0303 	orr.w	r3, r2, r3
 80055e6:	b29a      	uxth	r2, r3
 80055e8:	89fb      	ldrh	r3, [r7, #14]
 80055ea:	ea42 0303 	orr.w	r3, r2, r3
 80055ee:	81fb      	strh	r3, [r7, #14]
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	89fa      	ldrh	r2, [r7, #14]
 80055f4:	801a      	strh	r2, [r3, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	8b9b      	ldrh	r3, [r3, #28]
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005600:	b29a      	uxth	r2, r3
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	839a      	strh	r2, [r3, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	8a1a      	ldrh	r2, [r3, #16]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	821a      	strh	r2, [r3, #16]
}
 800560e:	f107 0714 	add.w	r7, r7, #20
 8005612:	46bd      	mov	sp, r7
 8005614:	bc80      	pop	{r7}
 8005616:	4770      	bx	lr

08005618 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8005618:	b480      	push	{r7}
 800561a:	b083      	sub	sp, #12
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
 8005620:	460b      	mov	r3, r1
 8005622:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8005624:	78fb      	ldrb	r3, [r7, #3]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d008      	beq.n	800563c <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	881b      	ldrh	r3, [r3, #0]
 800562e:	b29b      	uxth	r3, r3
 8005630:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005634:	b29a      	uxth	r2, r3
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	801a      	strh	r2, [r3, #0]
 800563a:	e007      	b.n	800564c <SPI_Cmd+0x34>
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	881b      	ldrh	r3, [r3, #0]
 8005640:	b29b      	uxth	r3, r3
 8005642:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005646:	b29a      	uxth	r2, r3
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	801a      	strh	r2, [r3, #0]
  }
}
 800564c:	f107 070c 	add.w	r7, r7, #12
 8005650:	46bd      	mov	sp, r7
 8005652:	bc80      	pop	{r7}
 8005654:	4770      	bx	lr
 8005656:	bf00      	nop

08005658 <SPI_I2S_ReceiveData>:
  * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 8005658:	b480      	push	{r7}
 800565a:	b083      	sub	sp, #12
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	899b      	ldrh	r3, [r3, #12]
 8005664:	b29b      	uxth	r3, r3
}
 8005666:	4618      	mov	r0, r3
 8005668:	f107 070c 	add.w	r7, r7, #12
 800566c:	46bd      	mov	sp, r7
 800566e:	bc80      	pop	{r7}
 8005670:	4770      	bx	lr
 8005672:	bf00      	nop

08005674 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8005674:	b480      	push	{r7}
 8005676:	b083      	sub	sp, #12
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	460b      	mov	r3, r1
 800567e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	887a      	ldrh	r2, [r7, #2]
 8005684:	819a      	strh	r2, [r3, #12]
}
 8005686:	f107 070c 	add.w	r7, r7, #12
 800568a:	46bd      	mov	sp, r7
 800568c:	bc80      	pop	{r7}
 800568e:	4770      	bx	lr

08005690 <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8005690:	b480      	push	{r7}
 8005692:	b085      	sub	sp, #20
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	460b      	mov	r3, r1
 800569a:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 800569c:	f04f 0300 	mov.w	r3, #0
 80056a0:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	891b      	ldrh	r3, [r3, #8]
 80056a6:	b29a      	uxth	r2, r3
 80056a8:	887b      	ldrh	r3, [r7, #2]
 80056aa:	ea02 0303 	and.w	r3, r2, r3
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d003      	beq.n	80056bc <SPI_I2S_GetFlagStatus+0x2c>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 80056b4:	f04f 0301 	mov.w	r3, #1
 80056b8:	73fb      	strb	r3, [r7, #15]
 80056ba:	e002      	b.n	80056c2 <SPI_I2S_GetFlagStatus+0x32>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 80056bc:	f04f 0300 	mov.w	r3, #0
 80056c0:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 80056c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	f107 0714 	add.w	r7, r7, #20
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bc80      	pop	{r7}
 80056ce:	4770      	bx	lr

080056d0 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b085      	sub	sp, #20
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
 80056d8:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 80056da:	f04f 0300 	mov.w	r3, #0
 80056de:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	881b      	ldrh	r3, [r3, #0]
 80056e4:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 80056e6:	687a      	ldr	r2, [r7, #4]
 80056e8:	4b29      	ldr	r3, [pc, #164]	; (8005790 <TIM_TimeBaseInit+0xc0>)
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d013      	beq.n	8005716 <TIM_TimeBaseInit+0x46>
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	4b28      	ldr	r3, [pc, #160]	; (8005794 <TIM_TimeBaseInit+0xc4>)
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d00f      	beq.n	8005716 <TIM_TimeBaseInit+0x46>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056fc:	d00b      	beq.n	8005716 <TIM_TimeBaseInit+0x46>
     (TIMx == TIM2) || (TIMx == TIM3)||
 80056fe:	687a      	ldr	r2, [r7, #4]
 8005700:	4b25      	ldr	r3, [pc, #148]	; (8005798 <TIM_TimeBaseInit+0xc8>)
 8005702:	429a      	cmp	r2, r3
 8005704:	d007      	beq.n	8005716 <TIM_TimeBaseInit+0x46>
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	4b24      	ldr	r3, [pc, #144]	; (800579c <TIM_TimeBaseInit+0xcc>)
 800570a:	429a      	cmp	r2, r3
 800570c:	d003      	beq.n	8005716 <TIM_TimeBaseInit+0x46>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	4b23      	ldr	r3, [pc, #140]	; (80057a0 <TIM_TimeBaseInit+0xd0>)
 8005712:	429a      	cmp	r2, r3
 8005714:	d109      	bne.n	800572a <TIM_TimeBaseInit+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8005716:	89fb      	ldrh	r3, [r7, #14]
 8005718:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800571c:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	885a      	ldrh	r2, [r3, #2]
 8005722:	89fb      	ldrh	r3, [r7, #14]
 8005724:	ea42 0303 	orr.w	r3, r2, r3
 8005728:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 800572a:	687a      	ldr	r2, [r7, #4]
 800572c:	4b1d      	ldr	r3, [pc, #116]	; (80057a4 <TIM_TimeBaseInit+0xd4>)
 800572e:	429a      	cmp	r2, r3
 8005730:	d00d      	beq.n	800574e <TIM_TimeBaseInit+0x7e>
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	4b1c      	ldr	r3, [pc, #112]	; (80057a8 <TIM_TimeBaseInit+0xd8>)
 8005736:	429a      	cmp	r2, r3
 8005738:	d009      	beq.n	800574e <TIM_TimeBaseInit+0x7e>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 800573a:	89fb      	ldrh	r3, [r7, #14]
 800573c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005740:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	891a      	ldrh	r2, [r3, #8]
 8005746:	89fb      	ldrh	r3, [r7, #14]
 8005748:	ea42 0303 	orr.w	r3, r2, r3
 800574c:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	89fa      	ldrh	r2, [r7, #14]
 8005752:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	685a      	ldr	r2, [r3, #4]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	881a      	ldrh	r2, [r3, #0]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8005764:	687a      	ldr	r2, [r7, #4]
 8005766:	4b0a      	ldr	r3, [pc, #40]	; (8005790 <TIM_TimeBaseInit+0xc0>)
 8005768:	429a      	cmp	r2, r3
 800576a:	d003      	beq.n	8005774 <TIM_TimeBaseInit+0xa4>
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	4b09      	ldr	r3, [pc, #36]	; (8005794 <TIM_TimeBaseInit+0xc4>)
 8005770:	429a      	cmp	r2, r3
 8005772:	d104      	bne.n	800577e <TIM_TimeBaseInit+0xae>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	7a9b      	ldrb	r3, [r3, #10]
 8005778:	461a      	mov	r2, r3
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f04f 0201 	mov.w	r2, #1
 8005784:	829a      	strh	r2, [r3, #20]
}
 8005786:	f107 0714 	add.w	r7, r7, #20
 800578a:	46bd      	mov	sp, r7
 800578c:	bc80      	pop	{r7}
 800578e:	4770      	bx	lr
 8005790:	40010000 	.word	0x40010000
 8005794:	40010400 	.word	0x40010400
 8005798:	40000400 	.word	0x40000400
 800579c:	40000800 	.word	0x40000800
 80057a0:	40000c00 	.word	0x40000c00
 80057a4:	40001000 	.word	0x40001000
 80057a8:	40001400 	.word	0x40001400

080057ac <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b083      	sub	sp, #12
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
 80057b4:	460b      	mov	r3, r1
 80057b6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80057b8:	78fb      	ldrb	r3, [r7, #3]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d008      	beq.n	80057d0 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	881b      	ldrh	r3, [r3, #0]
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	f043 0301 	orr.w	r3, r3, #1
 80057c8:	b29a      	uxth	r2, r3
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	801a      	strh	r2, [r3, #0]
 80057ce:	e007      	b.n	80057e0 <TIM_Cmd+0x34>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	881b      	ldrh	r3, [r3, #0]
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	f023 0301 	bic.w	r3, r3, #1
 80057da:	b29a      	uxth	r2, r3
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	801a      	strh	r2, [r3, #0]
  }
}
 80057e0:	f107 070c 	add.w	r7, r7, #12
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bc80      	pop	{r7}
 80057e8:	4770      	bx	lr
 80057ea:	bf00      	nop

080057ec <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b085      	sub	sp, #20
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 80057f6:	f04f 0300 	mov.w	r3, #0
 80057fa:	817b      	strh	r3, [r7, #10]
 80057fc:	f04f 0300 	mov.w	r3, #0
 8005800:	81fb      	strh	r3, [r7, #14]
 8005802:	f04f 0300 	mov.w	r3, #0
 8005806:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	8c1b      	ldrh	r3, [r3, #32]
 800580c:	b29b      	uxth	r3, r3
 800580e:	f023 0301 	bic.w	r3, r3, #1
 8005812:	b29a      	uxth	r2, r3
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	8c1b      	ldrh	r3, [r3, #32]
 800581c:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	889b      	ldrh	r3, [r3, #4]
 8005822:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	8b1b      	ldrh	r3, [r3, #24]
 8005828:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
 800582a:	897b      	ldrh	r3, [r7, #10]
 800582c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005830:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 8005832:	897b      	ldrh	r3, [r7, #10]
 8005834:	f023 0303 	bic.w	r3, r3, #3
 8005838:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	881a      	ldrh	r2, [r3, #0]
 800583e:	897b      	ldrh	r3, [r7, #10]
 8005840:	ea42 0303 	orr.w	r3, r2, r3
 8005844:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 8005846:	89fb      	ldrh	r3, [r7, #14]
 8005848:	f023 0302 	bic.w	r3, r3, #2
 800584c:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	899a      	ldrh	r2, [r3, #12]
 8005852:	89fb      	ldrh	r3, [r7, #14]
 8005854:	ea42 0303 	orr.w	r3, r2, r3
 8005858:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	885a      	ldrh	r2, [r3, #2]
 800585e:	89fb      	ldrh	r3, [r7, #14]
 8005860:	ea42 0303 	orr.w	r3, r2, r3
 8005864:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	4b20      	ldr	r3, [pc, #128]	; (80058ec <TIM_OC1Init+0x100>)
 800586a:	429a      	cmp	r2, r3
 800586c:	d003      	beq.n	8005876 <TIM_OC1Init+0x8a>
 800586e:	687a      	ldr	r2, [r7, #4]
 8005870:	4b1f      	ldr	r3, [pc, #124]	; (80058f0 <TIM_OC1Init+0x104>)
 8005872:	429a      	cmp	r2, r3
 8005874:	d127      	bne.n	80058c6 <TIM_OC1Init+0xda>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 8005876:	89fb      	ldrh	r3, [r7, #14]
 8005878:	f023 0308 	bic.w	r3, r3, #8
 800587c:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	89da      	ldrh	r2, [r3, #14]
 8005882:	89fb      	ldrh	r3, [r7, #14]
 8005884:	ea42 0303 	orr.w	r3, r2, r3
 8005888:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
 800588a:	89fb      	ldrh	r3, [r7, #14]
 800588c:	f023 0304 	bic.w	r3, r3, #4
 8005890:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	889a      	ldrh	r2, [r3, #4]
 8005896:	89fb      	ldrh	r3, [r7, #14]
 8005898:	ea42 0303 	orr.w	r3, r2, r3
 800589c:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
 800589e:	89bb      	ldrh	r3, [r7, #12]
 80058a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058a4:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 80058a6:	89bb      	ldrh	r3, [r7, #12]
 80058a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80058ac:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	8a1a      	ldrh	r2, [r3, #16]
 80058b2:	89bb      	ldrh	r3, [r7, #12]
 80058b4:	ea42 0303 	orr.w	r3, r2, r3
 80058b8:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	8a5a      	ldrh	r2, [r3, #18]
 80058be:	89bb      	ldrh	r3, [r7, #12]
 80058c0:	ea42 0303 	orr.w	r3, r2, r3
 80058c4:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	89ba      	ldrh	r2, [r7, #12]
 80058ca:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	897a      	ldrh	r2, [r7, #10]
 80058d0:	831a      	strh	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	689a      	ldr	r2, [r3, #8]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	89fa      	ldrh	r2, [r7, #14]
 80058de:	841a      	strh	r2, [r3, #32]
}
 80058e0:	f107 0714 	add.w	r7, r7, #20
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bc80      	pop	{r7}
 80058e8:	4770      	bx	lr
 80058ea:	bf00      	nop
 80058ec:	40010000 	.word	0x40010000
 80058f0:	40010400 	.word	0x40010400

080058f4 <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b085      	sub	sp, #20
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 80058fe:	f04f 0300 	mov.w	r3, #0
 8005902:	817b      	strh	r3, [r7, #10]
 8005904:	f04f 0300 	mov.w	r3, #0
 8005908:	81fb      	strh	r3, [r7, #14]
 800590a:	f04f 0300 	mov.w	r3, #0
 800590e:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	8c1b      	ldrh	r3, [r3, #32]
 8005914:	b29b      	uxth	r3, r3
 8005916:	f023 0310 	bic.w	r3, r3, #16
 800591a:	b29a      	uxth	r2, r3
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	8c1b      	ldrh	r3, [r3, #32]
 8005924:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	889b      	ldrh	r3, [r3, #4]
 800592a:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	8b1b      	ldrh	r3, [r3, #24]
 8005930:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
 8005932:	897b      	ldrh	r3, [r7, #10]
 8005934:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005938:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
 800593a:	897b      	ldrh	r3, [r7, #10]
 800593c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005940:	817b      	strh	r3, [r7, #10]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	881b      	ldrh	r3, [r3, #0]
 8005946:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800594a:	b29a      	uxth	r2, r3
 800594c:	897b      	ldrh	r3, [r7, #10]
 800594e:	ea42 0303 	orr.w	r3, r2, r3
 8005952:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 8005954:	89fb      	ldrh	r3, [r7, #14]
 8005956:	f023 0320 	bic.w	r3, r3, #32
 800595a:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	899b      	ldrh	r3, [r3, #12]
 8005960:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8005964:	b29a      	uxth	r2, r3
 8005966:	89fb      	ldrh	r3, [r7, #14]
 8005968:	ea42 0303 	orr.w	r3, r2, r3
 800596c:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	885b      	ldrh	r3, [r3, #2]
 8005972:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8005976:	b29a      	uxth	r2, r3
 8005978:	89fb      	ldrh	r3, [r7, #14]
 800597a:	ea42 0303 	orr.w	r3, r2, r3
 800597e:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8005980:	687a      	ldr	r2, [r7, #4]
 8005982:	4b26      	ldr	r3, [pc, #152]	; (8005a1c <TIM_OC2Init+0x128>)
 8005984:	429a      	cmp	r2, r3
 8005986:	d003      	beq.n	8005990 <TIM_OC2Init+0x9c>
 8005988:	687a      	ldr	r2, [r7, #4]
 800598a:	4b25      	ldr	r3, [pc, #148]	; (8005a20 <TIM_OC2Init+0x12c>)
 800598c:	429a      	cmp	r2, r3
 800598e:	d133      	bne.n	80059f8 <TIM_OC2Init+0x104>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 8005990:	89fb      	ldrh	r3, [r7, #14]
 8005992:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005996:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	89db      	ldrh	r3, [r3, #14]
 800599c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80059a0:	b29a      	uxth	r2, r3
 80059a2:	89fb      	ldrh	r3, [r7, #14]
 80059a4:	ea42 0303 	orr.w	r3, r2, r3
 80059a8:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
 80059aa:	89fb      	ldrh	r3, [r7, #14]
 80059ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059b0:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	889b      	ldrh	r3, [r3, #4]
 80059b6:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80059ba:	b29a      	uxth	r2, r3
 80059bc:	89fb      	ldrh	r3, [r7, #14]
 80059be:	ea42 0303 	orr.w	r3, r2, r3
 80059c2:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
 80059c4:	89bb      	ldrh	r3, [r7, #12]
 80059c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80059ca:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
 80059cc:	89bb      	ldrh	r3, [r7, #12]
 80059ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80059d2:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	8a1b      	ldrh	r3, [r3, #16]
 80059d8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80059dc:	b29a      	uxth	r2, r3
 80059de:	89bb      	ldrh	r3, [r7, #12]
 80059e0:	ea42 0303 	orr.w	r3, r2, r3
 80059e4:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	8a5b      	ldrh	r3, [r3, #18]
 80059ea:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80059ee:	b29a      	uxth	r2, r3
 80059f0:	89bb      	ldrh	r3, [r7, #12]
 80059f2:	ea42 0303 	orr.w	r3, r2, r3
 80059f6:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	89ba      	ldrh	r2, [r7, #12]
 80059fc:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	897a      	ldrh	r2, [r7, #10]
 8005a02:	831a      	strh	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	689a      	ldr	r2, [r3, #8]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	89fa      	ldrh	r2, [r7, #14]
 8005a10:	841a      	strh	r2, [r3, #32]
}
 8005a12:	f107 0714 	add.w	r7, r7, #20
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bc80      	pop	{r7}
 8005a1a:	4770      	bx	lr
 8005a1c:	40010000 	.word	0x40010000
 8005a20:	40010400 	.word	0x40010400

08005a24 <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b085      	sub	sp, #20
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8005a2e:	f04f 0300 	mov.w	r3, #0
 8005a32:	817b      	strh	r3, [r7, #10]
 8005a34:	f04f 0300 	mov.w	r3, #0
 8005a38:	81fb      	strh	r3, [r7, #14]
 8005a3a:	f04f 0300 	mov.w	r3, #0
 8005a3e:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	8c1b      	ldrh	r3, [r3, #32]
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a4a:	b29a      	uxth	r2, r3
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	8c1b      	ldrh	r3, [r3, #32]
 8005a54:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	889b      	ldrh	r3, [r3, #4]
 8005a5a:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	8b9b      	ldrh	r3, [r3, #28]
 8005a60:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
 8005a62:	897b      	ldrh	r3, [r7, #10]
 8005a64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a68:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 8005a6a:	897b      	ldrh	r3, [r7, #10]
 8005a6c:	f023 0303 	bic.w	r3, r3, #3
 8005a70:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	881a      	ldrh	r2, [r3, #0]
 8005a76:	897b      	ldrh	r3, [r7, #10]
 8005a78:	ea42 0303 	orr.w	r3, r2, r3
 8005a7c:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 8005a7e:	89fb      	ldrh	r3, [r7, #14]
 8005a80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a84:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	899b      	ldrh	r3, [r3, #12]
 8005a8a:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8005a8e:	b29a      	uxth	r2, r3
 8005a90:	89fb      	ldrh	r3, [r7, #14]
 8005a92:	ea42 0303 	orr.w	r3, r2, r3
 8005a96:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	885b      	ldrh	r3, [r3, #2]
 8005a9c:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8005aa0:	b29a      	uxth	r2, r3
 8005aa2:	89fb      	ldrh	r3, [r7, #14]
 8005aa4:	ea42 0303 	orr.w	r3, r2, r3
 8005aa8:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	4b26      	ldr	r3, [pc, #152]	; (8005b48 <TIM_OC3Init+0x124>)
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	d003      	beq.n	8005aba <TIM_OC3Init+0x96>
 8005ab2:	687a      	ldr	r2, [r7, #4]
 8005ab4:	4b25      	ldr	r3, [pc, #148]	; (8005b4c <TIM_OC3Init+0x128>)
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d133      	bne.n	8005b22 <TIM_OC3Init+0xfe>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 8005aba:	89fb      	ldrh	r3, [r7, #14]
 8005abc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ac0:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	89db      	ldrh	r3, [r3, #14]
 8005ac6:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8005aca:	b29a      	uxth	r2, r3
 8005acc:	89fb      	ldrh	r3, [r7, #14]
 8005ace:	ea42 0303 	orr.w	r3, r2, r3
 8005ad2:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 8005ad4:	89fb      	ldrh	r3, [r7, #14]
 8005ad6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ada:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	889b      	ldrh	r3, [r3, #4]
 8005ae0:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8005ae4:	b29a      	uxth	r2, r3
 8005ae6:	89fb      	ldrh	r3, [r7, #14]
 8005ae8:	ea42 0303 	orr.w	r3, r2, r3
 8005aec:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
 8005aee:	89bb      	ldrh	r3, [r7, #12]
 8005af0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005af4:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 8005af6:	89bb      	ldrh	r3, [r7, #12]
 8005af8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005afc:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	8a1b      	ldrh	r3, [r3, #16]
 8005b02:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8005b06:	b29a      	uxth	r2, r3
 8005b08:	89bb      	ldrh	r3, [r7, #12]
 8005b0a:	ea42 0303 	orr.w	r3, r2, r3
 8005b0e:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	8a5b      	ldrh	r3, [r3, #18]
 8005b14:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8005b18:	b29a      	uxth	r2, r3
 8005b1a:	89bb      	ldrh	r3, [r7, #12]
 8005b1c:	ea42 0303 	orr.w	r3, r2, r3
 8005b20:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	89ba      	ldrh	r2, [r7, #12]
 8005b26:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	897a      	ldrh	r2, [r7, #10]
 8005b2c:	839a      	strh	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	689a      	ldr	r2, [r3, #8]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	89fa      	ldrh	r2, [r7, #14]
 8005b3a:	841a      	strh	r2, [r3, #32]
}
 8005b3c:	f107 0714 	add.w	r7, r7, #20
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bc80      	pop	{r7}
 8005b44:	4770      	bx	lr
 8005b46:	bf00      	nop
 8005b48:	40010000 	.word	0x40010000
 8005b4c:	40010400 	.word	0x40010400

08005b50 <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b085      	sub	sp, #20
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
 8005b58:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8005b5a:	f04f 0300 	mov.w	r3, #0
 8005b5e:	81bb      	strh	r3, [r7, #12]
 8005b60:	f04f 0300 	mov.w	r3, #0
 8005b64:	817b      	strh	r3, [r7, #10]
 8005b66:	f04f 0300 	mov.w	r3, #0
 8005b6a:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	8c1b      	ldrh	r3, [r3, #32]
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b76:	b29a      	uxth	r2, r3
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	8c1b      	ldrh	r3, [r3, #32]
 8005b80:	817b      	strh	r3, [r7, #10]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	889b      	ldrh	r3, [r3, #4]
 8005b86:	81fb      	strh	r3, [r7, #14]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	8b9b      	ldrh	r3, [r3, #28]
 8005b8c:	81bb      	strh	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
 8005b8e:	89bb      	ldrh	r3, [r7, #12]
 8005b90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b94:	81bb      	strh	r3, [r7, #12]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 8005b96:	89bb      	ldrh	r3, [r7, #12]
 8005b98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b9c:	81bb      	strh	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	881b      	ldrh	r3, [r3, #0]
 8005ba2:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8005ba6:	b29a      	uxth	r2, r3
 8005ba8:	89bb      	ldrh	r3, [r7, #12]
 8005baa:	ea42 0303 	orr.w	r3, r2, r3
 8005bae:	81bb      	strh	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 8005bb0:	897b      	ldrh	r3, [r7, #10]
 8005bb2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005bb6:	817b      	strh	r3, [r7, #10]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	899b      	ldrh	r3, [r3, #12]
 8005bbc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8005bc0:	b29a      	uxth	r2, r3
 8005bc2:	897b      	ldrh	r3, [r7, #10]
 8005bc4:	ea42 0303 	orr.w	r3, r2, r3
 8005bc8:	817b      	strh	r3, [r7, #10]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	885b      	ldrh	r3, [r3, #2]
 8005bce:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8005bd2:	b29a      	uxth	r2, r3
 8005bd4:	897b      	ldrh	r3, [r7, #10]
 8005bd6:	ea42 0303 	orr.w	r3, r2, r3
 8005bda:	817b      	strh	r3, [r7, #10]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 8005bdc:	687a      	ldr	r2, [r7, #4]
 8005bde:	4b13      	ldr	r3, [pc, #76]	; (8005c2c <TIM_OC4Init+0xdc>)
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d003      	beq.n	8005bec <TIM_OC4Init+0x9c>
 8005be4:	687a      	ldr	r2, [r7, #4]
 8005be6:	4b12      	ldr	r3, [pc, #72]	; (8005c30 <TIM_OC4Init+0xe0>)
 8005be8:	429a      	cmp	r2, r3
 8005bea:	d10c      	bne.n	8005c06 <TIM_OC4Init+0xb6>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
 8005bec:	89fb      	ldrh	r3, [r7, #14]
 8005bee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005bf2:	81fb      	strh	r3, [r7, #14]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	8a1b      	ldrh	r3, [r3, #16]
 8005bf8:	ea4f 1383 	mov.w	r3, r3, lsl #6
 8005bfc:	b29a      	uxth	r2, r3
 8005bfe:	89fb      	ldrh	r3, [r7, #14]
 8005c00:	ea42 0303 	orr.w	r3, r2, r3
 8005c04:	81fb      	strh	r3, [r7, #14]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	89fa      	ldrh	r2, [r7, #14]
 8005c0a:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	89ba      	ldrh	r2, [r7, #12]
 8005c10:	839a      	strh	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	689a      	ldr	r2, [r3, #8]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	897a      	ldrh	r2, [r7, #10]
 8005c1e:	841a      	strh	r2, [r3, #32]
}
 8005c20:	f107 0714 	add.w	r7, r7, #20
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bc80      	pop	{r7}
 8005c28:	4770      	bx	lr
 8005c2a:	bf00      	nop
 8005c2c:	40010000 	.word	0x40010000
 8005c30:	40010400 	.word	0x40010400

08005c34 <TIM_SetCompare1>:
  * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
  * @param  Compare1: specifies the Capture Compare1 register new value.
  * @retval None
  */
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint32_t Compare1)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b083      	sub	sp, #12
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	683a      	ldr	r2, [r7, #0]
 8005c42:	635a      	str	r2, [r3, #52]	; 0x34
}
 8005c44:	f107 070c 	add.w	r7, r7, #12
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bc80      	pop	{r7}
 8005c4c:	4770      	bx	lr
 8005c4e:	bf00      	nop

08005c50 <TIM_SetCompare2>:
  *         peripheral.
  * @param  Compare2: specifies the Capture Compare2 register new value.
  * @retval None
  */
void TIM_SetCompare2(TIM_TypeDef* TIMx, uint32_t Compare2)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b083      	sub	sp, #12
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
 8005c58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	683a      	ldr	r2, [r7, #0]
 8005c5e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8005c60:	f107 070c 	add.w	r7, r7, #12
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bc80      	pop	{r7}
 8005c68:	4770      	bx	lr
 8005c6a:	bf00      	nop

08005c6c <TIM_SetCompare3>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare3: specifies the Capture Compare3 register new value.
  * @retval None
  */
void TIM_SetCompare3(TIM_TypeDef* TIMx, uint32_t Compare3)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b083      	sub	sp, #12
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
 8005c74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	683a      	ldr	r2, [r7, #0]
 8005c7a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8005c7c:	f107 070c 	add.w	r7, r7, #12
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bc80      	pop	{r7}
 8005c84:	4770      	bx	lr
 8005c86:	bf00      	nop

08005c88 <TIM_SetCompare4>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare4: specifies the Capture Compare4 register new value.
  * @retval None
  */
void TIM_SetCompare4(TIM_TypeDef* TIMx, uint32_t Compare4)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b083      	sub	sp, #12
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	683a      	ldr	r2, [r7, #0]
 8005c96:	641a      	str	r2, [r3, #64]	; 0x40
}
 8005c98:	f107 070c 	add.w	r7, r7, #12
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bc80      	pop	{r7}
 8005ca0:	4770      	bx	lr
 8005ca2:	bf00      	nop

08005ca4 <TIM_OC1PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b085      	sub	sp, #20
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	460b      	mov	r3, r1
 8005cae:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8005cb0:	f04f 0300 	mov.w	r3, #0
 8005cb4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	8b1b      	ldrh	r3, [r3, #24]
 8005cba:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC1PE);
 8005cbc:	89fb      	ldrh	r3, [r7, #14]
 8005cbe:	f023 0308 	bic.w	r3, r3, #8
 8005cc2:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 8005cc4:	89fa      	ldrh	r2, [r7, #14]
 8005cc6:	887b      	ldrh	r3, [r7, #2]
 8005cc8:	ea42 0303 	orr.w	r3, r2, r3
 8005ccc:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	89fa      	ldrh	r2, [r7, #14]
 8005cd2:	831a      	strh	r2, [r3, #24]
}
 8005cd4:	f107 0714 	add.w	r7, r7, #20
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bc80      	pop	{r7}
 8005cdc:	4770      	bx	lr
 8005cde:	bf00      	nop

08005ce0 <TIM_OC2PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b085      	sub	sp, #20
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
 8005ce8:	460b      	mov	r3, r1
 8005cea:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8005cec:	f04f 0300 	mov.w	r3, #0
 8005cf0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	8b1b      	ldrh	r3, [r3, #24]
 8005cf6:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2PE);
 8005cf8:	89fb      	ldrh	r3, [r7, #14]
 8005cfa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005cfe:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 8005d00:	887b      	ldrh	r3, [r7, #2]
 8005d02:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8005d06:	b29a      	uxth	r2, r3
 8005d08:	89fb      	ldrh	r3, [r7, #14]
 8005d0a:	ea42 0303 	orr.w	r3, r2, r3
 8005d0e:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	89fa      	ldrh	r2, [r7, #14]
 8005d14:	831a      	strh	r2, [r3, #24]
}
 8005d16:	f107 0714 	add.w	r7, r7, #20
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bc80      	pop	{r7}
 8005d1e:	4770      	bx	lr

08005d20 <TIM_OC3PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b085      	sub	sp, #20
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	460b      	mov	r3, r1
 8005d2a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8005d2c:	f04f 0300 	mov.w	r3, #0
 8005d30:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	8b9b      	ldrh	r3, [r3, #28]
 8005d36:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
 8005d38:	89fb      	ldrh	r3, [r7, #14]
 8005d3a:	f023 0308 	bic.w	r3, r3, #8
 8005d3e:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 8005d40:	89fa      	ldrh	r2, [r7, #14]
 8005d42:	887b      	ldrh	r3, [r7, #2]
 8005d44:	ea42 0303 	orr.w	r3, r2, r3
 8005d48:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	89fa      	ldrh	r2, [r7, #14]
 8005d4e:	839a      	strh	r2, [r3, #28]
}
 8005d50:	f107 0714 	add.w	r7, r7, #20
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bc80      	pop	{r7}
 8005d58:	4770      	bx	lr
 8005d5a:	bf00      	nop

08005d5c <TIM_OC4PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b085      	sub	sp, #20
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
 8005d64:	460b      	mov	r3, r1
 8005d66:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8005d68:	f04f 0300 	mov.w	r3, #0
 8005d6c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	8b9b      	ldrh	r3, [r3, #28]
 8005d72:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4PE);
 8005d74:	89fb      	ldrh	r3, [r7, #14]
 8005d76:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d7a:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 8005d7c:	887b      	ldrh	r3, [r7, #2]
 8005d7e:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8005d82:	b29a      	uxth	r2, r3
 8005d84:	89fb      	ldrh	r3, [r7, #14]
 8005d86:	ea42 0303 	orr.w	r3, r2, r3
 8005d8a:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	89fa      	ldrh	r2, [r7, #14]
 8005d90:	839a      	strh	r2, [r3, #28]
}
 8005d92:	f107 0714 	add.w	r7, r7, #20
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bc80      	pop	{r7}
 8005d9a:	4770      	bx	lr

08005d9c <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005d9c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005d9e:	e003      	b.n	8005da8 <LoopCopyDataInit>

08005da0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005da0:	4b0a      	ldr	r3, [pc, #40]	; (8005dcc <LoopFillZerobss+0x10>)
  ldr  r3, [r3, r1]
 8005da2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005da4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005da6:	3104      	adds	r1, #4

08005da8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005da8:	4809      	ldr	r0, [pc, #36]	; (8005dd0 <LoopFillZerobss+0x14>)
  ldr  r3, =_edata
 8005daa:	4b0a      	ldr	r3, [pc, #40]	; (8005dd4 <LoopFillZerobss+0x18>)
  adds  r2, r0, r1
 8005dac:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005dae:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005db0:	d3f6      	bcc.n	8005da0 <CopyDataInit>
  ldr  r2, =_sbss
 8005db2:	4a09      	ldr	r2, [pc, #36]	; (8005dd8 <LoopFillZerobss+0x1c>)
  b  LoopFillZerobss
 8005db4:	e002      	b.n	8005dbc <LoopFillZerobss>

08005db6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005db6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005db8:	f842 3b04 	str.w	r3, [r2], #4

08005dbc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005dbc:	4b07      	ldr	r3, [pc, #28]	; (8005ddc <LoopFillZerobss+0x20>)
  cmp  r2, r3
 8005dbe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005dc0:	d3f9      	bcc.n	8005db6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005dc2:	f7fa ffbd 	bl	8000d40 <SystemInit>
/* Call the application's entry point.*/
  bl  main
 8005dc6:	f7fa fb0b 	bl	80003e0 <main>
  bx  lr    
 8005dca:	4770      	bx	lr
 8005dcc:	08005e8c 	.word	0x08005e8c
 8005dd0:	20000000 	.word	0x20000000
 8005dd4:	2000011c 	.word	0x2000011c
 8005dd8:	2000011c 	.word	0x2000011c
 8005ddc:	20001800 	.word	0x20001800

08005de0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005de0:	e7fe      	b.n	8005de0 <ADC_IRQHandler>
 8005de2:	0000      	movs	r0, r0
 8005de4:	6c6c6548 	.word	0x6c6c6548
 8005de8:	6f77206f 	.word	0x6f77206f
 8005dec:	0a646c72 	.word	0x0a646c72
 8005df0:	00000000 	.word	0x00000000
 8005df4:	334d5453 	.word	0x334d5453
 8005df8:	69562032 	.word	0x69562032
 8005dfc:	61757472 	.word	0x61757472
 8005e00:	6f43206c 	.word	0x6f43206c
 8005e04:	726f506d 	.word	0x726f506d
 8005e08:	6e692074 	.word	0x6e692074
 8005e0c:	20534820 	.word	0x20534820
 8005e10:	65646f6d 	.word	0x65646f6d
 8005e14:	00000000 	.word	0x00000000
 8005e18:	334d5453 	.word	0x334d5453
 8005e1c:	69562032 	.word	0x69562032
 8005e20:	61757472 	.word	0x61757472
 8005e24:	6f43206c 	.word	0x6f43206c
 8005e28:	726f506d 	.word	0x726f506d
 8005e2c:	6e692074 	.word	0x6e692074
 8005e30:	20534620 	.word	0x20534620
 8005e34:	65646f4d 	.word	0x65646f4d
 8005e38:	00000000 	.word	0x00000000
 8005e3c:	694d5453 	.word	0x694d5453
 8005e40:	656f7263 	.word	0x656f7263
 8005e44:	7463656c 	.word	0x7463656c
 8005e48:	696e6f72 	.word	0x696e6f72
 8005e4c:	00007363 	.word	0x00007363
 8005e50:	30303030 	.word	0x30303030
 8005e54:	30303030 	.word	0x30303030
 8005e58:	42303530 	.word	0x42303530
 8005e5c:	00000000 	.word	0x00000000
 8005e60:	30303030 	.word	0x30303030
 8005e64:	30303030 	.word	0x30303030
 8005e68:	43303530 	.word	0x43303530
 8005e6c:	00000000 	.word	0x00000000
 8005e70:	20504356 	.word	0x20504356
 8005e74:	666e6f43 	.word	0x666e6f43
 8005e78:	00006769 	.word	0x00006769
 8005e7c:	20504356 	.word	0x20504356
 8005e80:	65746e49 	.word	0x65746e49
 8005e84:	63616672 	.word	0x63616672
 8005e88:	00000065 	.word	0x00000065
