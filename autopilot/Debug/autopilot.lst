
autopilot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003948  08000188  08000188  00008188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .data         00000058  20000000  08003ad0  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00001698  20000058  08003b28  00010058  2**2
                  ALLOC
  4 ._user_heap_stack 00000400  200016f0  08003b28  000116f0  2**0
                  ALLOC
  5 .ARM.attributes 0000002f  00000000  00000000  00010058  2**0
                  CONTENTS, READONLY
  6 .debug_abbrev 00004957  00000000  00000000  00010087  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0001f7d2  00000000  00000000  000149de  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00013c59  00000000  00000000  000341b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_macinfo 0116a83b  00000000  00000000  00047e09  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000a4b6  00000000  00000000  011b2644  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubnames 0000447a  00000000  00000000  011bcafa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 00003d3c  00000000  00000000  011c0f74  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001cc0  00000000  00000000  011c4cb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000019a8  00000000  00000000  011c6970  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000088a0  00000000  00000000  011c8318  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000002a  00000000  00000000  011d0bb8  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000059c0  00000000  00000000  011d0be4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <main>:
/**
 * @brief  Main program.
 * @param  None
 * @retval None
 */
int main(void) {
 8000188:	b580      	push	{r7, lr}
 800018a:	af00      	add	r7, sp, #0
    Data_get = 0;
 800018c:	4b0e      	ldr	r3, [pc, #56]	; (80001c8 <main+0x40>)
 800018e:	f04f 0200 	mov.w	r2, #0
 8000192:	701a      	strb	r2, [r3, #0]

    PERIPH_Init_SysTick();
 8000194:	f000 f92c 	bl	80003f0 <PERIPH_Init_SysTick>
    PERIPH_Init_Leds();
 8000198:	f000 f88a 	bl	80002b0 <PERIPH_Init_Leds>
    PERIPH_Init_Timer();
 800019c:	f000 f8ac 	bl	80002f8 <PERIPH_Init_Timer>
    PERIPH_Init_PWM();
 80001a0:	f000 f8e0 	bl	8000364 <PERIPH_Init_PWM>

    /* USB configuration */
    //USBD_Init(&USB_OTG_dev, USB_OTG_FS_CORE_ID, &USR_desc, &USBD_CDC_cb, &USR_cb);

    while (1) {
        GPIO_SetBits(GPIOD, GPIO_Pin_12);
 80001a4:	4809      	ldr	r0, [pc, #36]	; (80001cc <main+0x44>)
 80001a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001aa:	f003 f819 	bl	80031e0 <GPIO_SetBits>
        Delay(500000);
 80001ae:	4808      	ldr	r0, [pc, #32]	; (80001d0 <main+0x48>)
 80001b0:	f000 f810 	bl	80001d4 <Delay>
        GPIO_ResetBits(GPIOD, GPIO_Pin_12);
 80001b4:	4805      	ldr	r0, [pc, #20]	; (80001cc <main+0x44>)
 80001b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001ba:	f003 f81f 	bl	80031fc <GPIO_ResetBits>
        Delay(500000);
 80001be:	4804      	ldr	r0, [pc, #16]	; (80001d0 <main+0x48>)
 80001c0:	f000 f808 	bl	80001d4 <Delay>
    }
 80001c4:	e7ee      	b.n	80001a4 <main+0x1c>
 80001c6:	bf00      	nop
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	40020c00 	.word	0x40020c00
 80001d0:	0007a120 	.word	0x0007a120

080001d4 <Delay>:
/**
 * @brief  Inserts a delay time.
 * @param  nTime: specifies the delay time length, in 10 ms.
 * @retval None
 */
static void Delay(__IO uint32_t nTime) {
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
    nTime += SysTime;
 80001dc:	687a      	ldr	r2, [r7, #4]
 80001de:	4b08      	ldr	r3, [pc, #32]	; (8000200 <Delay+0x2c>)
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	18d3      	adds	r3, r2, r3
 80001e4:	607b      	str	r3, [r7, #4]

    while (nTime > SysTime) {
 80001e6:	e000      	b.n	80001ea <Delay+0x16>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80001e8:	bf00      	nop
 80001ea:	687a      	ldr	r2, [r7, #4]
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <Delay+0x2c>)
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	429a      	cmp	r2, r3
 80001f2:	d8f9      	bhi.n	80001e8 <Delay+0x14>
        __NOP();
    }
}
 80001f4:	f107 070c 	add.w	r7, r7, #12
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bc80      	pop	{r7}
 80001fc:	4770      	bx	lr
 80001fe:	bf00      	nop
 8000200:	20000e60 	.word	0x20000e60

08000204 <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	4603      	mov	r3, r0
 800020c:	6039      	str	r1, [r7, #0]
 800020e:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8000210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000214:	2b00      	cmp	r3, #0
 8000216:	da0d      	bge.n	8000234 <NVIC_SetPriority+0x30>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000218:	490e      	ldr	r1, [pc, #56]	; (8000254 <NVIC_SetPriority+0x50>)
 800021a:	79fb      	ldrb	r3, [r7, #7]
 800021c:	f003 030f 	and.w	r3, r3, #15
 8000220:	f1a3 0304 	sub.w	r3, r3, #4
 8000224:	683a      	ldr	r2, [r7, #0]
 8000226:	b2d2      	uxtb	r2, r2
 8000228:	ea4f 1202 	mov.w	r2, r2, lsl #4
 800022c:	b2d2      	uxtb	r2, r2
 800022e:	18cb      	adds	r3, r1, r3
 8000230:	761a      	strb	r2, [r3, #24]
 8000232:	e00a      	b.n	800024a <NVIC_SetPriority+0x46>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8000234:	4908      	ldr	r1, [pc, #32]	; (8000258 <NVIC_SetPriority+0x54>)
 8000236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800023a:	683a      	ldr	r2, [r7, #0]
 800023c:	b2d2      	uxtb	r2, r2
 800023e:	ea4f 1202 	mov.w	r2, r2, lsl #4
 8000242:	b2d2      	uxtb	r2, r2
 8000244:	18cb      	adds	r3, r1, r3
 8000246:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800024a:	f107 070c 	add.w	r7, r7, #12
 800024e:	46bd      	mov	sp, r7
 8000250:	bc80      	pop	{r7}
 8000252:	4770      	bx	lr
 8000254:	e000ed00 	.word	0xe000ed00
 8000258:	e000e100 	.word	0xe000e100

0800025c <SysTick_Config>:
    \param [in]  ticks  Number of ticks between two interrupts
    \return          0  Function succeeded
    \return          1  Function failed
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b082      	sub	sp, #8
 8000260:	af00      	add	r7, sp, #0
 8000262:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 8000264:	687a      	ldr	r2, [r7, #4]
 8000266:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800026a:	429a      	cmp	r2, r3
 800026c:	d902      	bls.n	8000274 <SysTick_Config+0x18>
 800026e:	f04f 0301 	mov.w	r3, #1
 8000272:	e016      	b.n	80002a2 <SysTick_Config+0x46>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8000274:	4b0d      	ldr	r3, [pc, #52]	; (80002ac <SysTick_Config+0x50>)
 8000276:	687a      	ldr	r2, [r7, #4]
 8000278:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800027c:	f102 32ff 	add.w	r2, r2, #4294967295
 8000280:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
 8000282:	f04f 30ff 	mov.w	r0, #4294967295
 8000286:	f04f 010f 	mov.w	r1, #15
 800028a:	f7ff ffbb 	bl	8000204 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 800028e:	4b07      	ldr	r3, [pc, #28]	; (80002ac <SysTick_Config+0x50>)
 8000290:	f04f 0200 	mov.w	r2, #0
 8000294:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000296:	4b05      	ldr	r3, [pc, #20]	; (80002ac <SysTick_Config+0x50>)
 8000298:	f04f 0207 	mov.w	r2, #7
 800029c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 800029e:	f04f 0300 	mov.w	r3, #0
}
 80002a2:	4618      	mov	r0, r3
 80002a4:	f107 0708 	add.w	r7, r7, #8
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bd80      	pop	{r7, pc}
 80002ac:	e000e010 	.word	0xe000e010

080002b0 <PERIPH_Init_Leds>:
    SPI_Init(SPI1, &SPI_InitStructure);

    SPI_Cmd(SPI1, ENABLE);
}

void PERIPH_Init_Leds() {
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b082      	sub	sp, #8
 80002b4:	af00      	add	r7, sp, #0
    GPIO_PinAFConfig(GPIOD, GPIO_PinSource12, GPIO_AF_TIM4);
    GPIO_PinAFConfig(GPIOD, GPIO_PinSource13, GPIO_AF_TIM4);
    GPIO_PinAFConfig(GPIOD, GPIO_PinSource14, GPIO_AF_TIM4);
    GPIO_PinAFConfig(GPIOD, GPIO_PinSource15, GPIO_AF_TIM4);*/

    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 80002b6:	f04f 0008 	mov.w	r0, #8
 80002ba:	f04f 0101 	mov.w	r1, #1
 80002be:	f003 f869 	bl	8003394 <RCC_AHB1PeriphClockCmd>
    GPIO_InitTypeDef gpio;
    GPIO_StructInit(&gpio);
 80002c2:	463b      	mov	r3, r7
 80002c4:	4618      	mov	r0, r3
 80002c6:	f002 ff6d 	bl	80031a4 <GPIO_StructInit>
    gpio.GPIO_Mode = GPIO_Mode_OUT;
 80002ca:	f04f 0301 	mov.w	r3, #1
 80002ce:	713b      	strb	r3, [r7, #4]
    gpio.GPIO_Pin = LEDS;
 80002d0:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80002d4:	603b      	str	r3, [r7, #0]
    GPIO_Init(GPIOD, &gpio);
 80002d6:	463b      	mov	r3, r7
 80002d8:	4806      	ldr	r0, [pc, #24]	; (80002f4 <PERIPH_Init_Leds+0x44>)
 80002da:	4619      	mov	r1, r3
 80002dc:	f002 febe 	bl	800305c <GPIO_Init>

    GPIO_SetBits(GPIOD, GPIO_Pin_12);
 80002e0:	4804      	ldr	r0, [pc, #16]	; (80002f4 <PERIPH_Init_Leds+0x44>)
 80002e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002e6:	f002 ff7b 	bl	80031e0 <GPIO_SetBits>
}
 80002ea:	f107 0708 	add.w	r7, r7, #8
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	bf00      	nop
 80002f4:	40020c00 	.word	0x40020c00

080002f8 <PERIPH_Init_Timer>:

void PERIPH_Init_Timer() {
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b084      	sub	sp, #16
 80002fc:	af00      	add	r7, sp, #0
    SysTime = 0;
 80002fe:	4b15      	ldr	r3, [pc, #84]	; (8000354 <PERIPH_Init_Timer+0x5c>)
 8000300:	f04f 0200 	mov.w	r2, #0
 8000304:	601a      	str	r2, [r3, #0]

    /* TIM4 clock enable */
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
 8000306:	f04f 0004 	mov.w	r0, #4
 800030a:	f04f 0101 	mov.w	r1, #1
 800030e:	f003 f863 	bl	80033d8 <RCC_APB1PeriphClockCmd>

    /* Compute the prescaler value */
    u32 PrescalerValue = (uint16_t) ((SystemCoreClock / 2) / 5000000) - 1;
 8000312:	4b11      	ldr	r3, [pc, #68]	; (8000358 <PERIPH_Init_Timer+0x60>)
 8000314:	681a      	ldr	r2, [r3, #0]
 8000316:	4b11      	ldr	r3, [pc, #68]	; (800035c <PERIPH_Init_Timer+0x64>)
 8000318:	fba3 1302 	umull	r1, r3, r3, r2
 800031c:	ea4f 5393 	mov.w	r3, r3, lsr #22
 8000320:	b29b      	uxth	r3, r3
 8000322:	f103 33ff 	add.w	r3, r3, #4294967295
 8000326:	60fb      	str	r3, [r7, #12]

    TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
    /* Time base configuration */
    TIM_TimeBaseStructure.TIM_Period = TIMER_PERIOD;
 8000328:	f04f 0301 	mov.w	r3, #1
 800032c:	607b      	str	r3, [r7, #4]
    TIM_TimeBaseStructure.TIM_Prescaler = PrescalerValue;
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	b29b      	uxth	r3, r3
 8000332:	803b      	strh	r3, [r7, #0]
    TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 8000334:	f04f 0300 	mov.w	r3, #0
 8000338:	813b      	strh	r3, [r7, #8]
    TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 800033a:	f04f 0300 	mov.w	r3, #0
 800033e:	807b      	strh	r3, [r7, #2]

    TIM_TimeBaseInit(TIM4, &TIM_TimeBaseStructure);
 8000340:	463b      	mov	r3, r7
 8000342:	4807      	ldr	r0, [pc, #28]	; (8000360 <PERIPH_Init_Timer+0x68>)
 8000344:	4619      	mov	r1, r3
 8000346:	f003 f869 	bl	800341c <TIM_TimeBaseInit>
}
 800034a:	f107 0710 	add.w	r7, r7, #16
 800034e:	46bd      	mov	sp, r7
 8000350:	bd80      	pop	{r7, pc}
 8000352:	bf00      	nop
 8000354:	20000e60 	.word	0x20000e60
 8000358:	20000000 	.word	0x20000000
 800035c:	6b5fca6b 	.word	0x6b5fca6b
 8000360:	40000800 	.word	0x40000800

08000364 <PERIPH_Init_PWM>:

void PERIPH_Init_PWM() {
 8000364:	b580      	push	{r7, lr}
 8000366:	b086      	sub	sp, #24
 8000368:	af00      	add	r7, sp, #0
    TIM_OCInitTypeDef TIM_OCInitStructure;

    TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 800036a:	f04f 0360 	mov.w	r3, #96	; 0x60
 800036e:	80bb      	strh	r3, [r7, #4]
    TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 8000370:	f04f 0301 	mov.w	r3, #1
 8000374:	80fb      	strh	r3, [r7, #6]
    TIM_OCInitStructure.TIM_Pulse = 0;
 8000376:	f04f 0300 	mov.w	r3, #0
 800037a:	60fb      	str	r3, [r7, #12]
    TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 800037c:	f04f 0300 	mov.w	r3, #0
 8000380:	823b      	strh	r3, [r7, #16]

    /* PWM1 Mode configuration: Channel1 (GPIOD Pin 12)*/
    TIM_OC1Init(TIM4, &TIM_OCInitStructure);
 8000382:	f107 0304 	add.w	r3, r7, #4
 8000386:	4819      	ldr	r0, [pc, #100]	; (80003ec <PERIPH_Init_PWM+0x88>)
 8000388:	4619      	mov	r1, r3
 800038a:	f003 f8d5 	bl	8003538 <TIM_OC1Init>
    TIM_OC1PreloadConfig(TIM4, TIM_OCPreload_Enable);
 800038e:	4817      	ldr	r0, [pc, #92]	; (80003ec <PERIPH_Init_PWM+0x88>)
 8000390:	f04f 0108 	mov.w	r1, #8
 8000394:	f003 faf4 	bl	8003980 <TIM_OC1PreloadConfig>

    /* PWM1 Mode configuration: Channel2 (GPIOD Pin 13)*/
    TIM_OC2Init(TIM4, &TIM_OCInitStructure);
 8000398:	f107 0304 	add.w	r3, r7, #4
 800039c:	4813      	ldr	r0, [pc, #76]	; (80003ec <PERIPH_Init_PWM+0x88>)
 800039e:	4619      	mov	r1, r3
 80003a0:	f003 f94e 	bl	8003640 <TIM_OC2Init>
    TIM_OC2PreloadConfig(TIM4, TIM_OCPreload_Enable);
 80003a4:	4811      	ldr	r0, [pc, #68]	; (80003ec <PERIPH_Init_PWM+0x88>)
 80003a6:	f04f 0108 	mov.w	r1, #8
 80003aa:	f003 fb07 	bl	80039bc <TIM_OC2PreloadConfig>

    /* PWM1 Mode configuration: Channel2 (GPIOD Pin 14)*/
    TIM_OC3Init(TIM4, &TIM_OCInitStructure);
 80003ae:	f107 0304 	add.w	r3, r7, #4
 80003b2:	480e      	ldr	r0, [pc, #56]	; (80003ec <PERIPH_Init_PWM+0x88>)
 80003b4:	4619      	mov	r1, r3
 80003b6:	f003 f9db 	bl	8003770 <TIM_OC3Init>
    TIM_OC3PreloadConfig(TIM4, TIM_OCPreload_Enable);
 80003ba:	480c      	ldr	r0, [pc, #48]	; (80003ec <PERIPH_Init_PWM+0x88>)
 80003bc:	f04f 0108 	mov.w	r1, #8
 80003c0:	f003 fb1c 	bl	80039fc <TIM_OC3PreloadConfig>

    /* PWM1 Mode configuration: Channel4 (GPIOD Pin 15)*/
    TIM_OC4Init(TIM4, &TIM_OCInitStructure);
 80003c4:	f107 0304 	add.w	r3, r7, #4
 80003c8:	4808      	ldr	r0, [pc, #32]	; (80003ec <PERIPH_Init_PWM+0x88>)
 80003ca:	4619      	mov	r1, r3
 80003cc:	f003 fa66 	bl	800389c <TIM_OC4Init>
    TIM_OC4PreloadConfig(TIM4, TIM_OCPreload_Enable);
 80003d0:	4806      	ldr	r0, [pc, #24]	; (80003ec <PERIPH_Init_PWM+0x88>)
 80003d2:	f04f 0108 	mov.w	r1, #8
 80003d6:	f003 fb2f 	bl	8003a38 <TIM_OC4PreloadConfig>

    TIM_Cmd(TIM4, ENABLE);
 80003da:	4804      	ldr	r0, [pc, #16]	; (80003ec <PERIPH_Init_PWM+0x88>)
 80003dc:	f04f 0101 	mov.w	r1, #1
 80003e0:	f003 f88a 	bl	80034f8 <TIM_Cmd>
}
 80003e4:	f107 0718 	add.w	r7, r7, #24
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bd80      	pop	{r7, pc}
 80003ec:	40000800 	.word	0x40000800

080003f0 <PERIPH_Init_SysTick>:

void PERIPH_Init_SysTick(void) {
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b084      	sub	sp, #16
 80003f4:	af00      	add	r7, sp, #0
    RCC_ClocksTypeDef RCC_Clocks;
    /* SysTick end of count event each 1ms */
    RCC_GetClocksFreq(&RCC_Clocks);
 80003f6:	463b      	mov	r3, r7
 80003f8:	4618      	mov	r0, r3
 80003fa:	f002 ff0d 	bl	8003218 <RCC_GetClocksFreq>
    SysTick_Config(RCC_Clocks.HCLK_Frequency / 1000000);
 80003fe:	687a      	ldr	r2, [r7, #4]
 8000400:	4b05      	ldr	r3, [pc, #20]	; (8000418 <PERIPH_Init_SysTick+0x28>)
 8000402:	fba3 1302 	umull	r1, r3, r3, r2
 8000406:	ea4f 4393 	mov.w	r3, r3, lsr #18
 800040a:	4618      	mov	r0, r3
 800040c:	f7ff ff26 	bl	800025c <SysTick_Config>
}
 8000410:	f107 0710 	add.w	r7, r7, #16
 8000414:	46bd      	mov	sp, r7
 8000416:	bd80      	pop	{r7, pc}
 8000418:	431bde83 	.word	0x431bde83

0800041c <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0
}
 8000420:	46bd      	mov	sp, r7
 8000422:	bc80      	pop	{r7}
 8000424:	4770      	bx	lr
 8000426:	bf00      	nop

08000428 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 800042c:	e7fe      	b.n	800042c <HardFault_Handler+0x4>
 800042e:	bf00      	nop

08000430 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000430:	b480      	push	{r7}
 8000432:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8000434:	e7fe      	b.n	8000434 <MemManage_Handler+0x4>
 8000436:	bf00      	nop

08000438 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000438:	b480      	push	{r7}
 800043a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 800043c:	e7fe      	b.n	800043c <BusFault_Handler+0x4>
 800043e:	bf00      	nop

08000440 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8000444:	e7fe      	b.n	8000444 <UsageFault_Handler+0x4>
 8000446:	bf00      	nop

08000448 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000448:	b480      	push	{r7}
 800044a:	af00      	add	r7, sp, #0
}
 800044c:	46bd      	mov	sp, r7
 800044e:	bc80      	pop	{r7}
 8000450:	4770      	bx	lr
 8000452:	bf00      	nop

08000454 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000454:	b480      	push	{r7}
 8000456:	af00      	add	r7, sp, #0
}
 8000458:	46bd      	mov	sp, r7
 800045a:	bc80      	pop	{r7}
 800045c:	4770      	bx	lr
 800045e:	bf00      	nop

08000460 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000460:	b480      	push	{r7}
 8000462:	af00      	add	r7, sp, #0
}
 8000464:	46bd      	mov	sp, r7
 8000466:	bc80      	pop	{r7}
 8000468:	4770      	bx	lr
 800046a:	bf00      	nop

0800046c <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
    SysTime++;
 8000470:	4b04      	ldr	r3, [pc, #16]	; (8000484 <SysTick_Handler+0x18>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	f103 0201 	add.w	r2, r3, #1
 8000478:	4b02      	ldr	r3, [pc, #8]	; (8000484 <SysTick_Handler+0x18>)
 800047a:	601a      	str	r2, [r3, #0]
}
 800047c:	46bd      	mov	sp, r7
 800047e:	bc80      	pop	{r7}
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop
 8000484:	20000e60 	.word	0x20000e60

08000488 <EXTI0_IRQHandler>:
  * @brief  This function handles EXTI0_IRQ Handler.
  * @param  None
  * @retval None
  */
void EXTI0_IRQHandler(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b084      	sub	sp, #16
 800048c:	af00      	add	r7, sp, #0
  uint8_t test[12] = "Hello world\n";
 800048e:	4a0b      	ldr	r2, [pc, #44]	; (80004bc <EXTI0_IRQHandler+0x34>)
 8000490:	f107 0304 	add.w	r3, r7, #4
 8000494:	ca07      	ldmia	r2, {r0, r1, r2}
 8000496:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  
  APP_FOPS.pIf_DataTx(&test[0],12);
 800049a:	4b09      	ldr	r3, [pc, #36]	; (80004c0 <EXTI0_IRQHandler+0x38>)
 800049c:	68db      	ldr	r3, [r3, #12]
 800049e:	f107 0204 	add.w	r2, r7, #4
 80004a2:	4610      	mov	r0, r2
 80004a4:	f04f 010c 	mov.w	r1, #12
 80004a8:	4798      	blx	r3
  /* Clear the EXTI line pending bit */
  EXTI_ClearITPendingBit(USER_BUTTON_EXTI_LINE);
 80004aa:	f04f 0001 	mov.w	r0, #1
 80004ae:	f002 fdc7 	bl	8003040 <EXTI_ClearITPendingBit>
}
 80004b2:	f107 0710 	add.w	r7, r7, #16
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	bf00      	nop
 80004bc:	08003ac0 	.word	0x08003ac0
 80004c0:	20000004 	.word	0x20000004

080004c4 <OTG_FS_WKUP_IRQHandler>:
  * @brief  This function handles EXTI15_10_IRQ Handler.
  * @param  None
  * @retval None
  */
void OTG_FS_WKUP_IRQHandler(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  if(USB_OTG_dev.cfg.low_power)
 80004c8:	4b09      	ldr	r3, [pc, #36]	; (80004f0 <OTG_FS_WKUP_IRQHandler+0x2c>)
 80004ca:	7a9b      	ldrb	r3, [r3, #10]
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d00a      	beq.n	80004e6 <OTG_FS_WKUP_IRQHandler+0x22>
  {
	/* Reset SLEEPDEEP and SLEEPONEXIT bits */
	SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80004d0:	4b08      	ldr	r3, [pc, #32]	; (80004f4 <OTG_FS_WKUP_IRQHandler+0x30>)
 80004d2:	4a08      	ldr	r2, [pc, #32]	; (80004f4 <OTG_FS_WKUP_IRQHandler+0x30>)
 80004d4:	6912      	ldr	r2, [r2, #16]
 80004d6:	f022 0206 	bic.w	r2, r2, #6
 80004da:	611a      	str	r2, [r3, #16]

	/* After wake-up from sleep mode, reconfigure the system clock */
	SystemInit();
 80004dc:	f000 f814 	bl	8000508 <SystemInit>
    USB_OTG_UngateClock(&USB_OTG_dev);
 80004e0:	4803      	ldr	r0, [pc, #12]	; (80004f0 <OTG_FS_WKUP_IRQHandler+0x2c>)
 80004e2:	f000 ff23 	bl	800132c <USB_OTG_UngateClock>
  }
  EXTI_ClearITPendingBit(EXTI_Line18);
 80004e6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80004ea:	f002 fda9 	bl	8003040 <EXTI_ClearITPendingBit>
}
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	20000070 	.word	0x20000070
 80004f4:	e000ed00 	.word	0xe000ed00

080004f8 <OTG_FS_IRQHandler>:
  * @brief  This function handles OTG_HS Handler.
  * @param  None
  * @retval None
  */
void OTG_FS_IRQHandler(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  USBD_OTG_ISR_Handler (&USB_OTG_dev);
 80004fc:	4801      	ldr	r0, [pc, #4]	; (8000504 <OTG_FS_IRQHandler+0xc>)
 80004fe:	f001 f8bd 	bl	800167c <USBD_OTG_ISR_Handler>
}
 8000502:	bd80      	pop	{r7, pc}
 8000504:	20000070 	.word	0x20000070

08000508 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800050c:	4b12      	ldr	r3, [pc, #72]	; (8000558 <SystemInit+0x50>)
 800050e:	4a12      	ldr	r2, [pc, #72]	; (8000558 <SystemInit+0x50>)
 8000510:	6812      	ldr	r2, [r2, #0]
 8000512:	f042 0201 	orr.w	r2, r2, #1
 8000516:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000518:	4b0f      	ldr	r3, [pc, #60]	; (8000558 <SystemInit+0x50>)
 800051a:	f04f 0200 	mov.w	r2, #0
 800051e:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000520:	4a0d      	ldr	r2, [pc, #52]	; (8000558 <SystemInit+0x50>)
 8000522:	4b0d      	ldr	r3, [pc, #52]	; (8000558 <SystemInit+0x50>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800052a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800052e:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000530:	4b09      	ldr	r3, [pc, #36]	; (8000558 <SystemInit+0x50>)
 8000532:	4a0a      	ldr	r2, [pc, #40]	; (800055c <SystemInit+0x54>)
 8000534:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000536:	4b08      	ldr	r3, [pc, #32]	; (8000558 <SystemInit+0x50>)
 8000538:	4a07      	ldr	r2, [pc, #28]	; (8000558 <SystemInit+0x50>)
 800053a:	6812      	ldr	r2, [r2, #0]
 800053c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000540:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000542:	4b05      	ldr	r3, [pc, #20]	; (8000558 <SystemInit+0x50>)
 8000544:	f04f 0200 	mov.w	r2, #0
 8000548:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800054a:	f000 f80b 	bl	8000564 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800054e:	4b04      	ldr	r3, [pc, #16]	; (8000560 <SystemInit+0x58>)
 8000550:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000554:	609a      	str	r2, [r3, #8]
#endif
}
 8000556:	bd80      	pop	{r7, pc}
 8000558:	40023800 	.word	0x40023800
 800055c:	24003010 	.word	0x24003010
 8000560:	e000ed00 	.word	0xe000ed00

08000564 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000564:	b480      	push	{r7}
 8000566:	b083      	sub	sp, #12
 8000568:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800056a:	f04f 0300 	mov.w	r3, #0
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	f04f 0300 	mov.w	r3, #0
 8000574:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000576:	4b42      	ldr	r3, [pc, #264]	; (8000680 <SetSysClock+0x11c>)
 8000578:	4a41      	ldr	r2, [pc, #260]	; (8000680 <SetSysClock+0x11c>)
 800057a:	6812      	ldr	r2, [r2, #0]
 800057c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000580:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000582:	4b3f      	ldr	r3, [pc, #252]	; (8000680 <SetSysClock+0x11c>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800058a:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	f103 0301 	add.w	r3, r3, #1
 8000592:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	2b00      	cmp	r3, #0
 8000598:	d103      	bne.n	80005a2 <SetSysClock+0x3e>
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80005a0:	d1ef      	bne.n	8000582 <SetSysClock+0x1e>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80005a2:	4b37      	ldr	r3, [pc, #220]	; (8000680 <SetSysClock+0x11c>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d003      	beq.n	80005b6 <SetSysClock+0x52>
  {
    HSEStatus = (uint32_t)0x01;
 80005ae:	f04f 0301 	mov.w	r3, #1
 80005b2:	603b      	str	r3, [r7, #0]
 80005b4:	e002      	b.n	80005bc <SetSysClock+0x58>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80005b6:	f04f 0300 	mov.w	r3, #0
 80005ba:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80005bc:	683b      	ldr	r3, [r7, #0]
 80005be:	2b01      	cmp	r3, #1
 80005c0:	d142      	bne.n	8000648 <SetSysClock+0xe4>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80005c2:	4b2f      	ldr	r3, [pc, #188]	; (8000680 <SetSysClock+0x11c>)
 80005c4:	4a2e      	ldr	r2, [pc, #184]	; (8000680 <SetSysClock+0x11c>)
 80005c6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80005c8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80005cc:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 80005ce:	4b2d      	ldr	r3, [pc, #180]	; (8000684 <SetSysClock+0x120>)
 80005d0:	4a2c      	ldr	r2, [pc, #176]	; (8000684 <SetSysClock+0x120>)
 80005d2:	6812      	ldr	r2, [r2, #0]
 80005d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80005d8:	601a      	str	r2, [r3, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80005da:	4b29      	ldr	r3, [pc, #164]	; (8000680 <SetSysClock+0x11c>)
 80005dc:	4a28      	ldr	r2, [pc, #160]	; (8000680 <SetSysClock+0x11c>)
 80005de:	6892      	ldr	r2, [r2, #8]
 80005e0:	609a      	str	r2, [r3, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80005e2:	4b27      	ldr	r3, [pc, #156]	; (8000680 <SetSysClock+0x11c>)
 80005e4:	4a26      	ldr	r2, [pc, #152]	; (8000680 <SetSysClock+0x11c>)
 80005e6:	6892      	ldr	r2, [r2, #8]
 80005e8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80005ec:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80005ee:	4b24      	ldr	r3, [pc, #144]	; (8000680 <SetSysClock+0x11c>)
 80005f0:	4a23      	ldr	r2, [pc, #140]	; (8000680 <SetSysClock+0x11c>)
 80005f2:	6892      	ldr	r2, [r2, #8]
 80005f4:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 80005f8:	609a      	str	r2, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80005fa:	4b21      	ldr	r3, [pc, #132]	; (8000680 <SetSysClock+0x11c>)
 80005fc:	4a22      	ldr	r2, [pc, #136]	; (8000688 <SetSysClock+0x124>)
 80005fe:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000600:	4b1f      	ldr	r3, [pc, #124]	; (8000680 <SetSysClock+0x11c>)
 8000602:	4a1f      	ldr	r2, [pc, #124]	; (8000680 <SetSysClock+0x11c>)
 8000604:	6812      	ldr	r2, [r2, #0]
 8000606:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800060a:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800060c:	bf00      	nop
 800060e:	4b1c      	ldr	r3, [pc, #112]	; (8000680 <SetSysClock+0x11c>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000616:	2b00      	cmp	r3, #0
 8000618:	d0f9      	beq.n	800060e <SetSysClock+0xaa>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 800061a:	4b1c      	ldr	r3, [pc, #112]	; (800068c <SetSysClock+0x128>)
 800061c:	f240 6205 	movw	r2, #1541	; 0x605
 8000620:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000622:	4b17      	ldr	r3, [pc, #92]	; (8000680 <SetSysClock+0x11c>)
 8000624:	4a16      	ldr	r2, [pc, #88]	; (8000680 <SetSysClock+0x11c>)
 8000626:	6892      	ldr	r2, [r2, #8]
 8000628:	f022 0203 	bic.w	r2, r2, #3
 800062c:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 800062e:	4b14      	ldr	r3, [pc, #80]	; (8000680 <SetSysClock+0x11c>)
 8000630:	4a13      	ldr	r2, [pc, #76]	; (8000680 <SetSysClock+0x11c>)
 8000632:	6892      	ldr	r2, [r2, #8]
 8000634:	f042 0202 	orr.w	r2, r2, #2
 8000638:	609a      	str	r2, [r3, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 800063a:	bf00      	nop
 800063c:	4b10      	ldr	r3, [pc, #64]	; (8000680 <SetSysClock+0x11c>)
 800063e:	689b      	ldr	r3, [r3, #8]
 8000640:	f003 030c 	and.w	r3, r3, #12
 8000644:	2b08      	cmp	r3, #8
 8000646:	d1f9      	bne.n	800063c <SetSysClock+0xd8>

/******************************************************************************/
/*                        I2S clock configuration                             */
/******************************************************************************/
  /* PLLI2S clock used as I2S clock source */
  RCC->CFGR &= ~RCC_CFGR_I2SSRC;
 8000648:	4b0d      	ldr	r3, [pc, #52]	; (8000680 <SetSysClock+0x11c>)
 800064a:	4a0d      	ldr	r2, [pc, #52]	; (8000680 <SetSysClock+0x11c>)
 800064c:	6892      	ldr	r2, [r2, #8]
 800064e:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8000652:	609a      	str	r2, [r3, #8]

  /* Configure PLLI2S */
  RCC->PLLI2SCFGR = (PLLI2S_N << 6) | (PLLI2S_R << 28);
 8000654:	4b0a      	ldr	r3, [pc, #40]	; (8000680 <SetSysClock+0x11c>)
 8000656:	4a0e      	ldr	r2, [pc, #56]	; (8000690 <SetSysClock+0x12c>)
 8000658:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Enable PLLI2S */
  RCC->CR |= ((uint32_t)RCC_CR_PLLI2SON);
 800065c:	4b08      	ldr	r3, [pc, #32]	; (8000680 <SetSysClock+0x11c>)
 800065e:	4a08      	ldr	r2, [pc, #32]	; (8000680 <SetSysClock+0x11c>)
 8000660:	6812      	ldr	r2, [r2, #0]
 8000662:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8000666:	601a      	str	r2, [r3, #0]

  /* Wait till PLLI2S is ready */
  while((RCC->CR & RCC_CR_PLLI2SRDY) == 0)
 8000668:	bf00      	nop
 800066a:	4b05      	ldr	r3, [pc, #20]	; (8000680 <SetSysClock+0x11c>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000672:	2b00      	cmp	r3, #0
 8000674:	d0f9      	beq.n	800066a <SetSysClock+0x106>
  {
  }
}
 8000676:	f107 070c 	add.w	r7, r7, #12
 800067a:	46bd      	mov	sp, r7
 800067c:	bc80      	pop	{r7}
 800067e:	4770      	bx	lr
 8000680:	40023800 	.word	0x40023800
 8000684:	40007000 	.word	0x40007000
 8000688:	07405408 	.word	0x07405408
 800068c:	40023c00 	.word	0x40023c00
 8000690:	50003000 	.word	0x50003000

08000694 <USB_OTG_BSP_uDelay>:
*         This function provides delay time in micro sec
* @param  usec : Value of delay required in micro sec
* @retval None
*/
void USB_OTG_BSP_uDelay (const uint32_t usec)
{
 8000694:	b480      	push	{r7}
 8000696:	b085      	sub	sp, #20
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  uint32_t utime = (120 * usec / 7);
 800069c:	687a      	ldr	r2, [r7, #4]
 800069e:	4613      	mov	r3, r2
 80006a0:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80006a4:	1a9b      	subs	r3, r3, r2
 80006a6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80006aa:	461a      	mov	r2, r3
 80006ac:	4b0a      	ldr	r3, [pc, #40]	; (80006d8 <USB_OTG_BSP_uDelay+0x44>)
 80006ae:	fba3 1302 	umull	r1, r3, r3, r2
 80006b2:	1ad2      	subs	r2, r2, r3
 80006b4:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80006b8:	189b      	adds	r3, r3, r2
 80006ba:	ea4f 0393 	mov.w	r3, r3, lsr #2
 80006be:	60fb      	str	r3, [r7, #12]
  do
  {
      utime--;
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	f103 33ff 	add.w	r3, r3, #4294967295
 80006c6:	60fb      	str	r3, [r7, #12]
  }
  while (utime > 0);
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d1f8      	bne.n	80006c0 <USB_OTG_BSP_uDelay+0x2c>
}
 80006ce:	f107 0714 	add.w	r7, r7, #20
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bc80      	pop	{r7}
 80006d6:	4770      	bx	lr
 80006d8:	24924925 	.word	0x24924925

080006dc <VCP_Init>:
  *         Initializes the Media on the STM32
  * @param  None
  * @retval Result of the opeartion (USBD_OK in all cases)
  */
static uint16_t VCP_Init(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
    Data_get = 0;
 80006e0:	4b04      	ldr	r3, [pc, #16]	; (80006f4 <VCP_Init+0x18>)
 80006e2:	f04f 0200 	mov.w	r2, #0
 80006e6:	701a      	strb	r2, [r3, #0]
  return USBD_OK;
 80006e8:	f04f 0300 	mov.w	r3, #0
}
 80006ec:	4618      	mov	r0, r3
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bc80      	pop	{r7}
 80006f2:	4770      	bx	lr
 80006f4:	2000006c 	.word	0x2000006c

080006f8 <VCP_DeInit>:
  *         DeInitializes the Media on the STM32
  * @param  None
  * @retval Result of the opeartion (USBD_OK in all cases)
  */
static uint16_t VCP_DeInit(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  return USBD_OK;
 80006fc:	f04f 0300 	mov.w	r3, #0
}
 8000700:	4618      	mov	r0, r3
 8000702:	46bd      	mov	sp, r7
 8000704:	bc80      	pop	{r7}
 8000706:	4770      	bx	lr

08000708 <VCP_Ctrl>:
  * @param  Buf: Buffer containing command data (request parameters)
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the opeartion (USBD_OK in all cases)
  */
static uint16_t VCP_Ctrl (uint32_t Cmd, uint8_t* Buf, uint32_t Len)
{ 
 8000708:	b480      	push	{r7}
 800070a:	b085      	sub	sp, #20
 800070c:	af00      	add	r7, sp, #0
 800070e:	60f8      	str	r0, [r7, #12]
 8000710:	60b9      	str	r1, [r7, #8]
 8000712:	607a      	str	r2, [r7, #4]
  switch (Cmd)
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	2b23      	cmp	r3, #35	; 0x23
 8000718:	d84a      	bhi.n	80007b0 <VCP_Ctrl+0xa8>
 800071a:	a201      	add	r2, pc, #4	; (adr r2, 8000720 <VCP_Ctrl+0x18>)
 800071c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000720:	080007b1 	.word	0x080007b1
 8000724:	080007b1 	.word	0x080007b1
 8000728:	080007b1 	.word	0x080007b1
 800072c:	080007b1 	.word	0x080007b1
 8000730:	080007b1 	.word	0x080007b1
 8000734:	080007b1 	.word	0x080007b1
 8000738:	080007b1 	.word	0x080007b1
 800073c:	080007b1 	.word	0x080007b1
 8000740:	080007b1 	.word	0x080007b1
 8000744:	080007b1 	.word	0x080007b1
 8000748:	080007b1 	.word	0x080007b1
 800074c:	080007b1 	.word	0x080007b1
 8000750:	080007b1 	.word	0x080007b1
 8000754:	080007b1 	.word	0x080007b1
 8000758:	080007b1 	.word	0x080007b1
 800075c:	080007b1 	.word	0x080007b1
 8000760:	080007b1 	.word	0x080007b1
 8000764:	080007b1 	.word	0x080007b1
 8000768:	080007b1 	.word	0x080007b1
 800076c:	080007b1 	.word	0x080007b1
 8000770:	080007b1 	.word	0x080007b1
 8000774:	080007b1 	.word	0x080007b1
 8000778:	080007b1 	.word	0x080007b1
 800077c:	080007b1 	.word	0x080007b1
 8000780:	080007b1 	.word	0x080007b1
 8000784:	080007b1 	.word	0x080007b1
 8000788:	080007b1 	.word	0x080007b1
 800078c:	080007b1 	.word	0x080007b1
 8000790:	080007b1 	.word	0x080007b1
 8000794:	080007b1 	.word	0x080007b1
 8000798:	080007b1 	.word	0x080007b1
 800079c:	080007b1 	.word	0x080007b1
 80007a0:	080007b1 	.word	0x080007b1
 80007a4:	080007b1 	.word	0x080007b1
 80007a8:	080007b1 	.word	0x080007b1
 80007ac:	080007b1 	.word	0x080007b1
  case SEND_BREAK:
    /* Not  needed for this driver */
    break;    
    
  default:
    break;
 80007b0:	bf00      	nop
  }

  return USBD_OK;
 80007b2:	f04f 0300 	mov.w	r3, #0
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	f107 0714 	add.w	r7, r7, #20
 80007bc:	46bd      	mov	sp, r7
 80007be:	bc80      	pop	{r7}
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop

080007c4 <VCP_DataTx>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the opeartion: USBD_OK if all operations are OK else VCP_FAIL
  */
static uint16_t VCP_DataTx (uint8_t* Buf, uint32_t Len)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b085      	sub	sp, #20
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
 80007cc:	6039      	str	r1, [r7, #0]
	uint32_t i;
	//loop through buffer
	for( i = 0; i < Len; i++ )
 80007ce:	f04f 0300 	mov.w	r3, #0
 80007d2:	60fb      	str	r3, [r7, #12]
 80007d4:	e01a      	b.n	800080c <VCP_DataTx+0x48>
	{
		APP_Rx_Buffer[APP_Rx_ptr_in] = (uint8_t) Buf[i];
 80007d6:	4b13      	ldr	r3, [pc, #76]	; (8000824 <VCP_DataTx+0x60>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	6879      	ldr	r1, [r7, #4]
 80007dc:	68fa      	ldr	r2, [r7, #12]
 80007de:	188a      	adds	r2, r1, r2
 80007e0:	7811      	ldrb	r1, [r2, #0]
 80007e2:	4a11      	ldr	r2, [pc, #68]	; (8000828 <VCP_DataTx+0x64>)
 80007e4:	54d1      	strb	r1, [r2, r3]
		//increase pointer value
		APP_Rx_ptr_in++;
 80007e6:	4b0f      	ldr	r3, [pc, #60]	; (8000824 <VCP_DataTx+0x60>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	f103 0201 	add.w	r2, r3, #1
 80007ee:	4b0d      	ldr	r3, [pc, #52]	; (8000824 <VCP_DataTx+0x60>)
 80007f0:	601a      	str	r2, [r3, #0]
		/* To avoid buffer overflow */
		if(APP_Rx_ptr_in == APP_RX_DATA_SIZE)
 80007f2:	4b0c      	ldr	r3, [pc, #48]	; (8000824 <VCP_DataTx+0x60>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80007fa:	d103      	bne.n	8000804 <VCP_DataTx+0x40>
		{
			APP_Rx_ptr_in = 0;
 80007fc:	4b09      	ldr	r3, [pc, #36]	; (8000824 <VCP_DataTx+0x60>)
 80007fe:	f04f 0200 	mov.w	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
  */
static uint16_t VCP_DataTx (uint8_t* Buf, uint32_t Len)
{
	uint32_t i;
	//loop through buffer
	for( i = 0; i < Len; i++ )
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	f103 0301 	add.w	r3, r3, #1
 800080a:	60fb      	str	r3, [r7, #12]
 800080c:	68fa      	ldr	r2, [r7, #12]
 800080e:	683b      	ldr	r3, [r7, #0]
 8000810:	429a      	cmp	r2, r3
 8000812:	d3e0      	bcc.n	80007d6 <VCP_DataTx+0x12>
		{
			APP_Rx_ptr_in = 0;
		}
	}
        
	return USBD_OK;
 8000814:	f04f 0300 	mov.w	r3, #0
}
 8000818:	4618      	mov	r0, r3
 800081a:	f107 0714 	add.w	r7, r7, #20
 800081e:	46bd      	mov	sp, r7
 8000820:	bc80      	pop	{r7}
 8000822:	4770      	bx	lr
 8000824:	20000068 	.word	0x20000068
 8000828:	20000ef0 	.word	0x20000ef0

0800082c <VCP_DataRx>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the opeartion: USBD_OK if all operations are OK else VCP_FAIL
  */
static uint16_t VCP_DataRx (uint8_t* Buf, uint32_t Len)
{
 800082c:	b480      	push	{r7}
 800082e:	b085      	sub	sp, #20
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
 8000834:	6039      	str	r1, [r7, #0]
    //VCP_DataTx(Buf, Len);

    for (uint32_t i =0 ; i < Len; i++) {
 8000836:	f04f 0300 	mov.w	r3, #0
 800083a:	60fb      	str	r3, [r7, #12]
 800083c:	e00b      	b.n	8000856 <VCP_DataRx+0x2a>
        Data_buf[i] = Buf[i];
 800083e:	687a      	ldr	r2, [r7, #4]
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	18d3      	adds	r3, r2, r3
 8000844:	781a      	ldrb	r2, [r3, #0]
 8000846:	490c      	ldr	r1, [pc, #48]	; (8000878 <VCP_DataRx+0x4c>)
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	18cb      	adds	r3, r1, r3
 800084c:	701a      	strb	r2, [r3, #0]
  */
static uint16_t VCP_DataRx (uint8_t* Buf, uint32_t Len)
{
    //VCP_DataTx(Buf, Len);

    for (uint32_t i =0 ; i < Len; i++) {
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	f103 0301 	add.w	r3, r3, #1
 8000854:	60fb      	str	r3, [r7, #12]
 8000856:	68fa      	ldr	r2, [r7, #12]
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	429a      	cmp	r2, r3
 800085c:	d3ef      	bcc.n	800083e <VCP_DataRx+0x12>
        Data_buf[i] = Buf[i];
    }
    Data_get = 1;
 800085e:	4b07      	ldr	r3, [pc, #28]	; (800087c <VCP_DataRx+0x50>)
 8000860:	f04f 0201 	mov.w	r2, #1
 8000864:	701a      	strb	r2, [r3, #0]

	return USBD_OK;
 8000866:	f04f 0300 	mov.w	r3, #0
}
 800086a:	4618      	mov	r0, r3
 800086c:	f107 0714 	add.w	r7, r7, #20
 8000870:	46bd      	mov	sp, r7
 8000872:	bc80      	pop	{r7}
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	20000660 	.word	0x20000660
 800087c:	2000006c 	.word	0x2000006c

08000880 <USB_OTG_WritePacket>:
*/
USB_OTG_STS USB_OTG_WritePacket(USB_OTG_CORE_HANDLE *pdev, 
                                uint8_t             *src, 
                                uint8_t             ch_ep_num, 
                                uint16_t            len)
{
 8000880:	b480      	push	{r7}
 8000882:	b089      	sub	sp, #36	; 0x24
 8000884:	af00      	add	r7, sp, #0
 8000886:	60f8      	str	r0, [r7, #12]
 8000888:	60b9      	str	r1, [r7, #8]
 800088a:	71fa      	strb	r2, [r7, #7]
 800088c:	80bb      	strh	r3, [r7, #4]
  USB_OTG_STS status = USB_OTG_OK;
 800088e:	f04f 0300 	mov.w	r3, #0
 8000892:	76fb      	strb	r3, [r7, #27]
  if (pdev->cfg.dma_enable == 0)
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	78db      	ldrb	r3, [r3, #3]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d12c      	bne.n	80008f6 <USB_OTG_WritePacket+0x76>
  {
    uint32_t count32b= 0 , i= 0;
 800089c:	f04f 0300 	mov.w	r3, #0
 80008a0:	617b      	str	r3, [r7, #20]
 80008a2:	f04f 0300 	mov.w	r3, #0
 80008a6:	61fb      	str	r3, [r7, #28]
    __IO uint32_t *fifo;
    
    count32b =  (len + 3) / 4;
 80008a8:	88bb      	ldrh	r3, [r7, #4]
 80008aa:	f103 0303 	add.w	r3, r3, #3
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	da01      	bge.n	80008b6 <USB_OTG_WritePacket+0x36>
 80008b2:	f103 0303 	add.w	r3, r3, #3
 80008b6:	ea4f 03a3 	mov.w	r3, r3, asr #2
 80008ba:	617b      	str	r3, [r7, #20]
    fifo = pdev->regs.DFIFO[ch_ep_num];
 80008bc:	79fb      	ldrb	r3, [r7, #7]
 80008be:	68fa      	ldr	r2, [r7, #12]
 80008c0:	f103 0332 	add.w	r3, r3, #50	; 0x32
 80008c4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80008c8:	18d3      	adds	r3, r2, r3
 80008ca:	689b      	ldr	r3, [r3, #8]
 80008cc:	613b      	str	r3, [r7, #16]
    for (i = 0; i < count32b; i++, src+=4)
 80008ce:	f04f 0300 	mov.w	r3, #0
 80008d2:	61fb      	str	r3, [r7, #28]
 80008d4:	e00b      	b.n	80008ee <USB_OTG_WritePacket+0x6e>
    {
      USB_OTG_WRITE_REG32( fifo, *((__packed uint32_t *)src) );
 80008d6:	68bb      	ldr	r3, [r7, #8]
 80008d8:	681a      	ldr	r2, [r3, #0]
 80008da:	693b      	ldr	r3, [r7, #16]
 80008dc:	601a      	str	r2, [r3, #0]
    uint32_t count32b= 0 , i= 0;
    __IO uint32_t *fifo;
    
    count32b =  (len + 3) / 4;
    fifo = pdev->regs.DFIFO[ch_ep_num];
    for (i = 0; i < count32b; i++, src+=4)
 80008de:	69fb      	ldr	r3, [r7, #28]
 80008e0:	f103 0301 	add.w	r3, r3, #1
 80008e4:	61fb      	str	r3, [r7, #28]
 80008e6:	68bb      	ldr	r3, [r7, #8]
 80008e8:	f103 0304 	add.w	r3, r3, #4
 80008ec:	60bb      	str	r3, [r7, #8]
 80008ee:	69fa      	ldr	r2, [r7, #28]
 80008f0:	697b      	ldr	r3, [r7, #20]
 80008f2:	429a      	cmp	r2, r3
 80008f4:	d3ef      	bcc.n	80008d6 <USB_OTG_WritePacket+0x56>
    {
      USB_OTG_WRITE_REG32( fifo, *((__packed uint32_t *)src) );
    }
  }
  return status;
 80008f6:	7efb      	ldrb	r3, [r7, #27]
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	f107 0724 	add.w	r7, r7, #36	; 0x24
 80008fe:	46bd      	mov	sp, r7
 8000900:	bc80      	pop	{r7}
 8000902:	4770      	bx	lr

08000904 <USB_OTG_ReadPacket>:
* @retval None
*/
void *USB_OTG_ReadPacket(USB_OTG_CORE_HANDLE *pdev, 
                         uint8_t *dest, 
                         uint16_t len)
{
 8000904:	b480      	push	{r7}
 8000906:	b089      	sub	sp, #36	; 0x24
 8000908:	af00      	add	r7, sp, #0
 800090a:	60f8      	str	r0, [r7, #12]
 800090c:	60b9      	str	r1, [r7, #8]
 800090e:	4613      	mov	r3, r2
 8000910:	80fb      	strh	r3, [r7, #6]
  uint32_t i=0;
 8000912:	f04f 0300 	mov.w	r3, #0
 8000916:	61fb      	str	r3, [r7, #28]
  uint32_t count32b = (len + 3) / 4;
 8000918:	88fb      	ldrh	r3, [r7, #6]
 800091a:	f103 0303 	add.w	r3, r3, #3
 800091e:	2b00      	cmp	r3, #0
 8000920:	da01      	bge.n	8000926 <USB_OTG_ReadPacket+0x22>
 8000922:	f103 0303 	add.w	r3, r3, #3
 8000926:	ea4f 03a3 	mov.w	r3, r3, asr #2
 800092a:	61bb      	str	r3, [r7, #24]
  
  __IO uint32_t *fifo = pdev->regs.DFIFO[0];
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8000932:	617b      	str	r3, [r7, #20]
  
  for ( i = 0; i < count32b; i++, dest += 4 )
 8000934:	f04f 0300 	mov.w	r3, #0
 8000938:	61fb      	str	r3, [r7, #28]
 800093a:	e00b      	b.n	8000954 <USB_OTG_ReadPacket+0x50>
  {
    *(__packed uint32_t *)dest = USB_OTG_READ_REG32(fifo);
 800093c:	68bb      	ldr	r3, [r7, #8]
 800093e:	697a      	ldr	r2, [r7, #20]
 8000940:	6812      	ldr	r2, [r2, #0]
 8000942:	601a      	str	r2, [r3, #0]
  uint32_t i=0;
  uint32_t count32b = (len + 3) / 4;
  
  __IO uint32_t *fifo = pdev->regs.DFIFO[0];
  
  for ( i = 0; i < count32b; i++, dest += 4 )
 8000944:	69fb      	ldr	r3, [r7, #28]
 8000946:	f103 0301 	add.w	r3, r3, #1
 800094a:	61fb      	str	r3, [r7, #28]
 800094c:	68bb      	ldr	r3, [r7, #8]
 800094e:	f103 0304 	add.w	r3, r3, #4
 8000952:	60bb      	str	r3, [r7, #8]
 8000954:	69fa      	ldr	r2, [r7, #28]
 8000956:	69bb      	ldr	r3, [r7, #24]
 8000958:	429a      	cmp	r2, r3
 800095a:	d3ef      	bcc.n	800093c <USB_OTG_ReadPacket+0x38>
  {
    *(__packed uint32_t *)dest = USB_OTG_READ_REG32(fifo);
    
  }
  return ((void *)dest);
 800095c:	68bb      	ldr	r3, [r7, #8]
}
 800095e:	4618      	mov	r0, r3
 8000960:	f107 0724 	add.w	r7, r7, #36	; 0x24
 8000964:	46bd      	mov	sp, r7
 8000966:	bc80      	pop	{r7}
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop

0800096c <USB_OTG_FlushTxFifo>:
* @param  pdev : Selected device
* @param  num : FO num
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_FlushTxFifo (USB_OTG_CORE_HANDLE *pdev , uint32_t num )
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b086      	sub	sp, #24
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
 8000974:	6039      	str	r1, [r7, #0]
  USB_OTG_STS status = USB_OTG_OK;
 8000976:	f04f 0300 	mov.w	r3, #0
 800097a:	74fb      	strb	r3, [r7, #19]
  __IO USB_OTG_GRSTCTL_TypeDef  greset;
  
  uint32_t count = 0;
 800097c:	f04f 0300 	mov.w	r3, #0
 8000980:	617b      	str	r3, [r7, #20]
  greset.d32 = 0;
 8000982:	f04f 0300 	mov.w	r3, #0
 8000986:	60fb      	str	r3, [r7, #12]
  greset.b.txfflsh = 1;
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	f043 0320 	orr.w	r3, r3, #32
 800098e:	60fb      	str	r3, [r7, #12]
  greset.b.txfnum  = num;
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	b2db      	uxtb	r3, r3
 8000994:	f003 031f 	and.w	r3, r3, #31
 8000998:	b2da      	uxtb	r2, r3
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	f362 138a 	bfi	r3, r2, #6, #5
 80009a0:	60fb      	str	r3, [r7, #12]
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GRSTCTL, greset.d32 );
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	68db      	ldr	r3, [r3, #12]
 80009a6:	68fa      	ldr	r2, [r7, #12]
 80009a8:	611a      	str	r2, [r3, #16]
  do
  {
    greset.d32 = USB_OTG_READ_REG32( &pdev->regs.GREGS->GRSTCTL);
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	68db      	ldr	r3, [r3, #12]
 80009ae:	691b      	ldr	r3, [r3, #16]
 80009b0:	60fb      	str	r3, [r7, #12]
    if (++count > 200000)
 80009b2:	697b      	ldr	r3, [r7, #20]
 80009b4:	f103 0301 	add.w	r3, r3, #1
 80009b8:	617b      	str	r3, [r7, #20]
 80009ba:	697a      	ldr	r2, [r7, #20]
 80009bc:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <USB_OTG_FlushTxFifo+0x78>)
 80009be:	429a      	cmp	r2, r3
 80009c0:	d805      	bhi.n	80009ce <USB_OTG_FlushTxFifo+0x62>
    {
      break;
    }
  }
  while (greset.b.txfflsh == 1);
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	f003 0320 	and.w	r3, r3, #32
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d1ee      	bne.n	80009aa <USB_OTG_FlushTxFifo+0x3e>
 80009cc:	e000      	b.n	80009d0 <USB_OTG_FlushTxFifo+0x64>
  do
  {
    greset.d32 = USB_OTG_READ_REG32( &pdev->regs.GREGS->GRSTCTL);
    if (++count > 200000)
    {
      break;
 80009ce:	bf00      	nop
    }
  }
  while (greset.b.txfflsh == 1);
  /* Wait for 3 PHY Clocks*/
  USB_OTG_BSP_uDelay(3);
 80009d0:	f04f 0003 	mov.w	r0, #3
 80009d4:	f7ff fe5e 	bl	8000694 <USB_OTG_BSP_uDelay>
  return status;
 80009d8:	7cfb      	ldrb	r3, [r7, #19]
}
 80009da:	4618      	mov	r0, r3
 80009dc:	f107 0718 	add.w	r7, r7, #24
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	00030d40 	.word	0x00030d40

080009e8 <USB_OTG_GetMode>:
* @brief  USB_OTG_GetMode : Get current mode
* @param  pdev : Selected device
* @retval current mode
*/
uint32_t USB_OTG_GetMode(USB_OTG_CORE_HANDLE *pdev)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  return (USB_OTG_READ_REG32(&pdev->regs.GREGS->GINTSTS ) & 0x1);
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	68db      	ldr	r3, [r3, #12]
 80009f4:	695b      	ldr	r3, [r3, #20]
 80009f6:	f003 0301 	and.w	r3, r3, #1
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	f107 070c 	add.w	r7, r7, #12
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bc80      	pop	{r7}
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop

08000a08 <USB_OTG_IsDeviceMode>:
* @brief  USB_OTG_IsDeviceMode : Check if it is device mode
* @param  pdev : Selected device
* @retval num_in_ep
*/
uint8_t USB_OTG_IsDeviceMode(USB_OTG_CORE_HANDLE *pdev)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  return (USB_OTG_GetMode(pdev) != HOST_MODE);
 8000a10:	6878      	ldr	r0, [r7, #4]
 8000a12:	f7ff ffe9 	bl	80009e8 <USB_OTG_GetMode>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b01      	cmp	r3, #1
 8000a1a:	bf0c      	ite	eq
 8000a1c:	2300      	moveq	r3, #0
 8000a1e:	2301      	movne	r3, #1
 8000a20:	b2db      	uxtb	r3, r3
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	f107 0708 	add.w	r7, r7, #8
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}

08000a2c <USB_OTG_ReadCoreItr>:
* @brief  USB_OTG_ReadCoreItr : returns the Core Interrupt register
* @param  pdev : Selected device
* @retval Status
*/
uint32_t USB_OTG_ReadCoreItr(USB_OTG_CORE_HANDLE *pdev)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b085      	sub	sp, #20
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  uint32_t v = 0;
 8000a34:	f04f 0300 	mov.w	r3, #0
 8000a38:	60fb      	str	r3, [r7, #12]
  v = USB_OTG_READ_REG32(&pdev->regs.GREGS->GINTSTS);
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	68db      	ldr	r3, [r3, #12]
 8000a3e:	695b      	ldr	r3, [r3, #20]
 8000a40:	60fb      	str	r3, [r7, #12]
  v &= USB_OTG_READ_REG32(&pdev->regs.GREGS->GINTMSK);
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	68db      	ldr	r3, [r3, #12]
 8000a46:	699b      	ldr	r3, [r3, #24]
 8000a48:	68fa      	ldr	r2, [r7, #12]
 8000a4a:	ea02 0303 	and.w	r3, r2, r3
 8000a4e:	60fb      	str	r3, [r7, #12]
  return v;
 8000a50:	68fb      	ldr	r3, [r7, #12]
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	f107 0714 	add.w	r7, r7, #20
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bc80      	pop	{r7}
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <USB_OTG_GetDeviceSpeed>:
*         Get the device speed from the device status register
* @param  None
* @retval status
*/
enum USB_OTG_SPEED USB_OTG_GetDeviceSpeed (USB_OTG_CORE_HANDLE *pdev)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b085      	sub	sp, #20
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  USB_OTG_DSTS_TypeDef  dsts;
  enum USB_OTG_SPEED speed = USB_SPEED_UNKNOWN;
 8000a68:	f04f 0300 	mov.w	r3, #0
 8000a6c:	73fb      	strb	r3, [r7, #15]
  
  
  dsts.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DSTS);
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	691b      	ldr	r3, [r3, #16]
 8000a72:	689b      	ldr	r3, [r3, #8]
 8000a74:	60bb      	str	r3, [r7, #8]
  
  switch (dsts.b.enumspd)
 8000a76:	68bb      	ldr	r3, [r7, #8]
 8000a78:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8000a7c:	b2db      	uxtb	r3, r3
 8000a7e:	2b02      	cmp	r3, #2
 8000a80:	d00b      	beq.n	8000a9a <USB_OTG_GetDeviceSpeed+0x3a>
 8000a82:	2b03      	cmp	r3, #3
 8000a84:	d005      	beq.n	8000a92 <USB_OTG_GetDeviceSpeed+0x32>
 8000a86:	2b01      	cmp	r3, #1
 8000a88:	d003      	beq.n	8000a92 <USB_OTG_GetDeviceSpeed+0x32>
  {
  case DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ:
    speed = USB_SPEED_HIGH;
 8000a8a:	f04f 0303 	mov.w	r3, #3
 8000a8e:	73fb      	strb	r3, [r7, #15]
    break;
 8000a90:	e007      	b.n	8000aa2 <USB_OTG_GetDeviceSpeed+0x42>
  case DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ:
  case DSTS_ENUMSPD_FS_PHY_48MHZ:
    speed = USB_SPEED_FULL;
 8000a92:	f04f 0302 	mov.w	r3, #2
 8000a96:	73fb      	strb	r3, [r7, #15]
    break;
 8000a98:	e003      	b.n	8000aa2 <USB_OTG_GetDeviceSpeed+0x42>
    
  case DSTS_ENUMSPD_LS_PHY_6MHZ:
    speed = USB_SPEED_LOW;
 8000a9a:	f04f 0301 	mov.w	r3, #1
 8000a9e:	73fb      	strb	r3, [r7, #15]
    break;
 8000aa0:	bf00      	nop
  }
  
  return speed;
 8000aa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f107 0714 	add.w	r7, r7, #20
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bc80      	pop	{r7}
 8000aae:	4770      	bx	lr

08000ab0 <USB_OTG_EP0Activate>:
*   for transmitting packets
* @param  None
* @retval USB_OTG_STS : status
*/
USB_OTG_STS  USB_OTG_EP0Activate(USB_OTG_CORE_HANDLE *pdev)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b087      	sub	sp, #28
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  USB_OTG_STS             status = USB_OTG_OK;
 8000ab8:	f04f 0300 	mov.w	r3, #0
 8000abc:	75fb      	strb	r3, [r7, #23]
  USB_OTG_DSTS_TypeDef    dsts;
  USB_OTG_DEPCTL_TypeDef  diepctl;
  USB_OTG_DCTL_TypeDef    dctl;
  
  dctl.d32 = 0;
 8000abe:	f04f 0300 	mov.w	r3, #0
 8000ac2:	60bb      	str	r3, [r7, #8]
  /* Read the Device Status and Endpoint 0 Control registers */
  dsts.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DSTS);
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	691b      	ldr	r3, [r3, #16]
 8000ac8:	689b      	ldr	r3, [r3, #8]
 8000aca:	613b      	str	r3, [r7, #16]
  diepctl.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[0]->DIEPCTL);
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	699b      	ldr	r3, [r3, #24]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	60fb      	str	r3, [r7, #12]
  /* Set the MPS of the IN EP based on the enumeration speed */
  switch (dsts.b.enumspd)
 8000ad4:	693b      	ldr	r3, [r7, #16]
 8000ad6:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8000ada:	b2db      	uxtb	r3, r3
 8000adc:	2b02      	cmp	r3, #2
 8000ade:	d004      	beq.n	8000aea <USB_OTG_EP0Activate+0x3a>
  {
  case DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ:
  case DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ:
  case DSTS_ENUMSPD_FS_PHY_48MHZ:
    diepctl.b.mps = DEP0CTL_MPS_64;
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	f36f 030a 	bfc	r3, #0, #11
 8000ae6:	60fb      	str	r3, [r7, #12]
    break;
 8000ae8:	e006      	b.n	8000af8 <USB_OTG_EP0Activate+0x48>
  case DSTS_ENUMSPD_LS_PHY_6MHZ:
    diepctl.b.mps = DEP0CTL_MPS_8;
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	f04f 0203 	mov.w	r2, #3
 8000af0:	f362 030a 	bfi	r3, r2, #0, #11
 8000af4:	60fb      	str	r3, [r7, #12]
    break;
 8000af6:	bf00      	nop
  }
  USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[0]->DIEPCTL, diepctl.d32);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	699b      	ldr	r3, [r3, #24]
 8000afc:	68fa      	ldr	r2, [r7, #12]
 8000afe:	601a      	str	r2, [r3, #0]
  dctl.b.cgnpinnak = 1;
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b06:	60bb      	str	r3, [r7, #8]
  USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DCTL, dctl.d32, dctl.d32);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	691b      	ldr	r3, [r3, #16]
 8000b0c:	687a      	ldr	r2, [r7, #4]
 8000b0e:	6912      	ldr	r2, [r2, #16]
 8000b10:	6851      	ldr	r1, [r2, #4]
 8000b12:	68ba      	ldr	r2, [r7, #8]
 8000b14:	ea6f 0202 	mvn.w	r2, r2
 8000b18:	4011      	ands	r1, r2
 8000b1a:	68ba      	ldr	r2, [r7, #8]
 8000b1c:	ea41 0202 	orr.w	r2, r1, r2
 8000b20:	605a      	str	r2, [r3, #4]
  return status;
 8000b22:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	f107 071c 	add.w	r7, r7, #28
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bc80      	pop	{r7}
 8000b2e:	4770      	bx	lr

08000b30 <USB_OTG_EPActivate>:
* @brief  USB_OTG_EPActivate : Activates an EP
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EPActivate(USB_OTG_CORE_HANDLE *pdev , USB_OTG_EP *ep)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b087      	sub	sp, #28
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
 8000b38:	6039      	str	r1, [r7, #0]
  USB_OTG_STS status = USB_OTG_OK;
 8000b3a:	f04f 0300 	mov.w	r3, #0
 8000b3e:	74fb      	strb	r3, [r7, #19]
  USB_OTG_DEPCTL_TypeDef  depctl;
  USB_OTG_DAINT_TypeDef  daintmsk;
  __IO uint32_t *addr;
  
  
  depctl.d32 = 0;
 8000b40:	f04f 0300 	mov.w	r3, #0
 8000b44:	60fb      	str	r3, [r7, #12]
  daintmsk.d32 = 0;
 8000b46:	f04f 0300 	mov.w	r3, #0
 8000b4a:	60bb      	str	r3, [r7, #8]
  /* Read DEPCTLn register */
  if (ep->is_in == 1)
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	785b      	ldrb	r3, [r3, #1]
 8000b50:	2b01      	cmp	r3, #1
 8000b52:	d112      	bne.n	8000b7a <USB_OTG_EPActivate+0x4a>
  {
    addr = &pdev->regs.INEP_REGS[ep->num]->DIEPCTL;
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	687a      	ldr	r2, [r7, #4]
 8000b5a:	f103 0304 	add.w	r3, r3, #4
 8000b5e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000b62:	18d3      	adds	r3, r2, r3
 8000b64:	689b      	ldr	r3, [r3, #8]
 8000b66:	617b      	str	r3, [r7, #20]
    daintmsk.ep.in = 1 << ep->num;
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	f04f 0201 	mov.w	r2, #1
 8000b70:	fa02 f303 	lsl.w	r3, r2, r3
 8000b74:	b29b      	uxth	r3, r3
 8000b76:	813b      	strh	r3, [r7, #8]
 8000b78:	e011      	b.n	8000b9e <USB_OTG_EPActivate+0x6e>
  }
  else
  {
    addr = &pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL;
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	687a      	ldr	r2, [r7, #4]
 8000b80:	f103 0314 	add.w	r3, r3, #20
 8000b84:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000b88:	18d3      	adds	r3, r2, r3
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	617b      	str	r3, [r7, #20]
    daintmsk.ep.out = 1 << ep->num;
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	f04f 0201 	mov.w	r2, #1
 8000b96:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9a:	b29b      	uxth	r3, r3
 8000b9c:	817b      	strh	r3, [r7, #10]
  }
  /* If the EP is already active don't change the EP Control
  * register. */
  depctl.d32 = USB_OTG_READ_REG32(addr);
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	60fb      	str	r3, [r7, #12]
  if (!depctl.b.usbactep)
 8000ba4:	7b7b      	ldrb	r3, [r7, #13]
 8000ba6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000baa:	b2db      	uxtb	r3, r3
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d129      	bne.n	8000c04 <USB_OTG_EPActivate+0xd4>
  {
    depctl.b.mps    = ep->maxpacket;
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	689b      	ldr	r3, [r3, #8]
 8000bb4:	b29b      	uxth	r3, r3
 8000bb6:	ea4f 5343 	mov.w	r3, r3, lsl #21
 8000bba:	ea4f 5353 	mov.w	r3, r3, lsr #21
 8000bbe:	b29a      	uxth	r2, r3
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	f362 030a 	bfi	r3, r2, #0, #11
 8000bc6:	60fb      	str	r3, [r7, #12]
    depctl.b.eptype = ep->type;
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	78db      	ldrb	r3, [r3, #3]
 8000bcc:	f003 0303 	and.w	r3, r3, #3
 8000bd0:	b2da      	uxtb	r2, r3
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	f362 4393 	bfi	r3, r2, #18, #2
 8000bd8:	60fb      	str	r3, [r7, #12]
    depctl.b.txfnum = ep->tx_fifo_num;
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	88db      	ldrh	r3, [r3, #6]
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	f003 030f 	and.w	r3, r3, #15
 8000be4:	b2da      	uxtb	r2, r3
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	f362 5399 	bfi	r3, r2, #22, #4
 8000bec:	60fb      	str	r3, [r7, #12]
    depctl.b.setd0pid = 1;
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bf4:	60fb      	str	r3, [r7, #12]
    depctl.b.usbactep = 1;
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bfc:	60fb      	str	r3, [r7, #12]
    USB_OTG_WRITE_REG32(addr, depctl.d32);
 8000bfe:	68fa      	ldr	r2, [r7, #12]
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	601a      	str	r2, [r3, #0]
  {
    USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DEACHMSK, 0, daintmsk.d32);
  }
  else
#endif   
    USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DAINTMSK, 0, daintmsk.d32);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	691b      	ldr	r3, [r3, #16]
 8000c08:	687a      	ldr	r2, [r7, #4]
 8000c0a:	6912      	ldr	r2, [r2, #16]
 8000c0c:	69d1      	ldr	r1, [r2, #28]
 8000c0e:	68ba      	ldr	r2, [r7, #8]
 8000c10:	ea41 0202 	orr.w	r2, r1, r2
 8000c14:	61da      	str	r2, [r3, #28]
  return status;
 8000c16:	7cfb      	ldrb	r3, [r7, #19]
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f107 071c 	add.w	r7, r7, #28
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bc80      	pop	{r7}
 8000c22:	4770      	bx	lr

08000c24 <USB_OTG_EPStartXfer>:
*         starts the xfer
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EPStartXfer(USB_OTG_CORE_HANDLE *pdev , USB_OTG_EP *ep)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b088      	sub	sp, #32
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
 8000c2c:	6039      	str	r1, [r7, #0]
  USB_OTG_STS status = USB_OTG_OK;
 8000c2e:	f04f 0300 	mov.w	r3, #0
 8000c32:	77fb      	strb	r3, [r7, #31]
  USB_OTG_DEPCTL_TypeDef     depctl;
  USB_OTG_DEPXFRSIZ_TypeDef  deptsiz;
  USB_OTG_DSTS_TypeDef       dsts;    
  uint32_t fifoemptymsk = 0;  
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	61bb      	str	r3, [r7, #24]
  
  depctl.d32 = 0;
 8000c3a:	f04f 0300 	mov.w	r3, #0
 8000c3e:	617b      	str	r3, [r7, #20]
  deptsiz.d32 = 0;
 8000c40:	f04f 0300 	mov.w	r3, #0
 8000c44:	613b      	str	r3, [r7, #16]
  /* IN endpoint */
  if (ep->is_in == 1)
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	785b      	ldrb	r3, [r3, #1]
 8000c4a:	2b01      	cmp	r3, #1
 8000c4c:	f040 80be 	bne.w	8000dcc <USB_OTG_EPStartXfer+0x1a8>
  {
    depctl.d32  = USB_OTG_READ_REG32(&(pdev->regs.INEP_REGS[ep->num]->DIEPCTL));
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	687a      	ldr	r2, [r7, #4]
 8000c56:	f103 0304 	add.w	r3, r3, #4
 8000c5a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000c5e:	18d3      	adds	r3, r2, r3
 8000c60:	689b      	ldr	r3, [r3, #8]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	617b      	str	r3, [r7, #20]
    deptsiz.d32 = USB_OTG_READ_REG32(&(pdev->regs.INEP_REGS[ep->num]->DIEPTSIZ));
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	687a      	ldr	r2, [r7, #4]
 8000c6c:	f103 0304 	add.w	r3, r3, #4
 8000c70:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000c74:	18d3      	adds	r3, r2, r3
 8000c76:	689b      	ldr	r3, [r3, #8]
 8000c78:	691b      	ldr	r3, [r3, #16]
 8000c7a:	613b      	str	r3, [r7, #16]
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	695b      	ldr	r3, [r3, #20]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d10a      	bne.n	8000c9a <USB_OTG_EPStartXfer+0x76>
    {
      deptsiz.b.xfersize = 0;
 8000c84:	693b      	ldr	r3, [r7, #16]
 8000c86:	f36f 0312 	bfc	r3, #0, #19
 8000c8a:	613b      	str	r3, [r7, #16]
      deptsiz.b.pktcnt = 1;
 8000c8c:	693b      	ldr	r3, [r7, #16]
 8000c8e:	f04f 0201 	mov.w	r2, #1
 8000c92:	f362 43dc 	bfi	r3, r2, #19, #10
 8000c96:	613b      	str	r3, [r7, #16]
 8000c98:	e028      	b.n	8000cec <USB_OTG_EPStartXfer+0xc8>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      deptsiz.b.xfersize = ep->xfer_len;
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	695b      	ldr	r3, [r3, #20]
 8000c9e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8000ca2:	f422 0278 	bic.w	r2, r2, #16252928	; 0xf80000
 8000ca6:	693b      	ldr	r3, [r7, #16]
 8000ca8:	f362 0312 	bfi	r3, r2, #0, #19
 8000cac:	613b      	str	r3, [r7, #16]
      deptsiz.b.pktcnt = (ep->xfer_len - 1 + ep->maxpacket) / ep->maxpacket;
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	695a      	ldr	r2, [r3, #20]
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	689b      	ldr	r3, [r3, #8]
 8000cb6:	18d3      	adds	r3, r2, r3
 8000cb8:	f103 32ff 	add.w	r2, r3, #4294967295
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	689b      	ldr	r3, [r3, #8]
 8000cc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cc4:	b29b      	uxth	r3, r3
 8000cc6:	ea4f 5383 	mov.w	r3, r3, lsl #22
 8000cca:	ea4f 5393 	mov.w	r3, r3, lsr #22
 8000cce:	b29a      	uxth	r2, r3
 8000cd0:	693b      	ldr	r3, [r7, #16]
 8000cd2:	f362 43dc 	bfi	r3, r2, #19, #10
 8000cd6:	613b      	str	r3, [r7, #16]

      if (ep->type == EP_TYPE_ISOC)
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	78db      	ldrb	r3, [r3, #3]
 8000cdc:	2b01      	cmp	r3, #1
 8000cde:	d105      	bne.n	8000cec <USB_OTG_EPStartXfer+0xc8>
      {
        deptsiz.b.mc = 1;
 8000ce0:	693b      	ldr	r3, [r7, #16]
 8000ce2:	f04f 0201 	mov.w	r2, #1
 8000ce6:	f362 735e 	bfi	r3, r2, #29, #2
 8000cea:	613b      	str	r3, [r7, #16]
      }       
    }
    USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[ep->num]->DIEPTSIZ, deptsiz.d32);
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	687a      	ldr	r2, [r7, #4]
 8000cf2:	f103 0304 	add.w	r3, r3, #4
 8000cf6:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000cfa:	18d3      	adds	r3, r2, r3
 8000cfc:	689b      	ldr	r3, [r3, #8]
 8000cfe:	693a      	ldr	r2, [r7, #16]
 8000d00:	611a      	str	r2, [r3, #16]
    
    if (pdev->cfg.dma_enable == 1)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	78db      	ldrb	r3, [r3, #3]
 8000d06:	2b01      	cmp	r3, #1
 8000d08:	d10c      	bne.n	8000d24 <USB_OTG_EPStartXfer+0x100>
    {
      USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[ep->num]->DIEPDMA, ep->dma_addr);
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	687a      	ldr	r2, [r7, #4]
 8000d10:	f103 0304 	add.w	r3, r3, #4
 8000d14:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000d18:	18d3      	adds	r3, r2, r3
 8000d1a:	689b      	ldr	r3, [r3, #8]
 8000d1c:	683a      	ldr	r2, [r7, #0]
 8000d1e:	6912      	ldr	r2, [r2, #16]
 8000d20:	615a      	str	r2, [r3, #20]
 8000d22:	e017      	b.n	8000d54 <USB_OTG_EPStartXfer+0x130>
    }
    else
    {
      if (ep->type != EP_TYPE_ISOC)
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	78db      	ldrb	r3, [r3, #3]
 8000d28:	2b01      	cmp	r3, #1
 8000d2a:	d013      	beq.n	8000d54 <USB_OTG_EPStartXfer+0x130>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0)
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	695b      	ldr	r3, [r3, #20]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d00f      	beq.n	8000d54 <USB_OTG_EPStartXfer+0x130>
        {
          fifoemptymsk = 1 << ep->num;
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	f04f 0201 	mov.w	r2, #1
 8000d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d40:	61bb      	str	r3, [r7, #24]
          USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, 0, fifoemptymsk);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	691b      	ldr	r3, [r3, #16]
 8000d46:	687a      	ldr	r2, [r7, #4]
 8000d48:	6912      	ldr	r2, [r2, #16]
 8000d4a:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8000d4c:	69ba      	ldr	r2, [r7, #24]
 8000d4e:	ea41 0202 	orr.w	r2, r1, r2
 8000d52:	635a      	str	r2, [r3, #52]	; 0x34
        }
      }
    }
    
    
    if (ep->type == EP_TYPE_ISOC)
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	78db      	ldrb	r3, [r3, #3]
 8000d58:	2b01      	cmp	r3, #1
 8000d5a:	d114      	bne.n	8000d86 <USB_OTG_EPStartXfer+0x162>
    {
      dsts.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DSTS);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	691b      	ldr	r3, [r3, #16]
 8000d60:	689b      	ldr	r3, [r3, #8]
 8000d62:	60fb      	str	r3, [r7, #12]
      
      if (((dsts.b.soffn)&0x1) == 0)
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	f3c3 230d 	ubfx	r3, r3, #8, #14
 8000d6a:	b29b      	uxth	r3, r3
 8000d6c:	f003 0301 	and.w	r3, r3, #1
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d104      	bne.n	8000d7e <USB_OTG_EPStartXfer+0x15a>
      {
        depctl.b.setd1pid = 1;
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000d7a:	617b      	str	r3, [r7, #20]
 8000d7c:	e003      	b.n	8000d86 <USB_OTG_EPStartXfer+0x162>
      }
      else
      {
        depctl.b.setd0pid = 1;
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d84:	617b      	str	r3, [r7, #20]
      }
    } 
    
    /* EP enable, IN data in FIFO */
    depctl.b.cnak = 1;
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000d8c:	617b      	str	r3, [r7, #20]
    depctl.b.epena = 1;
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d94:	617b      	str	r3, [r7, #20]
    USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[ep->num]->DIEPCTL, depctl.d32);
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	687a      	ldr	r2, [r7, #4]
 8000d9c:	f103 0304 	add.w	r3, r3, #4
 8000da0:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000da4:	18d3      	adds	r3, r2, r3
 8000da6:	689b      	ldr	r3, [r3, #8]
 8000da8:	697a      	ldr	r2, [r7, #20]
 8000daa:	601a      	str	r2, [r3, #0]

    if (ep->type == EP_TYPE_ISOC)
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	78db      	ldrb	r3, [r3, #3]
 8000db0:	2b01      	cmp	r3, #1
 8000db2:	f040 809a 	bne.w	8000eea <USB_OTG_EPStartXfer+0x2c6>
    {
      USB_OTG_WritePacket(pdev, ep->xfer_buff, ep->num, ep->xfer_len);   
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	68d9      	ldr	r1, [r3, #12]
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	781a      	ldrb	r2, [r3, #0]
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	695b      	ldr	r3, [r3, #20]
 8000dc2:	b29b      	uxth	r3, r3
 8000dc4:	6878      	ldr	r0, [r7, #4]
 8000dc6:	f7ff fd5b 	bl	8000880 <USB_OTG_WritePacket>
 8000dca:	e08e      	b.n	8000eea <USB_OTG_EPStartXfer+0x2c6>
    }    
  }
  else
  {
    /* OUT endpoint */
    depctl.d32  = USB_OTG_READ_REG32(&(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL));
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	687a      	ldr	r2, [r7, #4]
 8000dd2:	f103 0314 	add.w	r3, r3, #20
 8000dd6:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000dda:	18d3      	adds	r3, r2, r3
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	617b      	str	r3, [r7, #20]
    deptsiz.d32 = USB_OTG_READ_REG32(&(pdev->regs.OUTEP_REGS[ep->num]->DOEPTSIZ));
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	687a      	ldr	r2, [r7, #4]
 8000de8:	f103 0314 	add.w	r3, r3, #20
 8000dec:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000df0:	18d3      	adds	r3, r2, r3
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	691b      	ldr	r3, [r3, #16]
 8000df6:	613b      	str	r3, [r7, #16]
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    if (ep->xfer_len == 0)
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	695b      	ldr	r3, [r3, #20]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d110      	bne.n	8000e22 <USB_OTG_EPStartXfer+0x1fe>
    {
      deptsiz.b.xfersize = ep->maxpacket;
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	689b      	ldr	r3, [r3, #8]
 8000e04:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8000e08:	f422 0278 	bic.w	r2, r2, #16252928	; 0xf80000
 8000e0c:	693b      	ldr	r3, [r7, #16]
 8000e0e:	f362 0312 	bfi	r3, r2, #0, #19
 8000e12:	613b      	str	r3, [r7, #16]
      deptsiz.b.pktcnt = 1;
 8000e14:	693b      	ldr	r3, [r7, #16]
 8000e16:	f04f 0201 	mov.w	r2, #1
 8000e1a:	f362 43dc 	bfi	r3, r2, #19, #10
 8000e1e:	613b      	str	r3, [r7, #16]
 8000e20:	e024      	b.n	8000e6c <USB_OTG_EPStartXfer+0x248>
    }
    else
    {
      deptsiz.b.pktcnt = (ep->xfer_len + (ep->maxpacket - 1)) / ep->maxpacket;
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	695a      	ldr	r2, [r3, #20]
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	689b      	ldr	r3, [r3, #8]
 8000e2a:	18d3      	adds	r3, r2, r3
 8000e2c:	f103 32ff 	add.w	r2, r3, #4294967295
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	689b      	ldr	r3, [r3, #8]
 8000e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e38:	b29b      	uxth	r3, r3
 8000e3a:	ea4f 5383 	mov.w	r3, r3, lsl #22
 8000e3e:	ea4f 5393 	mov.w	r3, r3, lsr #22
 8000e42:	b29a      	uxth	r2, r3
 8000e44:	693b      	ldr	r3, [r7, #16]
 8000e46:	f362 43dc 	bfi	r3, r2, #19, #10
 8000e4a:	613b      	str	r3, [r7, #16]
      deptsiz.b.xfersize = deptsiz.b.pktcnt * ep->maxpacket;
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	f3c3 43c9 	ubfx	r3, r3, #19, #10
 8000e52:	b29b      	uxth	r3, r3
 8000e54:	683a      	ldr	r2, [r7, #0]
 8000e56:	6892      	ldr	r2, [r2, #8]
 8000e58:	fb02 f303 	mul.w	r3, r2, r3
 8000e5c:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8000e60:	f422 0278 	bic.w	r2, r2, #16252928	; 0xf80000
 8000e64:	693b      	ldr	r3, [r7, #16]
 8000e66:	f362 0312 	bfi	r3, r2, #0, #19
 8000e6a:	613b      	str	r3, [r7, #16]
    }
    USB_OTG_WRITE_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPTSIZ, deptsiz.d32);
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	687a      	ldr	r2, [r7, #4]
 8000e72:	f103 0314 	add.w	r3, r3, #20
 8000e76:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000e7a:	18d3      	adds	r3, r2, r3
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	611a      	str	r2, [r3, #16]
    
    if (pdev->cfg.dma_enable == 1)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	78db      	ldrb	r3, [r3, #3]
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	d10b      	bne.n	8000ea2 <USB_OTG_EPStartXfer+0x27e>
    {
      USB_OTG_WRITE_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPDMA, ep->dma_addr);
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	687a      	ldr	r2, [r7, #4]
 8000e90:	f103 0314 	add.w	r3, r3, #20
 8000e94:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000e98:	18d3      	adds	r3, r2, r3
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	683a      	ldr	r2, [r7, #0]
 8000e9e:	6912      	ldr	r2, [r2, #16]
 8000ea0:	615a      	str	r2, [r3, #20]
    }
    
    if (ep->type == EP_TYPE_ISOC)
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	78db      	ldrb	r3, [r3, #3]
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d10c      	bne.n	8000ec4 <USB_OTG_EPStartXfer+0x2a0>
    {
      if (ep->even_odd_frame)
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	795b      	ldrb	r3, [r3, #5]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d004      	beq.n	8000ebc <USB_OTG_EPStartXfer+0x298>
      {
        depctl.b.setd1pid = 1;
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000eb8:	617b      	str	r3, [r7, #20]
 8000eba:	e003      	b.n	8000ec4 <USB_OTG_EPStartXfer+0x2a0>
      }
      else
      {
        depctl.b.setd0pid = 1;
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ec2:	617b      	str	r3, [r7, #20]
      }
    }
    /* EP enable */
    depctl.b.cnak = 1;
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000eca:	617b      	str	r3, [r7, #20]
    depctl.b.epena = 1;
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ed2:	617b      	str	r3, [r7, #20]
    USB_OTG_WRITE_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL, depctl.d32);
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	687a      	ldr	r2, [r7, #4]
 8000eda:	f103 0314 	add.w	r3, r3, #20
 8000ede:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000ee2:	18d3      	adds	r3, r2, r3
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	697a      	ldr	r2, [r7, #20]
 8000ee8:	601a      	str	r2, [r3, #0]
  }
  return status;
 8000eea:	7ffb      	ldrb	r3, [r7, #31]
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	f107 0720 	add.w	r7, r7, #32
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop

08000ef8 <USB_OTG_EP0StartXfer>:
*         starts the xfer
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EP0StartXfer(USB_OTG_CORE_HANDLE *pdev , USB_OTG_EP *ep)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b089      	sub	sp, #36	; 0x24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	6039      	str	r1, [r7, #0]
  USB_OTG_STS                 status = USB_OTG_OK;
 8000f02:	f04f 0300 	mov.w	r3, #0
 8000f06:	77fb      	strb	r3, [r7, #31]
  USB_OTG_DEPCTL_TypeDef      depctl;
  USB_OTG_DEP0XFRSIZ_TypeDef  deptsiz;
  USB_OTG_INEPREGS          *in_regs;
  uint32_t fifoemptymsk = 0;
 8000f08:	f04f 0300 	mov.w	r3, #0
 8000f0c:	61bb      	str	r3, [r7, #24]
  
  depctl.d32   = 0;
 8000f0e:	f04f 0300 	mov.w	r3, #0
 8000f12:	613b      	str	r3, [r7, #16]
  deptsiz.d32  = 0;
 8000f14:	f04f 0300 	mov.w	r3, #0
 8000f18:	60bb      	str	r3, [r7, #8]
  /* IN endpoint */
  if (ep->is_in == 1)
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	785b      	ldrb	r3, [r3, #1]
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d178      	bne.n	8001014 <USB_OTG_EP0StartXfer+0x11c>
  {
    in_regs = pdev->regs.INEP_REGS[0];
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	699b      	ldr	r3, [r3, #24]
 8000f26:	617b      	str	r3, [r7, #20]
    depctl.d32  = USB_OTG_READ_REG32(&in_regs->DIEPCTL);
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	613b      	str	r3, [r7, #16]
    deptsiz.d32 = USB_OTG_READ_REG32(&in_regs->DIEPTSIZ);
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	691b      	ldr	r3, [r3, #16]
 8000f32:	60bb      	str	r3, [r7, #8]
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	695b      	ldr	r3, [r3, #20]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d10a      	bne.n	8000f52 <USB_OTG_EP0StartXfer+0x5a>
    {
      deptsiz.b.xfersize = 0;
 8000f3c:	7a3b      	ldrb	r3, [r7, #8]
 8000f3e:	f36f 0306 	bfc	r3, #0, #7
 8000f42:	723b      	strb	r3, [r7, #8]
      deptsiz.b.pktcnt = 1;
 8000f44:	7abb      	ldrb	r3, [r7, #10]
 8000f46:	f04f 0201 	mov.w	r2, #1
 8000f4a:	f362 03c4 	bfi	r3, r2, #3, #2
 8000f4e:	72bb      	strb	r3, [r7, #10]
 8000f50:	e024      	b.n	8000f9c <USB_OTG_EP0StartXfer+0xa4>
      
    }
    else
    {
      if (ep->xfer_len > ep->maxpacket)
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	695a      	ldr	r2, [r3, #20]
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	689b      	ldr	r3, [r3, #8]
 8000f5a:	429a      	cmp	r2, r3
 8000f5c:	d90e      	bls.n	8000f7c <USB_OTG_EP0StartXfer+0x84>
      {
        ep->xfer_len = ep->maxpacket;
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	689a      	ldr	r2, [r3, #8]
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	615a      	str	r2, [r3, #20]
        deptsiz.b.xfersize = ep->maxpacket;
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	689b      	ldr	r3, [r3, #8]
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000f70:	b2da      	uxtb	r2, r3
 8000f72:	7a3b      	ldrb	r3, [r7, #8]
 8000f74:	f362 0306 	bfi	r3, r2, #0, #7
 8000f78:	723b      	strb	r3, [r7, #8]
 8000f7a:	e009      	b.n	8000f90 <USB_OTG_EP0StartXfer+0x98>
      }
      else
      {
        deptsiz.b.xfersize = ep->xfer_len;
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	695b      	ldr	r3, [r3, #20]
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000f86:	b2da      	uxtb	r2, r3
 8000f88:	7a3b      	ldrb	r3, [r7, #8]
 8000f8a:	f362 0306 	bfi	r3, r2, #0, #7
 8000f8e:	723b      	strb	r3, [r7, #8]
      }
      deptsiz.b.pktcnt = 1;
 8000f90:	7abb      	ldrb	r3, [r7, #10]
 8000f92:	f04f 0201 	mov.w	r2, #1
 8000f96:	f362 03c4 	bfi	r3, r2, #3, #2
 8000f9a:	72bb      	strb	r3, [r7, #10]
    }
    USB_OTG_WRITE_REG32(&in_regs->DIEPTSIZ, deptsiz.d32);
 8000f9c:	68ba      	ldr	r2, [r7, #8]
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	611a      	str	r2, [r3, #16]
    
    if (pdev->cfg.dma_enable == 1)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	78db      	ldrb	r3, [r3, #3]
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d10b      	bne.n	8000fc2 <USB_OTG_EP0StartXfer+0xca>
    {
      USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[ep->num]->DIEPDMA, ep->dma_addr);  
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	687a      	ldr	r2, [r7, #4]
 8000fb0:	f103 0304 	add.w	r3, r3, #4
 8000fb4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000fb8:	18d3      	adds	r3, r2, r3
 8000fba:	689b      	ldr	r3, [r3, #8]
 8000fbc:	683a      	ldr	r2, [r7, #0]
 8000fbe:	6912      	ldr	r2, [r2, #16]
 8000fc0:	615a      	str	r2, [r3, #20]
    }
    
    /* EP enable, IN data in FIFO */
    depctl.b.cnak = 1;
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000fc8:	613b      	str	r3, [r7, #16]
    depctl.b.epena = 1;
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fd0:	613b      	str	r3, [r7, #16]
    USB_OTG_WRITE_REG32(&in_regs->DIEPCTL, depctl.d32);
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	601a      	str	r2, [r3, #0]
    
    
    
    if (pdev->cfg.dma_enable == 0)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	78db      	ldrb	r3, [r3, #3]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	f040 8086 	bne.w	80010ee <USB_OTG_EP0StartXfer+0x1f6>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0)
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	695b      	ldr	r3, [r3, #20]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	f000 8081 	beq.w	80010ee <USB_OTG_EP0StartXfer+0x1f6>
      {
        {
          fifoemptymsk |= 1 << ep->num;
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	f04f 0201 	mov.w	r2, #1
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	ea42 0303 	orr.w	r3, r2, r3
 8000ffe:	61bb      	str	r3, [r7, #24]
          USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, 0, fifoemptymsk);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	691b      	ldr	r3, [r3, #16]
 8001004:	687a      	ldr	r2, [r7, #4]
 8001006:	6912      	ldr	r2, [r2, #16]
 8001008:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	ea41 0202 	orr.w	r2, r1, r2
 8001010:	635a      	str	r2, [r3, #52]	; 0x34
 8001012:	e06c      	b.n	80010ee <USB_OTG_EP0StartXfer+0x1f6>
    }
  }
  else
  {
    /* OUT endpoint */
    depctl.d32  = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL);
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	687a      	ldr	r2, [r7, #4]
 800101a:	f103 0314 	add.w	r3, r3, #20
 800101e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001022:	18d3      	adds	r3, r2, r3
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	613b      	str	r3, [r7, #16]
    deptsiz.d32 = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPTSIZ);
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	687a      	ldr	r2, [r7, #4]
 8001030:	f103 0314 	add.w	r3, r3, #20
 8001034:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001038:	18d3      	adds	r3, r2, r3
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	691b      	ldr	r3, [r3, #16]
 800103e:	60bb      	str	r3, [r7, #8]
    /* Program the transfer size and packet count as follows:
    * xfersize = N * (maxpacket + 4 - (maxpacket % 4))
    * pktcnt = N           */
    if (ep->xfer_len == 0)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	695b      	ldr	r3, [r3, #20]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d110      	bne.n	800106a <USB_OTG_EP0StartXfer+0x172>
    {
      deptsiz.b.xfersize = ep->maxpacket;
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	689b      	ldr	r3, [r3, #8]
 800104c:	b2db      	uxtb	r3, r3
 800104e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001052:	b2da      	uxtb	r2, r3
 8001054:	7a3b      	ldrb	r3, [r7, #8]
 8001056:	f362 0306 	bfi	r3, r2, #0, #7
 800105a:	723b      	strb	r3, [r7, #8]
      deptsiz.b.pktcnt = 1;
 800105c:	7abb      	ldrb	r3, [r7, #10]
 800105e:	f04f 0201 	mov.w	r2, #1
 8001062:	f362 03c4 	bfi	r3, r2, #3, #2
 8001066:	72bb      	strb	r3, [r7, #10]
 8001068:	e013      	b.n	8001092 <USB_OTG_EP0StartXfer+0x19a>
    }
    else
    {
      ep->xfer_len = ep->maxpacket;
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	689a      	ldr	r2, [r3, #8]
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	615a      	str	r2, [r3, #20]
      deptsiz.b.xfersize = ep->maxpacket;
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	689b      	ldr	r3, [r3, #8]
 8001076:	b2db      	uxtb	r3, r3
 8001078:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800107c:	b2da      	uxtb	r2, r3
 800107e:	7a3b      	ldrb	r3, [r7, #8]
 8001080:	f362 0306 	bfi	r3, r2, #0, #7
 8001084:	723b      	strb	r3, [r7, #8]
      deptsiz.b.pktcnt = 1;
 8001086:	7abb      	ldrb	r3, [r7, #10]
 8001088:	f04f 0201 	mov.w	r2, #1
 800108c:	f362 03c4 	bfi	r3, r2, #3, #2
 8001090:	72bb      	strb	r3, [r7, #10]
    }
    USB_OTG_WRITE_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPTSIZ, deptsiz.d32);
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	687a      	ldr	r2, [r7, #4]
 8001098:	f103 0314 	add.w	r3, r3, #20
 800109c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80010a0:	18d3      	adds	r3, r2, r3
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	68ba      	ldr	r2, [r7, #8]
 80010a6:	611a      	str	r2, [r3, #16]
    if (pdev->cfg.dma_enable == 1)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	78db      	ldrb	r3, [r3, #3]
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d10b      	bne.n	80010c8 <USB_OTG_EP0StartXfer+0x1d0>
    {
      USB_OTG_WRITE_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPDMA, ep->dma_addr);
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	687a      	ldr	r2, [r7, #4]
 80010b6:	f103 0314 	add.w	r3, r3, #20
 80010ba:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80010be:	18d3      	adds	r3, r2, r3
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	683a      	ldr	r2, [r7, #0]
 80010c4:	6912      	ldr	r2, [r2, #16]
 80010c6:	615a      	str	r2, [r3, #20]
    }
    /* EP enable */
    depctl.b.cnak = 1;
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80010ce:	613b      	str	r3, [r7, #16]
    depctl.b.epena = 1;
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010d6:	613b      	str	r3, [r7, #16]
    USB_OTG_WRITE_REG32 (&(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL), depctl.d32);
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	687a      	ldr	r2, [r7, #4]
 80010de:	f103 0314 	add.w	r3, r3, #20
 80010e2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80010e6:	18d3      	adds	r3, r2, r3
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	601a      	str	r2, [r3, #0]
    
  }
  return status;
 80010ee:	7ffb      	ldrb	r3, [r7, #31]
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	f107 0724 	add.w	r7, r7, #36	; 0x24
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bc80      	pop	{r7}
 80010fa:	4770      	bx	lr

080010fc <USB_OTG_EPSetStall>:
* @brief  USB_OTG_EPSetStall : Set the EP STALL
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EPSetStall(USB_OTG_CORE_HANDLE *pdev , USB_OTG_EP *ep)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b087      	sub	sp, #28
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	6039      	str	r1, [r7, #0]
  USB_OTG_STS status = USB_OTG_OK;
 8001106:	f04f 0300 	mov.w	r3, #0
 800110a:	75fb      	strb	r3, [r7, #23]
  USB_OTG_DEPCTL_TypeDef  depctl;
  __IO uint32_t *depctl_addr;
  
  depctl.d32 = 0;
 800110c:	f04f 0300 	mov.w	r3, #0
 8001110:	60fb      	str	r3, [r7, #12]
  if (ep->is_in == 1)
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	785b      	ldrb	r3, [r3, #1]
 8001116:	2b01      	cmp	r3, #1
 8001118:	d11e      	bne.n	8001158 <USB_OTG_EPSetStall+0x5c>
  {
    depctl_addr = &(pdev->regs.INEP_REGS[ep->num]->DIEPCTL);
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	687a      	ldr	r2, [r7, #4]
 8001120:	f103 0304 	add.w	r3, r3, #4
 8001124:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001128:	18d3      	adds	r3, r2, r3
 800112a:	689b      	ldr	r3, [r3, #8]
 800112c:	613b      	str	r3, [r7, #16]
    depctl.d32 = USB_OTG_READ_REG32(depctl_addr);
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	60fb      	str	r3, [r7, #12]
    /* set the disable and stall bits */
    if (depctl.b.epena)
 8001134:	7bfb      	ldrb	r3, [r7, #15]
 8001136:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800113a:	b2db      	uxtb	r3, r3
 800113c:	2b00      	cmp	r3, #0
 800113e:	d003      	beq.n	8001148 <USB_OTG_EPSetStall+0x4c>
    {
      depctl.b.epdis = 1;
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001146:	60fb      	str	r3, [r7, #12]
    }
    depctl.b.stall = 1;
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800114e:	60fb      	str	r3, [r7, #12]
    USB_OTG_WRITE_REG32(depctl_addr, depctl.d32);
 8001150:	68fa      	ldr	r2, [r7, #12]
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	e013      	b.n	8001180 <USB_OTG_EPSetStall+0x84>
  }
  else
  {
    depctl_addr = &(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL);
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	f103 0314 	add.w	r3, r3, #20
 8001162:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001166:	18d3      	adds	r3, r2, r3
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	613b      	str	r3, [r7, #16]
    depctl.d32 = USB_OTG_READ_REG32(depctl_addr);
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	60fb      	str	r3, [r7, #12]
    /* set the stall bit */
    depctl.b.stall = 1;
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001178:	60fb      	str	r3, [r7, #12]
    USB_OTG_WRITE_REG32(depctl_addr, depctl.d32);
 800117a:	68fa      	ldr	r2, [r7, #12]
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	601a      	str	r2, [r3, #0]
  }
  return status;
 8001180:	7dfb      	ldrb	r3, [r7, #23]
}
 8001182:	4618      	mov	r0, r3
 8001184:	f107 071c 	add.w	r7, r7, #28
 8001188:	46bd      	mov	sp, r7
 800118a:	bc80      	pop	{r7}
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop

08001190 <USB_OTG_EPClearStall>:
* @brief  Clear the EP STALL
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EPClearStall(USB_OTG_CORE_HANDLE *pdev , USB_OTG_EP *ep)
{
 8001190:	b480      	push	{r7}
 8001192:	b087      	sub	sp, #28
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
  USB_OTG_STS status = USB_OTG_OK;
 800119a:	f04f 0300 	mov.w	r3, #0
 800119e:	74fb      	strb	r3, [r7, #19]
  USB_OTG_DEPCTL_TypeDef  depctl;
  __IO uint32_t *depctl_addr;
  
  depctl.d32 = 0;
 80011a0:	f04f 0300 	mov.w	r3, #0
 80011a4:	60fb      	str	r3, [r7, #12]
  
  if (ep->is_in == 1)
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	785b      	ldrb	r3, [r3, #1]
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d10a      	bne.n	80011c4 <USB_OTG_EPClearStall+0x34>
  {
    depctl_addr = &(pdev->regs.INEP_REGS[ep->num]->DIEPCTL);
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	687a      	ldr	r2, [r7, #4]
 80011b4:	f103 0304 	add.w	r3, r3, #4
 80011b8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80011bc:	18d3      	adds	r3, r2, r3
 80011be:	689b      	ldr	r3, [r3, #8]
 80011c0:	617b      	str	r3, [r7, #20]
 80011c2:	e009      	b.n	80011d8 <USB_OTG_EPClearStall+0x48>
  }
  else
  {
    depctl_addr = &(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL);
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	687a      	ldr	r2, [r7, #4]
 80011ca:	f103 0314 	add.w	r3, r3, #20
 80011ce:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80011d2:	18d3      	adds	r3, r2, r3
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	617b      	str	r3, [r7, #20]
  }
  depctl.d32 = USB_OTG_READ_REG32(depctl_addr);
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	60fb      	str	r3, [r7, #12]
  /* clear the stall bits */
  depctl.b.stall = 0;
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	f36f 5355 	bfc	r3, #21, #1
 80011e4:	60fb      	str	r3, [r7, #12]
  if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	78db      	ldrb	r3, [r3, #3]
 80011ea:	2b03      	cmp	r3, #3
 80011ec:	d003      	beq.n	80011f6 <USB_OTG_EPClearStall+0x66>
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	78db      	ldrb	r3, [r3, #3]
 80011f2:	2b02      	cmp	r3, #2
 80011f4:	d103      	bne.n	80011fe <USB_OTG_EPClearStall+0x6e>
  {
    depctl.b.setd0pid = 1; /* DATA0 */
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011fc:	60fb      	str	r3, [r7, #12]
  }
  USB_OTG_WRITE_REG32(depctl_addr, depctl.d32);
 80011fe:	68fa      	ldr	r2, [r7, #12]
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	601a      	str	r2, [r3, #0]
  return status;
 8001204:	7cfb      	ldrb	r3, [r7, #19]
}
 8001206:	4618      	mov	r0, r3
 8001208:	f107 071c 	add.w	r7, r7, #28
 800120c:	46bd      	mov	sp, r7
 800120e:	bc80      	pop	{r7}
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop

08001214 <USB_OTG_ReadDevAllOutEp_itr>:
* @brief  USB_OTG_ReadDevAllOutEp_itr : returns OUT endpoint interrupt bits
* @param  pdev : Selected device
* @retval OUT endpoint interrupt bits
*/
uint32_t USB_OTG_ReadDevAllOutEp_itr(USB_OTG_CORE_HANDLE *pdev)
{
 8001214:	b480      	push	{r7}
 8001216:	b085      	sub	sp, #20
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  uint32_t v;
  v  = USB_OTG_READ_REG32(&pdev->regs.DREGS->DAINT);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	691b      	ldr	r3, [r3, #16]
 8001220:	699b      	ldr	r3, [r3, #24]
 8001222:	60fb      	str	r3, [r7, #12]
  v &= USB_OTG_READ_REG32(&pdev->regs.DREGS->DAINTMSK);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	691b      	ldr	r3, [r3, #16]
 8001228:	69db      	ldr	r3, [r3, #28]
 800122a:	68fa      	ldr	r2, [r7, #12]
 800122c:	ea02 0303 	and.w	r3, r2, r3
 8001230:	60fb      	str	r3, [r7, #12]
  return ((v & 0xffff0000) >> 16);
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	ea4f 4313 	mov.w	r3, r3, lsr #16
}
 8001238:	4618      	mov	r0, r3
 800123a:	f107 0714 	add.w	r7, r7, #20
 800123e:	46bd      	mov	sp, r7
 8001240:	bc80      	pop	{r7}
 8001242:	4770      	bx	lr

08001244 <USB_OTG_ReadDevOutEP_itr>:
* @param  pdev : Selected device
* @param  ep : end point number
* @retval Device OUT EP Interrupt register
*/
uint32_t USB_OTG_ReadDevOutEP_itr(USB_OTG_CORE_HANDLE *pdev , uint8_t epnum)
{
 8001244:	b480      	push	{r7}
 8001246:	b085      	sub	sp, #20
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	460b      	mov	r3, r1
 800124e:	70fb      	strb	r3, [r7, #3]
  uint32_t v;
  v  = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[epnum]->DOEPINT);
 8001250:	78fb      	ldrb	r3, [r7, #3]
 8001252:	687a      	ldr	r2, [r7, #4]
 8001254:	f103 0314 	add.w	r3, r3, #20
 8001258:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800125c:	18d3      	adds	r3, r2, r3
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	60fb      	str	r3, [r7, #12]
  v &= USB_OTG_READ_REG32(&pdev->regs.DREGS->DOEPMSK);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	691b      	ldr	r3, [r3, #16]
 8001268:	695b      	ldr	r3, [r3, #20]
 800126a:	68fa      	ldr	r2, [r7, #12]
 800126c:	ea02 0303 	and.w	r3, r2, r3
 8001270:	60fb      	str	r3, [r7, #12]
  return v;
 8001272:	68fb      	ldr	r3, [r7, #12]
}
 8001274:	4618      	mov	r0, r3
 8001276:	f107 0714 	add.w	r7, r7, #20
 800127a:	46bd      	mov	sp, r7
 800127c:	bc80      	pop	{r7}
 800127e:	4770      	bx	lr

08001280 <USB_OTG_ReadDevAllInEPItr>:
* @brief  USB_OTG_ReadDevAllInEPItr : Get int status register
* @param  pdev : Selected device
* @retval int status register
*/
uint32_t USB_OTG_ReadDevAllInEPItr(USB_OTG_CORE_HANDLE *pdev)
{
 8001280:	b480      	push	{r7}
 8001282:	b085      	sub	sp, #20
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  uint32_t v;
  v = USB_OTG_READ_REG32(&pdev->regs.DREGS->DAINT);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	691b      	ldr	r3, [r3, #16]
 800128c:	699b      	ldr	r3, [r3, #24]
 800128e:	60fb      	str	r3, [r7, #12]
  v &= USB_OTG_READ_REG32(&pdev->regs.DREGS->DAINTMSK);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	691b      	ldr	r3, [r3, #16]
 8001294:	69db      	ldr	r3, [r3, #28]
 8001296:	68fa      	ldr	r2, [r7, #12]
 8001298:	ea02 0303 	and.w	r3, r2, r3
 800129c:	60fb      	str	r3, [r7, #12]
  return (v & 0xffff);
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	ea4f 4303 	mov.w	r3, r3, lsl #16
 80012a4:	ea4f 4313 	mov.w	r3, r3, lsr #16
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	f107 0714 	add.w	r7, r7, #20
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bc80      	pop	{r7}
 80012b2:	4770      	bx	lr

080012b4 <USB_OTG_EP0_OutStart>:
* @brief  configures EPO to receive SETUP packets
* @param  None
* @retval : None
*/
void USB_OTG_EP0_OutStart(USB_OTG_CORE_HANDLE *pdev)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b087      	sub	sp, #28
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  USB_OTG_DEP0XFRSIZ_TypeDef  doeptsize0;
  doeptsize0.d32 = 0;
 80012bc:	f04f 0300 	mov.w	r3, #0
 80012c0:	613b      	str	r3, [r7, #16]
  doeptsize0.b.supcnt = 3;
 80012c2:	7cfb      	ldrb	r3, [r7, #19]
 80012c4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80012c8:	74fb      	strb	r3, [r7, #19]
  doeptsize0.b.pktcnt = 1;
 80012ca:	7cbb      	ldrb	r3, [r7, #18]
 80012cc:	f04f 0201 	mov.w	r2, #1
 80012d0:	f362 03c4 	bfi	r3, r2, #3, #2
 80012d4:	74bb      	strb	r3, [r7, #18]
  doeptsize0.b.xfersize = 8 * 3;
 80012d6:	7c3b      	ldrb	r3, [r7, #16]
 80012d8:	f04f 0218 	mov.w	r2, #24
 80012dc:	f362 0306 	bfi	r3, r2, #0, #7
 80012e0:	743b      	strb	r3, [r7, #16]
  USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[0]->DOEPTSIZ, doeptsize0.d32 );
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012e6:	693a      	ldr	r2, [r7, #16]
 80012e8:	611a      	str	r2, [r3, #16]
  
  if (pdev->cfg.dma_enable == 1)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	78db      	ldrb	r3, [r3, #3]
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d117      	bne.n	8001322 <USB_OTG_EP0_OutStart+0x6e>
  {
    USB_OTG_DEPCTL_TypeDef  doepctl;
    doepctl.d32 = 0;
 80012f2:	f04f 0300 	mov.w	r3, #0
 80012f6:	60fb      	str	r3, [r7, #12]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[0]->DOEPDMA, 
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012fc:	687a      	ldr	r2, [r7, #4]
 80012fe:	f502 62b9 	add.w	r2, r2, #1480	; 0x5c8
 8001302:	615a      	str	r2, [r3, #20]
                        (uint32_t)&pdev->dev.setup_packet);
    
    /* EP enable */
    doepctl.d32 = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[0]->DOEPCTL);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	60fb      	str	r3, [r7, #12]
    doepctl.b.epena = 1;
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001312:	60fb      	str	r3, [r7, #12]
    doepctl.d32 = 0x80008000;
 8001314:	f04f 2380 	mov.w	r3, #2147516416	; 0x80008000
 8001318:	60fb      	str	r3, [r7, #12]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[0]->DOEPCTL, doepctl.d32);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800131e:	68fa      	ldr	r2, [r7, #12]
 8001320:	601a      	str	r2, [r3, #0]
  }
}
 8001322:	f107 071c 	add.w	r7, r7, #28
 8001326:	46bd      	mov	sp, r7
 8001328:	bc80      	pop	{r7}
 800132a:	4770      	bx	lr

0800132c <USB_OTG_UngateClock>:
* @brief  USB_OTG_UngateClock : active USB Core clock
* @param  None
* @retval : None
*/
void USB_OTG_UngateClock(USB_OTG_CORE_HANDLE *pdev)
{
 800132c:	b480      	push	{r7}
 800132e:	b085      	sub	sp, #20
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  if(pdev->cfg.low_power)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	7a9b      	ldrb	r3, [r3, #10]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d01b      	beq.n	8001374 <USB_OTG_UngateClock+0x48>
  {
    
    USB_OTG_DSTS_TypeDef     dsts;
    USB_OTG_PCGCCTL_TypeDef  power; 
    
    dsts.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DSTS);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	691b      	ldr	r3, [r3, #16]
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	60fb      	str	r3, [r7, #12]
    
    if(dsts.b.suspsts == 1)
 8001344:	7b3b      	ldrb	r3, [r7, #12]
 8001346:	f003 0301 	and.w	r3, r3, #1
 800134a:	b2db      	uxtb	r3, r3
 800134c:	2b00      	cmp	r3, #0
 800134e:	d011      	beq.n	8001374 <USB_OTG_UngateClock+0x48>
    {
      /* un-gate USB Core clock */
      power.d32 = USB_OTG_READ_REG32(&pdev->regs.PCGCCTL);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	60bb      	str	r3, [r7, #8]
      power.b.gatehclk = 0;
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	f36f 0341 	bfc	r3, #1, #1
 8001360:	60bb      	str	r3, [r7, #8]
      power.b.stoppclk = 0;
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	f36f 0300 	bfc	r3, #0, #1
 8001368:	60bb      	str	r3, [r7, #8]
      USB_OTG_WRITE_REG32(pdev->regs.PCGCCTL, power.d32);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001370:	68ba      	ldr	r2, [r7, #8]
 8001372:	601a      	str	r2, [r3, #0]
      
    }
  }
}
 8001374:	f107 0714 	add.w	r7, r7, #20
 8001378:	46bd      	mov	sp, r7
 800137a:	bc80      	pop	{r7}
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop

08001380 <DCD_EP_Open>:
*/
uint32_t DCD_EP_Open(USB_OTG_CORE_HANDLE *pdev , 
                     uint8_t ep_addr,
                     uint16_t ep_mps,
                     uint8_t ep_type)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b086      	sub	sp, #24
 8001384:	af00      	add	r7, sp, #0
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	72f9      	strb	r1, [r7, #11]
 800138a:	813a      	strh	r2, [r7, #8]
 800138c:	71fb      	strb	r3, [r7, #7]
  USB_OTG_EP *ep;
  
  if ((ep_addr & 0x80) == 0x80)
 800138e:	7afb      	ldrb	r3, [r7, #11]
 8001390:	b25b      	sxtb	r3, r3
 8001392:	2b00      	cmp	r3, #0
 8001394:	da0e      	bge.n	80013b4 <DCD_EP_Open+0x34>
  {
    ep = &pdev->dev.in_ep[ep_addr & 0x7F];
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	f503 718c 	add.w	r1, r3, #280	; 0x118
 800139c:	7afb      	ldrb	r3, [r7, #11]
 800139e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80013a2:	4613      	mov	r3, r2
 80013a4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80013a8:	189b      	adds	r3, r3, r2
 80013aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80013ae:	18cb      	adds	r3, r1, r3
 80013b0:	617b      	str	r3, [r7, #20]
 80013b2:	e00d      	b.n	80013d0 <DCD_EP_Open+0x50>
  }
  else
  {
    ep = &pdev->dev.out_ep[ep_addr & 0x7F];
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	f503 715c 	add.w	r1, r3, #880	; 0x370
 80013ba:	7afb      	ldrb	r3, [r7, #11]
 80013bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80013c0:	4613      	mov	r3, r2
 80013c2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80013c6:	189b      	adds	r3, r3, r2
 80013c8:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80013cc:	18cb      	adds	r3, r1, r3
 80013ce:	617b      	str	r3, [r7, #20]
  }
  ep->num   = ep_addr & 0x7F;
 80013d0:	7afb      	ldrb	r3, [r7, #11]
 80013d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80013d6:	b2da      	uxtb	r2, r3
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80 & ep_addr) != 0;
 80013dc:	7afb      	ldrb	r3, [r7, #11]
 80013de:	ea4f 13d3 	mov.w	r3, r3, lsr #7
 80013e2:	b2da      	uxtb	r2, r3
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	705a      	strb	r2, [r3, #1]
  ep->maxpacket = ep_mps;
 80013e8:	893a      	ldrh	r2, [r7, #8]
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	79fa      	ldrb	r2, [r7, #7]
 80013f2:	70da      	strb	r2, [r3, #3]
  if (ep->is_in)
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	785b      	ldrb	r3, [r3, #1]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d004      	beq.n	8001406 <DCD_EP_Open+0x86>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	461a      	mov	r2, r3
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == USB_OTG_EP_BULK )
 8001406:	79fb      	ldrb	r3, [r7, #7]
 8001408:	2b02      	cmp	r3, #2
 800140a:	d103      	bne.n	8001414 <DCD_EP_Open+0x94>
  {
    ep->data_pid_start = 0;
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	f04f 0200 	mov.w	r2, #0
 8001412:	711a      	strb	r2, [r3, #4]
  }
  USB_OTG_EPActivate(pdev , ep );
 8001414:	68f8      	ldr	r0, [r7, #12]
 8001416:	6979      	ldr	r1, [r7, #20]
 8001418:	f7ff fb8a 	bl	8000b30 <USB_OTG_EPActivate>
  return 0;
 800141c:	f04f 0300 	mov.w	r3, #0
}
 8001420:	4618      	mov	r0, r3
 8001422:	f107 0718 	add.w	r7, r7, #24
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop

0800142c <DCD_EP_PrepareRx>:
*/
uint32_t   DCD_EP_PrepareRx( USB_OTG_CORE_HANDLE *pdev,
                            uint8_t   ep_addr,
                            uint8_t *pbuf,                        
                            uint16_t  buf_len)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b086      	sub	sp, #24
 8001430:	af00      	add	r7, sp, #0
 8001432:	60f8      	str	r0, [r7, #12]
 8001434:	607a      	str	r2, [r7, #4]
 8001436:	460a      	mov	r2, r1
 8001438:	72fa      	strb	r2, [r7, #11]
 800143a:	807b      	strh	r3, [r7, #2]
  USB_OTG_EP *ep;
  
  ep = &pdev->dev.out_ep[ep_addr & 0x7F];
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	f503 715c 	add.w	r1, r3, #880	; 0x370
 8001442:	7afb      	ldrb	r3, [r7, #11]
 8001444:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001448:	4613      	mov	r3, r2
 800144a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800144e:	189b      	adds	r3, r3, r2
 8001450:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8001454:	18cb      	adds	r3, r1, r3
 8001456:	617b      	str	r3, [r7, #20]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pbuf;  
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = buf_len;
 800145e:	887a      	ldrh	r2, [r7, #2]
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0;
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	f04f 0200 	mov.w	r2, #0
 800146a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0;
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	f04f 0200 	mov.w	r2, #0
 8001472:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7F;
 8001474:	7afb      	ldrb	r3, [r7, #11]
 8001476:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800147a:	b2da      	uxtb	r2, r3
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	701a      	strb	r2, [r3, #0]
  
  if (pdev->cfg.dma_enable == 1)
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	78db      	ldrb	r3, [r3, #3]
 8001484:	2b01      	cmp	r3, #1
 8001486:	d102      	bne.n	800148e <DCD_EP_PrepareRx+0x62>
  {
    ep->dma_addr = (uint32_t)pbuf;  
 8001488:	687a      	ldr	r2, [r7, #4]
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	611a      	str	r2, [r3, #16]
  }
  
  if ( ep->num == 0 )
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d104      	bne.n	80014a0 <DCD_EP_PrepareRx+0x74>
  {
    USB_OTG_EP0StartXfer(pdev , ep);
 8001496:	68f8      	ldr	r0, [r7, #12]
 8001498:	6979      	ldr	r1, [r7, #20]
 800149a:	f7ff fd2d 	bl	8000ef8 <USB_OTG_EP0StartXfer>
 800149e:	e003      	b.n	80014a8 <DCD_EP_PrepareRx+0x7c>
  }
  else
  {
    USB_OTG_EPStartXfer(pdev, ep );
 80014a0:	68f8      	ldr	r0, [r7, #12]
 80014a2:	6979      	ldr	r1, [r7, #20]
 80014a4:	f7ff fbbe 	bl	8000c24 <USB_OTG_EPStartXfer>
  }
  return 0;
 80014a8:	f04f 0300 	mov.w	r3, #0
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	f107 0718 	add.w	r7, r7, #24
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop

080014b8 <DCD_EP_Tx>:
*/
uint32_t  DCD_EP_Tx ( USB_OTG_CORE_HANDLE *pdev,
                     uint8_t   ep_addr,
                     uint8_t   *pbuf,
                     uint32_t   buf_len)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b086      	sub	sp, #24
 80014bc:	af00      	add	r7, sp, #0
 80014be:	60f8      	str	r0, [r7, #12]
 80014c0:	607a      	str	r2, [r7, #4]
 80014c2:	603b      	str	r3, [r7, #0]
 80014c4:	460b      	mov	r3, r1
 80014c6:	72fb      	strb	r3, [r7, #11]
  USB_OTG_EP *ep;
  
  ep = &pdev->dev.in_ep[ep_addr & 0x7F];
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	f503 718c 	add.w	r1, r3, #280	; 0x118
 80014ce:	7afb      	ldrb	r3, [r7, #11]
 80014d0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80014d4:	4613      	mov	r3, r2
 80014d6:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80014da:	189b      	adds	r3, r3, r2
 80014dc:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80014e0:	18cb      	adds	r3, r1, r3
 80014e2:	617b      	str	r3, [r7, #20]
  
  /* Setup and start the Transfer */
  ep->is_in = 1;
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	f04f 0201 	mov.w	r2, #1
 80014ea:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7F;  
 80014ec:	7afb      	ldrb	r3, [r7, #11]
 80014ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80014f2:	b2da      	uxtb	r2, r3
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	701a      	strb	r2, [r3, #0]
  ep->xfer_buff = pbuf;
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	60da      	str	r2, [r3, #12]
  ep->dma_addr = (uint32_t)pbuf;  
 80014fe:	687a      	ldr	r2, [r7, #4]
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0;
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	f04f 0200 	mov.w	r2, #0
 800150a:	619a      	str	r2, [r3, #24]
  ep->xfer_len  = buf_len;
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	683a      	ldr	r2, [r7, #0]
 8001510:	615a      	str	r2, [r3, #20]
  
  if ( ep->num == 0 )
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d104      	bne.n	8001524 <DCD_EP_Tx+0x6c>
  {
    USB_OTG_EP0StartXfer(pdev , ep);
 800151a:	68f8      	ldr	r0, [r7, #12]
 800151c:	6979      	ldr	r1, [r7, #20]
 800151e:	f7ff fceb 	bl	8000ef8 <USB_OTG_EP0StartXfer>
 8001522:	e003      	b.n	800152c <DCD_EP_Tx+0x74>
  }
  else
  {
    USB_OTG_EPStartXfer(pdev, ep );
 8001524:	68f8      	ldr	r0, [r7, #12]
 8001526:	6979      	ldr	r1, [r7, #20]
 8001528:	f7ff fb7c 	bl	8000c24 <USB_OTG_EPStartXfer>
  }
  return 0;
 800152c:	f04f 0300 	mov.w	r3, #0
}
 8001530:	4618      	mov	r0, r3
 8001532:	f107 0718 	add.w	r7, r7, #24
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop

0800153c <DCD_EP_Stall>:
* @param pdev: device instance
* @param epnum: endpoint address
* @retval : status
*/
uint32_t  DCD_EP_Stall (USB_OTG_CORE_HANDLE *pdev, uint8_t   epnum)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	460b      	mov	r3, r1
 8001546:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EP *ep;
  if ((0x80 & epnum) == 0x80)
 8001548:	78fb      	ldrb	r3, [r7, #3]
 800154a:	b25b      	sxtb	r3, r3
 800154c:	2b00      	cmp	r3, #0
 800154e:	da0e      	bge.n	800156e <DCD_EP_Stall+0x32>
  {
    ep = &pdev->dev.in_ep[epnum & 0x7F];
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f503 718c 	add.w	r1, r3, #280	; 0x118
 8001556:	78fb      	ldrb	r3, [r7, #3]
 8001558:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800155c:	4613      	mov	r3, r2
 800155e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001562:	189b      	adds	r3, r3, r2
 8001564:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8001568:	18cb      	adds	r3, r1, r3
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	e00b      	b.n	8001586 <DCD_EP_Stall+0x4a>
  }
  else
  {
    ep = &pdev->dev.out_ep[epnum];
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	f503 715c 	add.w	r1, r3, #880	; 0x370
 8001574:	78fa      	ldrb	r2, [r7, #3]
 8001576:	4613      	mov	r3, r2
 8001578:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800157c:	189b      	adds	r3, r3, r2
 800157e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8001582:	18cb      	adds	r3, r1, r3
 8001584:	60fb      	str	r3, [r7, #12]
  }

  ep->is_stall = 1;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	f04f 0201 	mov.w	r2, #1
 800158c:	709a      	strb	r2, [r3, #2]
  ep->num   = epnum & 0x7F;
 800158e:	78fb      	ldrb	r3, [r7, #3]
 8001590:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001594:	b2da      	uxtb	r2, r3
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((epnum & 0x80) == 0x80);
 800159a:	78fb      	ldrb	r3, [r7, #3]
 800159c:	ea4f 13d3 	mov.w	r3, r3, lsr #7
 80015a0:	b2da      	uxtb	r2, r3
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	705a      	strb	r2, [r3, #1]
  
  USB_OTG_EPSetStall(pdev , ep);
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	68f9      	ldr	r1, [r7, #12]
 80015aa:	f7ff fda7 	bl	80010fc <USB_OTG_EPSetStall>
  return (0);
 80015ae:	f04f 0300 	mov.w	r3, #0
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	f107 0710 	add.w	r7, r7, #16
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <DCD_EP_ClrStall>:
* @param pdev: device instance
* @param epnum: endpoint address
* @retval : status
*/
uint32_t  DCD_EP_ClrStall (USB_OTG_CORE_HANDLE *pdev, uint8_t epnum)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	460b      	mov	r3, r1
 80015c6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EP *ep;
  if ((0x80 & epnum) == 0x80)
 80015c8:	78fb      	ldrb	r3, [r7, #3]
 80015ca:	b25b      	sxtb	r3, r3
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	da0e      	bge.n	80015ee <DCD_EP_ClrStall+0x32>
  {
    ep = &pdev->dev.in_ep[epnum & 0x7F];    
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f503 718c 	add.w	r1, r3, #280	; 0x118
 80015d6:	78fb      	ldrb	r3, [r7, #3]
 80015d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80015dc:	4613      	mov	r3, r2
 80015de:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80015e2:	189b      	adds	r3, r3, r2
 80015e4:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80015e8:	18cb      	adds	r3, r1, r3
 80015ea:	60fb      	str	r3, [r7, #12]
 80015ec:	e00b      	b.n	8001606 <DCD_EP_ClrStall+0x4a>
  }
  else
  {
    ep = &pdev->dev.out_ep[epnum];
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	f503 715c 	add.w	r1, r3, #880	; 0x370
 80015f4:	78fa      	ldrb	r2, [r7, #3]
 80015f6:	4613      	mov	r3, r2
 80015f8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80015fc:	189b      	adds	r3, r3, r2
 80015fe:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8001602:	18cb      	adds	r3, r1, r3
 8001604:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 0;  
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	f04f 0200 	mov.w	r2, #0
 800160c:	709a      	strb	r2, [r3, #2]
  ep->num   = epnum & 0x7F;
 800160e:	78fb      	ldrb	r3, [r7, #3]
 8001610:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001614:	b2da      	uxtb	r2, r3
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((epnum & 0x80) == 0x80);
 800161a:	78fb      	ldrb	r3, [r7, #3]
 800161c:	ea4f 13d3 	mov.w	r3, r3, lsr #7
 8001620:	b2da      	uxtb	r2, r3
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	705a      	strb	r2, [r3, #1]
  
  USB_OTG_EPClearStall(pdev , ep);
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	68f9      	ldr	r1, [r7, #12]
 800162a:	f7ff fdb1 	bl	8001190 <USB_OTG_EPClearStall>
  return (0);
 800162e:	f04f 0300 	mov.w	r3, #0
}
 8001632:	4618      	mov	r0, r3
 8001634:	f107 0710 	add.w	r7, r7, #16
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <DCD_EP_SetAddress>:
* @param pdev: device instance
* @param address: new device address
* @retval : status
*/
void  DCD_EP_SetAddress (USB_OTG_CORE_HANDLE *pdev, uint8_t address)
{
 800163c:	b480      	push	{r7}
 800163e:	b085      	sub	sp, #20
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	460b      	mov	r3, r1
 8001646:	70fb      	strb	r3, [r7, #3]
  USB_OTG_DCFG_TypeDef  dcfg;
  dcfg.d32 = 0;
 8001648:	f04f 0300 	mov.w	r3, #0
 800164c:	60fb      	str	r3, [r7, #12]
  dcfg.b.devaddr = address;
 800164e:	78fb      	ldrb	r3, [r7, #3]
 8001650:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001654:	b2da      	uxtb	r2, r3
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	f362 130a 	bfi	r3, r2, #4, #7
 800165c:	60fb      	str	r3, [r7, #12]
  USB_OTG_MODIFY_REG32( &pdev->regs.DREGS->DCFG, 0, dcfg.d32);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	691b      	ldr	r3, [r3, #16]
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	6912      	ldr	r2, [r2, #16]
 8001666:	6811      	ldr	r1, [r2, #0]
 8001668:	68fa      	ldr	r2, [r7, #12]
 800166a:	ea41 0202 	orr.w	r2, r1, r2
 800166e:	601a      	str	r2, [r3, #0]
}
 8001670:	f107 0714 	add.w	r7, r7, #20
 8001674:	46bd      	mov	sp, r7
 8001676:	bc80      	pop	{r7}
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop

0800167c <USBD_OTG_ISR_Handler>:
*         handles all USB Interrupts
* @param  pdev: device instance
* @retval status
*/
uint32_t USBD_OTG_ISR_Handler (USB_OTG_CORE_HANDLE *pdev)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b086      	sub	sp, #24
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTSTS_TypeDef  gintr_status;
  uint32_t retval = 0;
 8001684:	f04f 0300 	mov.w	r3, #0
 8001688:	617b      	str	r3, [r7, #20]
  
  if (USB_OTG_IsDeviceMode(pdev)) /* ensure that we are in device mode */
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f7ff f9bc 	bl	8000a08 <USB_OTG_IsDeviceMode>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	f000 80a8 	beq.w	80017e8 <USBD_OTG_ISR_Handler+0x16c>
  {
    gintr_status.d32 = USB_OTG_ReadCoreItr(pdev);
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f7ff f9c7 	bl	8000a2c <USB_OTG_ReadCoreItr>
 800169e:	4603      	mov	r3, r0
 80016a0:	613b      	str	r3, [r7, #16]
    if (!gintr_status.d32) /* avoid spurious interrupt */
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d102      	bne.n	80016ae <USBD_OTG_ISR_Handler+0x32>
    {
      return 0;
 80016a8:	f04f 0300 	mov.w	r3, #0
 80016ac:	e09d      	b.n	80017ea <USBD_OTG_ISR_Handler+0x16e>
    }
    
    if (gintr_status.b.outepintr)
 80016ae:	7cbb      	ldrb	r3, [r7, #18]
 80016b0:	f003 0308 	and.w	r3, r3, #8
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d007      	beq.n	80016ca <USBD_OTG_ISR_Handler+0x4e>
    {
      retval |= DCD_HandleOutEP_ISR(pdev);
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f000 fa4c 	bl	8001b58 <DCD_HandleOutEP_ISR>
 80016c0:	4603      	mov	r3, r0
 80016c2:	697a      	ldr	r2, [r7, #20]
 80016c4:	ea42 0303 	orr.w	r3, r2, r3
 80016c8:	617b      	str	r3, [r7, #20]
    }    
    
    if (gintr_status.b.inepint)
 80016ca:	7cbb      	ldrb	r3, [r7, #18]
 80016cc:	f003 0304 	and.w	r3, r3, #4
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d007      	beq.n	80016e6 <USBD_OTG_ISR_Handler+0x6a>
    {
      retval |= DCD_HandleInEP_ISR(pdev);
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f000 f926 	bl	8001928 <DCD_HandleInEP_ISR>
 80016dc:	4603      	mov	r3, r0
 80016de:	697a      	ldr	r2, [r7, #20]
 80016e0:	ea42 0303 	orr.w	r3, r2, r3
 80016e4:	617b      	str	r3, [r7, #20]
    }
    
    if (gintr_status.b.modemismatch)
 80016e6:	7c3b      	ldrb	r3, [r7, #16]
 80016e8:	f003 0302 	and.w	r3, r3, #2
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d00a      	beq.n	8001708 <USBD_OTG_ISR_Handler+0x8c>
    {
      USB_OTG_GINTSTS_TypeDef  gintsts;
      
      /* Clear interrupt */
      gintsts.d32 = 0;
 80016f2:	f04f 0300 	mov.w	r3, #0
 80016f6:	60fb      	str	r3, [r7, #12]
      gintsts.b.modemismatch = 1;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	f043 0302 	orr.w	r3, r3, #2
 80016fe:	60fb      	str	r3, [r7, #12]
      USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	68fa      	ldr	r2, [r7, #12]
 8001706:	615a      	str	r2, [r3, #20]
    }
    
    if (gintr_status.b.wkupintr)
 8001708:	7cfb      	ldrb	r3, [r7, #19]
 800170a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800170e:	b2db      	uxtb	r3, r3
 8001710:	2b00      	cmp	r3, #0
 8001712:	d007      	beq.n	8001724 <USBD_OTG_ISR_Handler+0xa8>
    {
      retval |= DCD_HandleResume_ISR(pdev);
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f000 f86d 	bl	80017f4 <DCD_HandleResume_ISR>
 800171a:	4603      	mov	r3, r0
 800171c:	697a      	ldr	r2, [r7, #20]
 800171e:	ea42 0303 	orr.w	r3, r2, r3
 8001722:	617b      	str	r3, [r7, #20]
    }
    
    if (gintr_status.b.usbsuspend)
 8001724:	7c7b      	ldrb	r3, [r7, #17]
 8001726:	f003 0308 	and.w	r3, r3, #8
 800172a:	b2db      	uxtb	r3, r3
 800172c:	2b00      	cmp	r3, #0
 800172e:	d007      	beq.n	8001740 <USBD_OTG_ISR_Handler+0xc4>
    {
      retval |= DCD_HandleUSBSuspend_ISR(pdev);
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	f000 f8a5 	bl	8001880 <DCD_HandleUSBSuspend_ISR>
 8001736:	4603      	mov	r3, r0
 8001738:	697a      	ldr	r2, [r7, #20]
 800173a:	ea42 0303 	orr.w	r3, r2, r3
 800173e:	617b      	str	r3, [r7, #20]
    }
    if (gintr_status.b.sofintr)
 8001740:	7c3b      	ldrb	r3, [r7, #16]
 8001742:	f003 0308 	and.w	r3, r3, #8
 8001746:	b2db      	uxtb	r3, r3
 8001748:	2b00      	cmp	r3, #0
 800174a:	d007      	beq.n	800175c <USBD_OTG_ISR_Handler+0xe0>
    {
      retval |= DCD_HandleSof_ISR(pdev);
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f000 fad9 	bl	8001d04 <DCD_HandleSof_ISR>
 8001752:	4603      	mov	r3, r0
 8001754:	697a      	ldr	r2, [r7, #20]
 8001756:	ea42 0303 	orr.w	r3, r2, r3
 800175a:	617b      	str	r3, [r7, #20]
      
    }
    
    if (gintr_status.b.rxstsqlvl)
 800175c:	7c3b      	ldrb	r3, [r7, #16]
 800175e:	f003 0310 	and.w	r3, r3, #16
 8001762:	b2db      	uxtb	r3, r3
 8001764:	2b00      	cmp	r3, #0
 8001766:	d007      	beq.n	8001778 <USBD_OTG_ISR_Handler+0xfc>
    {
      retval |= DCD_HandleRxStatusQueueLevel_ISR(pdev);
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f000 fae9 	bl	8001d40 <DCD_HandleRxStatusQueueLevel_ISR>
 800176e:	4603      	mov	r3, r0
 8001770:	697a      	ldr	r2, [r7, #20]
 8001772:	ea42 0303 	orr.w	r3, r2, r3
 8001776:	617b      	str	r3, [r7, #20]
      
    }
    
    if (gintr_status.b.usbreset)
 8001778:	7c7b      	ldrb	r3, [r7, #17]
 800177a:	f003 0310 	and.w	r3, r3, #16
 800177e:	b2db      	uxtb	r3, r3
 8001780:	2b00      	cmp	r3, #0
 8001782:	d007      	beq.n	8001794 <USBD_OTG_ISR_Handler+0x118>
    {
      retval |= DCD_HandleUsbReset_ISR(pdev);
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f000 fbe9 	bl	8001f5c <DCD_HandleUsbReset_ISR>
 800178a:	4603      	mov	r3, r0
 800178c:	697a      	ldr	r2, [r7, #20]
 800178e:	ea42 0303 	orr.w	r3, r2, r3
 8001792:	617b      	str	r3, [r7, #20]
      
    }
    if (gintr_status.b.enumdone)
 8001794:	7c7b      	ldrb	r3, [r7, #17]
 8001796:	f003 0320 	and.w	r3, r3, #32
 800179a:	b2db      	uxtb	r3, r3
 800179c:	2b00      	cmp	r3, #0
 800179e:	d007      	beq.n	80017b0 <USBD_OTG_ISR_Handler+0x134>
    {
      retval |= DCD_HandleEnumDone_ISR(pdev);
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f000 fc93 	bl	80020cc <DCD_HandleEnumDone_ISR>
 80017a6:	4603      	mov	r3, r0
 80017a8:	697a      	ldr	r2, [r7, #20]
 80017aa:	ea42 0303 	orr.w	r3, r2, r3
 80017ae:	617b      	str	r3, [r7, #20]
    }
    
    if (gintr_status.b.incomplisoin)
 80017b0:	7cbb      	ldrb	r3, [r7, #18]
 80017b2:	f003 0310 	and.w	r3, r3, #16
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d007      	beq.n	80017cc <USBD_OTG_ISR_Handler+0x150>
    {
      retval |= DCD_IsoINIncomplete_ISR(pdev);
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f000 fcc9 	bl	8002154 <DCD_IsoINIncomplete_ISR>
 80017c2:	4603      	mov	r3, r0
 80017c4:	697a      	ldr	r2, [r7, #20]
 80017c6:	ea42 0303 	orr.w	r3, r2, r3
 80017ca:	617b      	str	r3, [r7, #20]
    }

    if (gintr_status.b.incomplisoout)
 80017cc:	7cbb      	ldrb	r3, [r7, #18]
 80017ce:	f003 0320 	and.w	r3, r3, #32
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d007      	beq.n	80017e8 <USBD_OTG_ISR_Handler+0x16c>
    {
      retval |= DCD_IsoOUTIncomplete_ISR(pdev);
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f000 fcd9 	bl	8002190 <DCD_IsoOUTIncomplete_ISR>
 80017de:	4603      	mov	r3, r0
 80017e0:	697a      	ldr	r2, [r7, #20]
 80017e2:	ea42 0303 	orr.w	r3, r2, r3
 80017e6:	617b      	str	r3, [r7, #20]
    {
      retval |= DCD_OTG_ISR(pdev);
    }   
#endif    
  }
  return retval;
 80017e8:	697b      	ldr	r3, [r7, #20]
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	f107 0718 	add.w	r7, r7, #24
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <DCD_HandleResume_ISR>:
*                 remote Wake-up sequence
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_HandleResume_ISR(USB_OTG_CORE_HANDLE *pdev)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b086      	sub	sp, #24
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTSTS_TypeDef  gintsts;
  USB_OTG_DCTL_TypeDef     devctl;
  USB_OTG_PCGCCTL_TypeDef  power;
  
  if(pdev->cfg.low_power)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	7a9b      	ldrb	r3, [r3, #10]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d011      	beq.n	8001828 <DCD_HandleResume_ISR+0x34>
  {
    /* un-gate USB Core clock */
    power.d32 = USB_OTG_READ_REG32(&pdev->regs.PCGCCTL);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	60fb      	str	r3, [r7, #12]
    power.b.gatehclk = 0;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	f36f 0341 	bfc	r3, #1, #1
 8001814:	60fb      	str	r3, [r7, #12]
    power.b.stoppclk = 0;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	f36f 0300 	bfc	r3, #0, #1
 800181c:	60fb      	str	r3, [r7, #12]
    USB_OTG_WRITE_REG32(pdev->regs.PCGCCTL, power.d32);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001824:	68fa      	ldr	r2, [r7, #12]
 8001826:	601a      	str	r2, [r3, #0]
  }
  
  /* Clear the Remote Wake-up Signaling */
  devctl.d32 = 0;
 8001828:	f04f 0300 	mov.w	r3, #0
 800182c:	613b      	str	r3, [r7, #16]
  devctl.b.rmtwkupsig = 1;
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	f043 0301 	orr.w	r3, r3, #1
 8001834:	613b      	str	r3, [r7, #16]
  USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DCTL, devctl.d32, 0);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	691b      	ldr	r3, [r3, #16]
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	6912      	ldr	r2, [r2, #16]
 800183e:	6851      	ldr	r1, [r2, #4]
 8001840:	693a      	ldr	r2, [r7, #16]
 8001842:	ea6f 0202 	mvn.w	r2, r2
 8001846:	ea01 0202 	and.w	r2, r1, r2
 800184a:	605a      	str	r2, [r3, #4]
  
  /* Inform upper layer by the Resume Event */
  USBD_DCD_INT_fops->Resume (pdev);
 800184c:	4b0b      	ldr	r3, [pc, #44]	; (800187c <DCD_HandleResume_ISR+0x88>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	699b      	ldr	r3, [r3, #24]
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	4798      	blx	r3
  
  /* Clear interrupt */
  gintsts.d32 = 0;
 8001856:	f04f 0300 	mov.w	r3, #0
 800185a:	617b      	str	r3, [r7, #20]
  gintsts.b.wkupintr = 1;
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001862:	617b      	str	r3, [r7, #20]
  USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	697a      	ldr	r2, [r7, #20]
 800186a:	615a      	str	r2, [r3, #20]
  return 1;
 800186c:	f04f 0301 	mov.w	r3, #1
}
 8001870:	4618      	mov	r0, r3
 8001872:	f107 0718 	add.w	r7, r7, #24
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	20000044 	.word	0x20000044

08001880 <DCD_HandleUSBSuspend_ISR>:
*         Indicates that SUSPEND state has been detected on the USB
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_HandleUSBSuspend_ISR(USB_OTG_CORE_HANDLE *pdev)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b086      	sub	sp, #24
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTSTS_TypeDef  gintsts;
  USB_OTG_PCGCCTL_TypeDef  power;
  USB_OTG_DSTS_TypeDef     dsts;
  
  USBD_DCD_INT_fops->Suspend (pdev);      
 8001888:	4b25      	ldr	r3, [pc, #148]	; (8001920 <DCD_HandleUSBSuspend_ISR+0xa0>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	695b      	ldr	r3, [r3, #20]
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	4798      	blx	r3
  
  dsts.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DSTS);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	691b      	ldr	r3, [r3, #16]
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	60fb      	str	r3, [r7, #12]
    
  /* Clear interrupt */
  gintsts.d32 = 0;
 800189a:	f04f 0300 	mov.w	r3, #0
 800189e:	617b      	str	r3, [r7, #20]
  gintsts.b.usbsuspend = 1;
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80018a6:	617b      	str	r3, [r7, #20]
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	697a      	ldr	r2, [r7, #20]
 80018ae:	615a      	str	r2, [r3, #20]
  
  if((pdev->cfg.low_power) && (dsts.b.suspsts == 1))
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	7a9b      	ldrb	r3, [r3, #10]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d02c      	beq.n	8001912 <DCD_HandleUSBSuspend_ISR+0x92>
 80018b8:	7b3b      	ldrb	r3, [r7, #12]
 80018ba:	f003 0301 	and.w	r3, r3, #1
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d026      	beq.n	8001912 <DCD_HandleUSBSuspend_ISR+0x92>
  {
	/*  switch-off the clocks */
    power.d32 = 0;
 80018c4:	f04f 0300 	mov.w	r3, #0
 80018c8:	613b      	str	r3, [r7, #16]
    power.b.stoppclk = 1;
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	f043 0301 	orr.w	r3, r3, #1
 80018d0:	613b      	str	r3, [r7, #16]
    USB_OTG_MODIFY_REG32(pdev->regs.PCGCCTL, 0, power.d32);  
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
 80018de:	6811      	ldr	r1, [r2, #0]
 80018e0:	693a      	ldr	r2, [r7, #16]
 80018e2:	ea41 0202 	orr.w	r2, r1, r2
 80018e6:	601a      	str	r2, [r3, #0]
    
    power.b.gatehclk = 1;
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	f043 0302 	orr.w	r3, r3, #2
 80018ee:	613b      	str	r3, [r7, #16]
    USB_OTG_MODIFY_REG32(pdev->regs.PCGCCTL, 0, power.d32);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
 80018fc:	6811      	ldr	r1, [r2, #0]
 80018fe:	693a      	ldr	r2, [r7, #16]
 8001900:	ea41 0202 	orr.w	r2, r1, r2
 8001904:	601a      	str	r2, [r3, #0]
    
    /* Request to enter Sleep mode after exit from current ISR */
    SCB->SCR |= (SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk);
 8001906:	4b07      	ldr	r3, [pc, #28]	; (8001924 <DCD_HandleUSBSuspend_ISR+0xa4>)
 8001908:	4a06      	ldr	r2, [pc, #24]	; (8001924 <DCD_HandleUSBSuspend_ISR+0xa4>)
 800190a:	6912      	ldr	r2, [r2, #16]
 800190c:	f042 0206 	orr.w	r2, r2, #6
 8001910:	611a      	str	r2, [r3, #16]
  }
  return 1;
 8001912:	f04f 0301 	mov.w	r3, #1
}
 8001916:	4618      	mov	r0, r3
 8001918:	f107 0718 	add.w	r7, r7, #24
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	20000044 	.word	0x20000044
 8001924:	e000ed00 	.word	0xe000ed00

08001928 <DCD_HandleInEP_ISR>:
*         Indicates that an IN EP has a pending Interrupt
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_HandleInEP_ISR(USB_OTG_CORE_HANDLE *pdev)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b086      	sub	sp, #24
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  USB_OTG_DIEPINTn_TypeDef  diepint;
  
  uint32_t ep_intr;
  uint32_t epnum = 0;
 8001930:	f04f 0300 	mov.w	r3, #0
 8001934:	613b      	str	r3, [r7, #16]
  uint32_t fifoemptymsk;
  diepint.d32 = 0;
 8001936:	f04f 0300 	mov.w	r3, #0
 800193a:	60bb      	str	r3, [r7, #8]
  ep_intr = USB_OTG_ReadDevAllInEPItr(pdev);
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f7ff fc9f 	bl	8001280 <USB_OTG_ReadDevAllInEPItr>
 8001942:	6178      	str	r0, [r7, #20]
  
  while ( ep_intr )
 8001944:	e0fa      	b.n	8001b3c <DCD_HandleInEP_ISR+0x214>
  {
    if (ep_intr&0x1) /* In ITR */
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	f003 0301 	and.w	r3, r3, #1
 800194c:	b2db      	uxtb	r3, r3
 800194e:	2b00      	cmp	r3, #0
 8001950:	f000 80ec 	beq.w	8001b2c <DCD_HandleInEP_ISR+0x204>
    {
      diepint.d32 = DCD_ReadDevInEP(pdev , epnum); /* Get In ITR status */
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	b2db      	uxtb	r3, r3
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	4619      	mov	r1, r3
 800195c:	f000 fc36 	bl	80021cc <DCD_ReadDevInEP>
 8001960:	4603      	mov	r3, r0
 8001962:	60bb      	str	r3, [r7, #8]
      if ( diepint.b.xfercompl )
 8001964:	7a3b      	ldrb	r3, [r7, #8]
 8001966:	f003 0301 	and.w	r3, r3, #1
 800196a:	b2db      	uxtb	r3, r3
 800196c:	2b00      	cmp	r3, #0
 800196e:	d038      	beq.n	80019e2 <DCD_HandleInEP_ISR+0xba>
      {
        fifoemptymsk = 0x1 << epnum;
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	f04f 0201 	mov.w	r2, #1
 8001976:	fa02 f303 	lsl.w	r3, r2, r3
 800197a:	60fb      	str	r3, [r7, #12]
        USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, fifoemptymsk, 0);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	691b      	ldr	r3, [r3, #16]
 8001980:	687a      	ldr	r2, [r7, #4]
 8001982:	6912      	ldr	r2, [r2, #16]
 8001984:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8001986:	68fa      	ldr	r2, [r7, #12]
 8001988:	ea6f 0202 	mvn.w	r2, r2
 800198c:	ea01 0202 	and.w	r2, r1, r2
 8001990:	635a      	str	r2, [r3, #52]	; 0x34
        CLEAR_IN_EP_INTR(epnum, xfercompl);
 8001992:	f04f 0300 	mov.w	r3, #0
 8001996:	60bb      	str	r3, [r7, #8]
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	f043 0301 	orr.w	r3, r3, #1
 800199e:	60bb      	str	r3, [r7, #8]
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	f103 0304 	add.w	r3, r3, #4
 80019a8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80019ac:	18d3      	adds	r3, r2, r3
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	68ba      	ldr	r2, [r7, #8]
 80019b2:	609a      	str	r2, [r3, #8]
        /* TX COMPLETE */
        USBD_DCD_INT_fops->DataInStage(pdev , epnum);
 80019b4:	4b67      	ldr	r3, [pc, #412]	; (8001b54 <DCD_HandleInEP_ISR+0x22c>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	693a      	ldr	r2, [r7, #16]
 80019bc:	b2d2      	uxtb	r2, r2
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	4611      	mov	r1, r2
 80019c2:	4798      	blx	r3
        
        if (pdev->cfg.dma_enable == 1)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	78db      	ldrb	r3, [r3, #3]
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d10a      	bne.n	80019e2 <DCD_HandleInEP_ISR+0xba>
        {
          if((epnum == 0) && (pdev->dev.device_state == USB_OTG_EP0_STATUS_IN))
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d107      	bne.n	80019e2 <DCD_HandleInEP_ISR+0xba>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
 80019d8:	2b04      	cmp	r3, #4
 80019da:	d102      	bne.n	80019e2 <DCD_HandleInEP_ISR+0xba>
          {
            /* prepare to rx more setup packets */
            USB_OTG_EP0_OutStart(pdev);
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f7ff fc69 	bl	80012b4 <USB_OTG_EP0_OutStart>
          }
        }           
      }
      if ( diepint.b.ahberr )
 80019e2:	7a3b      	ldrb	r3, [r7, #8]
 80019e4:	f003 0304 	and.w	r3, r3, #4
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d010      	beq.n	8001a10 <DCD_HandleInEP_ISR+0xe8>
      {
        CLEAR_IN_EP_INTR(epnum, ahberr);
 80019ee:	f04f 0300 	mov.w	r3, #0
 80019f2:	60bb      	str	r3, [r7, #8]
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	f043 0304 	orr.w	r3, r3, #4
 80019fa:	60bb      	str	r3, [r7, #8]
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	f103 0304 	add.w	r3, r3, #4
 8001a04:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001a08:	18d3      	adds	r3, r2, r3
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	68ba      	ldr	r2, [r7, #8]
 8001a0e:	609a      	str	r2, [r3, #8]
      }
      if ( diepint.b.timeout )
 8001a10:	7a3b      	ldrb	r3, [r7, #8]
 8001a12:	f003 0308 	and.w	r3, r3, #8
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d010      	beq.n	8001a3e <DCD_HandleInEP_ISR+0x116>
      {
        CLEAR_IN_EP_INTR(epnum, timeout);
 8001a1c:	f04f 0300 	mov.w	r3, #0
 8001a20:	60bb      	str	r3, [r7, #8]
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	f043 0308 	orr.w	r3, r3, #8
 8001a28:	60bb      	str	r3, [r7, #8]
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	f103 0304 	add.w	r3, r3, #4
 8001a32:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001a36:	18d3      	adds	r3, r2, r3
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	68ba      	ldr	r2, [r7, #8]
 8001a3c:	609a      	str	r2, [r3, #8]
      }
      if (diepint.b.intktxfemp)
 8001a3e:	7a3b      	ldrb	r3, [r7, #8]
 8001a40:	f003 0310 	and.w	r3, r3, #16
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d010      	beq.n	8001a6c <DCD_HandleInEP_ISR+0x144>
      {
        CLEAR_IN_EP_INTR(epnum, intktxfemp);
 8001a4a:	f04f 0300 	mov.w	r3, #0
 8001a4e:	60bb      	str	r3, [r7, #8]
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	f043 0310 	orr.w	r3, r3, #16
 8001a56:	60bb      	str	r3, [r7, #8]
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	f103 0304 	add.w	r3, r3, #4
 8001a60:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001a64:	18d3      	adds	r3, r2, r3
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	68ba      	ldr	r2, [r7, #8]
 8001a6a:	609a      	str	r2, [r3, #8]
      }
      if (diepint.b.intknepmis)
 8001a6c:	7a3b      	ldrb	r3, [r7, #8]
 8001a6e:	f003 0320 	and.w	r3, r3, #32
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d010      	beq.n	8001a9a <DCD_HandleInEP_ISR+0x172>
      {
        CLEAR_IN_EP_INTR(epnum, intknepmis);
 8001a78:	f04f 0300 	mov.w	r3, #0
 8001a7c:	60bb      	str	r3, [r7, #8]
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	f043 0320 	orr.w	r3, r3, #32
 8001a84:	60bb      	str	r3, [r7, #8]
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	f103 0304 	add.w	r3, r3, #4
 8001a8e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001a92:	18d3      	adds	r3, r2, r3
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	68ba      	ldr	r2, [r7, #8]
 8001a98:	609a      	str	r2, [r3, #8]
      }
      if (diepint.b.inepnakeff)
 8001a9a:	7a3b      	ldrb	r3, [r7, #8]
 8001a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d010      	beq.n	8001ac8 <DCD_HandleInEP_ISR+0x1a0>
      {
        CLEAR_IN_EP_INTR(epnum, inepnakeff);
 8001aa6:	f04f 0300 	mov.w	r3, #0
 8001aaa:	60bb      	str	r3, [r7, #8]
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ab2:	60bb      	str	r3, [r7, #8]
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	f103 0304 	add.w	r3, r3, #4
 8001abc:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001ac0:	18d3      	adds	r3, r2, r3
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	68ba      	ldr	r2, [r7, #8]
 8001ac6:	609a      	str	r2, [r3, #8]
      }
      if ( diepint.b.epdisabled )
 8001ac8:	7a3b      	ldrb	r3, [r7, #8]
 8001aca:	f003 0302 	and.w	r3, r3, #2
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d010      	beq.n	8001af6 <DCD_HandleInEP_ISR+0x1ce>
      {
        CLEAR_IN_EP_INTR(epnum, epdisabled);
 8001ad4:	f04f 0300 	mov.w	r3, #0
 8001ad8:	60bb      	str	r3, [r7, #8]
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	f043 0302 	orr.w	r3, r3, #2
 8001ae0:	60bb      	str	r3, [r7, #8]
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	f103 0304 	add.w	r3, r3, #4
 8001aea:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001aee:	18d3      	adds	r3, r2, r3
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	68ba      	ldr	r2, [r7, #8]
 8001af4:	609a      	str	r2, [r3, #8]
      }       
      if (diepint.b.emptyintr)
 8001af6:	7a3b      	ldrb	r3, [r7, #8]
 8001af8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d014      	beq.n	8001b2c <DCD_HandleInEP_ISR+0x204>
      {
        
        DCD_WriteEmptyTxFifo(pdev , epnum);
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	6939      	ldr	r1, [r7, #16]
 8001b06:	f000 f9a9 	bl	8001e5c <DCD_WriteEmptyTxFifo>
        
        CLEAR_IN_EP_INTR(epnum, emptyintr);
 8001b0a:	f04f 0300 	mov.w	r3, #0
 8001b0e:	60bb      	str	r3, [r7, #8]
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b16:	60bb      	str	r3, [r7, #8]
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	f103 0304 	add.w	r3, r3, #4
 8001b20:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001b24:	18d3      	adds	r3, r2, r3
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	68ba      	ldr	r2, [r7, #8]
 8001b2a:	609a      	str	r2, [r3, #8]
      }
    }
    epnum++;
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	f103 0301 	add.w	r3, r3, #1
 8001b32:	613b      	str	r3, [r7, #16]
    ep_intr >>= 1;
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8001b3a:	617b      	str	r3, [r7, #20]
  uint32_t epnum = 0;
  uint32_t fifoemptymsk;
  diepint.d32 = 0;
  ep_intr = USB_OTG_ReadDevAllInEPItr(pdev);
  
  while ( ep_intr )
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	f47f af01 	bne.w	8001946 <DCD_HandleInEP_ISR+0x1e>
    }
    epnum++;
    ep_intr >>= 1;
  }
  
  return 1;
 8001b44:	f04f 0301 	mov.w	r3, #1
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f107 0718 	add.w	r7, r7, #24
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	20000044 	.word	0x20000044

08001b58 <DCD_HandleOutEP_ISR>:
*         Indicates that an OUT EP has a pending Interrupt
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_HandleOutEP_ISR(USB_OTG_CORE_HANDLE *pdev)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b086      	sub	sp, #24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  uint32_t ep_intr;
  USB_OTG_DOEPINTn_TypeDef  doepint;
  USB_OTG_DEPXFRSIZ_TypeDef  deptsiz;
  uint32_t epnum = 0;
 8001b60:	f04f 0300 	mov.w	r3, #0
 8001b64:	613b      	str	r3, [r7, #16]
  
  doepint.d32 = 0;
 8001b66:	f04f 0300 	mov.w	r3, #0
 8001b6a:	60fb      	str	r3, [r7, #12]
  
  /* Read in the device interrupt bits */
  ep_intr = USB_OTG_ReadDevAllOutEp_itr(pdev);
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f7ff fb51 	bl	8001214 <USB_OTG_ReadDevAllOutEp_itr>
 8001b72:	6178      	str	r0, [r7, #20]
  
  while ( ep_intr )
 8001b74:	e0b8      	b.n	8001ce8 <DCD_HandleOutEP_ISR+0x190>
  {
    if (ep_intr&0x1)
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	f003 0301 	and.w	r3, r3, #1
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	f000 80aa 	beq.w	8001cd8 <DCD_HandleOutEP_ISR+0x180>
    {
      
      doepint.d32 = USB_OTG_ReadDevOutEP_itr(pdev, epnum);
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	f7ff fb5a 	bl	8001244 <USB_OTG_ReadDevOutEP_itr>
 8001b90:	4603      	mov	r3, r0
 8001b92:	60fb      	str	r3, [r7, #12]
      
      /* Transfer complete */
      if ( doepint.b.xfercompl )
 8001b94:	7b3b      	ldrb	r3, [r7, #12]
 8001b96:	f003 0301 	and.w	r3, r3, #1
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d051      	beq.n	8001c44 <DCD_HandleOutEP_ISR+0xec>
      {
        /* Clear the bit in DOEPINTn for this interrupt */
        CLEAR_OUT_EP_INTR(epnum, xfercompl);
 8001ba0:	f04f 0300 	mov.w	r3, #0
 8001ba4:	60fb      	str	r3, [r7, #12]
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	f043 0301 	orr.w	r3, r3, #1
 8001bac:	60fb      	str	r3, [r7, #12]
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	f103 0314 	add.w	r3, r3, #20
 8001bb6:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001bba:	18d3      	adds	r3, r2, r3
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	68fa      	ldr	r2, [r7, #12]
 8001bc0:	609a      	str	r2, [r3, #8]
        if (pdev->cfg.dma_enable == 1)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	78db      	ldrb	r3, [r3, #3]
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d125      	bne.n	8001c16 <DCD_HandleOutEP_ISR+0xbe>
        {
          deptsiz.d32 = USB_OTG_READ_REG32(&(pdev->regs.OUTEP_REGS[epnum]->DOEPTSIZ));
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	f103 0314 	add.w	r3, r3, #20
 8001bd2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001bd6:	18d3      	adds	r3, r2, r3
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	691b      	ldr	r3, [r3, #16]
 8001bdc:	60bb      	str	r3, [r7, #8]
          /*ToDo : handle more than one single MPS size packet */
          pdev->dev.out_ep[epnum].xfer_count = pdev->dev.out_ep[epnum].maxpacket - \
 8001bde:	6879      	ldr	r1, [r7, #4]
 8001be0:	693a      	ldr	r2, [r7, #16]
 8001be2:	4613      	mov	r3, r2
 8001be4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001be8:	189b      	adds	r3, r3, r2
 8001bea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8001bee:	18cb      	adds	r3, r1, r3
 8001bf0:	f503 735e 	add.w	r3, r3, #888	; 0x378
 8001bf4:	681a      	ldr	r2, [r3, #0]
            deptsiz.b.xfersize;
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	f3c3 0312 	ubfx	r3, r3, #0, #19
        CLEAR_OUT_EP_INTR(epnum, xfercompl);
        if (pdev->cfg.dma_enable == 1)
        {
          deptsiz.d32 = USB_OTG_READ_REG32(&(pdev->regs.OUTEP_REGS[epnum]->DOEPTSIZ));
          /*ToDo : handle more than one single MPS size packet */
          pdev->dev.out_ep[epnum].xfer_count = pdev->dev.out_ep[epnum].maxpacket - \
 8001bfc:	1ad1      	subs	r1, r2, r3
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	693a      	ldr	r2, [r7, #16]
 8001c02:	4613      	mov	r3, r2
 8001c04:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001c08:	189b      	adds	r3, r3, r2
 8001c0a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8001c0e:	18c3      	adds	r3, r0, r3
 8001c10:	f503 7362 	add.w	r3, r3, #904	; 0x388
 8001c14:	6019      	str	r1, [r3, #0]
            deptsiz.b.xfersize;
        }
        /* Inform upper layer: data ready */
        /* RX COMPLETE */
        USBD_DCD_INT_fops->DataOutStage(pdev , epnum);
 8001c16:	4b3a      	ldr	r3, [pc, #232]	; (8001d00 <DCD_HandleOutEP_ISR+0x1a8>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	693a      	ldr	r2, [r7, #16]
 8001c1e:	b2d2      	uxtb	r2, r2
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	4611      	mov	r1, r2
 8001c24:	4798      	blx	r3
        
        if (pdev->cfg.dma_enable == 1)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	78db      	ldrb	r3, [r3, #3]
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d10a      	bne.n	8001c44 <DCD_HandleOutEP_ISR+0xec>
        {
          if((epnum == 0) && (pdev->dev.device_state == USB_OTG_EP0_STATUS_OUT))
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d107      	bne.n	8001c44 <DCD_HandleOutEP_ISR+0xec>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
 8001c3a:	2b05      	cmp	r3, #5
 8001c3c:	d102      	bne.n	8001c44 <DCD_HandleOutEP_ISR+0xec>
          {
            /* prepare to rx more setup packets */
            USB_OTG_EP0_OutStart(pdev);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f7ff fb38 	bl	80012b4 <USB_OTG_EP0_OutStart>
          }
        }        
      }
      /* Endpoint disable  */
      if ( doepint.b.epdisabled )
 8001c44:	7b3b      	ldrb	r3, [r7, #12]
 8001c46:	f003 0302 	and.w	r3, r3, #2
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d010      	beq.n	8001c72 <DCD_HandleOutEP_ISR+0x11a>
      {
        /* Clear the bit in DOEPINTn for this interrupt */
        CLEAR_OUT_EP_INTR(epnum, epdisabled);
 8001c50:	f04f 0300 	mov.w	r3, #0
 8001c54:	60fb      	str	r3, [r7, #12]
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	f043 0302 	orr.w	r3, r3, #2
 8001c5c:	60fb      	str	r3, [r7, #12]
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	f103 0314 	add.w	r3, r3, #20
 8001c66:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001c6a:	18d3      	adds	r3, r2, r3
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	68fa      	ldr	r2, [r7, #12]
 8001c70:	609a      	str	r2, [r3, #8]
      }
      /* AHB Error */
      if ( doepint.b.ahberr )
 8001c72:	7b3b      	ldrb	r3, [r7, #12]
 8001c74:	f003 0304 	and.w	r3, r3, #4
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d010      	beq.n	8001ca0 <DCD_HandleOutEP_ISR+0x148>
      {
        CLEAR_OUT_EP_INTR(epnum, ahberr);
 8001c7e:	f04f 0300 	mov.w	r3, #0
 8001c82:	60fb      	str	r3, [r7, #12]
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f043 0304 	orr.w	r3, r3, #4
 8001c8a:	60fb      	str	r3, [r7, #12]
 8001c8c:	687a      	ldr	r2, [r7, #4]
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	f103 0314 	add.w	r3, r3, #20
 8001c94:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001c98:	18d3      	adds	r3, r2, r3
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	68fa      	ldr	r2, [r7, #12]
 8001c9e:	609a      	str	r2, [r3, #8]
      }
      /* Setup Phase Done (control EPs) */
      if ( doepint.b.setup )
 8001ca0:	7b3b      	ldrb	r3, [r7, #12]
 8001ca2:	f003 0308 	and.w	r3, r3, #8
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d015      	beq.n	8001cd8 <DCD_HandleOutEP_ISR+0x180>
      {
        
        /* inform the upper layer that a setup packet is available */
        /* SETUP COMPLETE */
        USBD_DCD_INT_fops->SetupStage(pdev);
 8001cac:	4b14      	ldr	r3, [pc, #80]	; (8001d00 <DCD_HandleOutEP_ISR+0x1a8>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	4798      	blx	r3
        CLEAR_OUT_EP_INTR(epnum, setup);
 8001cb6:	f04f 0300 	mov.w	r3, #0
 8001cba:	60fb      	str	r3, [r7, #12]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	f043 0308 	orr.w	r3, r3, #8
 8001cc2:	60fb      	str	r3, [r7, #12]
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	f103 0314 	add.w	r3, r3, #20
 8001ccc:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001cd0:	18d3      	adds	r3, r2, r3
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	68fa      	ldr	r2, [r7, #12]
 8001cd6:	609a      	str	r2, [r3, #8]
      }
    }
    epnum++;
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	f103 0301 	add.w	r3, r3, #1
 8001cde:	613b      	str	r3, [r7, #16]
    ep_intr >>= 1;
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8001ce6:	617b      	str	r3, [r7, #20]
  doepint.d32 = 0;
  
  /* Read in the device interrupt bits */
  ep_intr = USB_OTG_ReadDevAllOutEp_itr(pdev);
  
  while ( ep_intr )
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	f47f af43 	bne.w	8001b76 <DCD_HandleOutEP_ISR+0x1e>
      }
    }
    epnum++;
    ep_intr >>= 1;
  }
  return 1;
 8001cf0:	f04f 0301 	mov.w	r3, #1
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f107 0718 	add.w	r7, r7, #24
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	20000044 	.word	0x20000044

08001d04 <DCD_HandleSof_ISR>:
*         Handles the SOF Interrupts
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_HandleSof_ISR(USB_OTG_CORE_HANDLE *pdev)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTSTS_TypeDef  GINTSTS;
  
  
  USBD_DCD_INT_fops->SOF(pdev);
 8001d0c:	4b0b      	ldr	r3, [pc, #44]	; (8001d3c <DCD_HandleSof_ISR+0x38>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	4798      	blx	r3
  
  /* Clear interrupt */
  GINTSTS.d32 = 0;
 8001d16:	f04f 0300 	mov.w	r3, #0
 8001d1a:	60fb      	str	r3, [r7, #12]
  GINTSTS.b.sofintr = 1;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	f043 0308 	orr.w	r3, r3, #8
 8001d22:	60fb      	str	r3, [r7, #12]
  USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GINTSTS, GINTSTS.d32);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	68fa      	ldr	r2, [r7, #12]
 8001d2a:	615a      	str	r2, [r3, #20]
  
  return 1;
 8001d2c:	f04f 0301 	mov.w	r3, #1
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	f107 0710 	add.w	r7, r7, #16
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	20000044 	.word	0x20000044

08001d40 <DCD_HandleRxStatusQueueLevel_ISR>:
*         Handles the Rx Status Queue Level Interrupt
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_HandleRxStatusQueueLevel_ISR(USB_OTG_CORE_HANDLE *pdev)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b086      	sub	sp, #24
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTMSK_TypeDef  int_mask;
  USB_OTG_DRXSTS_TypeDef   status;
  USB_OTG_EP *ep;
  
  /* Disable the Rx Status Queue Level interrupt */
  int_mask.d32 = 0;
 8001d48:	f04f 0300 	mov.w	r3, #0
 8001d4c:	613b      	str	r3, [r7, #16]
  int_mask.b.rxstsqlvl = 1;
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	f043 0310 	orr.w	r3, r3, #16
 8001d54:	613b      	str	r3, [r7, #16]
  USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, int_mask.d32, 0);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	68d2      	ldr	r2, [r2, #12]
 8001d5e:	6991      	ldr	r1, [r2, #24]
 8001d60:	693a      	ldr	r2, [r7, #16]
 8001d62:	ea6f 0202 	mvn.w	r2, r2
 8001d66:	ea01 0202 	and.w	r2, r1, r2
 8001d6a:	619a      	str	r2, [r3, #24]
  
  /* Get the Status from the top of the FIFO */
  status.d32 = USB_OTG_READ_REG32( &pdev->regs.GREGS->GRXSTSP );
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	6a1b      	ldr	r3, [r3, #32]
 8001d72:	60fb      	str	r3, [r7, #12]
  
  ep = &pdev->dev.out_ep[status.b.epnum];
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f503 715c 	add.w	r1, r3, #880	; 0x370
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	461a      	mov	r2, r3
 8001d84:	4613      	mov	r3, r2
 8001d86:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001d8a:	189b      	adds	r3, r3, r2
 8001d8c:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8001d90:	18cb      	adds	r3, r1, r3
 8001d92:	617b      	str	r3, [r7, #20]
  
  switch (status.b.pktsts)
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	f3c3 4343 	ubfx	r3, r3, #17, #4
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	f103 33ff 	add.w	r3, r3, #4294967295
 8001da0:	2b05      	cmp	r3, #5
 8001da2:	d848      	bhi.n	8001e36 <DCD_HandleRxStatusQueueLevel_ISR+0xf6>
 8001da4:	a201      	add	r2, pc, #4	; (adr r2, 8001dac <DCD_HandleRxStatusQueueLevel_ISR+0x6c>)
 8001da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001daa:	bf00      	nop
 8001dac:	08001e37 	.word	0x08001e37
 8001db0:	08001dc5 	.word	0x08001dc5
 8001db4:	08001e37 	.word	0x08001e37
 8001db8:	08001e37 	.word	0x08001e37
 8001dbc:	08001e37 	.word	0x08001e37
 8001dc0:	08001e11 	.word	0x08001e11
  {
  case STS_GOUT_NAK:
    break;
  case STS_DATA_UPDT:
    if (status.b.bcnt)
 8001dc4:	89ba      	ldrh	r2, [r7, #12]
 8001dc6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001dca:	ea02 0303 	and.w	r3, r2, r3
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d032      	beq.n	8001e3a <DCD_HandleRxStatusQueueLevel_ISR+0xfa>
    {
      USB_OTG_ReadPacket(pdev,ep->xfer_buff, status.b.bcnt);
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	68da      	ldr	r2, [r3, #12]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f3c3 130a 	ubfx	r3, r3, #4, #11
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	4611      	mov	r1, r2
 8001de4:	461a      	mov	r2, r3
 8001de6:	f7fe fd8d 	bl	8000904 <USB_OTG_ReadPacket>
      ep->xfer_buff += status.b.bcnt;
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	68da      	ldr	r2, [r3, #12]
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	f3c3 130a 	ubfx	r3, r3, #4, #11
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	18d2      	adds	r2, r2, r3
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	60da      	str	r2, [r3, #12]
      ep->xfer_count += status.b.bcnt;
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	699a      	ldr	r2, [r3, #24]
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f3c3 130a 	ubfx	r3, r3, #4, #11
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	18d2      	adds	r2, r2, r3
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	619a      	str	r2, [r3, #24]
    }
    break;
 8001e0e:	e015      	b.n	8001e3c <DCD_HandleRxStatusQueueLevel_ISR+0xfc>
    break;
  case STS_SETUP_COMP:
    break;
  case STS_SETUP_UPDT:
    /* Copy the setup packet received in FIFO into the setup buffer in RAM */
    USB_OTG_ReadPacket(pdev , pdev->dev.setup_packet, 8);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f503 63b9 	add.w	r3, r3, #1480	; 0x5c8
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	4619      	mov	r1, r3
 8001e1a:	f04f 0208 	mov.w	r2, #8
 8001e1e:	f7fe fd71 	bl	8000904 <USB_OTG_ReadPacket>
    ep->xfer_count += status.b.bcnt;
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	699a      	ldr	r2, [r3, #24]
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	f3c3 130a 	ubfx	r3, r3, #4, #11
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	18d2      	adds	r2, r2, r3
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	619a      	str	r2, [r3, #24]
    break;
 8001e34:	e002      	b.n	8001e3c <DCD_HandleRxStatusQueueLevel_ISR+0xfc>
  default:
    break;
 8001e36:	bf00      	nop
 8001e38:	e000      	b.n	8001e3c <DCD_HandleRxStatusQueueLevel_ISR+0xfc>
    {
      USB_OTG_ReadPacket(pdev,ep->xfer_buff, status.b.bcnt);
      ep->xfer_buff += status.b.bcnt;
      ep->xfer_count += status.b.bcnt;
    }
    break;
 8001e3a:	bf00      	nop
  default:
    break;
  }
  
  /* Enable the Rx Status Queue Level interrupt */
  USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, 0, int_mask.d32);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	68d2      	ldr	r2, [r2, #12]
 8001e44:	6991      	ldr	r1, [r2, #24]
 8001e46:	693a      	ldr	r2, [r7, #16]
 8001e48:	ea41 0202 	orr.w	r2, r1, r2
 8001e4c:	619a      	str	r2, [r3, #24]
  
  return 1;
 8001e4e:	f04f 0301 	mov.w	r3, #1
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	f107 0718 	add.w	r7, r7, #24
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <DCD_WriteEmptyTxFifo>:
*         check FIFO for the next packet to be loaded
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_WriteEmptyTxFifo(USB_OTG_CORE_HANDLE *pdev, uint32_t epnum)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b086      	sub	sp, #24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
  USB_OTG_DTXFSTSn_TypeDef  txstatus;
  USB_OTG_EP *ep;
  uint32_t len = 0;
 8001e66:	f04f 0300 	mov.w	r3, #0
 8001e6a:	617b      	str	r3, [r7, #20]
  uint32_t len32b;
  txstatus.d32 = 0;
 8001e6c:	f04f 0300 	mov.w	r3, #0
 8001e70:	60bb      	str	r3, [r7, #8]
  
  ep = &pdev->dev.in_ep[epnum];    
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f503 718c 	add.w	r1, r3, #280	; 0x118
 8001e78:	683a      	ldr	r2, [r7, #0]
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001e80:	189b      	adds	r3, r3, r2
 8001e82:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8001e86:	18cb      	adds	r3, r1, r3
 8001e88:	60fb      	str	r3, [r7, #12]
  
  len = ep->xfer_len - ep->xfer_count;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	695a      	ldr	r2, [r3, #20]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	699b      	ldr	r3, [r3, #24]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	617b      	str	r3, [r7, #20]
  
  if (len > ep->maxpacket)
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	689a      	ldr	r2, [r3, #8]
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d202      	bcs.n	8001ea6 <DCD_WriteEmptyTxFifo+0x4a>
  {
    len = ep->maxpacket;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	617b      	str	r3, [r7, #20]
  }
  
  len32b = (len + 3) / 4;
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	f103 0303 	add.w	r3, r3, #3
 8001eac:	ea4f 0393 	mov.w	r3, r3, lsr #2
 8001eb0:	613b      	str	r3, [r7, #16]
  txstatus.d32 = USB_OTG_READ_REG32( &pdev->regs.INEP_REGS[epnum]->DTXFSTS);
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	f103 0304 	add.w	r3, r3, #4
 8001eba:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001ebe:	18d3      	adds	r3, r2, r3
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	60bb      	str	r3, [r7, #8]
  
  
  
  while  (txstatus.b.txfspcavail > len32b &&
 8001ec6:	e032      	b.n	8001f2e <DCD_WriteEmptyTxFifo+0xd2>
          ep->xfer_count < ep->xfer_len &&
            ep->xfer_len != 0)
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	695a      	ldr	r2, [r3, #20]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	699b      	ldr	r3, [r3, #24]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	617b      	str	r3, [r7, #20]
    
    if (len > ep->maxpacket)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	689a      	ldr	r2, [r3, #8]
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d202      	bcs.n	8001ee4 <DCD_WriteEmptyTxFifo+0x88>
    {
      len = ep->maxpacket;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	617b      	str	r3, [r7, #20]
    }
    len32b = (len + 3) / 4;
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	f103 0303 	add.w	r3, r3, #3
 8001eea:	ea4f 0393 	mov.w	r3, r3, lsr #2
 8001eee:	613b      	str	r3, [r7, #16]
    
    USB_OTG_WritePacket (pdev , ep->xfer_buff, epnum, len);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	68d9      	ldr	r1, [r3, #12]
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	b2da      	uxtb	r2, r3
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f7fe fcbf 	bl	8000880 <USB_OTG_WritePacket>
    
    ep->xfer_buff  += len;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	68da      	ldr	r2, [r3, #12]
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	18d2      	adds	r2, r2, r3
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	699a      	ldr	r2, [r3, #24]
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	18d2      	adds	r2, r2, r3
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	619a      	str	r2, [r3, #24]
    
    txstatus.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[epnum]->DTXFSTS);
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	f103 0304 	add.w	r3, r3, #4
 8001f22:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001f26:	18d3      	adds	r3, r2, r3
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	699b      	ldr	r3, [r3, #24]
 8001f2c:	60bb      	str	r3, [r7, #8]
  len32b = (len + 3) / 4;
  txstatus.d32 = USB_OTG_READ_REG32( &pdev->regs.INEP_REGS[epnum]->DTXFSTS);
  
  
  
  while  (txstatus.b.txfspcavail > len32b &&
 8001f2e:	893b      	ldrh	r3, [r7, #8]
 8001f30:	461a      	mov	r2, r3
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d909      	bls.n	8001f4c <DCD_WriteEmptyTxFifo+0xf0>
          ep->xfer_count < ep->xfer_len &&
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	699a      	ldr	r2, [r3, #24]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	695b      	ldr	r3, [r3, #20]
  len32b = (len + 3) / 4;
  txstatus.d32 = USB_OTG_READ_REG32( &pdev->regs.INEP_REGS[epnum]->DTXFSTS);
  
  
  
  while  (txstatus.b.txfspcavail > len32b &&
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d203      	bcs.n	8001f4c <DCD_WriteEmptyTxFifo+0xf0>
          ep->xfer_count < ep->xfer_len &&
            ep->xfer_len != 0)
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	695b      	ldr	r3, [r3, #20]
  txstatus.d32 = USB_OTG_READ_REG32( &pdev->regs.INEP_REGS[epnum]->DTXFSTS);
  
  
  
  while  (txstatus.b.txfspcavail > len32b &&
          ep->xfer_count < ep->xfer_len &&
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d1bd      	bne.n	8001ec8 <DCD_WriteEmptyTxFifo+0x6c>
    ep->xfer_count += len;
    
    txstatus.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[epnum]->DTXFSTS);
  }
  
  return 1;
 8001f4c:	f04f 0301 	mov.w	r3, #1
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	f107 0718 	add.w	r7, r7, #24
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop

08001f5c <DCD_HandleUsbReset_ISR>:
*         This interrupt occurs when a USB Reset is detected
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_HandleUsbReset_ISR(USB_OTG_CORE_HANDLE *pdev)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b08a      	sub	sp, #40	; 0x28
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  USB_OTG_DCFG_TypeDef     dcfg;
  USB_OTG_DCTL_TypeDef     dctl;
  USB_OTG_GINTSTS_TypeDef  gintsts;
  uint32_t i;
  
  dctl.d32 = 0;
 8001f64:	f04f 0300 	mov.w	r3, #0
 8001f68:	613b      	str	r3, [r7, #16]
  daintmsk.d32 = 0;
 8001f6a:	f04f 0300 	mov.w	r3, #0
 8001f6e:	623b      	str	r3, [r7, #32]
  doepmsk.d32 = 0;
 8001f70:	f04f 0300 	mov.w	r3, #0
 8001f74:	61fb      	str	r3, [r7, #28]
  diepmsk.d32 = 0;
 8001f76:	f04f 0300 	mov.w	r3, #0
 8001f7a:	61bb      	str	r3, [r7, #24]
  dcfg.d32 = 0;
 8001f7c:	f04f 0300 	mov.w	r3, #0
 8001f80:	617b      	str	r3, [r7, #20]
  gintsts.d32 = 0;
 8001f82:	f04f 0300 	mov.w	r3, #0
 8001f86:	60fb      	str	r3, [r7, #12]
  
  /* Clear the Remote Wake-up Signaling */
  dctl.b.rmtwkupsig = 1;
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	f043 0301 	orr.w	r3, r3, #1
 8001f8e:	613b      	str	r3, [r7, #16]
  USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DCTL, dctl.d32, 0 );
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	691b      	ldr	r3, [r3, #16]
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	6912      	ldr	r2, [r2, #16]
 8001f98:	6851      	ldr	r1, [r2, #4]
 8001f9a:	693a      	ldr	r2, [r7, #16]
 8001f9c:	ea6f 0202 	mvn.w	r2, r2
 8001fa0:	ea01 0202 	and.w	r2, r1, r2
 8001fa4:	605a      	str	r2, [r3, #4]
  
  /* Flush the Tx FIFO */
  USB_OTG_FlushTxFifo(pdev ,  0 );
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f04f 0100 	mov.w	r1, #0
 8001fac:	f7fe fcde 	bl	800096c <USB_OTG_FlushTxFifo>
  
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8001fb0:	f04f 0300 	mov.w	r3, #0
 8001fb4:	627b      	str	r3, [r7, #36]	; 0x24
 8001fb6:	e019      	b.n	8001fec <DCD_HandleUsbReset_ISR+0x90>
  {
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbc:	f103 0304 	add.w	r3, r3, #4
 8001fc0:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001fc4:	18d3      	adds	r3, r2, r3
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	f04f 02ff 	mov.w	r2, #255	; 0xff
 8001fcc:	609a      	str	r2, [r3, #8]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd2:	f103 0314 	add.w	r3, r3, #20
 8001fd6:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001fda:	18d3      	adds	r3, r2, r3
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f04f 02ff 	mov.w	r2, #255	; 0xff
 8001fe2:	609a      	str	r2, [r3, #8]
  USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DCTL, dctl.d32, 0 );
  
  /* Flush the Tx FIFO */
  USB_OTG_FlushTxFifo(pdev ,  0 );
  
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8001fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe6:	f103 0301 	add.w	r3, r3, #1
 8001fea:	627b      	str	r3, [r7, #36]	; 0x24
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	785b      	ldrb	r3, [r3, #1]
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d8df      	bhi.n	8001fb8 <DCD_HandleUsbReset_ISR+0x5c>
  {
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
  }
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINT, 0xFFFFFFFF );
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	691b      	ldr	r3, [r3, #16]
 8001ffc:	f04f 32ff 	mov.w	r2, #4294967295
 8002000:	619a      	str	r2, [r3, #24]
  
  daintmsk.ep.in = 1;
 8002002:	6a3b      	ldr	r3, [r7, #32]
 8002004:	f04f 0201 	mov.w	r2, #1
 8002008:	f362 030f 	bfi	r3, r2, #0, #16
 800200c:	623b      	str	r3, [r7, #32]
  daintmsk.ep.out = 1;
 800200e:	6a3b      	ldr	r3, [r7, #32]
 8002010:	f04f 0201 	mov.w	r2, #1
 8002014:	f362 431f 	bfi	r3, r2, #16, #16
 8002018:	623b      	str	r3, [r7, #32]
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINTMSK, daintmsk.d32 );
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	691b      	ldr	r3, [r3, #16]
 800201e:	6a3a      	ldr	r2, [r7, #32]
 8002020:	61da      	str	r2, [r3, #28]
  
  doepmsk.b.setup = 1;
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	f043 0308 	orr.w	r3, r3, #8
 8002028:	61fb      	str	r3, [r7, #28]
  doepmsk.b.xfercompl = 1;
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	f043 0301 	orr.w	r3, r3, #1
 8002030:	61fb      	str	r3, [r7, #28]
  doepmsk.b.ahberr = 1;
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	f043 0304 	orr.w	r3, r3, #4
 8002038:	61fb      	str	r3, [r7, #28]
  doepmsk.b.epdisabled = 1;
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	f043 0302 	orr.w	r3, r3, #2
 8002040:	61fb      	str	r3, [r7, #28]
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DOEPMSK, doepmsk.d32 );
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	691b      	ldr	r3, [r3, #16]
 8002046:	69fa      	ldr	r2, [r7, #28]
 8002048:	615a      	str	r2, [r3, #20]
#ifdef USB_OTG_HS_DEDICATED_EP1_ENABLED   
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DOUTEP1MSK, doepmsk.d32 );
#endif
  diepmsk.b.xfercompl = 1;
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	f043 0301 	orr.w	r3, r3, #1
 8002050:	61bb      	str	r3, [r7, #24]
  diepmsk.b.timeout = 1;
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	f043 0308 	orr.w	r3, r3, #8
 8002058:	61bb      	str	r3, [r7, #24]
  diepmsk.b.epdisabled = 1;
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	f043 0302 	orr.w	r3, r3, #2
 8002060:	61bb      	str	r3, [r7, #24]
  diepmsk.b.ahberr = 1;
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	f043 0304 	orr.w	r3, r3, #4
 8002068:	61bb      	str	r3, [r7, #24]
  diepmsk.b.intknepmis = 1;
 800206a:	69bb      	ldr	r3, [r7, #24]
 800206c:	f043 0320 	orr.w	r3, r3, #32
 8002070:	61bb      	str	r3, [r7, #24]
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DIEPMSK, diepmsk.d32 );
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	691b      	ldr	r3, [r3, #16]
 8002076:	69ba      	ldr	r2, [r7, #24]
 8002078:	611a      	str	r2, [r3, #16]
#ifdef USB_OTG_HS_DEDICATED_EP1_ENABLED  
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DINEP1MSK, diepmsk.d32 );
#endif
  /* Reset Device Address */
  dcfg.d32 = USB_OTG_READ_REG32( &pdev->regs.DREGS->DCFG);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	691b      	ldr	r3, [r3, #16]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	617b      	str	r3, [r7, #20]
  dcfg.b.devaddr = 0;
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	f36f 130a 	bfc	r3, #4, #7
 8002088:	617b      	str	r3, [r7, #20]
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DCFG, dcfg.d32);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	691b      	ldr	r3, [r3, #16]
 800208e:	697a      	ldr	r2, [r7, #20]
 8002090:	601a      	str	r2, [r3, #0]
  
  
  /* setup EP0 to receive SETUP packets */
  USB_OTG_EP0_OutStart(pdev);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f7ff f90e 	bl	80012b4 <USB_OTG_EP0_OutStart>
  
  /* Clear interrupt */
  gintsts.d32 = 0;
 8002098:	f04f 0300 	mov.w	r3, #0
 800209c:	60fb      	str	r3, [r7, #12]
  gintsts.b.usbreset = 1;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80020a4:	60fb      	str	r3, [r7, #12]
  USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	68fa      	ldr	r2, [r7, #12]
 80020ac:	615a      	str	r2, [r3, #20]
  
  /*Reset internal state machine */
  USBD_DCD_INT_fops->Reset(pdev);
 80020ae:	4b06      	ldr	r3, [pc, #24]	; (80020c8 <DCD_HandleUsbReset_ISR+0x16c>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	691b      	ldr	r3, [r3, #16]
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	4798      	blx	r3
  return 1;
 80020b8:	f04f 0301 	mov.w	r3, #1
}
 80020bc:	4618      	mov	r0, r3
 80020be:	f107 0728 	add.w	r7, r7, #40	; 0x28
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	20000044 	.word	0x20000044

080020cc <DCD_HandleEnumDone_ISR>:
*         Read the device status register and set the device speed
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_HandleEnumDone_ISR(USB_OTG_CORE_HANDLE *pdev)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTSTS_TypeDef  gintsts;
  USB_OTG_GUSBCFG_TypeDef  gusbcfg;
  
  USB_OTG_EP0Activate(pdev);
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f7fe fceb 	bl	8000ab0 <USB_OTG_EP0Activate>
  
  /* Set USB turn-around time based on device speed and PHY interface. */
  gusbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	60bb      	str	r3, [r7, #8]
  
  /* Full or High speed */
  if ( USB_OTG_GetDeviceSpeed(pdev) == USB_SPEED_HIGH)
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f7fe fcbc 	bl	8000a60 <USB_OTG_GetDeviceSpeed>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b03      	cmp	r3, #3
 80020ec:	d10e      	bne.n	800210c <DCD_HandleEnumDone_ISR+0x40>
  {
    pdev->cfg.speed            = USB_OTG_SPEED_HIGH;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f04f 0200 	mov.w	r2, #0
 80020f4:	709a      	strb	r2, [r3, #2]
    pdev->cfg.mps              = USB_OTG_HS_MAX_PACKET_SIZE ;    
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020fc:	809a      	strh	r2, [r3, #4]
    gusbcfg.b.usbtrdtim = 9;
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	f04f 0209 	mov.w	r2, #9
 8002104:	f362 238d 	bfi	r3, r2, #10, #4
 8002108:	60bb      	str	r3, [r7, #8]
 800210a:	e00d      	b.n	8002128 <DCD_HandleEnumDone_ISR+0x5c>
  }
  else
  {
    pdev->cfg.speed            = USB_OTG_SPEED_FULL;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f04f 0201 	mov.w	r2, #1
 8002112:	709a      	strb	r2, [r3, #2]
    pdev->cfg.mps              = USB_OTG_FS_MAX_PACKET_SIZE ;  
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f04f 0240 	mov.w	r2, #64	; 0x40
 800211a:	809a      	strh	r2, [r3, #4]
    gusbcfg.b.usbtrdtim = 5;
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	f04f 0205 	mov.w	r2, #5
 8002122:	f362 238d 	bfi	r3, r2, #10, #4
 8002126:	60bb      	str	r3, [r7, #8]
  }
  
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GUSBCFG, gusbcfg.d32);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	68ba      	ldr	r2, [r7, #8]
 800212e:	60da      	str	r2, [r3, #12]
  
  /* Clear interrupt */
  gintsts.d32 = 0;
 8002130:	f04f 0300 	mov.w	r3, #0
 8002134:	60fb      	str	r3, [r7, #12]
  gintsts.b.enumdone = 1;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800213c:	60fb      	str	r3, [r7, #12]
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTSTS, gintsts.d32 );
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	68fa      	ldr	r2, [r7, #12]
 8002144:	615a      	str	r2, [r3, #20]
  return 1;
 8002146:	f04f 0301 	mov.w	r3, #1
}
 800214a:	4618      	mov	r0, r3
 800214c:	f107 0710 	add.w	r7, r7, #16
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}

08002154 <DCD_IsoINIncomplete_ISR>:
*         handle the ISO IN incomplete interrupt
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_IsoINIncomplete_ISR(USB_OTG_CORE_HANDLE *pdev)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTSTS_TypeDef gintsts;  
  
  gintsts.d32 = 0;
 800215c:	f04f 0300 	mov.w	r3, #0
 8002160:	60fb      	str	r3, [r7, #12]

  USBD_DCD_INT_fops->IsoINIncomplete (pdev); 
 8002162:	4b0a      	ldr	r3, [pc, #40]	; (800218c <DCD_IsoINIncomplete_ISR+0x38>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	69db      	ldr	r3, [r3, #28]
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	4798      	blx	r3
  
  /* Clear interrupt */
  gintsts.b.incomplisoin = 1;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002172:	60fb      	str	r3, [r7, #12]
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	68fa      	ldr	r2, [r7, #12]
 800217a:	615a      	str	r2, [r3, #20]
  
  return 1;
 800217c:	f04f 0301 	mov.w	r3, #1
}
 8002180:	4618      	mov	r0, r3
 8002182:	f107 0710 	add.w	r7, r7, #16
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	20000044 	.word	0x20000044

08002190 <DCD_IsoOUTIncomplete_ISR>:
*         handle the ISO OUT incomplete interrupt
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_IsoOUTIncomplete_ISR(USB_OTG_CORE_HANDLE *pdev)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTSTS_TypeDef gintsts;  
  
  gintsts.d32 = 0;
 8002198:	f04f 0300 	mov.w	r3, #0
 800219c:	60fb      	str	r3, [r7, #12]

  USBD_DCD_INT_fops->IsoOUTIncomplete (pdev); 
 800219e:	4b0a      	ldr	r3, [pc, #40]	; (80021c8 <DCD_IsoOUTIncomplete_ISR+0x38>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	6a1b      	ldr	r3, [r3, #32]
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	4798      	blx	r3
  
  /* Clear interrupt */
  gintsts.b.incomplisoout = 1;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80021ae:	60fb      	str	r3, [r7, #12]
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	68fa      	ldr	r2, [r7, #12]
 80021b6:	615a      	str	r2, [r3, #20]
  return 1;
 80021b8:	f04f 0301 	mov.w	r3, #1
}
 80021bc:	4618      	mov	r0, r3
 80021be:	f107 0710 	add.w	r7, r7, #16
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	20000044 	.word	0x20000044

080021cc <DCD_ReadDevInEP>:
*         Reads ep flags
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_ReadDevInEP (USB_OTG_CORE_HANDLE *pdev, uint8_t epnum)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b087      	sub	sp, #28
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	460b      	mov	r3, r1
 80021d6:	70fb      	strb	r3, [r7, #3]
  uint32_t v, msk, emp;
  msk = USB_OTG_READ_REG32(&pdev->regs.DREGS->DIEPMSK);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	691b      	ldr	r3, [r3, #16]
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	617b      	str	r3, [r7, #20]
  emp = USB_OTG_READ_REG32(&pdev->regs.DREGS->DIEPEMPMSK);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	691b      	ldr	r3, [r3, #16]
 80021e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021e6:	613b      	str	r3, [r7, #16]
  msk |= ((emp >> epnum) & 0x1) << 7;
 80021e8:	78fb      	ldrb	r3, [r7, #3]
 80021ea:	693a      	ldr	r2, [r7, #16]
 80021ec:	fa22 f303 	lsr.w	r3, r2, r3
 80021f0:	ea4f 13c3 	mov.w	r3, r3, lsl #7
 80021f4:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 80021f8:	697a      	ldr	r2, [r7, #20]
 80021fa:	ea42 0303 	orr.w	r3, r2, r3
 80021fe:	617b      	str	r3, [r7, #20]
  v = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[epnum]->DIEPINT) & msk;
 8002200:	78fb      	ldrb	r3, [r7, #3]
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	f103 0304 	add.w	r3, r3, #4
 8002208:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800220c:	18d3      	adds	r3, r2, r3
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	689a      	ldr	r2, [r3, #8]
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	ea02 0303 	and.w	r3, r2, r3
 8002218:	60fb      	str	r3, [r7, #12]
  return v;
 800221a:	68fb      	ldr	r3, [r7, #12]
}
 800221c:	4618      	mov	r0, r3
 800221e:	f107 071c 	add.w	r7, r7, #28
 8002222:	46bd      	mov	sp, r7
 8002224:	bc80      	pop	{r7}
 8002226:	4770      	bx	lr

08002228 <USBD_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
static uint8_t USBD_SetupStage(USB_OTG_CORE_HANDLE *pdev)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  USB_SETUP_REQ req;
  
  USBD_ParseSetupRequest(pdev , &req);
 8002230:	f107 0308 	add.w	r3, r7, #8
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	4619      	mov	r1, r3
 8002238:	f000 fe7c 	bl	8002f34 <USBD_ParseSetupRequest>
  
  switch (req.bmRequest & 0x1F) 
 800223c:	7a3b      	ldrb	r3, [r7, #8]
 800223e:	f003 031f 	and.w	r3, r3, #31
 8002242:	2b01      	cmp	r3, #1
 8002244:	d00a      	beq.n	800225c <USBD_SetupStage+0x34>
 8002246:	2b02      	cmp	r3, #2
 8002248:	d00f      	beq.n	800226a <USBD_SetupStage+0x42>
 800224a:	2b00      	cmp	r3, #0
 800224c:	d114      	bne.n	8002278 <USBD_SetupStage+0x50>
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &req);
 800224e:	f107 0308 	add.w	r3, r7, #8
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	4619      	mov	r1, r3
 8002256:	f000 fa65 	bl	8002724 <USBD_StdDevReq>
    break;
 800225a:	e016      	b.n	800228a <USBD_SetupStage+0x62>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &req);
 800225c:	f107 0308 	add.w	r3, r7, #8
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	4619      	mov	r1, r3
 8002264:	f000 fab0 	bl	80027c8 <USBD_StdItfReq>
    break;
 8002268:	e00f      	b.n	800228a <USBD_SetupStage+0x62>
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &req);   
 800226a:	f107 0308 	add.w	r3, r7, #8
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	4619      	mov	r1, r3
 8002272:	f000 fae1 	bl	8002838 <USBD_StdEPReq>
    break;
 8002276:	e008      	b.n	800228a <USBD_SetupStage+0x62>
    
  default:           
    DCD_EP_Stall(pdev , req.bmRequest & 0x80);
 8002278:	7a3b      	ldrb	r3, [r7, #8]
 800227a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800227e:	b2db      	uxtb	r3, r3
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	4619      	mov	r1, r3
 8002284:	f7ff f95a 	bl	800153c <DCD_EP_Stall>
    break;
 8002288:	bf00      	nop
  }  
  return USBD_OK;
 800228a:	f04f 0300 	mov.w	r3, #0
}
 800228e:	4618      	mov	r0, r3
 8002290:	f107 0710 	add.w	r7, r7, #16
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}

08002298 <USBD_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
static uint8_t USBD_DataOutStage(USB_OTG_CORE_HANDLE *pdev , uint8_t epnum)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	460b      	mov	r3, r1
 80022a2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EP *ep;
  
  if(epnum == 0) 
 80022a4:	78fb      	ldrb	r3, [r7, #3]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d145      	bne.n	8002336 <USBD_DataOutStage+0x9e>
  {
    ep = &pdev->dev.out_ep[0];
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f503 735c 	add.w	r3, r3, #880	; 0x370
 80022b0:	60fb      	str	r3, [r7, #12]
    if ( pdev->dev.device_state == USB_OTG_EP0_DATA_OUT)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
 80022b8:	2b03      	cmp	r3, #3
 80022ba:	d14f      	bne.n	800235c <USBD_DataOutStage+0xc4>
    {
      if(ep->rem_data_len > ep->maxpacket)
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	69da      	ldr	r2, [r3, #28]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d921      	bls.n	800230c <USBD_DataOutStage+0x74>
      {
        ep->rem_data_len -=  ep->maxpacket;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	69da      	ldr	r2, [r3, #28]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	1ad2      	subs	r2, r2, r3
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	61da      	str	r2, [r3, #28]
        
        if(pdev->cfg.dma_enable == 1)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	78db      	ldrb	r3, [r3, #3]
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d106      	bne.n	80022ec <USBD_DataOutStage+0x54>
        {
          /* in slave mode this, is handled by the RxSTSQLvl ISR */
          ep->xfer_buff += ep->maxpacket; 
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	68da      	ldr	r2, [r3, #12]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	18d2      	adds	r2, r2, r3
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	60da      	str	r2, [r3, #12]
        }        
        USBD_CtlContinueRx (pdev, 
                            ep->xfer_buff,
 80022ec:	68fb      	ldr	r3, [r7, #12]
        if(pdev->cfg.dma_enable == 1)
        {
          /* in slave mode this, is handled by the RxSTSQLvl ISR */
          ep->xfer_buff += ep->maxpacket; 
        }        
        USBD_CtlContinueRx (pdev, 
 80022ee:	68da      	ldr	r2, [r3, #12]
                            ep->xfer_buff,
                            MIN(ep->rem_data_len ,ep->maxpacket));
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	6899      	ldr	r1, [r3, #8]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	69db      	ldr	r3, [r3, #28]
 80022f8:	4299      	cmp	r1, r3
 80022fa:	bf38      	it	cc
 80022fc:	460b      	movcc	r3, r1
        if(pdev->cfg.dma_enable == 1)
        {
          /* in slave mode this, is handled by the RxSTSQLvl ISR */
          ep->xfer_buff += ep->maxpacket; 
        }        
        USBD_CtlContinueRx (pdev, 
 80022fe:	b29b      	uxth	r3, r3
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	4611      	mov	r1, r2
 8002304:	461a      	mov	r2, r3
 8002306:	f000 f9b9 	bl	800267c <USBD_CtlContinueRx>
 800230a:	e027      	b.n	800235c <USBD_DataOutStage+0xc4>
                            ep->xfer_buff,
                            MIN(ep->rem_data_len ,ep->maxpacket));
      }
      else
      {
        if((pdev->dev.class_cb->EP0_RxReady != NULL)&&
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 8002312:	691b      	ldr	r3, [r3, #16]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d00a      	beq.n	800232e <USBD_DataOutStage+0x96>
           (pdev->dev.device_status == USB_OTG_CONFIGURED))
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
                            ep->xfer_buff,
                            MIN(ep->rem_data_len ,ep->maxpacket));
      }
      else
      {
        if((pdev->dev.class_cb->EP0_RxReady != NULL)&&
 800231e:	2b03      	cmp	r3, #3
 8002320:	d105      	bne.n	800232e <USBD_DataOutStage+0x96>
           (pdev->dev.device_status == USB_OTG_CONFIGURED))
        {
          pdev->dev.class_cb->EP0_RxReady(pdev); 
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f000 f9bc 	bl	80026ac <USBD_CtlSendStatus>
 8002334:	e012      	b.n	800235c <USBD_DataOutStage+0xc4>
      }
    }
  }
  else if((pdev->dev.class_cb->DataOut != NULL)&&
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 800233c:	699b      	ldr	r3, [r3, #24]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d00c      	beq.n	800235c <USBD_DataOutStage+0xc4>
          (pdev->dev.device_status == USB_OTG_CONFIGURED))
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
        }
        USBD_CtlSendStatus(pdev);
      }
    }
  }
  else if((pdev->dev.class_cb->DataOut != NULL)&&
 8002348:	2b03      	cmp	r3, #3
 800234a:	d107      	bne.n	800235c <USBD_DataOutStage+0xc4>
          (pdev->dev.device_status == USB_OTG_CONFIGURED))
  {
    pdev->dev.class_cb->DataOut(pdev, epnum); 
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 8002352:	699b      	ldr	r3, [r3, #24]
 8002354:	78fa      	ldrb	r2, [r7, #3]
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	4611      	mov	r1, r2
 800235a:	4798      	blx	r3
  }  
  return USBD_OK;
 800235c:	f04f 0300 	mov.w	r3, #0
}
 8002360:	4618      	mov	r0, r3
 8002362:	f107 0710 	add.w	r7, r7, #16
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop

0800236c <USBD_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
static uint8_t USBD_DataInStage(USB_OTG_CORE_HANDLE *pdev , uint8_t epnum)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	460b      	mov	r3, r1
 8002376:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EP *ep;
  
  if(epnum == 0) 
 8002378:	78fb      	ldrb	r3, [r7, #3]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d163      	bne.n	8002446 <USBD_DataInStage+0xda>
  {
    ep = &pdev->dev.in_ep[0];
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8002384:	60fb      	str	r3, [r7, #12]
    if ( pdev->dev.device_state == USB_OTG_EP0_DATA_IN)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
 800238c:	2b02      	cmp	r3, #2
 800238e:	d16e      	bne.n	800246e <USBD_DataInStage+0x102>
    {
      if(ep->rem_data_len > ep->maxpacket)
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	69da      	ldr	r2, [r3, #28]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	429a      	cmp	r2, r3
 800239a:	d91c      	bls.n	80023d6 <USBD_DataInStage+0x6a>
      {
        ep->rem_data_len -=  ep->maxpacket;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	69da      	ldr	r2, [r3, #28]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	1ad2      	subs	r2, r2, r3
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	61da      	str	r2, [r3, #28]
        if(pdev->cfg.dma_enable == 1)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	78db      	ldrb	r3, [r3, #3]
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d106      	bne.n	80023c0 <USBD_DataInStage+0x54>
        {
          /* in slave mode this, is handled by the TxFifoEmpty ISR */
          ep->xfer_buff += ep->maxpacket;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	68da      	ldr	r2, [r3, #12]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	18d2      	adds	r2, r2, r3
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	60da      	str	r2, [r3, #12]
        }
        USBD_CtlContinueSendData (pdev, 
                                  ep->xfer_buff, 
 80023c0:	68fb      	ldr	r3, [r7, #12]
        if(pdev->cfg.dma_enable == 1)
        {
          /* in slave mode this, is handled by the TxFifoEmpty ISR */
          ep->xfer_buff += ep->maxpacket;
        }
        USBD_CtlContinueSendData (pdev, 
 80023c2:	68da      	ldr	r2, [r3, #12]
                                  ep->xfer_buff, 
                                  ep->rem_data_len);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	69db      	ldr	r3, [r3, #28]
        if(pdev->cfg.dma_enable == 1)
        {
          /* in slave mode this, is handled by the TxFifoEmpty ISR */
          ep->xfer_buff += ep->maxpacket;
        }
        USBD_CtlContinueSendData (pdev, 
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	4611      	mov	r1, r2
 80023ce:	461a      	mov	r2, r3
 80023d0:	f000 f93c 	bl	800264c <USBD_CtlContinueSendData>
          if((pdev->dev.class_cb->EP0_TxSent != NULL)&&
             (pdev->dev.device_status == USB_OTG_CONFIGURED))
          {
            pdev->dev.class_cb->EP0_TxSent(pdev); 
          }          
          USBD_CtlReceiveStatus(pdev);
 80023d4:	e04c      	b.n	8002470 <USBD_DataInStage+0x104>
                                  ep->xfer_buff, 
                                  ep->rem_data_len);
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((ep->total_data_len % ep->maxpacket == 0) &&
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	6a1b      	ldr	r3, [r3, #32]
 80023da:	68fa      	ldr	r2, [r7, #12]
 80023dc:	6892      	ldr	r2, [r2, #8]
 80023de:	fbb3 f1f2 	udiv	r1, r3, r2
 80023e2:	fb02 f201 	mul.w	r2, r2, r1
 80023e6:	1a9b      	subs	r3, r3, r2
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d117      	bne.n	800241c <USBD_DataInStage+0xb0>
           (ep->total_data_len >= ep->maxpacket) &&
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	6a1a      	ldr	r2, [r3, #32]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	689b      	ldr	r3, [r3, #8]
                                  ep->xfer_buff, 
                                  ep->rem_data_len);
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((ep->total_data_len % ep->maxpacket == 0) &&
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d311      	bcc.n	800241c <USBD_DataInStage+0xb0>
           (ep->total_data_len >= ep->maxpacket) &&
             (ep->total_data_len < ep->ctl_data_len ))
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	6a1a      	ldr	r2, [r3, #32]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                  ep->rem_data_len);
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((ep->total_data_len % ep->maxpacket == 0) &&
           (ep->total_data_len >= ep->maxpacket) &&
 8002400:	429a      	cmp	r2, r3
 8002402:	d20b      	bcs.n	800241c <USBD_DataInStage+0xb0>
             (ep->total_data_len < ep->ctl_data_len ))
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f04f 0100 	mov.w	r1, #0
 800240a:	f04f 0200 	mov.w	r2, #0
 800240e:	f000 f91d 	bl	800264c <USBD_CtlContinueSendData>
          ep->ctl_data_len = 0;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	f04f 0200 	mov.w	r2, #0
 8002418:	625a      	str	r2, [r3, #36]	; 0x24
 800241a:	e029      	b.n	8002470 <USBD_DataInStage+0x104>
        }
        else
        {
          if((pdev->dev.class_cb->EP0_TxSent != NULL)&&
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d00a      	beq.n	800243e <USBD_DataInStage+0xd2>
             (pdev->dev.device_status == USB_OTG_CONFIGURED))
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
          USBD_CtlContinueSendData(pdev , NULL, 0);
          ep->ctl_data_len = 0;
        }
        else
        {
          if((pdev->dev.class_cb->EP0_TxSent != NULL)&&
 800242e:	2b03      	cmp	r3, #3
 8002430:	d105      	bne.n	800243e <USBD_DataInStage+0xd2>
             (pdev->dev.device_status == USB_OTG_CONFIGURED))
          {
            pdev->dev.class_cb->EP0_TxSent(pdev); 
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	4798      	blx	r3
          }          
          USBD_CtlReceiveStatus(pdev);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f000 f952 	bl	80026e8 <USBD_CtlReceiveStatus>
 8002444:	e014      	b.n	8002470 <USBD_DataInStage+0x104>
        }
      }
    }
  }
  else if((pdev->dev.class_cb->DataIn != NULL)&& 
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 800244c:	695b      	ldr	r3, [r3, #20]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d00e      	beq.n	8002470 <USBD_DataInStage+0x104>
          (pdev->dev.device_status == USB_OTG_CONFIGURED))
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
  }
  else if((pdev->dev.class_cb->DataIn != NULL)&& 
 8002458:	2b03      	cmp	r3, #3
 800245a:	d109      	bne.n	8002470 <USBD_DataInStage+0x104>
          (pdev->dev.device_status == USB_OTG_CONFIGURED))
  {
    pdev->dev.class_cb->DataIn(pdev, epnum); 
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 8002462:	695b      	ldr	r3, [r3, #20]
 8002464:	78fa      	ldrb	r2, [r7, #3]
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	4611      	mov	r1, r2
 800246a:	4798      	blx	r3
 800246c:	e000      	b.n	8002470 <USBD_DataInStage+0x104>
          if((pdev->dev.class_cb->EP0_TxSent != NULL)&&
             (pdev->dev.device_status == USB_OTG_CONFIGURED))
          {
            pdev->dev.class_cb->EP0_TxSent(pdev); 
          }          
          USBD_CtlReceiveStatus(pdev);
 800246e:	bf00      	nop
  else if((pdev->dev.class_cb->DataIn != NULL)&& 
          (pdev->dev.device_status == USB_OTG_CONFIGURED))
  {
    pdev->dev.class_cb->DataIn(pdev, epnum); 
  }  
  return USBD_OK;
 8002470:	f04f 0300 	mov.w	r3, #0
}
 8002474:	4618      	mov	r0, r3
 8002476:	f107 0710 	add.w	r7, r7, #16
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop

08002480 <USBD_Reset>:
* @param  pdev: device instance
* @retval status
*/

static uint8_t USBD_Reset(USB_OTG_CORE_HANDLE  *pdev)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  DCD_EP_Open(pdev,
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f04f 0100 	mov.w	r1, #0
 800248e:	f04f 0208 	mov.w	r2, #8
 8002492:	f04f 0300 	mov.w	r3, #0
 8002496:	f7fe ff73 	bl	8001380 <DCD_EP_Open>
              0x00,
              USB_OTG_MAX_EP0_SIZE,
              EP_TYPE_CTRL);
  
  /* Open EP0 IN */
  DCD_EP_Open(pdev,
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f04f 0180 	mov.w	r1, #128	; 0x80
 80024a0:	f04f 0208 	mov.w	r2, #8
 80024a4:	f04f 0300 	mov.w	r3, #0
 80024a8:	f7fe ff6a 	bl	8001380 <DCD_EP_Open>
              0x80,
              USB_OTG_MAX_EP0_SIZE,
              EP_TYPE_CTRL);
  
  /* Upon Reset call usr call back */
  pdev->dev.device_status = USB_OTG_DEFAULT;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f04f 0201 	mov.w	r2, #1
 80024b2:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
  pdev->dev.usr_cb->DeviceReset(pdev->cfg.speed);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	7892      	ldrb	r2, [r2, #2]
 80024c2:	4610      	mov	r0, r2
 80024c4:	4798      	blx	r3
  
  return USBD_OK;
 80024c6:	f04f 0300 	mov.w	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	f107 0708 	add.w	r7, r7, #8
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <USBD_Resume>:
* @param  pdev: device instance
* @retval status
*/

static uint8_t USBD_Resume(USB_OTG_CORE_HANDLE  *pdev)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  /* Upon Resume call usr call back */
  pdev->dev.usr_cb->DeviceResumed(); 
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 80024e2:	691b      	ldr	r3, [r3, #16]
 80024e4:	4798      	blx	r3
  pdev->dev.device_status = USB_OTG_CONFIGURED;  
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f04f 0203 	mov.w	r2, #3
 80024ec:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
  return USBD_OK;
 80024f0:	f04f 0300 	mov.w	r3, #0
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	f107 0708 	add.w	r7, r7, #8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop

08002500 <USBD_Suspend>:
* @param  pdev: device instance
* @retval status
*/

static uint8_t USBD_Suspend(USB_OTG_CORE_HANDLE  *pdev)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  
  pdev->dev.device_status  = USB_OTG_SUSPENDED;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f04f 0204 	mov.w	r2, #4
 800250e:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
  /* Upon Resume call usr call back */
  pdev->dev.usr_cb->DeviceSuspended(); 
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	4798      	blx	r3
  return USBD_OK;
 800251c:	f04f 0300 	mov.w	r3, #0
}
 8002520:	4618      	mov	r0, r3
 8002522:	f107 0708 	add.w	r7, r7, #8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop

0800252c <USBD_SOF>:
* @param  pdev: device instance
* @retval status
*/

static uint8_t USBD_SOF(USB_OTG_CORE_HANDLE  *pdev)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  if(pdev->dev.class_cb->SOF)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 800253a:	69db      	ldr	r3, [r3, #28]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d005      	beq.n	800254c <USBD_SOF+0x20>
  {
    pdev->dev.class_cb->SOF(pdev); 
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 8002546:	69db      	ldr	r3, [r3, #28]
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	4798      	blx	r3
  }
  return USBD_OK;
 800254c:	f04f 0300 	mov.w	r3, #0
}
 8002550:	4618      	mov	r0, r3
 8002552:	f107 0708 	add.w	r7, r7, #8
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop

0800255c <USBD_SetCfg>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_Status USBD_SetCfg(USB_OTG_CORE_HANDLE  *pdev, uint8_t cfgidx)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	460b      	mov	r3, r1
 8002566:	70fb      	strb	r3, [r7, #3]
  pdev->dev.class_cb->Init(pdev, cfgidx); 
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	78fa      	ldrb	r2, [r7, #3]
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	4611      	mov	r1, r2
 8002576:	4798      	blx	r3
  
  /* Upon set config call usr call back */
  pdev->dev.usr_cb->DeviceConfigured();
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	4798      	blx	r3
  return USBD_OK; 
 8002582:	f04f 0300 	mov.w	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	f107 0708 	add.w	r7, r7, #8
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}

08002590 <USBD_ClrCfg>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_Status
*/
USBD_Status USBD_ClrCfg(USB_OTG_CORE_HANDLE  *pdev, uint8_t cfgidx)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	460b      	mov	r3, r1
 800259a:	70fb      	strb	r3, [r7, #3]
  pdev->dev.class_cb->DeInit(pdev, cfgidx);   
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	78fa      	ldrb	r2, [r7, #3]
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	4611      	mov	r1, r2
 80025aa:	4798      	blx	r3
  return USBD_OK;
 80025ac:	f04f 0300 	mov.w	r3, #0
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	f107 0708 	add.w	r7, r7, #8
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop

080025bc <USBD_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
static uint8_t USBD_IsoINIncomplete(USB_OTG_CORE_HANDLE  *pdev)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  pdev->dev.class_cb->IsoINIncomplete(pdev);   
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 80025ca:	6a1b      	ldr	r3, [r3, #32]
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	4798      	blx	r3
  return USBD_OK;
 80025d0:	f04f 0300 	mov.w	r3, #0
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	f107 0708 	add.w	r7, r7, #8
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop

080025e0 <USBD_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
static uint8_t USBD_IsoOUTIncomplete(USB_OTG_CORE_HANDLE  *pdev)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  pdev->dev.class_cb->IsoOUTIncomplete(pdev);   
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 80025ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	4798      	blx	r3
  return USBD_OK;
 80025f4:	f04f 0300 	mov.w	r3, #0
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	f107 0708 	add.w	r7, r7, #8
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop

08002604 <USBD_CtlSendData>:
* @retval status
*/
USBD_Status  USBD_CtlSendData (USB_OTG_CORE_HANDLE  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b086      	sub	sp, #24
 8002608:	af00      	add	r7, sp, #0
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	4613      	mov	r3, r2
 8002610:	80fb      	strh	r3, [r7, #6]
  USBD_Status ret = USBD_OK;
 8002612:	f04f 0300 	mov.w	r3, #0
 8002616:	75fb      	strb	r3, [r7, #23]
  
  pdev->dev.in_ep[0].total_data_len = len;
 8002618:	88fa      	ldrh	r2, [r7, #6]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
  pdev->dev.in_ep[0].rem_data_len   = len;
 8002620:	88fa      	ldrh	r2, [r7, #6]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
  pdev->dev.device_state = USB_OTG_EP0_DATA_IN;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f04f 0202 	mov.w	r2, #2
 800262e:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111

  DCD_EP_Tx (pdev, 0, pbuf, len);
 8002632:	88fb      	ldrh	r3, [r7, #6]
 8002634:	68f8      	ldr	r0, [r7, #12]
 8002636:	f04f 0100 	mov.w	r1, #0
 800263a:	68ba      	ldr	r2, [r7, #8]
 800263c:	f7fe ff3c 	bl	80014b8 <DCD_EP_Tx>
 
  return ret;
 8002640:	7dfb      	ldrb	r3, [r7, #23]
}
 8002642:	4618      	mov	r0, r3
 8002644:	f107 0718 	add.w	r7, r7, #24
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}

0800264c <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_Status  USBD_CtlContinueSendData (USB_OTG_CORE_HANDLE  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b086      	sub	sp, #24
 8002650:	af00      	add	r7, sp, #0
 8002652:	60f8      	str	r0, [r7, #12]
 8002654:	60b9      	str	r1, [r7, #8]
 8002656:	4613      	mov	r3, r2
 8002658:	80fb      	strh	r3, [r7, #6]
  USBD_Status ret = USBD_OK;
 800265a:	f04f 0300 	mov.w	r3, #0
 800265e:	75fb      	strb	r3, [r7, #23]
  
  DCD_EP_Tx (pdev, 0, pbuf, len);
 8002660:	88fb      	ldrh	r3, [r7, #6]
 8002662:	68f8      	ldr	r0, [r7, #12]
 8002664:	f04f 0100 	mov.w	r1, #0
 8002668:	68ba      	ldr	r2, [r7, #8]
 800266a:	f7fe ff25 	bl	80014b8 <DCD_EP_Tx>
  
  
  return ret;
 800266e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002670:	4618      	mov	r0, r3
 8002672:	f107 0718 	add.w	r7, r7, #24
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop

0800267c <USBD_CtlContinueRx>:
* @retval status
*/
USBD_Status  USBD_CtlContinueRx (USB_OTG_CORE_HANDLE  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b086      	sub	sp, #24
 8002680:	af00      	add	r7, sp, #0
 8002682:	60f8      	str	r0, [r7, #12]
 8002684:	60b9      	str	r1, [r7, #8]
 8002686:	4613      	mov	r3, r2
 8002688:	80fb      	strh	r3, [r7, #6]
  USBD_Status ret = USBD_OK;
 800268a:	f04f 0300 	mov.w	r3, #0
 800268e:	75fb      	strb	r3, [r7, #23]
  
  DCD_EP_PrepareRx (pdev,
 8002690:	88fb      	ldrh	r3, [r7, #6]
 8002692:	68f8      	ldr	r0, [r7, #12]
 8002694:	f04f 0100 	mov.w	r1, #0
 8002698:	68ba      	ldr	r2, [r7, #8]
 800269a:	f7fe fec7 	bl	800142c <DCD_EP_PrepareRx>
                    0,                     
                    pbuf,                         
                    len);
  return ret;
 800269e:	7dfb      	ldrb	r3, [r7, #23]
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	f107 0718 	add.w	r7, r7, #24
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop

080026ac <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: USB OTG device instance
* @retval status
*/
USBD_Status  USBD_CtlSendStatus (USB_OTG_CORE_HANDLE  *pdev)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  USBD_Status ret = USBD_OK;
 80026b4:	f04f 0300 	mov.w	r3, #0
 80026b8:	73fb      	strb	r3, [r7, #15]
  pdev->dev.device_state = USB_OTG_EP0_STATUS_IN;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f04f 0204 	mov.w	r2, #4
 80026c0:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
  DCD_EP_Tx (pdev,
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f04f 0100 	mov.w	r1, #0
 80026ca:	f04f 0200 	mov.w	r2, #0
 80026ce:	f04f 0300 	mov.w	r3, #0
 80026d2:	f7fe fef1 	bl	80014b8 <DCD_EP_Tx>
             0,
             NULL, 
             0); 
  
  USB_OTG_EP0_OutStart(pdev);  
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f7fe fdec 	bl	80012b4 <USB_OTG_EP0_OutStart>
  
  return ret;
 80026dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80026de:	4618      	mov	r0, r3
 80026e0:	f107 0710 	add.w	r7, r7, #16
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: USB OTG device instance
* @retval status
*/
USBD_Status  USBD_CtlReceiveStatus (USB_OTG_CORE_HANDLE  *pdev)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  USBD_Status ret = USBD_OK;
 80026f0:	f04f 0300 	mov.w	r3, #0
 80026f4:	73fb      	strb	r3, [r7, #15]
  pdev->dev.device_state = USB_OTG_EP0_STATUS_OUT;  
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	f04f 0205 	mov.w	r2, #5
 80026fc:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
  DCD_EP_PrepareRx ( pdev,
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f04f 0100 	mov.w	r1, #0
 8002706:	f04f 0200 	mov.w	r2, #0
 800270a:	f04f 0300 	mov.w	r3, #0
 800270e:	f7fe fe8d 	bl	800142c <DCD_EP_PrepareRx>
                    0,
                    NULL,
                    0);  

  USB_OTG_EP0_OutStart(pdev);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f7fe fdce 	bl	80012b4 <USB_OTG_EP0_OutStart>
  
  return ret;
 8002718:	7bfb      	ldrb	r3, [r7, #15]
}
 800271a:	4618      	mov	r0, r3
 800271c:	f107 0710 	add.w	r7, r7, #16
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}

08002724 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_Status  USBD_StdDevReq (USB_OTG_CORE_HANDLE  *pdev, USB_SETUP_REQ  *req)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	6039      	str	r1, [r7, #0]
  USBD_Status ret = USBD_OK;  
 800272e:	f04f 0300 	mov.w	r3, #0
 8002732:	73fb      	strb	r3, [r7, #15]
  
  switch (req->bRequest) 
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	785b      	ldrb	r3, [r3, #1]
 8002738:	2b09      	cmp	r3, #9
 800273a:	d83a      	bhi.n	80027b2 <USBD_StdDevReq+0x8e>
 800273c:	a201      	add	r2, pc, #4	; (adr r2, 8002744 <USBD_StdDevReq+0x20>)
 800273e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002742:	bf00      	nop
 8002744:	08002795 	.word	0x08002795
 8002748:	080027a9 	.word	0x080027a9
 800274c:	080027b3 	.word	0x080027b3
 8002750:	0800279f 	.word	0x0800279f
 8002754:	080027b3 	.word	0x080027b3
 8002758:	08002777 	.word	0x08002777
 800275c:	0800276d 	.word	0x0800276d
 8002760:	080027b3 	.word	0x080027b3
 8002764:	0800278b 	.word	0x0800278b
 8002768:	08002781 	.word	0x08002781
  {
  case USB_REQ_GET_DESCRIPTOR: 
    
    USBD_GetDescriptor (pdev, req) ;
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	6839      	ldr	r1, [r7, #0]
 8002770:	f000 f942 	bl	80029f8 <USBD_GetDescriptor>
    break;
 8002774:	e022      	b.n	80027bc <USBD_StdDevReq+0x98>
    
  case USB_REQ_SET_ADDRESS:                      
    USBD_SetAddress(pdev, req);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	6839      	ldr	r1, [r7, #0]
 800277a:	f000 fa21 	bl	8002bc0 <USBD_SetAddress>
    break;
 800277e:	e01d      	b.n	80027bc <USBD_StdDevReq+0x98>
    
  case USB_REQ_SET_CONFIGURATION:                    
    USBD_SetConfig (pdev , req);
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	6839      	ldr	r1, [r7, #0]
 8002784:	f000 fa5c 	bl	8002c40 <USBD_SetConfig>
    break;
 8002788:	e018      	b.n	80027bc <USBD_StdDevReq+0x98>
    
  case USB_REQ_GET_CONFIGURATION:                 
    USBD_GetConfig (pdev , req);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	6839      	ldr	r1, [r7, #0]
 800278e:	f000 fad3 	bl	8002d38 <USBD_GetConfig>
    break;
 8002792:	e013      	b.n	80027bc <USBD_StdDevReq+0x98>
    
  case USB_REQ_GET_STATUS:                                  
    USBD_GetStatus (pdev , req);
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	6839      	ldr	r1, [r7, #0]
 8002798:	f000 fb02 	bl	8002da0 <USBD_GetStatus>
    break;
 800279c:	e00e      	b.n	80027bc <USBD_StdDevReq+0x98>
    
    
  case USB_REQ_SET_FEATURE:   
    USBD_SetFeature (pdev , req);    
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	6839      	ldr	r1, [r7, #0]
 80027a2:	f000 fb2b 	bl	8002dfc <USBD_SetFeature>
    break;
 80027a6:	e009      	b.n	80027bc <USBD_StdDevReq+0x98>
    
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	6839      	ldr	r1, [r7, #0]
 80027ac:	f000 fb96 	bl	8002edc <USBD_ClrFeature>
    break;
 80027b0:	e004      	b.n	80027bc <USBD_StdDevReq+0x98>
    
  default:  
    USBD_CtlError(pdev , req);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	6839      	ldr	r1, [r7, #0]
 80027b6:	f000 fc1b 	bl	8002ff0 <USBD_CtlError>
    break;
 80027ba:	bf00      	nop
  }
  
  return ret;
 80027bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80027be:	4618      	mov	r0, r3
 80027c0:	f107 0710 	add.w	r7, r7, #16
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <USBD_StdItfReq>:
* @param  pdev: USB OTG device instance
* @param  req: usb request
* @retval status
*/
USBD_Status  USBD_StdItfReq (USB_OTG_CORE_HANDLE  *pdev, USB_SETUP_REQ  *req)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
  USBD_Status ret = USBD_OK; 
 80027d2:	f04f 0300 	mov.w	r3, #0
 80027d6:	73fb      	strb	r3, [r7, #15]
  
  switch (pdev->dev.device_status) 
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 80027de:	2b03      	cmp	r3, #3
 80027e0:	d11b      	bne.n	800281a <USBD_StdItfReq+0x52>
  {
  case USB_OTG_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_ITF_MAX_NUM) 
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	889b      	ldrh	r3, [r3, #4]
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d811      	bhi.n	8002810 <USBD_StdItfReq+0x48>
    {
      pdev->dev.class_cb->Setup (pdev, req); 
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	6839      	ldr	r1, [r7, #0]
 80027f8:	4798      	blx	r3
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	88db      	ldrh	r3, [r3, #6]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d110      	bne.n	8002824 <USBD_StdItfReq+0x5c>
 8002802:	7bfb      	ldrb	r3, [r7, #15]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d10f      	bne.n	8002828 <USBD_StdItfReq+0x60>
      {
         USBD_CtlSendStatus(pdev);
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f7ff ff4f 	bl	80026ac <USBD_CtlSendStatus>
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
    }
    break;
 800280e:	e00c      	b.n	800282a <USBD_StdItfReq+0x62>
         USBD_CtlSendStatus(pdev);
      }
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	6839      	ldr	r1, [r7, #0]
 8002814:	f000 fbec 	bl	8002ff0 <USBD_CtlError>
    }
    break;
 8002818:	e007      	b.n	800282a <USBD_StdItfReq+0x62>
    
  default:
     USBD_CtlError(pdev , req);
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	6839      	ldr	r1, [r7, #0]
 800281e:	f000 fbe7 	bl	8002ff0 <USBD_CtlError>
    break;
 8002822:	e002      	b.n	800282a <USBD_StdItfReq+0x62>
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
    }
    break;
 8002824:	bf00      	nop
 8002826:	e000      	b.n	800282a <USBD_StdItfReq+0x62>
 8002828:	bf00      	nop
    
  default:
     USBD_CtlError(pdev , req);
    break;
  }
  return ret;
 800282a:	7bfb      	ldrb	r3, [r7, #15]
}
 800282c:	4618      	mov	r0, r3
 800282e:	f107 0710 	add.w	r7, r7, #16
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop

08002838 <USBD_StdEPReq>:
* @param  pdev: USB OTG device instance
* @param  req: usb request
* @retval status
*/
USBD_Status  USBD_StdEPReq (USB_OTG_CORE_HANDLE  *pdev, USB_SETUP_REQ  *req)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	6039      	str	r1, [r7, #0]
  
  uint8_t   ep_addr;
  USBD_Status ret = USBD_OK; 
 8002842:	f04f 0300 	mov.w	r3, #0
 8002846:	73fb      	strb	r3, [r7, #15]
  
  ep_addr  = LOBYTE(req->wIndex);   
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	889b      	ldrh	r3, [r3, #4]
 800284c:	73bb      	strb	r3, [r7, #14]
  
  switch (req->bRequest) 
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	785b      	ldrb	r3, [r3, #1]
 8002852:	2b01      	cmp	r3, #1
 8002854:	d038      	beq.n	80028c8 <USBD_StdEPReq+0x90>
 8002856:	2b03      	cmp	r3, #3
 8002858:	d002      	beq.n	8002860 <USBD_StdEPReq+0x28>
 800285a:	2b00      	cmp	r3, #0
 800285c:	d068      	beq.n	8002930 <USBD_StdEPReq+0xf8>
      break;
    }
    break;
    
  default:
    break;
 800285e:	e0c2      	b.n	80029e6 <USBD_StdEPReq+0x1ae>
  switch (req->bRequest) 
  {
    
  case USB_REQ_SET_FEATURE :
    
    switch (pdev->dev.device_status) 
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8002866:	2b02      	cmp	r3, #2
 8002868:	d002      	beq.n	8002870 <USBD_StdEPReq+0x38>
 800286a:	2b03      	cmp	r3, #3
 800286c:	d00c      	beq.n	8002888 <USBD_StdEPReq+0x50>
 800286e:	e025      	b.n	80028bc <USBD_StdEPReq+0x84>
    {
    case USB_OTG_ADDRESSED:          
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8002870:	7bbb      	ldrb	r3, [r7, #14]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d007      	beq.n	8002886 <USBD_StdEPReq+0x4e>
 8002876:	7bbb      	ldrb	r3, [r7, #14]
 8002878:	2b80      	cmp	r3, #128	; 0x80
 800287a:	d004      	beq.n	8002886 <USBD_StdEPReq+0x4e>
      {
        DCD_EP_Stall(pdev , ep_addr);
 800287c:	7bbb      	ldrb	r3, [r7, #14]
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	4619      	mov	r1, r3
 8002882:	f7fe fe5b 	bl	800153c <DCD_EP_Stall>
      }
      break;	
 8002886:	e01e      	b.n	80028c6 <USBD_StdEPReq+0x8e>
      
    case USB_OTG_CONFIGURED:   
      if (req->wValue == USB_FEATURE_EP_HALT)
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	885b      	ldrh	r3, [r3, #2]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d10a      	bne.n	80028a6 <USBD_StdEPReq+0x6e>
      {
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8002890:	7bbb      	ldrb	r3, [r7, #14]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d007      	beq.n	80028a6 <USBD_StdEPReq+0x6e>
 8002896:	7bbb      	ldrb	r3, [r7, #14]
 8002898:	2b80      	cmp	r3, #128	; 0x80
 800289a:	d004      	beq.n	80028a6 <USBD_StdEPReq+0x6e>
        { 
          DCD_EP_Stall(pdev , ep_addr);
 800289c:	7bbb      	ldrb	r3, [r7, #14]
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	4619      	mov	r1, r3
 80028a2:	f7fe fe4b 	bl	800153c <DCD_EP_Stall>
          
        }
      }
      pdev->dev.class_cb->Setup (pdev, req);   
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	6839      	ldr	r1, [r7, #0]
 80028b2:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f7ff fef9 	bl	80026ac <USBD_CtlSendStatus>
      
      break;
 80028ba:	e004      	b.n	80028c6 <USBD_StdEPReq+0x8e>
      
    default:                         
      USBD_CtlError(pdev , req);
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	6839      	ldr	r1, [r7, #0]
 80028c0:	f000 fb96 	bl	8002ff0 <USBD_CtlError>
      break;    
 80028c4:	bf00      	nop
    }
    break;
 80028c6:	e08e      	b.n	80029e6 <USBD_StdEPReq+0x1ae>
    
  case USB_REQ_CLEAR_FEATURE :
    
    switch (pdev->dev.device_status) 
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d002      	beq.n	80028d8 <USBD_StdEPReq+0xa0>
 80028d2:	2b03      	cmp	r3, #3
 80028d4:	d00c      	beq.n	80028f0 <USBD_StdEPReq+0xb8>
 80028d6:	e025      	b.n	8002924 <USBD_StdEPReq+0xec>
    {
    case USB_OTG_ADDRESSED:          
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 80028d8:	7bbb      	ldrb	r3, [r7, #14]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d007      	beq.n	80028ee <USBD_StdEPReq+0xb6>
 80028de:	7bbb      	ldrb	r3, [r7, #14]
 80028e0:	2b80      	cmp	r3, #128	; 0x80
 80028e2:	d004      	beq.n	80028ee <USBD_StdEPReq+0xb6>
      {
        DCD_EP_Stall(pdev , ep_addr);
 80028e4:	7bbb      	ldrb	r3, [r7, #14]
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	4619      	mov	r1, r3
 80028ea:	f7fe fe27 	bl	800153c <DCD_EP_Stall>
      }
      break;	
 80028ee:	e01e      	b.n	800292e <USBD_StdEPReq+0xf6>
      
    case USB_OTG_CONFIGURED:   
      if (req->wValue == USB_FEATURE_EP_HALT)
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	885b      	ldrh	r3, [r3, #2]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d114      	bne.n	8002922 <USBD_StdEPReq+0xea>
      {
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 80028f8:	7bbb      	ldrb	r3, [r7, #14]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d00e      	beq.n	800291c <USBD_StdEPReq+0xe4>
 80028fe:	7bbb      	ldrb	r3, [r7, #14]
 8002900:	2b80      	cmp	r3, #128	; 0x80
 8002902:	d00b      	beq.n	800291c <USBD_StdEPReq+0xe4>
        {        
          DCD_EP_ClrStall(pdev , ep_addr);
 8002904:	7bbb      	ldrb	r3, [r7, #14]
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	4619      	mov	r1, r3
 800290a:	f7fe fe57 	bl	80015bc <DCD_EP_ClrStall>
          pdev->dev.class_cb->Setup (pdev, req);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	6839      	ldr	r1, [r7, #0]
 800291a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f7ff fec5 	bl	80026ac <USBD_CtlSendStatus>
      }
      break;
 8002922:	e004      	b.n	800292e <USBD_StdEPReq+0xf6>
      
    default:                         
       USBD_CtlError(pdev , req);
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	6839      	ldr	r1, [r7, #0]
 8002928:	f000 fb62 	bl	8002ff0 <USBD_CtlError>
      break;    
 800292c:	bf00      	nop
    }
    break;
 800292e:	e05a      	b.n	80029e6 <USBD_StdEPReq+0x1ae>
    
  case USB_REQ_GET_STATUS:                  
    switch (pdev->dev.device_status) 
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8002936:	2b02      	cmp	r3, #2
 8002938:	d002      	beq.n	8002940 <USBD_StdEPReq+0x108>
 800293a:	2b03      	cmp	r3, #3
 800293c:	d00c      	beq.n	8002958 <USBD_StdEPReq+0x120>
 800293e:	e04c      	b.n	80029da <USBD_StdEPReq+0x1a2>
    {
    case USB_OTG_ADDRESSED:          
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8002940:	7bbb      	ldrb	r3, [r7, #14]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d007      	beq.n	8002956 <USBD_StdEPReq+0x11e>
 8002946:	7bbb      	ldrb	r3, [r7, #14]
 8002948:	2b80      	cmp	r3, #128	; 0x80
 800294a:	d004      	beq.n	8002956 <USBD_StdEPReq+0x11e>
      {
        DCD_EP_Stall(pdev , ep_addr);
 800294c:	7bbb      	ldrb	r3, [r7, #14]
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	4619      	mov	r1, r3
 8002952:	f7fe fdf3 	bl	800153c <DCD_EP_Stall>
      }
      break;	
 8002956:	e045      	b.n	80029e4 <USBD_StdEPReq+0x1ac>
      
    case USB_OTG_CONFIGURED:         
      
      
      if ((ep_addr & 0x80)== 0x80)
 8002958:	7bbb      	ldrb	r3, [r7, #14]
 800295a:	b25b      	sxtb	r3, r3
 800295c:	2b00      	cmp	r3, #0
 800295e:	da19      	bge.n	8002994 <USBD_StdEPReq+0x15c>
      {
        if(pdev->dev.in_ep[ep_addr & 0x7F].is_stall)
 8002960:	7bbb      	ldrb	r3, [r7, #14]
 8002962:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002966:	6879      	ldr	r1, [r7, #4]
 8002968:	4613      	mov	r3, r2
 800296a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800296e:	189b      	adds	r3, r3, r2
 8002970:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8002974:	18cb      	adds	r3, r1, r3
 8002976:	f503 738c 	add.w	r3, r3, #280	; 0x118
 800297a:	789b      	ldrb	r3, [r3, #2]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d004      	beq.n	800298a <USBD_StdEPReq+0x152>
        {
          USBD_ep_status = 0x0001;     
 8002980:	4b1c      	ldr	r3, [pc, #112]	; (80029f4 <USBD_StdEPReq+0x1bc>)
 8002982:	f04f 0201 	mov.w	r2, #1
 8002986:	601a      	str	r2, [r3, #0]
 8002988:	e01f      	b.n	80029ca <USBD_StdEPReq+0x192>
        }
        else
        {
          USBD_ep_status = 0x0000;  
 800298a:	4b1a      	ldr	r3, [pc, #104]	; (80029f4 <USBD_StdEPReq+0x1bc>)
 800298c:	f04f 0200 	mov.w	r2, #0
 8002990:	601a      	str	r2, [r3, #0]
 8002992:	e01a      	b.n	80029ca <USBD_StdEPReq+0x192>
        }
      }
      else if ((ep_addr & 0x80)== 0x00)
 8002994:	7bbb      	ldrb	r3, [r7, #14]
 8002996:	b25b      	sxtb	r3, r3
 8002998:	2b00      	cmp	r3, #0
 800299a:	db16      	blt.n	80029ca <USBD_StdEPReq+0x192>
      {
        if(pdev->dev.out_ep[ep_addr].is_stall)
 800299c:	7bba      	ldrb	r2, [r7, #14]
 800299e:	6879      	ldr	r1, [r7, #4]
 80029a0:	4613      	mov	r3, r2
 80029a2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80029a6:	189b      	adds	r3, r3, r2
 80029a8:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80029ac:	18cb      	adds	r3, r1, r3
 80029ae:	f503 735c 	add.w	r3, r3, #880	; 0x370
 80029b2:	789b      	ldrb	r3, [r3, #2]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d004      	beq.n	80029c2 <USBD_StdEPReq+0x18a>
        {
          USBD_ep_status = 0x0001;     
 80029b8:	4b0e      	ldr	r3, [pc, #56]	; (80029f4 <USBD_StdEPReq+0x1bc>)
 80029ba:	f04f 0201 	mov.w	r2, #1
 80029be:	601a      	str	r2, [r3, #0]
 80029c0:	e003      	b.n	80029ca <USBD_StdEPReq+0x192>
        }
        
        else 
        {
          USBD_ep_status = 0x0000;     
 80029c2:	4b0c      	ldr	r3, [pc, #48]	; (80029f4 <USBD_StdEPReq+0x1bc>)
 80029c4:	f04f 0200 	mov.w	r2, #0
 80029c8:	601a      	str	r2, [r3, #0]
        }      
      }
      USBD_CtlSendData (pdev,
 80029ca:	4b0a      	ldr	r3, [pc, #40]	; (80029f4 <USBD_StdEPReq+0x1bc>)
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	4619      	mov	r1, r3
 80029d0:	f04f 0202 	mov.w	r2, #2
 80029d4:	f7ff fe16 	bl	8002604 <USBD_CtlSendData>
                        (uint8_t *)&USBD_ep_status,
                        2);
      break;
 80029d8:	e004      	b.n	80029e4 <USBD_StdEPReq+0x1ac>
      
    default:                         
       USBD_CtlError(pdev , req);
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	6839      	ldr	r1, [r7, #0]
 80029de:	f000 fb07 	bl	8002ff0 <USBD_CtlError>
      break;
 80029e2:	bf00      	nop
    }
    break;
 80029e4:	bf00      	nop
    
  default:
    break;
  }
  return ret;
 80029e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	f107 0710 	add.w	r7, r7, #16
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	20000058 	.word	0x20000058

080029f8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USB_OTG_CORE_HANDLE  *pdev, 
                               USB_SETUP_REQ *req)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;
  
  switch (req->wValue >> 8)
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	885b      	ldrh	r3, [r3, #2]
 8002a06:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8002a0a:	b29b      	uxth	r3, r3
 8002a0c:	f103 33ff 	add.w	r3, r3, #4294967295
 8002a10:	2b06      	cmp	r3, #6
 8002a12:	f200 80b5 	bhi.w	8002b80 <USBD_GetDescriptor+0x188>
 8002a16:	a201      	add	r2, pc, #4	; (adr r2, 8002a1c <USBD_GetDescriptor+0x24>)
 8002a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a1c:	08002a39 	.word	0x08002a39
 8002a20:	08002a6d 	.word	0x08002a6d
 8002a24:	08002a9b 	.word	0x08002a9b
 8002a28:	08002b81 	.word	0x08002b81
 8002a2c:	08002b81 	.word	0x08002b81
 8002a30:	08002b6d 	.word	0x08002b6d
 8002a34:	08002b77 	.word	0x08002b77
  {
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->dev.usr_device->GetDeviceDescriptor(pdev->cfg.speed, &len);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f8d3 35e8 	ldr.w	r3, [r3, #1512]	; 0x5e8
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	7891      	ldrb	r1, [r2, #2]
 8002a44:	f107 020a 	add.w	r2, r7, #10
 8002a48:	4608      	mov	r0, r1
 8002a4a:	4611      	mov	r1, r2
 8002a4c:	4798      	blx	r3
 8002a4e:	60f8      	str	r0, [r7, #12]
    if ((req->wLength == 64) ||( pdev->dev.device_status == USB_OTG_DEFAULT))  
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	88db      	ldrh	r3, [r3, #6]
 8002a54:	2b40      	cmp	r3, #64	; 0x40
 8002a56:	d005      	beq.n	8002a64 <USBD_GetDescriptor+0x6c>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	f040 8093 	bne.w	8002b8a <USBD_GetDescriptor+0x192>
    {                  
      len = 8;
 8002a64:	f04f 0308 	mov.w	r3, #8
 8002a68:	817b      	strh	r3, [r7, #10]
    }
    break;
 8002a6a:	e08f      	b.n	8002b8c <USBD_GetDescriptor+0x194>
    
  case USB_DESC_TYPE_CONFIGURATION:
      pbuf   = (uint8_t *)pdev->dev.class_cb->GetConfigDescriptor(pdev->cfg.speed, &len);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 8002a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	7891      	ldrb	r1, [r2, #2]
 8002a78:	f107 020a 	add.w	r2, r7, #10
 8002a7c:	4608      	mov	r0, r1
 8002a7e:	4611      	mov	r1, r2
 8002a80:	4798      	blx	r3
 8002a82:	60f8      	str	r0, [r7, #12]
       (pdev->cfg.phy_itface  == USB_OTG_ULPI_PHY))
    {
      pbuf   = (uint8_t *)pdev->dev.class_cb->GetOtherConfigDescriptor(pdev->cfg.speed, &len);
    }
#endif  
    pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f103 0301 	add.w	r3, r3, #1
 8002a8a:	f04f 0202 	mov.w	r2, #2
 8002a8e:	701a      	strb	r2, [r3, #0]
    pdev->dev.pConfig_descriptor = pbuf;    
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	68fa      	ldr	r2, [r7, #12]
 8002a94:	f8c3 25ec 	str.w	r2, [r3, #1516]	; 0x5ec
    break;
 8002a98:	e078      	b.n	8002b8c <USBD_GetDescriptor+0x194>
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	885b      	ldrh	r3, [r3, #2]
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	2b05      	cmp	r3, #5
 8002aa2:	d85d      	bhi.n	8002b60 <USBD_GetDescriptor+0x168>
 8002aa4:	a201      	add	r2, pc, #4	; (adr r2, 8002aac <USBD_GetDescriptor+0xb4>)
 8002aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aaa:	bf00      	nop
 8002aac:	08002ac5 	.word	0x08002ac5
 8002ab0:	08002adf 	.word	0x08002adf
 8002ab4:	08002af9 	.word	0x08002af9
 8002ab8:	08002b13 	.word	0x08002b13
 8002abc:	08002b2d 	.word	0x08002b2d
 8002ac0:	08002b47 	.word	0x08002b47
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->dev.usr_device->GetLangIDStrDescriptor(pdev->cfg.speed, &len);        
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f8d3 35e8 	ldr.w	r3, [r3, #1512]	; 0x5e8
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	7891      	ldrb	r1, [r2, #2]
 8002ad0:	f107 020a 	add.w	r2, r7, #10
 8002ad4:	4608      	mov	r0, r1
 8002ad6:	4611      	mov	r1, r2
 8002ad8:	4798      	blx	r3
 8002ada:	60f8      	str	r0, [r7, #12]
      break;
 8002adc:	e045      	b.n	8002b6a <USBD_GetDescriptor+0x172>
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->dev.usr_device->GetManufacturerStrDescriptor(pdev->cfg.speed, &len);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f8d3 35e8 	ldr.w	r3, [r3, #1512]	; 0x5e8
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	7891      	ldrb	r1, [r2, #2]
 8002aea:	f107 020a 	add.w	r2, r7, #10
 8002aee:	4608      	mov	r0, r1
 8002af0:	4611      	mov	r1, r2
 8002af2:	4798      	blx	r3
 8002af4:	60f8      	str	r0, [r7, #12]
      break;
 8002af6:	e038      	b.n	8002b6a <USBD_GetDescriptor+0x172>
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->dev.usr_device->GetProductStrDescriptor(pdev->cfg.speed, &len);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	f8d3 35e8 	ldr.w	r3, [r3, #1512]	; 0x5e8
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	7891      	ldrb	r1, [r2, #2]
 8002b04:	f107 020a 	add.w	r2, r7, #10
 8002b08:	4608      	mov	r0, r1
 8002b0a:	4611      	mov	r1, r2
 8002b0c:	4798      	blx	r3
 8002b0e:	60f8      	str	r0, [r7, #12]
      break;
 8002b10:	e02b      	b.n	8002b6a <USBD_GetDescriptor+0x172>
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->dev.usr_device->GetSerialStrDescriptor(pdev->cfg.speed, &len);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f8d3 35e8 	ldr.w	r3, [r3, #1512]	; 0x5e8
 8002b18:	691b      	ldr	r3, [r3, #16]
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	7891      	ldrb	r1, [r2, #2]
 8002b1e:	f107 020a 	add.w	r2, r7, #10
 8002b22:	4608      	mov	r0, r1
 8002b24:	4611      	mov	r1, r2
 8002b26:	4798      	blx	r3
 8002b28:	60f8      	str	r0, [r7, #12]
      break;
 8002b2a:	e01e      	b.n	8002b6a <USBD_GetDescriptor+0x172>
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->dev.usr_device->GetConfigurationStrDescriptor(pdev->cfg.speed, &len);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	f8d3 35e8 	ldr.w	r3, [r3, #1512]	; 0x5e8
 8002b32:	695b      	ldr	r3, [r3, #20]
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	7891      	ldrb	r1, [r2, #2]
 8002b38:	f107 020a 	add.w	r2, r7, #10
 8002b3c:	4608      	mov	r0, r1
 8002b3e:	4611      	mov	r1, r2
 8002b40:	4798      	blx	r3
 8002b42:	60f8      	str	r0, [r7, #12]
      break;
 8002b44:	e011      	b.n	8002b6a <USBD_GetDescriptor+0x172>
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->dev.usr_device->GetInterfaceStrDescriptor(pdev->cfg.speed, &len);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f8d3 35e8 	ldr.w	r3, [r3, #1512]	; 0x5e8
 8002b4c:	699b      	ldr	r3, [r3, #24]
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	7891      	ldrb	r1, [r2, #2]
 8002b52:	f107 020a 	add.w	r2, r7, #10
 8002b56:	4608      	mov	r0, r1
 8002b58:	4611      	mov	r1, r2
 8002b5a:	4798      	blx	r3
 8002b5c:	60f8      	str	r0, [r7, #12]
      break;
 8002b5e:	e004      	b.n	8002b6a <USBD_GetDescriptor+0x172>
    default:
#ifdef USB_SUPPORT_USER_STRING_DESC
      pbuf = pdev->dev.class_cb->GetUsrStrDescriptor(pdev->cfg.speed, (req->wValue) , &len);
      break;
#else      
       USBD_CtlError(pdev , req);
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	6839      	ldr	r1, [r7, #0]
 8002b64:	f000 fa44 	bl	8002ff0 <USBD_CtlError>
      return;
 8002b68:	e025      	b.n	8002bb6 <USBD_GetDescriptor+0x1be>
#endif /* USBD_CtlError(pdev , req); */      
    }
    break;
 8002b6a:	e00f      	b.n	8002b8c <USBD_GetDescriptor+0x194>
    {
      USBD_CtlError(pdev , req);
      return;
    }
#else
      USBD_CtlError(pdev , req);
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	6839      	ldr	r1, [r7, #0]
 8002b70:	f000 fa3e 	bl	8002ff0 <USBD_CtlError>
      return;
 8002b74:	e01f      	b.n	8002bb6 <USBD_GetDescriptor+0x1be>
    {
      USBD_CtlError(pdev , req);
      return;
    }
#else
      USBD_CtlError(pdev , req);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	6839      	ldr	r1, [r7, #0]
 8002b7a:	f000 fa39 	bl	8002ff0 <USBD_CtlError>
      return;
 8002b7e:	e01a      	b.n	8002bb6 <USBD_GetDescriptor+0x1be>
#endif     

    
  default: 
     USBD_CtlError(pdev , req);
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	6839      	ldr	r1, [r7, #0]
 8002b84:	f000 fa34 	bl	8002ff0 <USBD_CtlError>
    return;
 8002b88:	e015      	b.n	8002bb6 <USBD_GetDescriptor+0x1be>
    pbuf = pdev->dev.usr_device->GetDeviceDescriptor(pdev->cfg.speed, &len);
    if ((req->wLength == 64) ||( pdev->dev.device_status == USB_OTG_DEFAULT))  
    {                  
      len = 8;
    }
    break;
 8002b8a:	bf00      	nop
  default: 
     USBD_CtlError(pdev , req);
    return;
  }
  
  if((len != 0)&& (req->wLength != 0))
 8002b8c:	897b      	ldrh	r3, [r7, #10]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d011      	beq.n	8002bb6 <USBD_GetDescriptor+0x1be>
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	88db      	ldrh	r3, [r3, #6]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d00d      	beq.n	8002bb6 <USBD_GetDescriptor+0x1be>
  {
    
    len = MIN(len , req->wLength);
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	88da      	ldrh	r2, [r3, #6]
 8002b9e:	897b      	ldrh	r3, [r7, #10]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	bf38      	it	cc
 8002ba4:	4613      	movcc	r3, r2
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	817b      	strh	r3, [r7, #10]
    
    USBD_CtlSendData (pdev, 
 8002baa:	897b      	ldrh	r3, [r7, #10]
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	68f9      	ldr	r1, [r7, #12]
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	f7ff fd27 	bl	8002604 <USBD_CtlSendData>
                      pbuf,
                      len);
  }
  
}
 8002bb6:	f107 0710 	add.w	r7, r7, #16
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop

08002bc0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USB_OTG_CORE_HANDLE  *pdev, 
                            USB_SETUP_REQ *req)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	889b      	ldrh	r3, [r3, #4]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d12e      	bne.n	8002c30 <USBD_SetAddress+0x70>
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	88db      	ldrh	r3, [r3, #6]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d12a      	bne.n	8002c30 <USBD_SetAddress+0x70>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	885b      	ldrh	r3, [r3, #2]
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002be4:	73fb      	strb	r3, [r7, #15]
    
    if (pdev->dev.device_status == USB_OTG_CONFIGURED) 
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8002bec:	2b03      	cmp	r3, #3
 8002bee:	d104      	bne.n	8002bfa <USBD_SetAddress+0x3a>
    {
      USBD_CtlError(pdev , req);
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	6839      	ldr	r1, [r7, #0]
 8002bf4:	f000 f9fc 	bl	8002ff0 <USBD_CtlError>
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
    
    if (pdev->dev.device_status == USB_OTG_CONFIGURED) 
 8002bf8:	e01e      	b.n	8002c38 <USBD_SetAddress+0x78>
    {
      USBD_CtlError(pdev , req);
    } 
    else 
    {
      pdev->dev.device_address = dev_addr;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	7bfa      	ldrb	r2, [r7, #15]
 8002bfe:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
      DCD_EP_SetAddress(pdev, dev_addr);               
 8002c02:	7bfb      	ldrb	r3, [r7, #15]
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	4619      	mov	r1, r3
 8002c08:	f7fe fd18 	bl	800163c <DCD_EP_SetAddress>
      USBD_CtlSendStatus(pdev);                         
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f7ff fd4d 	bl	80026ac <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 8002c12:	7bfb      	ldrb	r3, [r7, #15]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d005      	beq.n	8002c24 <USBD_SetAddress+0x64>
      {
        pdev->dev.device_status  = USB_OTG_ADDRESSED;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f04f 0202 	mov.w	r2, #2
 8002c1e:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
    
    if (pdev->dev.device_status == USB_OTG_CONFIGURED) 
 8002c22:	e009      	b.n	8002c38 <USBD_SetAddress+0x78>
      {
        pdev->dev.device_status  = USB_OTG_ADDRESSED;
      } 
      else 
      {
        pdev->dev.device_status  = USB_OTG_DEFAULT; 
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	f04f 0201 	mov.w	r2, #1
 8002c2a:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
    
    if (pdev->dev.device_status == USB_OTG_CONFIGURED) 
 8002c2e:	e003      	b.n	8002c38 <USBD_SetAddress+0x78>
      }
    }
  } 
  else 
  {
     USBD_CtlError(pdev , req);                        
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	6839      	ldr	r1, [r7, #0]
 8002c34:	f000 f9dc 	bl	8002ff0 <USBD_CtlError>
  } 
}
 8002c38:	f107 0710 	add.w	r7, r7, #16
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <USBD_SetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USB_OTG_CORE_HANDLE  *pdev, 
                           USB_SETUP_REQ *req)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	6039      	str	r1, [r7, #0]
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	885b      	ldrh	r3, [r3, #2]
 8002c4e:	b2da      	uxtb	r2, r3
 8002c50:	4b38      	ldr	r3, [pc, #224]	; (8002d34 <USBD_SetConfig+0xf4>)
 8002c52:	701a      	strb	r2, [r3, #0]
  
  if (cfgidx > USBD_CFG_MAX_NUM ) 
 8002c54:	4b37      	ldr	r3, [pc, #220]	; (8002d34 <USBD_SetConfig+0xf4>)
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d904      	bls.n	8002c66 <USBD_SetConfig+0x26>
  {            
     USBD_CtlError(pdev , req);                              
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	6839      	ldr	r1, [r7, #0]
 8002c60:	f000 f9c6 	bl	8002ff0 <USBD_CtlError>
 8002c64:	e061      	b.n	8002d2a <USBD_SetConfig+0xea>
  } 
  else 
  {
    switch (pdev->dev.device_status) 
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d002      	beq.n	8002c76 <USBD_SetConfig+0x36>
 8002c70:	2b03      	cmp	r3, #3
 8002c72:	d01c      	beq.n	8002cae <USBD_SetConfig+0x6e>
 8002c74:	e054      	b.n	8002d20 <USBD_SetConfig+0xe0>
    {
    case USB_OTG_ADDRESSED:
      if (cfgidx) 
 8002c76:	4b2f      	ldr	r3, [pc, #188]	; (8002d34 <USBD_SetConfig+0xf4>)
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d013      	beq.n	8002ca6 <USBD_SetConfig+0x66>
      {                                			   							   							   				
        pdev->dev.device_config = cfgidx;
 8002c7e:	4b2d      	ldr	r3, [pc, #180]	; (8002d34 <USBD_SetConfig+0xf4>)
 8002c80:	781a      	ldrb	r2, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        pdev->dev.device_status = USB_OTG_CONFIGURED;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f04f 0203 	mov.w	r2, #3
 8002c8e:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        USBD_SetCfg(pdev , cfgidx);
 8002c92:	4b28      	ldr	r3, [pc, #160]	; (8002d34 <USBD_SetConfig+0xf4>)
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	4619      	mov	r1, r3
 8002c9a:	f7ff fc5f 	bl	800255c <USBD_SetCfg>
        USBD_CtlSendStatus(pdev);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f7ff fd04 	bl	80026ac <USBD_CtlSendStatus>
      }
      else 
      {
         USBD_CtlSendStatus(pdev);
      }
      break;
 8002ca4:	e041      	b.n	8002d2a <USBD_SetConfig+0xea>
        USBD_SetCfg(pdev , cfgidx);
        USBD_CtlSendStatus(pdev);
      }
      else 
      {
         USBD_CtlSendStatus(pdev);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f7ff fd00 	bl	80026ac <USBD_CtlSendStatus>
      }
      break;
 8002cac:	e03d      	b.n	8002d2a <USBD_SetConfig+0xea>
      
    case USB_OTG_CONFIGURED:
      if (cfgidx == 0) 
 8002cae:	4b21      	ldr	r3, [pc, #132]	; (8002d34 <USBD_SetConfig+0xf4>)
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d113      	bne.n	8002cde <USBD_SetConfig+0x9e>
      {                           
        pdev->dev.device_status = USB_OTG_ADDRESSED;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f04f 0202 	mov.w	r2, #2
 8002cbc:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        pdev->dev.device_config = cfgidx;          
 8002cc0:	4b1c      	ldr	r3, [pc, #112]	; (8002d34 <USBD_SetConfig+0xf4>)
 8002cc2:	781a      	ldrb	r2, [r3, #0]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        USBD_ClrCfg(pdev , cfgidx);
 8002cca:	4b1a      	ldr	r3, [pc, #104]	; (8002d34 <USBD_SetConfig+0xf4>)
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	f7ff fc5d 	bl	8002590 <USBD_ClrCfg>
        USBD_CtlSendStatus(pdev);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f7ff fce8 	bl	80026ac <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8002cdc:	e025      	b.n	8002d2a <USBD_SetConfig+0xea>
        pdev->dev.device_config = cfgidx;          
        USBD_ClrCfg(pdev , cfgidx);
        USBD_CtlSendStatus(pdev);
        
      } 
      else  if (cfgidx != pdev->dev.device_config) 
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f893 2110 	ldrb.w	r2, [r3, #272]	; 0x110
 8002ce4:	4b13      	ldr	r3, [pc, #76]	; (8002d34 <USBD_SetConfig+0xf4>)
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d015      	beq.n	8002d18 <USBD_SetConfig+0xd8>
      {
        /* Clear old configuration */
        USBD_ClrCfg(pdev , pdev->dev.device_config);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	f7ff fc4b 	bl	8002590 <USBD_ClrCfg>
        
        /* set new configuration */
        pdev->dev.device_config = cfgidx;
 8002cfa:	4b0e      	ldr	r3, [pc, #56]	; (8002d34 <USBD_SetConfig+0xf4>)
 8002cfc:	781a      	ldrb	r2, [r3, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        USBD_SetCfg(pdev , cfgidx);
 8002d04:	4b0b      	ldr	r3, [pc, #44]	; (8002d34 <USBD_SetConfig+0xf4>)
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	f7ff fc26 	bl	800255c <USBD_SetCfg>
        USBD_CtlSendStatus(pdev);
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f7ff fccb 	bl	80026ac <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8002d16:	e008      	b.n	8002d2a <USBD_SetConfig+0xea>
        USBD_SetCfg(pdev , cfgidx);
        USBD_CtlSendStatus(pdev);
      }
      else
      {
        USBD_CtlSendStatus(pdev);
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f7ff fcc7 	bl	80026ac <USBD_CtlSendStatus>
      }
      break;
 8002d1e:	e004      	b.n	8002d2a <USBD_SetConfig+0xea>
      
    default:					
       USBD_CtlError(pdev , req);                     
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	6839      	ldr	r1, [r7, #0]
 8002d24:	f000 f964 	bl	8002ff0 <USBD_CtlError>
      break;
 8002d28:	bf00      	nop
    }
  }
}
 8002d2a:	f107 0708 	add.w	r7, r7, #8
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	20000064 	.word	0x20000064

08002d38 <USBD_GetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USB_OTG_CORE_HANDLE  *pdev, 
                           USB_SETUP_REQ *req)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
 
  if (req->wLength != 1) 
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	88db      	ldrh	r3, [r3, #6]
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d004      	beq.n	8002d54 <USBD_GetConfig+0x1c>
  {                   
     USBD_CtlError(pdev , req);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	6839      	ldr	r1, [r7, #0]
 8002d4e:	f000 f94f 	bl	8002ff0 <USBD_CtlError>
 8002d52:	e01e      	b.n	8002d92 <USBD_GetConfig+0x5a>
  }
  else 
  {
    switch (pdev->dev.device_status )  
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d002      	beq.n	8002d64 <USBD_GetConfig+0x2c>
 8002d5e:	2b03      	cmp	r3, #3
 8002d60:	d008      	beq.n	8002d74 <USBD_GetConfig+0x3c>
 8002d62:	e011      	b.n	8002d88 <USBD_GetConfig+0x50>
    {
    case USB_OTG_ADDRESSED:                     
      
      USBD_CtlSendData (pdev, 
 8002d64:	4b0d      	ldr	r3, [pc, #52]	; (8002d9c <USBD_GetConfig+0x64>)
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	4619      	mov	r1, r3
 8002d6a:	f04f 0201 	mov.w	r2, #1
 8002d6e:	f7ff fc49 	bl	8002604 <USBD_CtlSendData>
                        (uint8_t *)&USBD_default_cfg,
                        1);
      break;
 8002d72:	e00e      	b.n	8002d92 <USBD_GetConfig+0x5a>
      
    case USB_OTG_CONFIGURED:                   
      
      USBD_CtlSendData (pdev, 
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	f04f 0201 	mov.w	r2, #1
 8002d82:	f7ff fc3f 	bl	8002604 <USBD_CtlSendData>
                        &pdev->dev.device_config,
                        1);
      break;
 8002d86:	e004      	b.n	8002d92 <USBD_GetConfig+0x5a>
      
    default:
       USBD_CtlError(pdev , req);
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	6839      	ldr	r1, [r7, #0]
 8002d8c:	f000 f930 	bl	8002ff0 <USBD_CtlError>
      break;
 8002d90:	bf00      	nop
    }
  }
}
 8002d92:	f107 0708 	add.w	r7, r7, #8
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	2000005c 	.word	0x2000005c

08002da0 <USBD_GetStatus>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USB_OTG_CORE_HANDLE  *pdev, 
                           USB_SETUP_REQ *req)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]
  
  switch (pdev->dev.device_status) 
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8002db0:	f1a3 0302 	sub.w	r3, r3, #2
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d815      	bhi.n	8002de4 <USBD_GetStatus+0x44>
  {
  case USB_OTG_ADDRESSED:
  case USB_OTG_CONFIGURED:
    
    if (pdev->dev.DevRemoteWakeup) 
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d004      	beq.n	8002dcc <USBD_GetStatus+0x2c>
    {
      USBD_cfg_status = USB_CONFIG_SELF_POWERED | USB_CONFIG_REMOTE_WAKEUP;                                
 8002dc2:	4b0d      	ldr	r3, [pc, #52]	; (8002df8 <USBD_GetStatus+0x58>)
 8002dc4:	f04f 0203 	mov.w	r2, #3
 8002dc8:	601a      	str	r2, [r3, #0]
 8002dca:	e003      	b.n	8002dd4 <USBD_GetStatus+0x34>
    }
    else
    {
      USBD_cfg_status = USB_CONFIG_SELF_POWERED;   
 8002dcc:	4b0a      	ldr	r3, [pc, #40]	; (8002df8 <USBD_GetStatus+0x58>)
 8002dce:	f04f 0201 	mov.w	r2, #1
 8002dd2:	601a      	str	r2, [r3, #0]
    }
    
    USBD_CtlSendData (pdev, 
 8002dd4:	4b08      	ldr	r3, [pc, #32]	; (8002df8 <USBD_GetStatus+0x58>)
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	4619      	mov	r1, r3
 8002dda:	f04f 0201 	mov.w	r2, #1
 8002dde:	f7ff fc11 	bl	8002604 <USBD_CtlSendData>
                      (uint8_t *)&USBD_cfg_status,
                      1);
    break;
 8002de2:	e004      	b.n	8002dee <USBD_GetStatus+0x4e>
    
  default :
    USBD_CtlError(pdev , req);                        
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	6839      	ldr	r1, [r7, #0]
 8002de8:	f000 f902 	bl	8002ff0 <USBD_CtlError>
    break;
 8002dec:	bf00      	nop
  }
}
 8002dee:	f107 0708 	add.w	r7, r7, #8
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	20000060 	.word	0x20000060

08002dfc <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USB_OTG_CORE_HANDLE  *pdev, 
                            USB_SETUP_REQ *req)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6039      	str	r1, [r7, #0]

  USB_OTG_DCTL_TypeDef     dctl;
  uint8_t test_mode = 0;
 8002e06:	f04f 0300 	mov.w	r3, #0
 8002e0a:	73fb      	strb	r3, [r7, #15]
 
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	885b      	ldrh	r3, [r3, #2]
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d10f      	bne.n	8002e34 <USBD_SetFeature+0x38>
  {
    pdev->dev.DevRemoteWakeup = 1;  
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f04f 0201 	mov.w	r2, #1
 8002e1a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    pdev->dev.class_cb->Setup (pdev, req);   
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	6839      	ldr	r1, [r7, #0]
 8002e2a:	4798      	blx	r3
    USBD_CtlSendStatus(pdev);
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f7ff fc3d 	bl	80026ac <USBD_CtlSendStatus>
 8002e32:	e04f      	b.n	8002ed4 <USBD_SetFeature+0xd8>
  }

  else if ((req->wValue == USB_FEATURE_TEST_MODE) && 
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	885b      	ldrh	r3, [r3, #2]
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d14b      	bne.n	8002ed4 <USBD_SetFeature+0xd8>
           ((req->wIndex & 0xFF) == 0))
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	889b      	ldrh	r3, [r3, #4]
 8002e40:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    pdev->dev.DevRemoteWakeup = 1;  
    pdev->dev.class_cb->Setup (pdev, req);   
    USBD_CtlSendStatus(pdev);
  }

  else if ((req->wValue == USB_FEATURE_TEST_MODE) && 
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d145      	bne.n	8002ed4 <USBD_SetFeature+0xd8>
           ((req->wIndex & 0xFF) == 0))
  {
    dctl.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DCTL);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	691b      	ldr	r3, [r3, #16]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	60bb      	str	r3, [r7, #8]
    
    test_mode = req->wIndex >> 8;
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	889b      	ldrh	r3, [r3, #4]
 8002e54:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	73fb      	strb	r3, [r7, #15]
    switch (test_mode) 
 8002e5c:	7bfb      	ldrb	r3, [r7, #15]
 8002e5e:	f103 33ff 	add.w	r3, r3, #4294967295
 8002e62:	2b04      	cmp	r3, #4
 8002e64:	d82f      	bhi.n	8002ec6 <USBD_SetFeature+0xca>
 8002e66:	a201      	add	r2, pc, #4	; (adr r2, 8002e6c <USBD_SetFeature+0x70>)
 8002e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e6c:	08002e81 	.word	0x08002e81
 8002e70:	08002e8f 	.word	0x08002e8f
 8002e74:	08002e9d 	.word	0x08002e9d
 8002e78:	08002eab 	.word	0x08002eab
 8002e7c:	08002eb9 	.word	0x08002eb9
    {
    case 1: // TEST_J
      dctl.b.tstctl = 1;
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	f04f 0201 	mov.w	r2, #1
 8002e86:	f362 1306 	bfi	r3, r2, #4, #3
 8002e8a:	60bb      	str	r3, [r7, #8]
      break;
 8002e8c:	e01b      	b.n	8002ec6 <USBD_SetFeature+0xca>
      
    case 2: // TEST_K	
      dctl.b.tstctl = 2;
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	f04f 0202 	mov.w	r2, #2
 8002e94:	f362 1306 	bfi	r3, r2, #4, #3
 8002e98:	60bb      	str	r3, [r7, #8]
      break;
 8002e9a:	e014      	b.n	8002ec6 <USBD_SetFeature+0xca>
      
    case 3: // TEST_SE0_NAK
      dctl.b.tstctl = 3;
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	f04f 0203 	mov.w	r2, #3
 8002ea2:	f362 1306 	bfi	r3, r2, #4, #3
 8002ea6:	60bb      	str	r3, [r7, #8]
      break;
 8002ea8:	e00d      	b.n	8002ec6 <USBD_SetFeature+0xca>
      
    case 4: // TEST_PACKET
      dctl.b.tstctl = 4;
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	f04f 0204 	mov.w	r2, #4
 8002eb0:	f362 1306 	bfi	r3, r2, #4, #3
 8002eb4:	60bb      	str	r3, [r7, #8]
      break;
 8002eb6:	e006      	b.n	8002ec6 <USBD_SetFeature+0xca>
      
    case 5: // TEST_FORCE_ENABLE
      dctl.b.tstctl = 5;
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	f04f 0205 	mov.w	r2, #5
 8002ebe:	f362 1306 	bfi	r3, r2, #4, #3
 8002ec2:	60bb      	str	r3, [r7, #8]
      break;
 8002ec4:	bf00      	nop
    }
    USB_OTG_WRITE_REG32(&pdev->regs.DREGS->DCTL, dctl.d32);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	68ba      	ldr	r2, [r7, #8]
 8002ecc:	605a      	str	r2, [r3, #4]
    USBD_CtlSendStatus(pdev);
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f7ff fbec 	bl	80026ac <USBD_CtlSendStatus>
  }

}
 8002ed4:	f107 0710 	add.w	r7, r7, #16
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}

08002edc <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USB_OTG_CORE_HANDLE  *pdev, 
                            USB_SETUP_REQ *req)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b082      	sub	sp, #8
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev.device_status)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8002eec:	f1a3 0302 	sub.w	r3, r3, #2
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d813      	bhi.n	8002f1c <USBD_ClrFeature+0x40>
  {
  case USB_OTG_ADDRESSED:
  case USB_OTG_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	885b      	ldrh	r3, [r3, #2]
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d115      	bne.n	8002f28 <USBD_ClrFeature+0x4c>
    {
      pdev->dev.DevRemoteWakeup = 0; 
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f04f 0200 	mov.w	r2, #0
 8002f02:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
      pdev->dev.class_cb->Setup (pdev, req);   
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	6839      	ldr	r1, [r7, #0]
 8002f12:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f7ff fbc9 	bl	80026ac <USBD_CtlSendStatus>
    }
    break;
 8002f1a:	e006      	b.n	8002f2a <USBD_ClrFeature+0x4e>
    
  default :
     USBD_CtlError(pdev , req);
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	6839      	ldr	r1, [r7, #0]
 8002f20:	f000 f866 	bl	8002ff0 <USBD_CtlError>
    break;
 8002f24:	bf00      	nop
 8002f26:	e000      	b.n	8002f2a <USBD_ClrFeature+0x4e>
    {
      pdev->dev.DevRemoteWakeup = 0; 
      pdev->dev.class_cb->Setup (pdev, req);   
      USBD_CtlSendStatus(pdev);
    }
    break;
 8002f28:	bf00      	nop
    
  default :
     USBD_CtlError(pdev , req);
    break;
  }
}
 8002f2a:	f107 0708 	add.w	r7, r7, #8
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop

08002f34 <USBD_ParseSetupRequest>:
* @retval None
*/

void USBD_ParseSetupRequest( USB_OTG_CORE_HANDLE  *pdev,
                            USB_SETUP_REQ *req)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdev->dev.setup_packet);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f893 25c8 	ldrb.w	r2, [r3, #1480]	; 0x5c8
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdev->dev.setup_packet +  1);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f503 63b8 	add.w	r3, r3, #1472	; 0x5c0
 8002f4e:	f103 0309 	add.w	r3, r3, #9
 8002f52:	781a      	ldrb	r2, [r3, #0]
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdev->dev.setup_packet +  2);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f503 63b8 	add.w	r3, r3, #1472	; 0x5c0
 8002f5e:	f103 030a 	add.w	r3, r3, #10
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	461a      	mov	r2, r3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f503 63b8 	add.w	r3, r3, #1472	; 0x5c0
 8002f6c:	f103 030b 	add.w	r3, r3, #11
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	18d3      	adds	r3, r2, r3
 8002f7a:	b29a      	uxth	r2, r3
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdev->dev.setup_packet +  4);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f503 63b8 	add.w	r3, r3, #1472	; 0x5c0
 8002f86:	f103 030c 	add.w	r3, r3, #12
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f503 63b8 	add.w	r3, r3, #1472	; 0x5c0
 8002f94:	f103 030d 	add.w	r3, r3, #13
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	18d3      	adds	r3, r2, r3
 8002fa2:	b29a      	uxth	r2, r3
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdev->dev.setup_packet +  6);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f503 63b8 	add.w	r3, r3, #1472	; 0x5c0
 8002fae:	f103 030e 	add.w	r3, r3, #14
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f503 63b8 	add.w	r3, r3, #1472	; 0x5c0
 8002fbc:	f103 030f 	add.w	r3, r3, #15
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	18d3      	adds	r3, r2, r3
 8002fca:	b29a      	uxth	r2, r3
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	80da      	strh	r2, [r3, #6]
  
  pdev->dev.in_ep[0].ctl_data_len = req->wLength  ;
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	88db      	ldrh	r3, [r3, #6]
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
  pdev->dev.device_state = USB_OTG_EP0_SETUP;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f04f 0201 	mov.w	r2, #1
 8002fe2:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
}
 8002fe6:	f107 070c 	add.w	r7, r7, #12
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bc80      	pop	{r7}
 8002fee:	4770      	bx	lr

08002ff0 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USB_OTG_CORE_HANDLE  *pdev,
                            USB_SETUP_REQ *req)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	6039      	str	r1, [r7, #0]
  if((req->bmRequest & 0x80) == 0x80)
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	b25b      	sxtb	r3, r3
 8003002:	2b00      	cmp	r3, #0
 8003004:	da05      	bge.n	8003012 <USBD_CtlError+0x22>
  {
    DCD_EP_Stall(pdev , 0x80);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f04f 0180 	mov.w	r1, #128	; 0x80
 800300c:	f7fe fa96 	bl	800153c <DCD_EP_Stall>
 8003010:	e00e      	b.n	8003030 <USBD_CtlError+0x40>
  }
  else 
  {
    if(req->wLength == 0)
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	88db      	ldrh	r3, [r3, #6]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d105      	bne.n	8003026 <USBD_CtlError+0x36>
    {
       DCD_EP_Stall(pdev , 0x80);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f04f 0180 	mov.w	r1, #128	; 0x80
 8003020:	f7fe fa8c 	bl	800153c <DCD_EP_Stall>
 8003024:	e004      	b.n	8003030 <USBD_CtlError+0x40>
    }
    else
    {
      DCD_EP_Stall(pdev , 0);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f04f 0100 	mov.w	r1, #0
 800302c:	f7fe fa86 	bl	800153c <DCD_EP_Stall>
    }
  }
  USB_OTG_EP0_OutStart(pdev);  
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f7fe f93f 	bl	80012b4 <USB_OTG_EP0_OutStart>
}
 8003036:	f107 0708 	add.w	r7, r7, #8
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop

08003040 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8003048:	4b03      	ldr	r3, [pc, #12]	; (8003058 <EXTI_ClearITPendingBit+0x18>)
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	615a      	str	r2, [r3, #20]
}
 800304e:	f107 070c 	add.w	r7, r7, #12
 8003052:	46bd      	mov	sp, r7
 8003054:	bc80      	pop	{r7}
 8003056:	4770      	bx	lr
 8003058:	40013c00 	.word	0x40013c00

0800305c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800305c:	b480      	push	{r7}
 800305e:	b087      	sub	sp, #28
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8003066:	f04f 0300 	mov.w	r3, #0
 800306a:	617b      	str	r3, [r7, #20]
 800306c:	f04f 0300 	mov.w	r3, #0
 8003070:	613b      	str	r3, [r7, #16]
 8003072:	f04f 0300 	mov.w	r3, #0
 8003076:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8003078:	f04f 0300 	mov.w	r3, #0
 800307c:	617b      	str	r3, [r7, #20]
 800307e:	e087      	b.n	8003190 <GPIO_Init+0x134>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	f04f 0201 	mov.w	r2, #1
 8003086:	fa02 f303 	lsl.w	r3, r2, r3
 800308a:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	ea02 0303 	and.w	r3, r2, r3
 8003096:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8003098:	68fa      	ldr	r2, [r7, #12]
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	429a      	cmp	r2, r3
 800309e:	d173      	bne.n	8003188 <GPIO_Init+0x12c>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80030aa:	f04f 0103 	mov.w	r1, #3
 80030ae:	fa01 f303 	lsl.w	r3, r1, r3
 80030b2:	ea6f 0303 	mvn.w	r3, r3
 80030b6:	401a      	ands	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	791b      	ldrb	r3, [r3, #4]
 80030c4:	4619      	mov	r1, r3
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80030cc:	fa01 f303 	lsl.w	r3, r1, r3
 80030d0:	431a      	orrs	r2, r3
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	791b      	ldrb	r3, [r3, #4]
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d003      	beq.n	80030e6 <GPIO_Init+0x8a>
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	791b      	ldrb	r3, [r3, #4]
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d134      	bne.n	8003150 <GPIO_Init+0xf4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	689a      	ldr	r2, [r3, #8]
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80030f0:	f04f 0103 	mov.w	r1, #3
 80030f4:	fa01 f303 	lsl.w	r3, r1, r3
 80030f8:	ea6f 0303 	mvn.w	r3, r3
 80030fc:	401a      	ands	r2, r3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	689a      	ldr	r2, [r3, #8]
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	795b      	ldrb	r3, [r3, #5]
 800310a:	4619      	mov	r1, r3
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003112:	fa01 f303 	lsl.w	r3, r1, r3
 8003116:	431a      	orrs	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	685a      	ldr	r2, [r3, #4]
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	b29b      	uxth	r3, r3
 8003124:	f04f 0101 	mov.w	r1, #1
 8003128:	fa01 f303 	lsl.w	r3, r1, r3
 800312c:	ea6f 0303 	mvn.w	r3, r3
 8003130:	401a      	ands	r2, r3
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685a      	ldr	r2, [r3, #4]
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	799b      	ldrb	r3, [r3, #6]
 800313e:	4619      	mov	r1, r3
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	b29b      	uxth	r3, r3
 8003144:	fa01 f303 	lsl.w	r3, r1, r3
 8003148:	b29b      	uxth	r3, r3
 800314a:	431a      	orrs	r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	68da      	ldr	r2, [r3, #12]
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	b29b      	uxth	r3, r3
 8003158:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800315c:	f04f 0103 	mov.w	r1, #3
 8003160:	fa01 f303 	lsl.w	r3, r1, r3
 8003164:	ea6f 0303 	mvn.w	r3, r3
 8003168:	401a      	ands	r2, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	68da      	ldr	r2, [r3, #12]
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	79db      	ldrb	r3, [r3, #7]
 8003176:	4619      	mov	r1, r3
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800317e:	fa01 f303 	lsl.w	r3, r1, r3
 8003182:	431a      	orrs	r2, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	f103 0301 	add.w	r3, r3, #1
 800318e:	617b      	str	r3, [r7, #20]
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	2b0f      	cmp	r3, #15
 8003194:	f67f af74 	bls.w	8003080 <GPIO_Init+0x24>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8003198:	f107 071c 	add.w	r7, r7, #28
 800319c:	46bd      	mov	sp, r7
 800319e:	bc80      	pop	{r7}
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop

080031a4 <GPIO_StructInit>:
  * @brief  Fills each GPIO_InitStruct member with its default value.
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80031b2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f04f 0200 	mov.w	r2, #0
 80031ba:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f04f 0200 	mov.w	r2, #0
 80031c2:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f04f 0200 	mov.w	r2, #0
 80031ca:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f04f 0200 	mov.w	r2, #0
 80031d2:	71da      	strb	r2, [r3, #7]
}
 80031d4:	f107 070c 	add.w	r7, r7, #12
 80031d8:	46bd      	mov	sp, r7
 80031da:	bc80      	pop	{r7}
 80031dc:	4770      	bx	lr
 80031de:	bf00      	nop

080031e0 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	460b      	mov	r3, r1
 80031ea:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	887a      	ldrh	r2, [r7, #2]
 80031f0:	831a      	strh	r2, [r3, #24]
}
 80031f2:	f107 070c 	add.w	r7, r7, #12
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bc80      	pop	{r7}
 80031fa:	4770      	bx	lr

080031fc <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	460b      	mov	r3, r1
 8003206:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	887a      	ldrh	r2, [r7, #2]
 800320c:	835a      	strh	r2, [r3, #26]
}
 800320e:	f107 070c 	add.w	r7, r7, #12
 8003212:	46bd      	mov	sp, r7
 8003214:	bc80      	pop	{r7}
 8003216:	4770      	bx	lr

08003218 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8003218:	b480      	push	{r7}
 800321a:	b089      	sub	sp, #36	; 0x24
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8003220:	f04f 0300 	mov.w	r3, #0
 8003224:	61bb      	str	r3, [r7, #24]
 8003226:	f04f 0300 	mov.w	r3, #0
 800322a:	617b      	str	r3, [r7, #20]
 800322c:	f04f 0300 	mov.w	r3, #0
 8003230:	61fb      	str	r3, [r7, #28]
 8003232:	f04f 0302 	mov.w	r3, #2
 8003236:	613b      	str	r3, [r7, #16]
 8003238:	f04f 0300 	mov.w	r3, #0
 800323c:	60fb      	str	r3, [r7, #12]
 800323e:	f04f 0302 	mov.w	r3, #2
 8003242:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8003244:	4b4f      	ldr	r3, [pc, #316]	; (8003384 <RCC_GetClocksFreq+0x16c>)
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	f003 030c 	and.w	r3, r3, #12
 800324c:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 800324e:	69bb      	ldr	r3, [r7, #24]
 8003250:	2b04      	cmp	r3, #4
 8003252:	d007      	beq.n	8003264 <RCC_GetClocksFreq+0x4c>
 8003254:	2b08      	cmp	r3, #8
 8003256:	d009      	beq.n	800326c <RCC_GetClocksFreq+0x54>
 8003258:	2b00      	cmp	r3, #0
 800325a:	d147      	bne.n	80032ec <RCC_GetClocksFreq+0xd4>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	4a4a      	ldr	r2, [pc, #296]	; (8003388 <RCC_GetClocksFreq+0x170>)
 8003260:	601a      	str	r2, [r3, #0]
      break;
 8003262:	e047      	b.n	80032f4 <RCC_GetClocksFreq+0xdc>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	4a49      	ldr	r2, [pc, #292]	; (800338c <RCC_GetClocksFreq+0x174>)
 8003268:	601a      	str	r2, [r3, #0]
      break;
 800326a:	e043      	b.n	80032f4 <RCC_GetClocksFreq+0xdc>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800326c:	4b45      	ldr	r3, [pc, #276]	; (8003384 <RCC_GetClocksFreq+0x16c>)
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003274:	ea4f 5393 	mov.w	r3, r3, lsr #22
 8003278:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800327a:	4b42      	ldr	r3, [pc, #264]	; (8003384 <RCC_GetClocksFreq+0x16c>)
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003282:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d00f      	beq.n	80032aa <RCC_GetClocksFreq+0x92>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800328a:	4a40      	ldr	r2, [pc, #256]	; (800338c <RCC_GetClocksFreq+0x174>)
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003292:	4b3c      	ldr	r3, [pc, #240]	; (8003384 <RCC_GetClocksFreq+0x16c>)
 8003294:	6859      	ldr	r1, [r3, #4]
 8003296:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800329a:	ea01 0303 	and.w	r3, r1, r3
 800329e:	ea4f 1393 	mov.w	r3, r3, lsr #6
 80032a2:	fb03 f302 	mul.w	r3, r3, r2
 80032a6:	61fb      	str	r3, [r7, #28]
 80032a8:	e00e      	b.n	80032c8 <RCC_GetClocksFreq+0xb0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80032aa:	4a37      	ldr	r2, [pc, #220]	; (8003388 <RCC_GetClocksFreq+0x170>)
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	fbb2 f2f3 	udiv	r2, r2, r3
 80032b2:	4b34      	ldr	r3, [pc, #208]	; (8003384 <RCC_GetClocksFreq+0x16c>)
 80032b4:	6859      	ldr	r1, [r3, #4]
 80032b6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80032ba:	ea01 0303 	and.w	r3, r1, r3
 80032be:	ea4f 1393 	mov.w	r3, r3, lsr #6
 80032c2:	fb03 f302 	mul.w	r3, r3, r2
 80032c6:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80032c8:	4b2e      	ldr	r3, [pc, #184]	; (8003384 <RCC_GetClocksFreq+0x16c>)
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80032d0:	ea4f 4313 	mov.w	r3, r3, lsr #16
 80032d4:	f103 0301 	add.w	r3, r3, #1
 80032d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80032dc:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 80032de:	69fa      	ldr	r2, [r7, #28]
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	fbb2 f2f3 	udiv	r2, r2, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	601a      	str	r2, [r3, #0]
      break;
 80032ea:	e003      	b.n	80032f4 <RCC_GetClocksFreq+0xdc>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	4a26      	ldr	r2, [pc, #152]	; (8003388 <RCC_GetClocksFreq+0x170>)
 80032f0:	601a      	str	r2, [r3, #0]
      break;
 80032f2:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80032f4:	4b23      	ldr	r3, [pc, #140]	; (8003384 <RCC_GetClocksFreq+0x16c>)
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032fc:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	ea4f 1313 	mov.w	r3, r3, lsr #4
 8003304:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8003306:	4a22      	ldr	r2, [pc, #136]	; (8003390 <RCC_GetClocksFreq+0x178>)
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	18d3      	adds	r3, r2, r3
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	b2db      	uxtb	r3, r3
 8003310:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	fa22 f203 	lsr.w	r2, r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8003320:	4b18      	ldr	r3, [pc, #96]	; (8003384 <RCC_GetClocksFreq+0x16c>)
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8003328:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 800332a:	69bb      	ldr	r3, [r7, #24]
 800332c:	ea4f 2393 	mov.w	r3, r3, lsr #10
 8003330:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8003332:	4a17      	ldr	r2, [pc, #92]	; (8003390 <RCC_GetClocksFreq+0x178>)
 8003334:	69bb      	ldr	r3, [r7, #24]
 8003336:	18d3      	adds	r3, r2, r3
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	b2db      	uxtb	r3, r3
 800333c:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685a      	ldr	r2, [r3, #4]
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	fa22 f203 	lsr.w	r2, r2, r3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 800334c:	4b0d      	ldr	r3, [pc, #52]	; (8003384 <RCC_GetClocksFreq+0x16c>)
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8003354:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8003356:	69bb      	ldr	r3, [r7, #24]
 8003358:	ea4f 3353 	mov.w	r3, r3, lsr #13
 800335c:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800335e:	4a0c      	ldr	r2, [pc, #48]	; (8003390 <RCC_GetClocksFreq+0x178>)
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	18d3      	adds	r3, r2, r3
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	b2db      	uxtb	r3, r3
 8003368:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685a      	ldr	r2, [r3, #4]
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	fa22 f203 	lsr.w	r2, r2, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	60da      	str	r2, [r3, #12]
}
 8003378:	f107 0724 	add.w	r7, r7, #36	; 0x24
 800337c:	46bd      	mov	sp, r7
 800337e:	bc80      	pop	{r7}
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	40023800 	.word	0x40023800
 8003388:	00f42400 	.word	0x00f42400
 800338c:	007a1200 	.word	0x007a1200
 8003390:	20000048 	.word	0x20000048

08003394 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	460b      	mov	r3, r1
 800339e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80033a0:	78fb      	ldrb	r3, [r7, #3]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d007      	beq.n	80033b6 <RCC_AHB1PeriphClockCmd+0x22>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80033a6:	4b0b      	ldr	r3, [pc, #44]	; (80033d4 <RCC_AHB1PeriphClockCmd+0x40>)
 80033a8:	4a0a      	ldr	r2, [pc, #40]	; (80033d4 <RCC_AHB1PeriphClockCmd+0x40>)
 80033aa:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	ea41 0202 	orr.w	r2, r1, r2
 80033b2:	631a      	str	r2, [r3, #48]	; 0x30
 80033b4:	e008      	b.n	80033c8 <RCC_AHB1PeriphClockCmd+0x34>
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80033b6:	4b07      	ldr	r3, [pc, #28]	; (80033d4 <RCC_AHB1PeriphClockCmd+0x40>)
 80033b8:	4a06      	ldr	r2, [pc, #24]	; (80033d4 <RCC_AHB1PeriphClockCmd+0x40>)
 80033ba:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	ea6f 0202 	mvn.w	r2, r2
 80033c2:	ea01 0202 	and.w	r2, r1, r2
 80033c6:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 80033c8:	f107 070c 	add.w	r7, r7, #12
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bc80      	pop	{r7}
 80033d0:	4770      	bx	lr
 80033d2:	bf00      	nop
 80033d4:	40023800 	.word	0x40023800

080033d8 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	460b      	mov	r3, r1
 80033e2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80033e4:	78fb      	ldrb	r3, [r7, #3]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d007      	beq.n	80033fa <RCC_APB1PeriphClockCmd+0x22>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80033ea:	4b0b      	ldr	r3, [pc, #44]	; (8003418 <RCC_APB1PeriphClockCmd+0x40>)
 80033ec:	4a0a      	ldr	r2, [pc, #40]	; (8003418 <RCC_APB1PeriphClockCmd+0x40>)
 80033ee:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	ea41 0202 	orr.w	r2, r1, r2
 80033f6:	641a      	str	r2, [r3, #64]	; 0x40
 80033f8:	e008      	b.n	800340c <RCC_APB1PeriphClockCmd+0x34>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80033fa:	4b07      	ldr	r3, [pc, #28]	; (8003418 <RCC_APB1PeriphClockCmd+0x40>)
 80033fc:	4a06      	ldr	r2, [pc, #24]	; (8003418 <RCC_APB1PeriphClockCmd+0x40>)
 80033fe:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	ea6f 0202 	mvn.w	r2, r2
 8003406:	ea01 0202 	and.w	r2, r1, r2
 800340a:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 800340c:	f107 070c 	add.w	r7, r7, #12
 8003410:	46bd      	mov	sp, r7
 8003412:	bc80      	pop	{r7}
 8003414:	4770      	bx	lr
 8003416:	bf00      	nop
 8003418:	40023800 	.word	0x40023800

0800341c <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 800341c:	b480      	push	{r7}
 800341e:	b085      	sub	sp, #20
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8003426:	f04f 0300 	mov.w	r3, #0
 800342a:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	881b      	ldrh	r3, [r3, #0]
 8003430:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	4b29      	ldr	r3, [pc, #164]	; (80034dc <TIM_TimeBaseInit+0xc0>)
 8003436:	429a      	cmp	r2, r3
 8003438:	d013      	beq.n	8003462 <TIM_TimeBaseInit+0x46>
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	4b28      	ldr	r3, [pc, #160]	; (80034e0 <TIM_TimeBaseInit+0xc4>)
 800343e:	429a      	cmp	r2, r3
 8003440:	d00f      	beq.n	8003462 <TIM_TimeBaseInit+0x46>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003448:	d00b      	beq.n	8003462 <TIM_TimeBaseInit+0x46>
     (TIMx == TIM2) || (TIMx == TIM3)||
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	4b25      	ldr	r3, [pc, #148]	; (80034e4 <TIM_TimeBaseInit+0xc8>)
 800344e:	429a      	cmp	r2, r3
 8003450:	d007      	beq.n	8003462 <TIM_TimeBaseInit+0x46>
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	4b24      	ldr	r3, [pc, #144]	; (80034e8 <TIM_TimeBaseInit+0xcc>)
 8003456:	429a      	cmp	r2, r3
 8003458:	d003      	beq.n	8003462 <TIM_TimeBaseInit+0x46>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	4b23      	ldr	r3, [pc, #140]	; (80034ec <TIM_TimeBaseInit+0xd0>)
 800345e:	429a      	cmp	r2, r3
 8003460:	d109      	bne.n	8003476 <TIM_TimeBaseInit+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8003462:	89fb      	ldrh	r3, [r7, #14]
 8003464:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003468:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	885a      	ldrh	r2, [r3, #2]
 800346e:	89fb      	ldrh	r3, [r7, #14]
 8003470:	ea42 0303 	orr.w	r3, r2, r3
 8003474:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	4b1d      	ldr	r3, [pc, #116]	; (80034f0 <TIM_TimeBaseInit+0xd4>)
 800347a:	429a      	cmp	r2, r3
 800347c:	d00d      	beq.n	800349a <TIM_TimeBaseInit+0x7e>
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	4b1c      	ldr	r3, [pc, #112]	; (80034f4 <TIM_TimeBaseInit+0xd8>)
 8003482:	429a      	cmp	r2, r3
 8003484:	d009      	beq.n	800349a <TIM_TimeBaseInit+0x7e>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8003486:	89fb      	ldrh	r3, [r7, #14]
 8003488:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800348c:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	891a      	ldrh	r2, [r3, #8]
 8003492:	89fb      	ldrh	r3, [r7, #14]
 8003494:	ea42 0303 	orr.w	r3, r2, r3
 8003498:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	89fa      	ldrh	r2, [r7, #14]
 800349e:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	685a      	ldr	r2, [r3, #4]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	881a      	ldrh	r2, [r3, #0]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	4b0a      	ldr	r3, [pc, #40]	; (80034dc <TIM_TimeBaseInit+0xc0>)
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d003      	beq.n	80034c0 <TIM_TimeBaseInit+0xa4>
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	4b09      	ldr	r3, [pc, #36]	; (80034e0 <TIM_TimeBaseInit+0xc4>)
 80034bc:	429a      	cmp	r2, r3
 80034be:	d104      	bne.n	80034ca <TIM_TimeBaseInit+0xae>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	7a9b      	ldrb	r3, [r3, #10]
 80034c4:	461a      	mov	r2, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f04f 0201 	mov.w	r2, #1
 80034d0:	829a      	strh	r2, [r3, #20]
}
 80034d2:	f107 0714 	add.w	r7, r7, #20
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bc80      	pop	{r7}
 80034da:	4770      	bx	lr
 80034dc:	40010000 	.word	0x40010000
 80034e0:	40010400 	.word	0x40010400
 80034e4:	40000400 	.word	0x40000400
 80034e8:	40000800 	.word	0x40000800
 80034ec:	40000c00 	.word	0x40000c00
 80034f0:	40001000 	.word	0x40001000
 80034f4:	40001400 	.word	0x40001400

080034f8 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	460b      	mov	r3, r1
 8003502:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8003504:	78fb      	ldrb	r3, [r7, #3]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d008      	beq.n	800351c <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	881b      	ldrh	r3, [r3, #0]
 800350e:	b29b      	uxth	r3, r3
 8003510:	f043 0301 	orr.w	r3, r3, #1
 8003514:	b29a      	uxth	r2, r3
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	801a      	strh	r2, [r3, #0]
 800351a:	e007      	b.n	800352c <TIM_Cmd+0x34>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	881b      	ldrh	r3, [r3, #0]
 8003520:	b29b      	uxth	r3, r3
 8003522:	f023 0301 	bic.w	r3, r3, #1
 8003526:	b29a      	uxth	r2, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	801a      	strh	r2, [r3, #0]
  }
}
 800352c:	f107 070c 	add.w	r7, r7, #12
 8003530:	46bd      	mov	sp, r7
 8003532:	bc80      	pop	{r7}
 8003534:	4770      	bx	lr
 8003536:	bf00      	nop

08003538 <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8003538:	b480      	push	{r7}
 800353a:	b085      	sub	sp, #20
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8003542:	f04f 0300 	mov.w	r3, #0
 8003546:	817b      	strh	r3, [r7, #10]
 8003548:	f04f 0300 	mov.w	r3, #0
 800354c:	81fb      	strh	r3, [r7, #14]
 800354e:	f04f 0300 	mov.w	r3, #0
 8003552:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	8c1b      	ldrh	r3, [r3, #32]
 8003558:	b29b      	uxth	r3, r3
 800355a:	f023 0301 	bic.w	r3, r3, #1
 800355e:	b29a      	uxth	r2, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	8c1b      	ldrh	r3, [r3, #32]
 8003568:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	889b      	ldrh	r3, [r3, #4]
 800356e:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	8b1b      	ldrh	r3, [r3, #24]
 8003574:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
 8003576:	897b      	ldrh	r3, [r7, #10]
 8003578:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800357c:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 800357e:	897b      	ldrh	r3, [r7, #10]
 8003580:	f023 0303 	bic.w	r3, r3, #3
 8003584:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	881a      	ldrh	r2, [r3, #0]
 800358a:	897b      	ldrh	r3, [r7, #10]
 800358c:	ea42 0303 	orr.w	r3, r2, r3
 8003590:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 8003592:	89fb      	ldrh	r3, [r7, #14]
 8003594:	f023 0302 	bic.w	r3, r3, #2
 8003598:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	899a      	ldrh	r2, [r3, #12]
 800359e:	89fb      	ldrh	r3, [r7, #14]
 80035a0:	ea42 0303 	orr.w	r3, r2, r3
 80035a4:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	885a      	ldrh	r2, [r3, #2]
 80035aa:	89fb      	ldrh	r3, [r7, #14]
 80035ac:	ea42 0303 	orr.w	r3, r2, r3
 80035b0:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	4b20      	ldr	r3, [pc, #128]	; (8003638 <TIM_OC1Init+0x100>)
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d003      	beq.n	80035c2 <TIM_OC1Init+0x8a>
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	4b1f      	ldr	r3, [pc, #124]	; (800363c <TIM_OC1Init+0x104>)
 80035be:	429a      	cmp	r2, r3
 80035c0:	d127      	bne.n	8003612 <TIM_OC1Init+0xda>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 80035c2:	89fb      	ldrh	r3, [r7, #14]
 80035c4:	f023 0308 	bic.w	r3, r3, #8
 80035c8:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	89da      	ldrh	r2, [r3, #14]
 80035ce:	89fb      	ldrh	r3, [r7, #14]
 80035d0:	ea42 0303 	orr.w	r3, r2, r3
 80035d4:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
 80035d6:	89fb      	ldrh	r3, [r7, #14]
 80035d8:	f023 0304 	bic.w	r3, r3, #4
 80035dc:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	889a      	ldrh	r2, [r3, #4]
 80035e2:	89fb      	ldrh	r3, [r7, #14]
 80035e4:	ea42 0303 	orr.w	r3, r2, r3
 80035e8:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
 80035ea:	89bb      	ldrh	r3, [r7, #12]
 80035ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035f0:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 80035f2:	89bb      	ldrh	r3, [r7, #12]
 80035f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80035f8:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	8a1a      	ldrh	r2, [r3, #16]
 80035fe:	89bb      	ldrh	r3, [r7, #12]
 8003600:	ea42 0303 	orr.w	r3, r2, r3
 8003604:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	8a5a      	ldrh	r2, [r3, #18]
 800360a:	89bb      	ldrh	r3, [r7, #12]
 800360c:	ea42 0303 	orr.w	r3, r2, r3
 8003610:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	89ba      	ldrh	r2, [r7, #12]
 8003616:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	897a      	ldrh	r2, [r7, #10]
 800361c:	831a      	strh	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	689a      	ldr	r2, [r3, #8]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	89fa      	ldrh	r2, [r7, #14]
 800362a:	841a      	strh	r2, [r3, #32]
}
 800362c:	f107 0714 	add.w	r7, r7, #20
 8003630:	46bd      	mov	sp, r7
 8003632:	bc80      	pop	{r7}
 8003634:	4770      	bx	lr
 8003636:	bf00      	nop
 8003638:	40010000 	.word	0x40010000
 800363c:	40010400 	.word	0x40010400

08003640 <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8003640:	b480      	push	{r7}
 8003642:	b085      	sub	sp, #20
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800364a:	f04f 0300 	mov.w	r3, #0
 800364e:	817b      	strh	r3, [r7, #10]
 8003650:	f04f 0300 	mov.w	r3, #0
 8003654:	81fb      	strh	r3, [r7, #14]
 8003656:	f04f 0300 	mov.w	r3, #0
 800365a:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	8c1b      	ldrh	r3, [r3, #32]
 8003660:	b29b      	uxth	r3, r3
 8003662:	f023 0310 	bic.w	r3, r3, #16
 8003666:	b29a      	uxth	r2, r3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	8c1b      	ldrh	r3, [r3, #32]
 8003670:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	889b      	ldrh	r3, [r3, #4]
 8003676:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	8b1b      	ldrh	r3, [r3, #24]
 800367c:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
 800367e:	897b      	ldrh	r3, [r7, #10]
 8003680:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003684:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
 8003686:	897b      	ldrh	r3, [r7, #10]
 8003688:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800368c:	817b      	strh	r3, [r7, #10]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	881b      	ldrh	r3, [r3, #0]
 8003692:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8003696:	b29a      	uxth	r2, r3
 8003698:	897b      	ldrh	r3, [r7, #10]
 800369a:	ea42 0303 	orr.w	r3, r2, r3
 800369e:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 80036a0:	89fb      	ldrh	r3, [r7, #14]
 80036a2:	f023 0320 	bic.w	r3, r3, #32
 80036a6:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	899b      	ldrh	r3, [r3, #12]
 80036ac:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80036b0:	b29a      	uxth	r2, r3
 80036b2:	89fb      	ldrh	r3, [r7, #14]
 80036b4:	ea42 0303 	orr.w	r3, r2, r3
 80036b8:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	885b      	ldrh	r3, [r3, #2]
 80036be:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80036c2:	b29a      	uxth	r2, r3
 80036c4:	89fb      	ldrh	r3, [r7, #14]
 80036c6:	ea42 0303 	orr.w	r3, r2, r3
 80036ca:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	4b26      	ldr	r3, [pc, #152]	; (8003768 <TIM_OC2Init+0x128>)
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d003      	beq.n	80036dc <TIM_OC2Init+0x9c>
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	4b25      	ldr	r3, [pc, #148]	; (800376c <TIM_OC2Init+0x12c>)
 80036d8:	429a      	cmp	r2, r3
 80036da:	d133      	bne.n	8003744 <TIM_OC2Init+0x104>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 80036dc:	89fb      	ldrh	r3, [r7, #14]
 80036de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036e2:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	89db      	ldrh	r3, [r3, #14]
 80036e8:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80036ec:	b29a      	uxth	r2, r3
 80036ee:	89fb      	ldrh	r3, [r7, #14]
 80036f0:	ea42 0303 	orr.w	r3, r2, r3
 80036f4:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
 80036f6:	89fb      	ldrh	r3, [r7, #14]
 80036f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036fc:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	889b      	ldrh	r3, [r3, #4]
 8003702:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8003706:	b29a      	uxth	r2, r3
 8003708:	89fb      	ldrh	r3, [r7, #14]
 800370a:	ea42 0303 	orr.w	r3, r2, r3
 800370e:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
 8003710:	89bb      	ldrh	r3, [r7, #12]
 8003712:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003716:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
 8003718:	89bb      	ldrh	r3, [r7, #12]
 800371a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800371e:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	8a1b      	ldrh	r3, [r3, #16]
 8003724:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003728:	b29a      	uxth	r2, r3
 800372a:	89bb      	ldrh	r3, [r7, #12]
 800372c:	ea42 0303 	orr.w	r3, r2, r3
 8003730:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	8a5b      	ldrh	r3, [r3, #18]
 8003736:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800373a:	b29a      	uxth	r2, r3
 800373c:	89bb      	ldrh	r3, [r7, #12]
 800373e:	ea42 0303 	orr.w	r3, r2, r3
 8003742:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	89ba      	ldrh	r2, [r7, #12]
 8003748:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	897a      	ldrh	r2, [r7, #10]
 800374e:	831a      	strh	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	689a      	ldr	r2, [r3, #8]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	89fa      	ldrh	r2, [r7, #14]
 800375c:	841a      	strh	r2, [r3, #32]
}
 800375e:	f107 0714 	add.w	r7, r7, #20
 8003762:	46bd      	mov	sp, r7
 8003764:	bc80      	pop	{r7}
 8003766:	4770      	bx	lr
 8003768:	40010000 	.word	0x40010000
 800376c:	40010400 	.word	0x40010400

08003770 <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8003770:	b480      	push	{r7}
 8003772:	b085      	sub	sp, #20
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800377a:	f04f 0300 	mov.w	r3, #0
 800377e:	817b      	strh	r3, [r7, #10]
 8003780:	f04f 0300 	mov.w	r3, #0
 8003784:	81fb      	strh	r3, [r7, #14]
 8003786:	f04f 0300 	mov.w	r3, #0
 800378a:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	8c1b      	ldrh	r3, [r3, #32]
 8003790:	b29b      	uxth	r3, r3
 8003792:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003796:	b29a      	uxth	r2, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	8c1b      	ldrh	r3, [r3, #32]
 80037a0:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	889b      	ldrh	r3, [r3, #4]
 80037a6:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	8b9b      	ldrh	r3, [r3, #28]
 80037ac:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
 80037ae:	897b      	ldrh	r3, [r7, #10]
 80037b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037b4:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 80037b6:	897b      	ldrh	r3, [r7, #10]
 80037b8:	f023 0303 	bic.w	r3, r3, #3
 80037bc:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	881a      	ldrh	r2, [r3, #0]
 80037c2:	897b      	ldrh	r3, [r7, #10]
 80037c4:	ea42 0303 	orr.w	r3, r2, r3
 80037c8:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 80037ca:	89fb      	ldrh	r3, [r7, #14]
 80037cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80037d0:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	899b      	ldrh	r3, [r3, #12]
 80037d6:	ea4f 2303 	mov.w	r3, r3, lsl #8
 80037da:	b29a      	uxth	r2, r3
 80037dc:	89fb      	ldrh	r3, [r7, #14]
 80037de:	ea42 0303 	orr.w	r3, r2, r3
 80037e2:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	885b      	ldrh	r3, [r3, #2]
 80037e8:	ea4f 2303 	mov.w	r3, r3, lsl #8
 80037ec:	b29a      	uxth	r2, r3
 80037ee:	89fb      	ldrh	r3, [r7, #14]
 80037f0:	ea42 0303 	orr.w	r3, r2, r3
 80037f4:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	4b26      	ldr	r3, [pc, #152]	; (8003894 <TIM_OC3Init+0x124>)
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d003      	beq.n	8003806 <TIM_OC3Init+0x96>
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	4b25      	ldr	r3, [pc, #148]	; (8003898 <TIM_OC3Init+0x128>)
 8003802:	429a      	cmp	r2, r3
 8003804:	d133      	bne.n	800386e <TIM_OC3Init+0xfe>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 8003806:	89fb      	ldrh	r3, [r7, #14]
 8003808:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800380c:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	89db      	ldrh	r3, [r3, #14]
 8003812:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8003816:	b29a      	uxth	r2, r3
 8003818:	89fb      	ldrh	r3, [r7, #14]
 800381a:	ea42 0303 	orr.w	r3, r2, r3
 800381e:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 8003820:	89fb      	ldrh	r3, [r7, #14]
 8003822:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003826:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	889b      	ldrh	r3, [r3, #4]
 800382c:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8003830:	b29a      	uxth	r2, r3
 8003832:	89fb      	ldrh	r3, [r7, #14]
 8003834:	ea42 0303 	orr.w	r3, r2, r3
 8003838:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
 800383a:	89bb      	ldrh	r3, [r7, #12]
 800383c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003840:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 8003842:	89bb      	ldrh	r3, [r7, #12]
 8003844:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003848:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	8a1b      	ldrh	r3, [r3, #16]
 800384e:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8003852:	b29a      	uxth	r2, r3
 8003854:	89bb      	ldrh	r3, [r7, #12]
 8003856:	ea42 0303 	orr.w	r3, r2, r3
 800385a:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	8a5b      	ldrh	r3, [r3, #18]
 8003860:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8003864:	b29a      	uxth	r2, r3
 8003866:	89bb      	ldrh	r3, [r7, #12]
 8003868:	ea42 0303 	orr.w	r3, r2, r3
 800386c:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	89ba      	ldrh	r2, [r7, #12]
 8003872:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	897a      	ldrh	r2, [r7, #10]
 8003878:	839a      	strh	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	689a      	ldr	r2, [r3, #8]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	89fa      	ldrh	r2, [r7, #14]
 8003886:	841a      	strh	r2, [r3, #32]
}
 8003888:	f107 0714 	add.w	r7, r7, #20
 800388c:	46bd      	mov	sp, r7
 800388e:	bc80      	pop	{r7}
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	40010000 	.word	0x40010000
 8003898:	40010400 	.word	0x40010400

0800389c <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800389c:	b480      	push	{r7}
 800389e:	b085      	sub	sp, #20
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 80038a6:	f04f 0300 	mov.w	r3, #0
 80038aa:	81bb      	strh	r3, [r7, #12]
 80038ac:	f04f 0300 	mov.w	r3, #0
 80038b0:	817b      	strh	r3, [r7, #10]
 80038b2:	f04f 0300 	mov.w	r3, #0
 80038b6:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	8c1b      	ldrh	r3, [r3, #32]
 80038bc:	b29b      	uxth	r3, r3
 80038be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80038c2:	b29a      	uxth	r2, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	8c1b      	ldrh	r3, [r3, #32]
 80038cc:	817b      	strh	r3, [r7, #10]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	889b      	ldrh	r3, [r3, #4]
 80038d2:	81fb      	strh	r3, [r7, #14]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	8b9b      	ldrh	r3, [r3, #28]
 80038d8:	81bb      	strh	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
 80038da:	89bb      	ldrh	r3, [r7, #12]
 80038dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038e0:	81bb      	strh	r3, [r7, #12]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 80038e2:	89bb      	ldrh	r3, [r7, #12]
 80038e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038e8:	81bb      	strh	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	881b      	ldrh	r3, [r3, #0]
 80038ee:	ea4f 2303 	mov.w	r3, r3, lsl #8
 80038f2:	b29a      	uxth	r2, r3
 80038f4:	89bb      	ldrh	r3, [r7, #12]
 80038f6:	ea42 0303 	orr.w	r3, r2, r3
 80038fa:	81bb      	strh	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 80038fc:	897b      	ldrh	r3, [r7, #10]
 80038fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003902:	817b      	strh	r3, [r7, #10]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	899b      	ldrh	r3, [r3, #12]
 8003908:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800390c:	b29a      	uxth	r2, r3
 800390e:	897b      	ldrh	r3, [r7, #10]
 8003910:	ea42 0303 	orr.w	r3, r2, r3
 8003914:	817b      	strh	r3, [r7, #10]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	885b      	ldrh	r3, [r3, #2]
 800391a:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800391e:	b29a      	uxth	r2, r3
 8003920:	897b      	ldrh	r3, [r7, #10]
 8003922:	ea42 0303 	orr.w	r3, r2, r3
 8003926:	817b      	strh	r3, [r7, #10]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	4b13      	ldr	r3, [pc, #76]	; (8003978 <TIM_OC4Init+0xdc>)
 800392c:	429a      	cmp	r2, r3
 800392e:	d003      	beq.n	8003938 <TIM_OC4Init+0x9c>
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	4b12      	ldr	r3, [pc, #72]	; (800397c <TIM_OC4Init+0xe0>)
 8003934:	429a      	cmp	r2, r3
 8003936:	d10c      	bne.n	8003952 <TIM_OC4Init+0xb6>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
 8003938:	89fb      	ldrh	r3, [r7, #14]
 800393a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800393e:	81fb      	strh	r3, [r7, #14]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	8a1b      	ldrh	r3, [r3, #16]
 8003944:	ea4f 1383 	mov.w	r3, r3, lsl #6
 8003948:	b29a      	uxth	r2, r3
 800394a:	89fb      	ldrh	r3, [r7, #14]
 800394c:	ea42 0303 	orr.w	r3, r2, r3
 8003950:	81fb      	strh	r3, [r7, #14]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	89fa      	ldrh	r2, [r7, #14]
 8003956:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	89ba      	ldrh	r2, [r7, #12]
 800395c:	839a      	strh	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	689a      	ldr	r2, [r3, #8]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	897a      	ldrh	r2, [r7, #10]
 800396a:	841a      	strh	r2, [r3, #32]
}
 800396c:	f107 0714 	add.w	r7, r7, #20
 8003970:	46bd      	mov	sp, r7
 8003972:	bc80      	pop	{r7}
 8003974:	4770      	bx	lr
 8003976:	bf00      	nop
 8003978:	40010000 	.word	0x40010000
 800397c:	40010400 	.word	0x40010400

08003980 <TIM_OC1PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8003980:	b480      	push	{r7}
 8003982:	b085      	sub	sp, #20
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	460b      	mov	r3, r1
 800398a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 800398c:	f04f 0300 	mov.w	r3, #0
 8003990:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	8b1b      	ldrh	r3, [r3, #24]
 8003996:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC1PE);
 8003998:	89fb      	ldrh	r3, [r7, #14]
 800399a:	f023 0308 	bic.w	r3, r3, #8
 800399e:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 80039a0:	89fa      	ldrh	r2, [r7, #14]
 80039a2:	887b      	ldrh	r3, [r7, #2]
 80039a4:	ea42 0303 	orr.w	r3, r2, r3
 80039a8:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	89fa      	ldrh	r2, [r7, #14]
 80039ae:	831a      	strh	r2, [r3, #24]
}
 80039b0:	f107 0714 	add.w	r7, r7, #20
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bc80      	pop	{r7}
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop

080039bc <TIM_OC2PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 80039bc:	b480      	push	{r7}
 80039be:	b085      	sub	sp, #20
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	460b      	mov	r3, r1
 80039c6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 80039c8:	f04f 0300 	mov.w	r3, #0
 80039cc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	8b1b      	ldrh	r3, [r3, #24]
 80039d2:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2PE);
 80039d4:	89fb      	ldrh	r3, [r7, #14]
 80039d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80039da:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 80039dc:	887b      	ldrh	r3, [r7, #2]
 80039de:	ea4f 2303 	mov.w	r3, r3, lsl #8
 80039e2:	b29a      	uxth	r2, r3
 80039e4:	89fb      	ldrh	r3, [r7, #14]
 80039e6:	ea42 0303 	orr.w	r3, r2, r3
 80039ea:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	89fa      	ldrh	r2, [r7, #14]
 80039f0:	831a      	strh	r2, [r3, #24]
}
 80039f2:	f107 0714 	add.w	r7, r7, #20
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bc80      	pop	{r7}
 80039fa:	4770      	bx	lr

080039fc <TIM_OC3PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b085      	sub	sp, #20
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	460b      	mov	r3, r1
 8003a06:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8003a08:	f04f 0300 	mov.w	r3, #0
 8003a0c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	8b9b      	ldrh	r3, [r3, #28]
 8003a12:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
 8003a14:	89fb      	ldrh	r3, [r7, #14]
 8003a16:	f023 0308 	bic.w	r3, r3, #8
 8003a1a:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 8003a1c:	89fa      	ldrh	r2, [r7, #14]
 8003a1e:	887b      	ldrh	r3, [r7, #2]
 8003a20:	ea42 0303 	orr.w	r3, r2, r3
 8003a24:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	89fa      	ldrh	r2, [r7, #14]
 8003a2a:	839a      	strh	r2, [r3, #28]
}
 8003a2c:	f107 0714 	add.w	r7, r7, #20
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bc80      	pop	{r7}
 8003a34:	4770      	bx	lr
 8003a36:	bf00      	nop

08003a38 <TIM_OC4PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b085      	sub	sp, #20
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	460b      	mov	r3, r1
 8003a42:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8003a44:	f04f 0300 	mov.w	r3, #0
 8003a48:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	8b9b      	ldrh	r3, [r3, #28]
 8003a4e:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4PE);
 8003a50:	89fb      	ldrh	r3, [r7, #14]
 8003a52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a56:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 8003a58:	887b      	ldrh	r3, [r7, #2]
 8003a5a:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8003a5e:	b29a      	uxth	r2, r3
 8003a60:	89fb      	ldrh	r3, [r7, #14]
 8003a62:	ea42 0303 	orr.w	r3, r2, r3
 8003a66:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	89fa      	ldrh	r2, [r7, #14]
 8003a6c:	839a      	strh	r2, [r3, #28]
}
 8003a6e:	f107 0714 	add.w	r7, r7, #20
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bc80      	pop	{r7}
 8003a76:	4770      	bx	lr

08003a78 <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003a78:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003a7a:	e003      	b.n	8003a84 <LoopCopyDataInit>

08003a7c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003a7c:	4b0a      	ldr	r3, [pc, #40]	; (8003aa8 <LoopFillZerobss+0x10>)
  ldr  r3, [r3, r1]
 8003a7e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003a80:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003a82:	3104      	adds	r1, #4

08003a84 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003a84:	4809      	ldr	r0, [pc, #36]	; (8003aac <LoopFillZerobss+0x14>)
  ldr  r3, =_edata
 8003a86:	4b0a      	ldr	r3, [pc, #40]	; (8003ab0 <LoopFillZerobss+0x18>)
  adds  r2, r0, r1
 8003a88:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003a8a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003a8c:	d3f6      	bcc.n	8003a7c <CopyDataInit>
  ldr  r2, =_sbss
 8003a8e:	4a09      	ldr	r2, [pc, #36]	; (8003ab4 <LoopFillZerobss+0x1c>)
  b  LoopFillZerobss
 8003a90:	e002      	b.n	8003a98 <LoopFillZerobss>

08003a92 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003a92:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003a94:	f842 3b04 	str.w	r3, [r2], #4

08003a98 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003a98:	4b07      	ldr	r3, [pc, #28]	; (8003ab8 <LoopFillZerobss+0x20>)
  cmp  r2, r3
 8003a9a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003a9c:	d3f9      	bcc.n	8003a92 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003a9e:	f7fc fd33 	bl	8000508 <SystemInit>
/* Call the application's entry point.*/
  bl  main
 8003aa2:	f7fc fb71 	bl	8000188 <main>
  bx  lr    
 8003aa6:	4770      	bx	lr
 8003aa8:	08003ad0 	.word	0x08003ad0
 8003aac:	20000000 	.word	0x20000000
 8003ab0:	20000058 	.word	0x20000058
 8003ab4:	20000058 	.word	0x20000058
 8003ab8:	200016f0 	.word	0x200016f0

08003abc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003abc:	e7fe      	b.n	8003abc <ADC_IRQHandler>
 8003abe:	0000      	movs	r0, r0
 8003ac0:	6c6c6548 	.word	0x6c6c6548
 8003ac4:	6f77206f 	.word	0x6f77206f
 8003ac8:	0a646c72 	.word	0x0a646c72
 8003acc:	00000000 	.word	0x00000000
