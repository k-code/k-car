   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 18, 4
  12              		.thumb
  13              		.file	"stm32f4xx_rtc.c"
  23              	.Ltext0:
  24              		.file 1 "../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c"
 24606              		.align	2
 24607              		.global	RTC_DeInit
 24608              		.thumb
 24609              		.thumb_func
 24611              	RTC_DeInit:
 24612              	.LFB110:
   1:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
   2:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ******************************************************************************
   3:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @file    stm32f4xx_rtc.c
   4:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @author  MCD Application Team
   5:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @version V1.0.0
   6:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @date    30-September-2011
   7:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          functionalities of the Real-Time Clock (RTC) peripheral:
   9:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Initialization
  10:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Calendar (Time and Date) configuration
  11:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Alarms (Alarm A and Alarm B) configuration
  12:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - WakeUp Timer configuration
  13:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Daylight Saving configuration
  14:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Output pin Configuration
  15:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Coarse digital Calibration configuration
  16:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Smooth digital Calibration configuration
  17:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - TimeStamp configuration
  18:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Tampers configuration
  19:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Backup Data Registers configuration
  20:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Shift control synchronisation    
  21:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - RTC Tamper and TimeStamp Pins Selection and Output Type Config configuration
  22:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Interrupts and flags management
  23:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  24:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *  @verbatim
  25:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  26:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  27:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                               Backup Domain Operating Condition
  28:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  29:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          The real-time clock (RTC), the RTC backup registers, and the backup 
  30:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          SRAM (BKP SRAM) can be powered from the VBAT voltage when the main 
  31:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          VDD supply is powered off.
  32:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          To retain the content of the RTC backup registers, backup SRAM, 
  33:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          and supply the RTC when VDD is turned off, VBAT pin can be connected 
  34:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          to an optional standby voltage supplied by a battery or by another 
  35:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          source.
  36:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  37:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          To allow the RTC to operate even when the main digital supply (VDD) 
  38:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          is turned off, the VBAT pin powers the following blocks:
  39:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            1 - The RTC
  40:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            2 - The LSE oscillator
  41:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            3 - The backup SRAM when the low power backup regulator is enabled
  42:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            4 - PC13 to PC15 I/Os, plus PI8 I/O (when available)
  43:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  44:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          When the backup domain is supplied by VDD (analog switch connected 
  45:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          to VDD), the following functions are available:
  46:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            1 - PC14 and PC15 can be used as either GPIO or LSE pins
  47:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            2 - PC13 can be used as a GPIO or as the RTC_AF1 pin
  48:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            3 - PI8 can be used as a GPIO or as the RTC_AF2 pin
  49:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  50:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          When the backup domain is supplied by VBAT (analog switch connected 
  51:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          to VBAT because VDD is not present), the following functions are available:
  52:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            1 - PC14 and PC15 can be used as LSE pins only
  53:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            2 - PC13 can be used as the RTC_AF1 pin 
  54:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            3 - PI8 can be used as the RTC_AF2 pin
  55:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  56:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  57:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    Backup Domain Reset
  58:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  59:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          The backup domain reset sets all RTC registers and the RCC_BDCR 
  60:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          register to their reset values. The BKPSRAM is not affected by this
  61:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          reset. The only way of resetting the BKPSRAM is through the Flash 
  62:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          interface by requesting a protection level change from 1 to 0.
  63:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          A backup domain reset is generated when one of the following events
  64:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          occurs:
  65:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            1 - Software reset, triggered by setting the BDRST bit in the 
  66:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                RCC Backup domain control register (RCC_BDCR). You can use the
  67:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                RCC_BackupResetCmd().
  68:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            2 - VDD or VBAT power on, if both supplies have previously been
  69:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                powered off.
  70:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  71:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  72:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                   Backup Domain Access
  73:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  74:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          After reset, the backup domain (RTC registers, RTC backup data 
  75:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          registers and backup SRAM) is protected against possible unwanted 
  76:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          write accesses. 
  77:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          To enable access to the RTC Domain and RTC registers, proceed as follows:
  78:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the Power Controller (PWR) APB1 interface clock using the
  79:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RCC_APB1PeriphClockCmd() function.
  80:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable access to RTC domain using the PWR_BackupAccessCmd() function.
  81:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Select the RTC clock source using the RCC_RTCCLKConfig() function.
  82:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable RTC Clock using the RCC_RTCCLKCmd() function.
  83:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  84:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  85:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                   RTC Driver: how to use it
  86:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  87:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the RTC domain access (see description in the section above)
  88:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC Prescaler (Asynchronous and Synchronous) and
  89:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC hour format using the RTC_Init() function.
  90:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  91:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Time and Date configuration
  92:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===========================
  93:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To configure the RTC Calendar (Time and Date) use the RTC_SetTime()
  94:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              and RTC_SetDate() functions.
  95:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC Calendar, use the RTC_GetTime() and RTC_GetDate()
  96:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              functions.
  97:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Use the RTC_DayLightSavingConfig() function to add or sub one
  98:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              hour to the RTC Calendar.    
  99:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 100:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Alarm configuration
 101:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================
 102:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To configure the RTC Alarm use the RTC_SetAlarm() function.
 103:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the selected RTC Alarm using the RTC_AlarmCmd() function
 104:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC Alarm, use the RTC_GetAlarm() function.
 105:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC alarm SubSecond, use the RTC_GetAlarmSubSecond() function.
 106:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 107:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          RTC Wakeup configuration
 108:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ========================
 109:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC Wakeup Clock source use the RTC_WakeUpClockConfig()
 110:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 111:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC WakeUp Counter using the RTC_SetWakeUpCounter() 
 112:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function  
 113:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the RTC WakeUp using the RTC_WakeUpCmd() function  
 114:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC WakeUp Counter register, use the RTC_GetWakeUpCounter() 
 115:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 116:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 117:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Outputs configuration
 118:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          =====================
 119:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          The RTC has 2 different outputs:
 120:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFO_ALARM: this output is used to manage the RTC Alarm A, Alarm B
 121:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              and WaKeUp signals.          
 122:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              To output the selected RTC signal on RTC_AF1 pin, use the 
 123:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_OutputConfig() function.                
 124:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFO_CALIB: this output is 512Hz signal or 1Hz .  
 125:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              To output the RTC Clock on RTC_AF1 pin, use the RTC_CalibOutputCmd()
 126:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 127:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 128:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Smooth digital Calibration configuration
 129:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          =================================    
 130:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC Original Digital Calibration Value and the corresponding
 131:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              calibration cycle period (32s,16s and 8s) using the RTC_SmoothCalibConfig() 
 132:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 133:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 134:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Coarse digital Calibration configuration
 135:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          =================================
 136:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC Coarse Calibration Value and the corresponding
 137:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              sign using the RTC_CoarseCalibConfig() function.
 138:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the RTC Coarse Calibration using the RTC_CoarseCalibCmd() 
 139:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function  
 140:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 141:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          TimeStamp configuration
 142:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          =======================
 143:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC_AF1 trigger and enables the RTC TimeStamp 
 144:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              using the RTC_TimeStampCmd() function.
 145:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC TimeStamp Time and Date register, use the 
 146:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_GetTimeStamp() function.
 147:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC TimeStamp SubSecond register, use the 
 148:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_GetTimeStampSubSecond() function.
 149:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - The TAMPER1 alternate function can be mapped either to RTC_AF1(PC13)
 150:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              or RTC_AF2 (PI8) depending on the value of TAMP1INSEL bit in 
 151:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_TAFCR register. You can use the  RTC_TamperPinSelection()
 152:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function to select the corresponding pin.     
 153:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 154:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Tamper configuration
 155:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ====================
 156:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the RTC Tamper using the RTC_TamperCmd() function.
 157:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *             - Configure the Tamper filter count using RTC_TamperFilterConfig()
 158:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function. 
 159:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC Tamper trigger Edge or Level according to the Tamper 
 160:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              filter (if equal to 0 Edge else Level) value using the RTC_TamperConfig() function
 161:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the Tamper sampling frequency using RTC_TamperSamplingFreqConfig()
 162:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 163:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the Tamper precharge or discharge duration using 
 164:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_TamperPinsPrechargeDuration() function.
 165:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the Tamper Pull-UP using RTC_TamperPullUpDisableCmd() function.
 166:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the Time stamp on Tamper detection event using  
 167:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_TSOnTamperDetecCmd() function.
 168:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - The TIMESTAMP alternate function can be mapped to either RTC_AF1 
 169:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              or RTC_AF2 depending on the value of the TSINSEL bit in the 
 170:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_TAFCR register. You can use the  RTC_TimeStampPinSelection()
 171:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function to select the corresponding pin. 
 172:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 173:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Backup Data Registers configuration
 174:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================
 175:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To write to the RTC Backup Data registers, use the RTC_WriteBackupRegister()
 176:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.  
 177:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC Backup Data registers, use the RTC_ReadBackupRegister()
 178:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 179:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * 
 180:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 181:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                  RTC and low power modes
 182:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 183:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           The MCU can be woken up from a low power mode by an RTC alternate 
 184:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           function.
 185:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           The RTC alternate functions are the RTC alarms (Alarm A and Alarm B), 
 186:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           RTC wakeup, RTC tamper event detection and RTC time stamp event detection.
 187:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           These RTC alternate functions can wake up the system from the Stop 
 188:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           and Standby lowpower modes.
 189:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           The system can also wake up from low power modes without depending 
 190:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           on an external interrupt (Auto-wakeup mode), by using the RTC alarm 
 191:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           or the RTC wakeup events.
 192:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           The RTC provides a programmable time base for waking up from the 
 193:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           Stop or Standby mode at regular intervals.
 194:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           Wakeup from STOP and Standby modes is possible only when the RTC 
 195:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           clock source is LSE or LSI.
 196:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 197:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 198:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                            Selection of RTC_AF1 alternate functions
 199:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 200:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          The RTC_AF1 pin (PC13) can be used for the following purposes:
 201:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFO_ALARM output
 202:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFO_CALIB output
 203:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFI_TAMPER
 204:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFI_TIMESTAMP
 205:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 206:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * +----------------------------------------------------------------------------------------------
 207:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |     Pin         |AFO_ALARM |AFO_CALIB |AFI_TAMPER |AFI_TIMESTAMP | TAMP1INSEL |   TSINSEL    
 208:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  configuration  | ENABLED  | ENABLED  |  ENABLED  |   ENABLED    |TAMPER1 pin |TIMESTAMP pin 
 209:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  and function   |          |          |           |              | selection  |  selection   
 210:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 211:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   Alarm out     |          |          |           |              |    Don't   |     Don't    
 212:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   output OD     |     1    |Don't care|Don't care | Don't care   |    care    |     care     
 213:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 214:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   Alarm out     |          |          |           |              |    Don't   |     Don't    
 215:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   output PP     |     1    |Don't care|Don't care | Don't care   |    care    |     care     
 216:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 217:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * | Calibration out |          |          |           |              |    Don't   |     Don't    
 218:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   output PP     |     0    |    1     |Don't care | Don't care   |    care    |     care     
 219:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 220:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TAMPER input   |          |          |           |              |            |     Don't    
 221:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   floating      |     0    |    0     |     1     |      0       |      0     |     care     
 222:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 223:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TIMESTAMP and  |          |          |           |              |            |              
 224:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TAMPER input   |     0    |    0     |     1     |      1       |      0     |      0       
 225:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   floating      |          |          |           |              |            |              
 226:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 227:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * | TIMESTAMP input |          |          |           |              |    Don't   |              
 228:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |    floating     |     0    |    0     |     0     |      1       |    care    |      0       
 229:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 230:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  Standard GPIO  |     0    |    0     |     0     |      0       | Don't care |  Don't care  
 231:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * +----------------------------------------------------------------------------------------------
 232:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 233:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 234:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 235:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                            Selection of RTC_AF2 alternate functions
 236:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 237:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          The RTC_AF2 pin (PI8) can be used for the following purposes:
 238:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFI_TAMPER
 239:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFI_TIMESTAMP
 240:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 241:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * +---------------------------------------------------------------------------------------+
 242:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |     Pin         |AFI_TAMPER |AFI_TIMESTAMP | TAMP1INSEL |   TSINSEL    |ALARMOUTTYPE  |
 243:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  configuration  |  ENABLED  |   ENABLED    |TAMPER1 pin |TIMESTAMP pin |  AFO_ALARM   |
 244:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  and function   |           |              | selection  |  selection   |Configuration |
 245:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|-----------|--------------|------------|--------------|--------------|
 246:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TAMPER input   |           |              |            |     Don't    |              |
 247:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   floating      |     1     |      0       |      1     |     care     |  Don't care  |
 248:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|-----------|--------------|------------|--------------|--------------|
 249:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TIMESTAMP and  |           |              |            |              |              |
 250:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TAMPER input   |     1     |      1       |      1     |      1       |  Don't care  |
 251:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   floating      |           |              |            |              |              |
 252:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|-----------|--------------|------------|--------------|--------------|
 253:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * | TIMESTAMP input |           |              |    Don't   |              |              |
 254:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |    floating     |     0     |      1       |    care    |      1       |  Don't care  |
 255:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|-----------|--------------|------------|--------------|--------------|
 256:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  Standard GPIO  |     0     |      0       | Don't care |  Don't care  |  Don't care  |
 257:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * +---------------------------------------------------------------------------------------+
 258:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * 
 259:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 260:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *  @endverbatim
 261:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 262:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ******************************************************************************
 263:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @attention
 264:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 265:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
 266:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
 267:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
 268:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
 269:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
 270:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
 271:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 272:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
 273:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ******************************************************************************
 274:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */ 
 275:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 276:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Includes ------------------------------------------------------------------*/
 277:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #include "stm32f4xx_rtc.h"
 278:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #include "stm32f4xx_rcc.h"
 279:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 280:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
 281:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
 282:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 283:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 284:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC 
 285:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief RTC driver modules
 286:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
 287:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 288:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 289:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private typedef -----------------------------------------------------------*/
 290:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private define ------------------------------------------------------------*/
 291:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 292:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Masks Definition */
 293:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RTC_TR_RESERVED_MASK    ((uint32_t)0x007F7F7F)
 294:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RTC_DR_RESERVED_MASK    ((uint32_t)0x00FFFF3F) 
 295:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RTC_INIT_MASK           ((uint32_t)0xFFFFFFFF)  
 296:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RTC_RSF_MASK            ((uint32_t)0xFFFFFF5F)
 297:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RTC_FLAGS_MASK          ((uint32_t)(RTC_FLAG_TSOVF | RTC_FLAG_TSF | RTC_FLAG_WUTF | \
 298:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                             RTC_FLAG_ALRBF | RTC_FLAG_ALRAF | RTC_FLAG_INITF | \
 299:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                             RTC_FLAG_RSF | RTC_FLAG_INITS | RTC_FLAG_WUTWF | \
 300:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                             RTC_FLAG_ALRBWF | RTC_FLAG_ALRAWF | RTC_FLAG_TAMP1F ))
 301:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 302:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define INITMODE_TIMEOUT         ((uint32_t) 0x00010000)
 303:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define SYNCHRO_TIMEOUT          ((uint32_t) 0x00020000)
 304:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RECALPF_TIMEOUT          ((uint32_t) 0x00020000)
 305:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define SHPF_TIMEOUT             ((uint32_t) 0x00001000)
 306:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 307:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private macro -------------------------------------------------------------*/
 308:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private variables ---------------------------------------------------------*/
 309:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private function prototypes -----------------------------------------------*/
 310:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** static uint8_t RTC_ByteToBcd2(uint8_t Value);
 311:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** static uint8_t RTC_Bcd2ToByte(uint8_t Value);
 312:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 313:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private functions ---------------------------------------------------------*/
 314:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 315:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Private_Functions
 316:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
 317:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */ 
 318:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 319:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group1 Initialization and Configuration functions
 320:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Initialization and Configuration functions 
 321:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
 322:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
 323:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
 324:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                  Initialization and Configuration functions
 325:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
 326:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 327:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to initialize and configure the RTC
 328:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   Prescaler (Synchronous and Asynchronous), RTC Hour format, disable RTC registers
 329:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   Write protection, enter and exit the RTC initialization mode, RTC registers
 330:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   synchronization check and reference clock detection enable.
 331:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 332:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   1. The RTC Prescaler is programmed to generate the RTC 1Hz time base. It is
 333:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      split into 2 programmable prescalers to minimize power consumption.
 334:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      - A 7-bit asynchronous prescaler and A 13-bit synchronous prescaler.
 335:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      - When both prescalers are used, it is recommended to configure the asynchronous
 336:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****        prescaler to a high value to minimize consumption.
 337:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 338:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   2. All RTC registers are Write protected. Writing to the RTC registers
 339:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      is enabled by writing a key into the Write Protection register, RTC_WPR.
 340:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 341:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   3. To Configure the RTC Calendar, user application should enter initialization
 342:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      mode. In this mode, the calendar counter is stopped and its value can be 
 343:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      updated. When the initialization sequence is complete, the calendar restarts 
 344:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      counting after 4 RTCCLK cycles.
 345:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 346:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   4. To read the calendar through the shadow registers after Calendar initialization,
 347:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      calendar update or after wakeup from low power modes the software must first 
 348:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      clear the RSF flag. The software must then wait until it is set again before 
 349:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      reading the calendar, which means that the calendar registers have been 
 350:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      correctly copied into the RTC_TR and RTC_DR shadow registers.
 351:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      The RTC_WaitForSynchro() function implements the above software sequence 
 352:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      (RSF clear and RSF check).
 353:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 354:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
 355:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
 356:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 357:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 358:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 359:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Deinitializes the RTC registers to their default reset values.
 360:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   This function doesn't reset the RTC Clock source and RTC Backup Data
 361:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         registers.       
 362:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
 363:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 364:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC registers are deinitialized
 365:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC registers are not deinitialized
 366:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 367:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_DeInit(void)
 368:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 24613              		.loc 1 368 0
 24614              		.cfi_startproc
 24615              		@ args = 0, pretend = 0, frame = 16
 24616              		@ frame_needed = 1, uses_anonymous_args = 0
 24617 0000 80B5     		push	{r7, lr}
 24618              	.LCFI0:
 24619              		.cfi_def_cfa_offset 8
 24620 0002 84B0     		sub	sp, sp, #16
 24621              	.LCFI1:
 24622              		.cfi_def_cfa_offset 24
 24623 0004 00AF     		add	r7, sp, #0
 24624              		.cfi_offset 14, -4
 24625              		.cfi_offset 7, -8
 24626              	.LCFI2:
 24627              		.cfi_def_cfa_register 7
 369:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t wutcounter = 0x00;
 24628              		.loc 1 369 0
 24629 0006 4FF00003 		mov	r3, #0
 24630 000a 7B60     		str	r3, [r7, #4]
 370:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t wutwfstatus = 0x00;
 24631              		.loc 1 370 0
 24632 000c 4FF00003 		mov	r3, #0
 24633 0010 BB60     		str	r3, [r7, #8]
 371:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 24634              		.loc 1 371 0
 24635 0012 4FF00003 		mov	r3, #0
 24636 0016 FB73     		strb	r3, [r7, #15]
 372:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 373:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 374:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 24637              		.loc 1 374 0
 24638 0018 374B     		ldr	r3, .L8
 24639 001a 4FF0CA02 		mov	r2, #202
 24640 001e 5A62     		str	r2, [r3, #36]
 375:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 24641              		.loc 1 375 0
 24642 0020 354B     		ldr	r3, .L8
 24643 0022 4FF05302 		mov	r2, #83
 24644 0026 5A62     		str	r2, [r3, #36]
 376:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 377:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 378:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 24645              		.loc 1 378 0
 24646 0028 FFF7FEFF 		bl	RTC_EnterInitMode
 24647 002c 0346     		mov	r3, r0
 24648 002e 002B     		cmp	r3, #0
 24649 0030 03D1     		bne	.L2
 379:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 380:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 24650              		.loc 1 380 0
 24651 0032 4FF00003 		mov	r3, #0
 24652 0036 FB73     		strb	r3, [r7, #15]
 24653 0038 54E0     		b	.L3
 24654              	.L2:
 381:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
 382:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 383:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 384:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Reset TR, DR and CR registers */
 385:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TR = (uint32_t)0x00000000;
 24655              		.loc 1 385 0
 24656 003a 2F4B     		ldr	r3, .L8
 24657 003c 4FF00002 		mov	r2, #0
 24658 0040 1A60     		str	r2, [r3, #0]
 386:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->DR = (uint32_t)0x00002101;
 24659              		.loc 1 386 0
 24660 0042 2D4B     		ldr	r3, .L8
 24661 0044 42F20112 		movw	r2, #8449
 24662 0048 5A60     		str	r2, [r3, #4]
 387:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Reset All CR bits except CR[2:0] */
 388:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)0x00000007;
 24663              		.loc 1 388 0
 24664 004a 2B4B     		ldr	r3, .L8
 24665 004c 2A4A     		ldr	r2, .L8
 24666 004e 9268     		ldr	r2, [r2, #8]
 24667 0050 02F00702 		and	r2, r2, #7
 24668 0054 9A60     		str	r2, [r3, #8]
 24669              	.L5:
 389:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 390:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
 391:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     do
 392:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 393:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
 24670              		.loc 1 393 0 discriminator 1
 24671 0056 284B     		ldr	r3, .L8
 24672 0058 DB68     		ldr	r3, [r3, #12]
 24673 005a 03F00403 		and	r3, r3, #4
 24674 005e BB60     		str	r3, [r7, #8]
 394:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       wutcounter++;  
 24675              		.loc 1 394 0 discriminator 1
 24676 0060 7B68     		ldr	r3, [r7, #4]
 24677 0062 03F10103 		add	r3, r3, #1
 24678 0066 7B60     		str	r3, [r7, #4]
 395:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 24679              		.loc 1 395 0 discriminator 1
 24680 0068 7B68     		ldr	r3, [r7, #4]
 24681 006a B3F5803F 		cmp	r3, #65536
 24682 006e 02D0     		beq	.L4
 24683 0070 BB68     		ldr	r3, [r7, #8]
 24684 0072 002B     		cmp	r3, #0
 24685 0074 EFD0     		beq	.L5
 24686              	.L4:
 396:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 397:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
 24687              		.loc 1 397 0
 24688 0076 204B     		ldr	r3, .L8
 24689 0078 DB68     		ldr	r3, [r3, #12]
 24690 007a 03F00403 		and	r3, r3, #4
 24691 007e 002B     		cmp	r3, #0
 24692 0080 03D1     		bne	.L6
 398:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 399:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 24693              		.loc 1 399 0
 24694 0082 4FF00003 		mov	r3, #0
 24695 0086 FB73     		strb	r3, [r7, #15]
 24696 0088 2CE0     		b	.L3
 24697              	.L6:
 400:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 401:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 402:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 403:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Reset all RTC CR register bits */
 404:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR &= (uint32_t)0x00000000;
 24698              		.loc 1 404 0
 24699 008a 1B4B     		ldr	r3, .L8
 24700 008c 9B68     		ldr	r3, [r3, #8]
 24701 008e 1A4B     		ldr	r3, .L8
 24702 0090 4FF00002 		mov	r2, #0
 24703 0094 9A60     		str	r2, [r3, #8]
 405:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->WUTR = (uint32_t)0x0000FFFF;
 24704              		.loc 1 405 0
 24705 0096 184B     		ldr	r3, .L8
 24706 0098 4FF6FF72 		movw	r2, #65535
 24707 009c 5A61     		str	r2, [r3, #20]
 406:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->PRER = (uint32_t)0x007F00FF;
 24708              		.loc 1 406 0
 24709 009e 164B     		ldr	r3, .L8
 24710 00a0 164A     		ldr	r2, .L8+4
 24711 00a2 1A61     		str	r2, [r3, #16]
 407:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CALIBR = (uint32_t)0x00000000;
 24712              		.loc 1 407 0
 24713 00a4 144B     		ldr	r3, .L8
 24714 00a6 4FF00002 		mov	r2, #0
 24715 00aa 9A61     		str	r2, [r3, #24]
 408:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->ALRMAR = (uint32_t)0x00000000;        
 24716              		.loc 1 408 0
 24717 00ac 124B     		ldr	r3, .L8
 24718 00ae 4FF00002 		mov	r2, #0
 24719 00b2 DA61     		str	r2, [r3, #28]
 409:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->ALRMBR = (uint32_t)0x00000000;
 24720              		.loc 1 409 0
 24721 00b4 104B     		ldr	r3, .L8
 24722 00b6 4FF00002 		mov	r2, #0
 24723 00ba 1A62     		str	r2, [r3, #32]
 410:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       
 411:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Reset ISR register and exit initialization mode */
 412:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->ISR = (uint32_t)0x00000000;
 24724              		.loc 1 412 0
 24725 00bc 0E4B     		ldr	r3, .L8
 24726 00be 4FF00002 		mov	r2, #0
 24727 00c2 DA60     		str	r2, [r3, #12]
 413:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       
 414:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Reset Tamper and alternate functions configuration register */
 415:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->TAFCR = 0x00000000;
 24728              		.loc 1 415 0
 24729 00c4 0C4B     		ldr	r3, .L8
 24730 00c6 4FF00002 		mov	r2, #0
 24731 00ca 1A64     		str	r2, [r3, #64]
 416:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 417:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       if(RTC_WaitForSynchro() == ERROR)
 24732              		.loc 1 417 0
 24733 00cc FFF7FEFF 		bl	RTC_WaitForSynchro
 24734 00d0 0346     		mov	r3, r0
 24735 00d2 002B     		cmp	r3, #0
 24736 00d4 03D1     		bne	.L7
 418:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       {
 419:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****         status = ERROR;
 24737              		.loc 1 419 0
 24738 00d6 4FF00003 		mov	r3, #0
 24739 00da FB73     		strb	r3, [r7, #15]
 24740 00dc 02E0     		b	.L3
 24741              	.L7:
 420:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       }
 421:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       else
 422:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       {
 423:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****         status = SUCCESS;      
 24742              		.loc 1 423 0
 24743 00de 4FF00103 		mov	r3, #1
 24744 00e2 FB73     		strb	r3, [r7, #15]
 24745              	.L3:
 424:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       }
 425:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 426:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 427:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 428:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 429:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;  
 24746              		.loc 1 429 0
 24747 00e4 044B     		ldr	r3, .L8
 24748 00e6 4FF0FF02 		mov	r2, #255
 24749 00ea 5A62     		str	r2, [r3, #36]
 430:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 431:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 24750              		.loc 1 431 0
 24751 00ec FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 432:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 24752              		.loc 1 432 0
 24753 00ee 1846     		mov	r0, r3
 24754 00f0 07F11007 		add	r7, r7, #16
 24755 00f4 BD46     		mov	sp, r7
 24756 00f6 80BD     		pop	{r7, pc}
 24757              	.L9:
 24758              		.align	2
 24759              	.L8:
 24760 00f8 00280040 		.word	1073752064
 24761 00fc FF007F00 		.word	8323327
 24762              		.cfi_endproc
 24763              	.LFE110:
 24765              		.section	.text.RTC_Init,"ax",%progbits
 24766              		.align	2
 24767              		.global	RTC_Init
 24768              		.thumb
 24769              		.thumb_func
 24771              	RTC_Init:
 24772              	.LFB111:
 433:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 434:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 435:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Initializes the RTC registers according to the specified parameters 
 436:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         in RTC_InitStruct.
 437:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_InitStruct: pointer to a RTC_InitTypeDef structure that contains 
 438:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         the configuration information for the RTC peripheral.
 439:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The RTC Prescaler register is write protected and can be written in 
 440:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         initialization mode only.  
 441:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 442:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC registers are initialized
 443:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC registers are not initialized  
 444:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 445:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_Init(RTC_InitTypeDef* RTC_InitStruct)
 446:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 24773              		.loc 1 446 0
 24774              		.cfi_startproc
 24775              		@ args = 0, pretend = 0, frame = 16
 24776              		@ frame_needed = 1, uses_anonymous_args = 0
 24777 0000 80B5     		push	{r7, lr}
 24778              	.LCFI3:
 24779              		.cfi_def_cfa_offset 8
 24780 0002 84B0     		sub	sp, sp, #16
 24781              	.LCFI4:
 24782              		.cfi_def_cfa_offset 24
 24783 0004 00AF     		add	r7, sp, #0
 24784              		.cfi_offset 14, -4
 24785              		.cfi_offset 7, -8
 24786              	.LCFI5:
 24787              		.cfi_def_cfa_register 7
 24788 0006 7860     		str	r0, [r7, #4]
 447:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 24789              		.loc 1 447 0
 24790 0008 4FF00003 		mov	r3, #0
 24791 000c FB73     		strb	r3, [r7, #15]
 448:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 449:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 450:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_HOUR_FORMAT(RTC_InitStruct->RTC_HourFormat));
 451:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ASYNCH_PREDIV(RTC_InitStruct->RTC_AsynchPrediv));
 452:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SYNCH_PREDIV(RTC_InitStruct->RTC_SynchPrediv));
 453:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 454:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 455:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 24792              		.loc 1 455 0
 24793 000e 1E4B     		ldr	r3, .L13
 24794 0010 4FF0CA02 		mov	r2, #202
 24795 0014 5A62     		str	r2, [r3, #36]
 456:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 24796              		.loc 1 456 0
 24797 0016 1C4B     		ldr	r3, .L13
 24798 0018 4FF05302 		mov	r2, #83
 24799 001c 5A62     		str	r2, [r3, #36]
 457:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 458:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 459:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 24800              		.loc 1 459 0
 24801 001e FFF7FEFF 		bl	RTC_EnterInitMode
 24802 0022 0346     		mov	r3, r0
 24803 0024 002B     		cmp	r3, #0
 24804 0026 03D1     		bne	.L11
 460:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 461:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 24805              		.loc 1 461 0
 24806 0028 4FF00003 		mov	r3, #0
 24807 002c FB73     		strb	r3, [r7, #15]
 24808 002e 20E0     		b	.L12
 24809              	.L11:
 462:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
 463:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 464:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 465:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Clear RTC CR FMT Bit */
 466:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= ((uint32_t)~(RTC_CR_FMT));
 24810              		.loc 1 466 0
 24811 0030 154B     		ldr	r3, .L13
 24812 0032 154A     		ldr	r2, .L13
 24813 0034 9268     		ldr	r2, [r2, #8]
 24814 0036 22F04002 		bic	r2, r2, #64
 24815 003a 9A60     		str	r2, [r3, #8]
 467:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set RTC_CR register */
 468:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |=  ((uint32_t)(RTC_InitStruct->RTC_HourFormat));
 24816              		.loc 1 468 0
 24817 003c 124B     		ldr	r3, .L13
 24818 003e 124A     		ldr	r2, .L13
 24819 0040 9168     		ldr	r1, [r2, #8]
 24820 0042 7A68     		ldr	r2, [r7, #4]
 24821 0044 1268     		ldr	r2, [r2, #0]
 24822 0046 41EA0202 		orr	r2, r1, r2
 24823 004a 9A60     		str	r2, [r3, #8]
 469:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 470:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the RTC PRER */
 471:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->PRER = (uint32_t)(RTC_InitStruct->RTC_SynchPrediv);
 24824              		.loc 1 471 0
 24825 004c 0E4B     		ldr	r3, .L13
 24826 004e 7A68     		ldr	r2, [r7, #4]
 24827 0050 9268     		ldr	r2, [r2, #8]
 24828 0052 1A61     		str	r2, [r3, #16]
 472:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->PRER |= (uint32_t)(RTC_InitStruct->RTC_AsynchPrediv << 16);
 24829              		.loc 1 472 0
 24830 0054 0C4B     		ldr	r3, .L13
 24831 0056 0C4A     		ldr	r2, .L13
 24832 0058 1169     		ldr	r1, [r2, #16]
 24833 005a 7A68     		ldr	r2, [r7, #4]
 24834 005c 5268     		ldr	r2, [r2, #4]
 24835 005e 4FEA0242 		lsl	r2, r2, #16
 24836 0062 41EA0202 		orr	r2, r1, r2
 24837 0066 1A61     		str	r2, [r3, #16]
 473:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 474:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 475:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
 24838              		.loc 1 475 0
 24839 0068 FFF7FEFF 		bl	RTC_ExitInitMode
 476:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 477:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;    
 24840              		.loc 1 477 0
 24841 006c 4FF00103 		mov	r3, #1
 24842 0070 FB73     		strb	r3, [r7, #15]
 24843              	.L12:
 478:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 479:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 480:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 24844              		.loc 1 480 0
 24845 0072 054B     		ldr	r3, .L13
 24846 0074 4FF0FF02 		mov	r2, #255
 24847 0078 5A62     		str	r2, [r3, #36]
 481:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 482:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 24848              		.loc 1 482 0
 24849 007a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 483:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 24850              		.loc 1 483 0
 24851 007c 1846     		mov	r0, r3
 24852 007e 07F11007 		add	r7, r7, #16
 24853 0082 BD46     		mov	sp, r7
 24854 0084 80BD     		pop	{r7, pc}
 24855              	.L14:
 24856 0086 00BF     		.align	2
 24857              	.L13:
 24858 0088 00280040 		.word	1073752064
 24859              		.cfi_endproc
 24860              	.LFE111:
 24862              		.section	.text.RTC_StructInit,"ax",%progbits
 24863              		.align	2
 24864              		.global	RTC_StructInit
 24865              		.thumb
 24866              		.thumb_func
 24868              	RTC_StructInit:
 24869              	.LFB112:
 484:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 485:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 486:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_InitStruct member with its default value.
 487:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_InitStruct: pointer to a RTC_InitTypeDef structure which will be 
 488:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         initialized.
 489:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 490:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 491:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_StructInit(RTC_InitTypeDef* RTC_InitStruct)
 492:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 24870              		.loc 1 492 0
 24871              		.cfi_startproc
 24872              		@ args = 0, pretend = 0, frame = 8
 24873              		@ frame_needed = 1, uses_anonymous_args = 0
 24874              		@ link register save eliminated.
 24875 0000 80B4     		push	{r7}
 24876              	.LCFI6:
 24877              		.cfi_def_cfa_offset 4
 24878 0002 83B0     		sub	sp, sp, #12
 24879              	.LCFI7:
 24880              		.cfi_def_cfa_offset 16
 24881 0004 00AF     		add	r7, sp, #0
 24882              		.cfi_offset 7, -4
 24883              	.LCFI8:
 24884              		.cfi_def_cfa_register 7
 24885 0006 7860     		str	r0, [r7, #4]
 493:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Initialize the RTC_HourFormat member */
 494:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_InitStruct->RTC_HourFormat = RTC_HourFormat_24;
 24886              		.loc 1 494 0
 24887 0008 7B68     		ldr	r3, [r7, #4]
 24888 000a 4FF00002 		mov	r2, #0
 24889 000e 1A60     		str	r2, [r3, #0]
 495:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 496:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Initialize the RTC_AsynchPrediv member */
 497:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_InitStruct->RTC_AsynchPrediv = (uint32_t)0x7F;
 24890              		.loc 1 497 0
 24891 0010 7B68     		ldr	r3, [r7, #4]
 24892 0012 4FF07F02 		mov	r2, #127
 24893 0016 5A60     		str	r2, [r3, #4]
 498:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 499:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Initialize the RTC_SynchPrediv member */
 500:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_InitStruct->RTC_SynchPrediv = (uint32_t)0xFF; 
 24894              		.loc 1 500 0
 24895 0018 7B68     		ldr	r3, [r7, #4]
 24896 001a 4FF0FF02 		mov	r2, #255
 24897 001e 9A60     		str	r2, [r3, #8]
 501:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 24898              		.loc 1 501 0
 24899 0020 07F10C07 		add	r7, r7, #12
 24900 0024 BD46     		mov	sp, r7
 24901 0026 80BC     		pop	{r7}
 24902 0028 7047     		bx	lr
 24903              		.cfi_endproc
 24904              	.LFE112:
 24906 002a 00BF     		.section	.text.RTC_WriteProtectionCmd,"ax",%progbits
 24907              		.align	2
 24908              		.global	RTC_WriteProtectionCmd
 24909              		.thumb
 24910              		.thumb_func
 24912              	RTC_WriteProtectionCmd:
 24913              	.LFB113:
 502:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 503:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 504:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the RTC registers write protection.
 505:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   All the RTC registers are write protected except for RTC_ISR[13:8], 
 506:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         RTC_TAFCR and RTC_BKPxR.
 507:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   Writing a wrong key reactivates the write protection.
 508:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The protection mechanism is not affected by system reset.  
 509:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the write protection.
 510:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
 511:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 512:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 513:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_WriteProtectionCmd(FunctionalState NewState)
 514:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 24914              		.loc 1 514 0
 24915              		.cfi_startproc
 24916              		@ args = 0, pretend = 0, frame = 8
 24917              		@ frame_needed = 1, uses_anonymous_args = 0
 24918              		@ link register save eliminated.
 24919 0000 80B4     		push	{r7}
 24920              	.LCFI9:
 24921              		.cfi_def_cfa_offset 4
 24922 0002 83B0     		sub	sp, sp, #12
 24923              	.LCFI10:
 24924              		.cfi_def_cfa_offset 16
 24925 0004 00AF     		add	r7, sp, #0
 24926              		.cfi_offset 7, -4
 24927              	.LCFI11:
 24928              		.cfi_def_cfa_register 7
 24929 0006 0346     		mov	r3, r0
 24930 0008 FB71     		strb	r3, [r7, #7]
 515:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 516:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 517:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 518:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 24931              		.loc 1 518 0
 24932 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 24933 000c 002B     		cmp	r3, #0
 24934 000e 04D0     		beq	.L17
 519:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 520:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Enable the write protection for RTC registers */
 521:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->WPR = 0xFF;   
 24935              		.loc 1 521 0
 24936 0010 084B     		ldr	r3, .L19
 24937 0012 4FF0FF02 		mov	r2, #255
 24938 0016 5A62     		str	r2, [r3, #36]
 24939 0018 07E0     		b	.L16
 24940              	.L17:
 522:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 523:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 524:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 525:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable the write protection for RTC registers */
 526:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->WPR = 0xCA;
 24941              		.loc 1 526 0
 24942 001a 064B     		ldr	r3, .L19
 24943 001c 4FF0CA02 		mov	r2, #202
 24944 0020 5A62     		str	r2, [r3, #36]
 527:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->WPR = 0x53;    
 24945              		.loc 1 527 0
 24946 0022 044B     		ldr	r3, .L19
 24947 0024 4FF05302 		mov	r2, #83
 24948 0028 5A62     		str	r2, [r3, #36]
 24949              	.L16:
 528:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 529:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 24950              		.loc 1 529 0
 24951 002a 07F10C07 		add	r7, r7, #12
 24952 002e BD46     		mov	sp, r7
 24953 0030 80BC     		pop	{r7}
 24954 0032 7047     		bx	lr
 24955              	.L20:
 24956              		.align	2
 24957              	.L19:
 24958 0034 00280040 		.word	1073752064
 24959              		.cfi_endproc
 24960              	.LFE113:
 24962              		.section	.text.RTC_EnterInitMode,"ax",%progbits
 24963              		.align	2
 24964              		.global	RTC_EnterInitMode
 24965              		.thumb
 24966              		.thumb_func
 24968              	RTC_EnterInitMode:
 24969              	.LFB114:
 530:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 531:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 532:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enters the RTC Initialization mode.
 533:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The RTC Initialization mode is write protected, use the 
 534:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         RTC_WriteProtectionCmd(DISABLE) before calling this function.    
 535:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
 536:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 537:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC is in Init mode
 538:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC is not in Init mode  
 539:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 540:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_EnterInitMode(void)
 541:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 24970              		.loc 1 541 0
 24971              		.cfi_startproc
 24972              		@ args = 0, pretend = 0, frame = 16
 24973              		@ frame_needed = 1, uses_anonymous_args = 0
 24974              		@ link register save eliminated.
 24975 0000 80B4     		push	{r7}
 24976              	.LCFI12:
 24977              		.cfi_def_cfa_offset 4
 24978 0002 85B0     		sub	sp, sp, #20
 24979              	.LCFI13:
 24980              		.cfi_def_cfa_offset 24
 24981 0004 00AF     		add	r7, sp, #0
 24982              		.cfi_offset 7, -4
 24983              	.LCFI14:
 24984              		.cfi_def_cfa_register 7
 542:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t initcounter = 0x00;
 24985              		.loc 1 542 0
 24986 0006 4FF00003 		mov	r3, #0
 24987 000a 7B60     		str	r3, [r7, #4]
 543:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 24988              		.loc 1 543 0
 24989 000c 4FF00003 		mov	r3, #0
 24990 0010 FB73     		strb	r3, [r7, #15]
 544:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t initstatus = 0x00;
 24991              		.loc 1 544 0
 24992 0012 4FF00003 		mov	r3, #0
 24993 0016 BB60     		str	r3, [r7, #8]
 545:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      
 546:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check if the Initialization mode is set */
 547:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 24994              		.loc 1 547 0
 24995 0018 184B     		ldr	r3, .L27
 24996 001a DB68     		ldr	r3, [r3, #12]
 24997 001c 03F04003 		and	r3, r3, #64
 24998 0020 002B     		cmp	r3, #0
 24999 0022 21D1     		bne	.L22
 548:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 549:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set the Initialization mode */
 550:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ISR = (uint32_t)RTC_INIT_MASK;
 25000              		.loc 1 550 0
 25001 0024 154B     		ldr	r3, .L27
 25002 0026 4FF0FF32 		mov	r2, #-1
 25003 002a DA60     		str	r2, [r3, #12]
 25004              	.L24:
 551:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 552:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Wait till RTC is in INIT state and if Time out is reached exit */
 553:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     do
 554:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 555:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       initstatus = RTC->ISR & RTC_ISR_INITF;
 25005              		.loc 1 555 0 discriminator 1
 25006 002c 134B     		ldr	r3, .L27
 25007 002e DB68     		ldr	r3, [r3, #12]
 25008 0030 03F04003 		and	r3, r3, #64
 25009 0034 BB60     		str	r3, [r7, #8]
 556:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       initcounter++;  
 25010              		.loc 1 556 0 discriminator 1
 25011 0036 7B68     		ldr	r3, [r7, #4]
 25012 0038 03F10103 		add	r3, r3, #1
 25013 003c 7B60     		str	r3, [r7, #4]
 557:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 25014              		.loc 1 557 0 discriminator 1
 25015 003e 7B68     		ldr	r3, [r7, #4]
 25016 0040 B3F5803F 		cmp	r3, #65536
 25017 0044 02D0     		beq	.L23
 25018 0046 BB68     		ldr	r3, [r7, #8]
 25019 0048 002B     		cmp	r3, #0
 25020 004a EFD0     		beq	.L24
 25021              	.L23:
 558:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 559:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_INITF) != RESET)
 25022              		.loc 1 559 0
 25023 004c 0B4B     		ldr	r3, .L27
 25024 004e DB68     		ldr	r3, [r3, #12]
 25025 0050 03F04003 		and	r3, r3, #64
 25026 0054 002B     		cmp	r3, #0
 25027 0056 03D0     		beq	.L25
 560:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 561:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = SUCCESS;
 25028              		.loc 1 561 0
 25029 0058 4FF00103 		mov	r3, #1
 25030 005c FB73     		strb	r3, [r7, #15]
 25031 005e 06E0     		b	.L26
 25032              	.L25:
 562:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 563:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 564:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 565:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 25033              		.loc 1 565 0
 25034 0060 4FF00003 		mov	r3, #0
 25035 0064 FB73     		strb	r3, [r7, #15]
 25036 0066 02E0     		b	.L26
 25037              	.L22:
 566:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }        
 567:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 568:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 569:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 570:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;  
 25038              		.loc 1 570 0
 25039 0068 4FF00103 		mov	r3, #1
 25040 006c FB73     		strb	r3, [r7, #15]
 25041              	.L26:
 571:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
 572:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 573:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (status);  
 25042              		.loc 1 573 0
 25043 006e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 574:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 25044              		.loc 1 574 0
 25045 0070 1846     		mov	r0, r3
 25046 0072 07F11407 		add	r7, r7, #20
 25047 0076 BD46     		mov	sp, r7
 25048 0078 80BC     		pop	{r7}
 25049 007a 7047     		bx	lr
 25050              	.L28:
 25051              		.align	2
 25052              	.L27:
 25053 007c 00280040 		.word	1073752064
 25054              		.cfi_endproc
 25055              	.LFE114:
 25057              		.section	.text.RTC_ExitInitMode,"ax",%progbits
 25058              		.align	2
 25059              		.global	RTC_ExitInitMode
 25060              		.thumb
 25061              		.thumb_func
 25063              	RTC_ExitInitMode:
 25064              	.LFB115:
 575:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 576:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 577:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Exits the RTC Initialization mode.
 578:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   When the initialization sequence is complete, the calendar restarts 
 579:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         counting after 4 RTCCLK cycles.  
 580:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The RTC Initialization mode is write protected, use the 
 581:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         RTC_WriteProtectionCmd(DISABLE) before calling this function.      
 582:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
 583:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 584:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 585:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_ExitInitMode(void)
 586:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** { 
 25065              		.loc 1 586 0
 25066              		.cfi_startproc
 25067              		@ args = 0, pretend = 0, frame = 0
 25068              		@ frame_needed = 1, uses_anonymous_args = 0
 25069              		@ link register save eliminated.
 25070 0000 80B4     		push	{r7}
 25071              	.LCFI15:
 25072              		.cfi_def_cfa_offset 4
 25073 0002 00AF     		add	r7, sp, #0
 25074              		.cfi_offset 7, -4
 25075              	.LCFI16:
 25076              		.cfi_def_cfa_register 7
 587:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Exit Initialization mode */
 588:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->ISR &= (uint32_t)~RTC_ISR_INIT;  
 25077              		.loc 1 588 0
 25078 0004 044B     		ldr	r3, .L30
 25079 0006 044A     		ldr	r2, .L30
 25080 0008 D268     		ldr	r2, [r2, #12]
 25081 000a 22F08002 		bic	r2, r2, #128
 25082 000e DA60     		str	r2, [r3, #12]
 589:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 25083              		.loc 1 589 0
 25084 0010 BD46     		mov	sp, r7
 25085 0012 80BC     		pop	{r7}
 25086 0014 7047     		bx	lr
 25087              	.L31:
 25088 0016 00BF     		.align	2
 25089              	.L30:
 25090 0018 00280040 		.word	1073752064
 25091              		.cfi_endproc
 25092              	.LFE115:
 25094              		.section	.text.RTC_WaitForSynchro,"ax",%progbits
 25095              		.align	2
 25096              		.global	RTC_WaitForSynchro
 25097              		.thumb
 25098              		.thumb_func
 25100              	RTC_WaitForSynchro:
 25101              	.LFB116:
 590:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 591:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 592:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Waits until the RTC Time and Date registers (RTC_TR and RTC_DR) are 
 593:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         synchronized with RTC APB clock.
 594:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The RTC Resynchronization mode is write protected, use the 
 595:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         RTC_WriteProtectionCmd(DISABLE) before calling this function. 
 596:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   To read the calendar through the shadow registers after Calendar 
 597:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         initialization, calendar update or after wakeup from low power modes 
 598:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         the software must first clear the RSF flag. 
 599:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         The software must then wait until it is set again before reading 
 600:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         the calendar, which means that the calendar registers have been 
 601:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         correctly copied into the RTC_TR and RTC_DR shadow registers.   
 602:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
 603:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 604:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC registers are synchronised
 605:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC registers are not synchronised
 606:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 607:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_WaitForSynchro(void)
 608:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 25102              		.loc 1 608 0
 25103              		.cfi_startproc
 25104              		@ args = 0, pretend = 0, frame = 16
 25105              		@ frame_needed = 1, uses_anonymous_args = 0
 25106              		@ link register save eliminated.
 25107 0000 80B4     		push	{r7}
 25108              	.LCFI17:
 25109              		.cfi_def_cfa_offset 4
 25110 0002 85B0     		sub	sp, sp, #20
 25111              	.LCFI18:
 25112              		.cfi_def_cfa_offset 24
 25113 0004 00AF     		add	r7, sp, #0
 25114              		.cfi_offset 7, -4
 25115              	.LCFI19:
 25116              		.cfi_def_cfa_register 7
 609:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t synchrocounter = 0;
 25117              		.loc 1 609 0
 25118 0006 4FF00003 		mov	r3, #0
 25119 000a 7B60     		str	r3, [r7, #4]
 610:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 25120              		.loc 1 610 0
 25121 000c 4FF00003 		mov	r3, #0
 25122 0010 FB73     		strb	r3, [r7, #15]
 611:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t synchrostatus = 0x00;
 25123              		.loc 1 611 0
 25124 0012 4FF00003 		mov	r3, #0
 25125 0016 BB60     		str	r3, [r7, #8]
 612:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 613:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 614:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 25126              		.loc 1 614 0
 25127 0018 1A4B     		ldr	r3, .L37
 25128 001a 4FF0CA02 		mov	r2, #202
 25129 001e 5A62     		str	r2, [r3, #36]
 615:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 25130              		.loc 1 615 0
 25131 0020 184B     		ldr	r3, .L37
 25132 0022 4FF05302 		mov	r2, #83
 25133 0026 5A62     		str	r2, [r3, #36]
 616:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 617:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear RSF flag */
 618:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->ISR &= (uint32_t)RTC_RSF_MASK;
 25134              		.loc 1 618 0
 25135 0028 164B     		ldr	r3, .L37
 25136 002a 164A     		ldr	r2, .L37
 25137 002c D268     		ldr	r2, [r2, #12]
 25138 002e 22F0A002 		bic	r2, r2, #160
 25139 0032 DA60     		str	r2, [r3, #12]
 25140              	.L34:
 619:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 620:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Wait the registers to be synchronised */
 621:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   do
 622:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 623:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     synchrostatus = RTC->ISR & RTC_ISR_RSF;
 25141              		.loc 1 623 0 discriminator 1
 25142 0034 134B     		ldr	r3, .L37
 25143 0036 DB68     		ldr	r3, [r3, #12]
 25144 0038 03F02003 		and	r3, r3, #32
 25145 003c BB60     		str	r3, [r7, #8]
 624:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     synchrocounter++;  
 25146              		.loc 1 624 0 discriminator 1
 25147 003e 7B68     		ldr	r3, [r7, #4]
 25148 0040 03F10103 		add	r3, r3, #1
 25149 0044 7B60     		str	r3, [r7, #4]
 625:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } while((synchrocounter != SYNCHRO_TIMEOUT) && (synchrostatus == 0x00));
 25150              		.loc 1 625 0 discriminator 1
 25151 0046 7B68     		ldr	r3, [r7, #4]
 25152 0048 B3F5003F 		cmp	r3, #131072
 25153 004c 02D0     		beq	.L33
 25154 004e BB68     		ldr	r3, [r7, #8]
 25155 0050 002B     		cmp	r3, #0
 25156 0052 EFD0     		beq	.L34
 25157              	.L33:
 626:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 627:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RSF) != RESET)
 25158              		.loc 1 627 0
 25159 0054 0B4B     		ldr	r3, .L37
 25160 0056 DB68     		ldr	r3, [r3, #12]
 25161 0058 03F02003 		and	r3, r3, #32
 25162 005c 002B     		cmp	r3, #0
 25163 005e 03D0     		beq	.L35
 628:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 629:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
 25164              		.loc 1 629 0
 25165 0060 4FF00103 		mov	r3, #1
 25166 0064 FB73     		strb	r3, [r7, #15]
 25167 0066 02E0     		b	.L36
 25168              	.L35:
 630:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 631:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 632:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 633:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 25169              		.loc 1 633 0
 25170 0068 4FF00003 		mov	r3, #0
 25171 006c FB73     		strb	r3, [r7, #15]
 25172              	.L36:
 634:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }        
 635:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 636:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 637:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 25173              		.loc 1 637 0
 25174 006e 054B     		ldr	r3, .L37
 25175 0070 4FF0FF02 		mov	r2, #255
 25176 0074 5A62     		str	r2, [r3, #36]
 638:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 639:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (status); 
 25177              		.loc 1 639 0
 25178 0076 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 640:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 25179              		.loc 1 640 0
 25180 0078 1846     		mov	r0, r3
 25181 007a 07F11407 		add	r7, r7, #20
 25182 007e BD46     		mov	sp, r7
 25183 0080 80BC     		pop	{r7}
 25184 0082 7047     		bx	lr
 25185              	.L38:
 25186              		.align	2
 25187              	.L37:
 25188 0084 00280040 		.word	1073752064
 25189              		.cfi_endproc
 25190              	.LFE116:
 25192              		.section	.text.RTC_RefClockCmd,"ax",%progbits
 25193              		.align	2
 25194              		.global	RTC_RefClockCmd
 25195              		.thumb
 25196              		.thumb_func
 25198              	RTC_RefClockCmd:
 25199              	.LFB117:
 641:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 642:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 643:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the RTC reference clock detection.
 644:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the RTC reference clock.
 645:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
 646:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 647:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC reference clock detection is enabled
 648:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC reference clock detection is disabled  
 649:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 650:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_RefClockCmd(FunctionalState NewState)
 651:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** { 
 25200              		.loc 1 651 0
 25201              		.cfi_startproc
 25202              		@ args = 0, pretend = 0, frame = 16
 25203              		@ frame_needed = 1, uses_anonymous_args = 0
 25204 0000 80B5     		push	{r7, lr}
 25205              	.LCFI20:
 25206              		.cfi_def_cfa_offset 8
 25207 0002 84B0     		sub	sp, sp, #16
 25208              	.LCFI21:
 25209              		.cfi_def_cfa_offset 24
 25210 0004 00AF     		add	r7, sp, #0
 25211              		.cfi_offset 14, -4
 25212              		.cfi_offset 7, -8
 25213              	.LCFI22:
 25214              		.cfi_def_cfa_register 7
 25215 0006 0346     		mov	r3, r0
 25216 0008 FB71     		strb	r3, [r7, #7]
 652:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 25217              		.loc 1 652 0
 25218 000a 4FF00003 		mov	r3, #0
 25219 000e FB73     		strb	r3, [r7, #15]
 653:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 654:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 655:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 656:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 657:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 658:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 25220              		.loc 1 658 0
 25221 0010 174B     		ldr	r3, .L44
 25222 0012 4FF0CA02 		mov	r2, #202
 25223 0016 5A62     		str	r2, [r3, #36]
 659:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 25224              		.loc 1 659 0
 25225 0018 154B     		ldr	r3, .L44
 25226 001a 4FF05302 		mov	r2, #83
 25227 001e 5A62     		str	r2, [r3, #36]
 660:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 661:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 662:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 25228              		.loc 1 662 0
 25229 0020 FFF7FEFF 		bl	RTC_EnterInitMode
 25230 0024 0346     		mov	r3, r0
 25231 0026 002B     		cmp	r3, #0
 25232 0028 03D1     		bne	.L40
 663:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 664:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 25233              		.loc 1 664 0
 25234 002a 4FF00003 		mov	r3, #0
 25235 002e FB73     		strb	r3, [r7, #15]
 25236 0030 14E0     		b	.L41
 25237              	.L40:
 665:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
 666:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 667:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {  
 668:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if (NewState != DISABLE)
 25238              		.loc 1 668 0
 25239 0032 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 25240 0034 002B     		cmp	r3, #0
 25241 0036 06D0     		beq	.L42
 669:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 670:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Enable the RTC reference clock detection */
 671:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR |= RTC_CR_REFCKON;   
 25242              		.loc 1 671 0
 25243 0038 0D4B     		ldr	r3, .L44
 25244 003a 0D4A     		ldr	r2, .L44
 25245 003c 9268     		ldr	r2, [r2, #8]
 25246 003e 42F01002 		orr	r2, r2, #16
 25247 0042 9A60     		str	r2, [r3, #8]
 25248 0044 05E0     		b	.L43
 25249              	.L42:
 672:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 673:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 674:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 675:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Disable the RTC reference clock detection */
 676:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR &= ~RTC_CR_REFCKON;    
 25250              		.loc 1 676 0
 25251 0046 0A4B     		ldr	r3, .L44
 25252 0048 094A     		ldr	r2, .L44
 25253 004a 9268     		ldr	r2, [r2, #8]
 25254 004c 22F01002 		bic	r2, r2, #16
 25255 0050 9A60     		str	r2, [r3, #8]
 25256              	.L43:
 677:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 678:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 679:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
 25257              		.loc 1 679 0
 25258 0052 FFF7FEFF 		bl	RTC_ExitInitMode
 680:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 681:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
 25259              		.loc 1 681 0
 25260 0056 4FF00103 		mov	r3, #1
 25261 005a FB73     		strb	r3, [r7, #15]
 25262              	.L41:
 682:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 683:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 684:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 685:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;  
 25263              		.loc 1 685 0
 25264 005c 044B     		ldr	r3, .L44
 25265 005e 4FF0FF02 		mov	r2, #255
 25266 0062 5A62     		str	r2, [r3, #36]
 686:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 687:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status; 
 25267              		.loc 1 687 0
 25268 0064 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 688:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 25269              		.loc 1 688 0
 25270 0066 1846     		mov	r0, r3
 25271 0068 07F11007 		add	r7, r7, #16
 25272 006c BD46     		mov	sp, r7
 25273 006e 80BD     		pop	{r7, pc}
 25274              	.L45:
 25275              		.align	2
 25276              	.L44:
 25277 0070 00280040 		.word	1073752064
 25278              		.cfi_endproc
 25279              	.LFE117:
 25281              		.section	.text.RTC_BypassShadowCmd,"ax",%progbits
 25282              		.align	2
 25283              		.global	RTC_BypassShadowCmd
 25284              		.thumb
 25285              		.thumb_func
 25287              	RTC_BypassShadowCmd:
 25288              	.LFB118:
 689:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 690:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 691:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the Bypass Shadow feature.
 692:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   When the Bypass Shadow is enabled the calendar value are taken 
 693:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         directly from the Calendar counter.
 694:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the Bypass Shadow feature.
 695:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         This parameter can be: ENABLE or DISABLE.
 696:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 697:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** */
 698:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_BypassShadowCmd(FunctionalState NewState)
 699:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 25289              		.loc 1 699 0
 25290              		.cfi_startproc
 25291              		@ args = 0, pretend = 0, frame = 8
 25292              		@ frame_needed = 1, uses_anonymous_args = 0
 25293              		@ link register save eliminated.
 25294 0000 80B4     		push	{r7}
 25295              	.LCFI23:
 25296              		.cfi_def_cfa_offset 4
 25297 0002 83B0     		sub	sp, sp, #12
 25298              	.LCFI24:
 25299              		.cfi_def_cfa_offset 16
 25300 0004 00AF     		add	r7, sp, #0
 25301              		.cfi_offset 7, -4
 25302              	.LCFI25:
 25303              		.cfi_def_cfa_register 7
 25304 0006 0346     		mov	r3, r0
 25305 0008 FB71     		strb	r3, [r7, #7]
 700:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 701:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 702:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 703:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 704:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 25306              		.loc 1 704 0
 25307 000a 104B     		ldr	r3, .L49
 25308 000c 4FF0CA02 		mov	r2, #202
 25309 0010 5A62     		str	r2, [r3, #36]
 705:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 25310              		.loc 1 705 0
 25311 0012 0E4B     		ldr	r3, .L49
 25312 0014 4FF05302 		mov	r2, #83
 25313 0018 5A62     		str	r2, [r3, #36]
 706:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 707:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 25314              		.loc 1 707 0
 25315 001a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 25316 001c 002B     		cmp	r3, #0
 25317 001e 06D0     		beq	.L47
 708:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 709:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set the BYPSHAD bit */
 710:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint8_t)RTC_CR_BYPSHAD;
 25318              		.loc 1 710 0
 25319 0020 0A4B     		ldr	r3, .L49
 25320 0022 0A4A     		ldr	r2, .L49
 25321 0024 9268     		ldr	r2, [r2, #8]
 25322 0026 42F02002 		orr	r2, r2, #32
 25323 002a 9A60     		str	r2, [r3, #8]
 25324 002c 05E0     		b	.L48
 25325              	.L47:
 711:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 712:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 713:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 714:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Reset the BYPSHAD bit */
 715:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint8_t)~RTC_CR_BYPSHAD;
 25326              		.loc 1 715 0
 25327 002e 074B     		ldr	r3, .L49
 25328 0030 064A     		ldr	r2, .L49
 25329 0032 9268     		ldr	r2, [r2, #8]
 25330 0034 02F0DF02 		and	r2, r2, #223
 25331 0038 9A60     		str	r2, [r3, #8]
 25332              	.L48:
 716:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 717:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 718:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 719:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 25333              		.loc 1 719 0
 25334 003a 044B     		ldr	r3, .L49
 25335 003c 4FF0FF02 		mov	r2, #255
 25336 0040 5A62     		str	r2, [r3, #36]
 720:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 25337              		.loc 1 720 0
 25338 0042 07F10C07 		add	r7, r7, #12
 25339 0046 BD46     		mov	sp, r7
 25340 0048 80BC     		pop	{r7}
 25341 004a 7047     		bx	lr
 25342              	.L50:
 25343              		.align	2
 25344              	.L49:
 25345 004c 00280040 		.word	1073752064
 25346              		.cfi_endproc
 25347              	.LFE118:
 25349              		.section	.text.RTC_SetTime,"ax",%progbits
 25350              		.align	2
 25351              		.global	RTC_SetTime
 25352              		.thumb
 25353              		.thumb_func
 25355              	RTC_SetTime:
 25356              	.LFB119:
 721:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 722:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 723:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
 724:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 725:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 726:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group2 Time and Date configuration functions
 727:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Time and Date configuration functions 
 728:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
 729:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
 730:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
 731:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    Time and Date configuration functions
 732:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
 733:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 734:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to program and read the RTC Calendar
 735:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   (Time and Date).
 736:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 737:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
 738:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
 739:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 740:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 741:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 742:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Set the RTC current time.
 743:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the entered parameters.
 744:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
 745:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN:  Binary data format 
 746:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD:  BCD data format
 747:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure that contains 
 748:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                        the time configuration information for the RTC.     
 749:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 750:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Time register is configured
 751:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Time register is not configured
 752:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 753:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_SetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
 754:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 25357              		.loc 1 754 0
 25358              		.cfi_startproc
 25359              		@ args = 0, pretend = 0, frame = 16
 25360              		@ frame_needed = 1, uses_anonymous_args = 0
 25361 0000 90B5     		push	{r4, r7, lr}
 25362              	.LCFI26:
 25363              		.cfi_def_cfa_offset 12
 25364 0002 85B0     		sub	sp, sp, #20
 25365              	.LCFI27:
 25366              		.cfi_def_cfa_offset 32
 25367 0004 00AF     		add	r7, sp, #0
 25368              		.cfi_offset 14, -4
 25369              		.cfi_offset 7, -8
 25370              		.cfi_offset 4, -12
 25371              	.LCFI28:
 25372              		.cfi_def_cfa_register 7
 25373 0006 7860     		str	r0, [r7, #4]
 25374 0008 3960     		str	r1, [r7, #0]
 755:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 25375              		.loc 1 755 0
 25376 000a 4FF00003 		mov	r3, #0
 25377 000e FB60     		str	r3, [r7, #12]
 756:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 25378              		.loc 1 756 0
 25379 0010 4FF00003 		mov	r3, #0
 25380 0014 FB72     		strb	r3, [r7, #11]
 757:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 758:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 759:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
 760:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 761:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 25381              		.loc 1 761 0
 25382 0016 7B68     		ldr	r3, [r7, #4]
 25383 0018 002B     		cmp	r3, #0
 25384 001a 0AD1     		bne	.L52
 762:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 763:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 25385              		.loc 1 763 0
 25386 001c 414B     		ldr	r3, .L60
 25387 001e 9B68     		ldr	r3, [r3, #8]
 25388 0020 03F04003 		and	r3, r3, #64
 25389 0024 002B     		cmp	r3, #0
 25390 0026 16D1     		bne	.L53
 764:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 765:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(RTC_TimeStruct->RTC_Hours));
 766:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12));
 767:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } 
 768:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 769:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 770:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC_TimeStruct->RTC_H12 = 0x00;
 25391              		.loc 1 770 0
 25392 0028 3B68     		ldr	r3, [r7, #0]
 25393 002a 4FF00002 		mov	r2, #0
 25394 002e DA70     		strb	r2, [r3, #3]
 25395 0030 11E0     		b	.L53
 25396              	.L52:
 771:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_TimeStruct->RTC_Hours));
 772:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 773:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_TimeStruct->RTC_Minutes));
 774:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_TimeStruct->RTC_Seconds));
 775:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 776:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 777:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 778:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 25397              		.loc 1 778 0
 25398 0032 3C4B     		ldr	r3, .L60
 25399 0034 9B68     		ldr	r3, [r3, #8]
 25400 0036 03F04003 		and	r3, r3, #64
 25401 003a 002B     		cmp	r3, #0
 25402 003c 07D0     		beq	.L54
 779:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 780:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 25403              		.loc 1 780 0
 25404 003e 3B68     		ldr	r3, [r7, #0]
 25405 0040 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 25406 0042 1846     		mov	r0, r3
 25407 0044 FFF7FEFF 		bl	RTC_Bcd2ToByte
 25408 0048 0346     		mov	r3, r0
 25409 004a FB60     		str	r3, [r7, #12]
 25410 004c 03E0     		b	.L53
 25411              	.L54:
 781:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(tmpreg));
 782:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12)); 
 783:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } 
 784:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 785:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 786:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC_TimeStruct->RTC_H12 = 0x00;
 25412              		.loc 1 786 0
 25413 004e 3B68     		ldr	r3, [r7, #0]
 25414 0050 4FF00002 		mov	r2, #0
 25415 0054 DA70     		strb	r2, [r3, #3]
 25416              	.L53:
 787:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours)));
 788:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 789:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes)));
 790:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds)));
 791:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 792:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 793:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
 794:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format != RTC_Format_BIN)
 25417              		.loc 1 794 0
 25418 0056 7B68     		ldr	r3, [r7, #4]
 25419 0058 002B     		cmp	r3, #0
 25420 005a 13D0     		beq	.L55
 795:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 796:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 25421              		.loc 1 796 0
 25422 005c 3B68     		ldr	r3, [r7, #0]
 25423 005e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 25424 0060 4FEA0342 		lsl	r2, r3, #16
 797:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 25425              		.loc 1 797 0
 25426 0064 3B68     		ldr	r3, [r7, #0]
 25427 0066 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 25428 0068 4FEA0323 		lsl	r3, r3, #8
 796:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 25429              		.loc 1 796 0
 25430 006c 1A43     		orrs	r2, r2, r3
 798:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****              ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
 25431              		.loc 1 798 0
 25432 006e 3B68     		ldr	r3, [r7, #0]
 25433 0070 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 797:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 25434              		.loc 1 797 0
 25435 0072 1A43     		orrs	r2, r2, r3
 799:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
 25436              		.loc 1 799 0
 25437 0074 3B68     		ldr	r3, [r7, #0]
 25438 0076 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 25439 0078 4FEA0343 		lsl	r3, r3, #16
 796:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 25440              		.loc 1 796 0
 25441 007c 42EA0303 		orr	r3, r2, r3
 25442 0080 FB60     		str	r3, [r7, #12]
 25443 0082 1FE0     		b	.L56
 25444              	.L55:
 800:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
 801:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 802:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 803:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 25445              		.loc 1 803 0
 25446 0084 3B68     		ldr	r3, [r7, #0]
 25447 0086 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 25448 0088 1846     		mov	r0, r3
 25449 008a FFF7FEFF 		bl	RTC_ByteToBcd2
 25450 008e 0346     		mov	r3, r0
 25451 0090 4FEA0344 		lsl	r4, r3, #16
 804:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 25452              		.loc 1 804 0
 25453 0094 3B68     		ldr	r3, [r7, #0]
 25454 0096 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 25455 0098 1846     		mov	r0, r3
 25456 009a FFF7FEFF 		bl	RTC_ByteToBcd2
 25457 009e 0346     		mov	r3, r0
 25458 00a0 4FEA0323 		lsl	r3, r3, #8
 803:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 25459              		.loc 1 803 0
 25460 00a4 1C43     		orrs	r4, r4, r3
 805:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
 25461              		.loc 1 805 0
 25462 00a6 3B68     		ldr	r3, [r7, #0]
 25463 00a8 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 25464 00aa 1846     		mov	r0, r3
 25465 00ac FFF7FEFF 		bl	RTC_ByteToBcd2
 25466 00b0 0346     		mov	r3, r0
 804:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 25467              		.loc 1 804 0
 25468 00b2 44EA0302 		orr	r2, r4, r3
 806:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
 25469              		.loc 1 806 0
 25470 00b6 3B68     		ldr	r3, [r7, #0]
 25471 00b8 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 25472 00ba 4FEA0343 		lsl	r3, r3, #16
 803:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 25473              		.loc 1 803 0
 25474 00be 42EA0303 		orr	r3, r2, r3
 25475 00c2 FB60     		str	r3, [r7, #12]
 25476              	.L56:
 807:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
 808:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 809:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 810:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 25477              		.loc 1 810 0
 25478 00c4 174B     		ldr	r3, .L60
 25479 00c6 4FF0CA02 		mov	r2, #202
 25480 00ca 5A62     		str	r2, [r3, #36]
 811:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 25481              		.loc 1 811 0
 25482 00cc 154B     		ldr	r3, .L60
 25483 00ce 4FF05302 		mov	r2, #83
 25484 00d2 5A62     		str	r2, [r3, #36]
 812:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 813:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 814:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 25485              		.loc 1 814 0
 25486 00d4 FFF7FEFF 		bl	RTC_EnterInitMode
 25487 00d8 0346     		mov	r3, r0
 25488 00da 002B     		cmp	r3, #0
 25489 00dc 03D1     		bne	.L57
 815:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 816:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 25490              		.loc 1 816 0
 25491 00de 4FF00003 		mov	r3, #0
 25492 00e2 FB72     		strb	r3, [r7, #11]
 25493 00e4 13E0     		b	.L58
 25494              	.L57:
 817:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
 818:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 819:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 820:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set the RTC_TR register */
 821:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 25495              		.loc 1 821 0
 25496 00e6 0F4A     		ldr	r2, .L60
 25497 00e8 F968     		ldr	r1, [r7, #12]
 25498 00ea 0F4B     		ldr	r3, .L60+4
 25499 00ec 01EA0303 		and	r3, r1, r3
 25500 00f0 1360     		str	r3, [r2, #0]
 822:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 823:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 824:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode(); 
 25501              		.loc 1 824 0
 25502 00f2 FFF7FEFF 		bl	RTC_ExitInitMode
 825:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 826:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if(RTC_WaitForSynchro() == ERROR)
 25503              		.loc 1 826 0
 25504 00f6 FFF7FEFF 		bl	RTC_WaitForSynchro
 25505 00fa 0346     		mov	r3, r0
 25506 00fc 002B     		cmp	r3, #0
 25507 00fe 03D1     		bne	.L59
 827:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 828:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 25508              		.loc 1 828 0
 25509 0100 4FF00003 		mov	r3, #0
 25510 0104 FB72     		strb	r3, [r7, #11]
 25511 0106 02E0     		b	.L58
 25512              	.L59:
 829:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 830:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 831:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 832:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = SUCCESS;
 25513              		.loc 1 832 0
 25514 0108 4FF00103 		mov	r3, #1
 25515 010c FB72     		strb	r3, [r7, #11]
 25516              	.L58:
 833:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 834:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 835:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 836:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 837:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 25517              		.loc 1 837 0
 25518 010e 054B     		ldr	r3, .L60
 25519 0110 4FF0FF02 		mov	r2, #255
 25520 0114 5A62     		str	r2, [r3, #36]
 838:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 839:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 25521              		.loc 1 839 0
 25522 0116 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 840:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 25523              		.loc 1 840 0
 25524 0118 1846     		mov	r0, r3
 25525 011a 07F11407 		add	r7, r7, #20
 25526 011e BD46     		mov	sp, r7
 25527 0120 90BD     		pop	{r4, r7, pc}
 25528              	.L61:
 25529 0122 00BF     		.align	2
 25530              	.L60:
 25531 0124 00280040 		.word	1073752064
 25532 0128 7F7F7F00 		.word	8355711
 25533              		.cfi_endproc
 25534              	.LFE119:
 25536              		.section	.text.RTC_TimeStructInit,"ax",%progbits
 25537              		.align	2
 25538              		.global	RTC_TimeStructInit
 25539              		.thumb
 25540              		.thumb_func
 25542              	RTC_TimeStructInit:
 25543              	.LFB120:
 841:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 842:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 843:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_TimeStruct member with its default value
 844:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         (Time = 00h:00min:00sec).
 845:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure which will be 
 846:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         initialized.
 847:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 848:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 849:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TimeStructInit(RTC_TimeTypeDef* RTC_TimeStruct)
 850:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 25544              		.loc 1 850 0
 25545              		.cfi_startproc
 25546              		@ args = 0, pretend = 0, frame = 8
 25547              		@ frame_needed = 1, uses_anonymous_args = 0
 25548              		@ link register save eliminated.
 25549 0000 80B4     		push	{r7}
 25550              	.LCFI29:
 25551              		.cfi_def_cfa_offset 4
 25552 0002 83B0     		sub	sp, sp, #12
 25553              	.LCFI30:
 25554              		.cfi_def_cfa_offset 16
 25555 0004 00AF     		add	r7, sp, #0
 25556              		.cfi_offset 7, -4
 25557              	.LCFI31:
 25558              		.cfi_def_cfa_register 7
 25559 0006 7860     		str	r0, [r7, #4]
 851:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Time = 00h:00min:00sec */
 852:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_H12 = RTC_H12_AM;
 25560              		.loc 1 852 0
 25561 0008 7B68     		ldr	r3, [r7, #4]
 25562 000a 4FF00002 		mov	r2, #0
 25563 000e DA70     		strb	r2, [r3, #3]
 853:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Hours = 0;
 25564              		.loc 1 853 0
 25565 0010 7B68     		ldr	r3, [r7, #4]
 25566 0012 4FF00002 		mov	r2, #0
 25567 0016 1A70     		strb	r2, [r3, #0]
 854:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Minutes = 0;
 25568              		.loc 1 854 0
 25569 0018 7B68     		ldr	r3, [r7, #4]
 25570 001a 4FF00002 		mov	r2, #0
 25571 001e 5A70     		strb	r2, [r3, #1]
 855:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Seconds = 0; 
 25572              		.loc 1 855 0
 25573 0020 7B68     		ldr	r3, [r7, #4]
 25574 0022 4FF00002 		mov	r2, #0
 25575 0026 9A70     		strb	r2, [r3, #2]
 856:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 25576              		.loc 1 856 0
 25577 0028 07F10C07 		add	r7, r7, #12
 25578 002c BD46     		mov	sp, r7
 25579 002e 80BC     		pop	{r7}
 25580 0030 7047     		bx	lr
 25581              		.cfi_endproc
 25582              	.LFE120:
 25584 0032 00BF     		.section	.text.RTC_GetTime,"ax",%progbits
 25585              		.align	2
 25586              		.global	RTC_GetTime
 25587              		.thumb
 25588              		.thumb_func
 25590              	RTC_GetTime:
 25591              	.LFB121:
 857:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 858:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 859:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC current Time.
 860:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the returned parameters.
 861:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
 862:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN:  Binary data format 
 863:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD:  BCD data format
 864:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure that will 
 865:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                        contain the returned current time configuration.     
 866:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 867:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 868:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_GetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
 869:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 25592              		.loc 1 869 0
 25593              		.cfi_startproc
 25594              		@ args = 0, pretend = 0, frame = 16
 25595              		@ frame_needed = 1, uses_anonymous_args = 0
 25596 0000 80B5     		push	{r7, lr}
 25597              	.LCFI32:
 25598              		.cfi_def_cfa_offset 8
 25599 0002 84B0     		sub	sp, sp, #16
 25600              	.LCFI33:
 25601              		.cfi_def_cfa_offset 24
 25602 0004 00AF     		add	r7, sp, #0
 25603              		.cfi_offset 14, -4
 25604              		.cfi_offset 7, -8
 25605              	.LCFI34:
 25606              		.cfi_def_cfa_register 7
 25607 0006 7860     		str	r0, [r7, #4]
 25608 0008 3960     		str	r1, [r7, #0]
 870:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 25609              		.loc 1 870 0
 25610 000a 4FF00003 		mov	r3, #0
 25611 000e FB60     		str	r3, [r7, #12]
 871:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 872:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 873:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
 874:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 875:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_TR register */
 876:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->TR & RTC_TR_RESERVED_MASK); 
 25612              		.loc 1 876 0
 25613 0010 234B     		ldr	r3, .L65
 25614 0012 1A68     		ldr	r2, [r3, #0]
 25615 0014 234B     		ldr	r3, .L65+4
 25616 0016 02EA0303 		and	r3, r2, r3
 25617 001a FB60     		str	r3, [r7, #12]
 877:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 878:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Fill the structure fields with the read parameters */
 879:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 25618              		.loc 1 879 0
 25619 001c FB68     		ldr	r3, [r7, #12]
 25620 001e 03F47C13 		and	r3, r3, #4128768
 25621 0022 4FEA1343 		lsr	r3, r3, #16
 25622 0026 DAB2     		uxtb	r2, r3
 25623 0028 3B68     		ldr	r3, [r7, #0]
 25624 002a 1A70     		strb	r2, [r3, #0]
 880:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 25625              		.loc 1 880 0
 25626 002c FB68     		ldr	r3, [r7, #12]
 25627 002e 03F4FE43 		and	r3, r3, #32512
 25628 0032 4FEA1323 		lsr	r3, r3, #8
 25629 0036 DAB2     		uxtb	r2, r3
 25630 0038 3B68     		ldr	r3, [r7, #0]
 25631 003a 5A70     		strb	r2, [r3, #1]
 881:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 25632              		.loc 1 881 0
 25633 003c FB68     		ldr	r3, [r7, #12]
 25634 003e DBB2     		uxtb	r3, r3
 25635 0040 03F07F03 		and	r3, r3, #127
 25636 0044 DAB2     		uxtb	r2, r3
 25637 0046 3B68     		ldr	r3, [r7, #0]
 25638 0048 9A70     		strb	r2, [r3, #2]
 882:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_H12 = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);  
 25639              		.loc 1 882 0
 25640 004a FB68     		ldr	r3, [r7, #12]
 25641 004c 03F48003 		and	r3, r3, #4194304
 25642 0050 4FEA1343 		lsr	r3, r3, #16
 25643 0054 DAB2     		uxtb	r2, r3
 25644 0056 3B68     		ldr	r3, [r7, #0]
 25645 0058 DA70     		strb	r2, [r3, #3]
 883:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 884:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
 885:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 25646              		.loc 1 885 0
 25647 005a 7B68     		ldr	r3, [r7, #4]
 25648 005c 002B     		cmp	r3, #0
 25649 005e 1AD1     		bne	.L63
 886:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 887:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Convert the structure parameters to Binary format */
 888:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 25650              		.loc 1 888 0
 25651 0060 3B68     		ldr	r3, [r7, #0]
 25652 0062 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 25653 0064 1846     		mov	r0, r3
 25654 0066 FFF7FEFF 		bl	RTC_Bcd2ToByte
 25655 006a 0346     		mov	r3, r0
 25656 006c 1A46     		mov	r2, r3
 25657 006e 3B68     		ldr	r3, [r7, #0]
 25658 0070 1A70     		strb	r2, [r3, #0]
 889:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes);
 25659              		.loc 1 889 0
 25660 0072 3B68     		ldr	r3, [r7, #0]
 25661 0074 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 25662 0076 1846     		mov	r0, r3
 25663 0078 FFF7FEFF 		bl	RTC_Bcd2ToByte
 25664 007c 0346     		mov	r3, r0
 25665 007e 1A46     		mov	r2, r3
 25666 0080 3B68     		ldr	r3, [r7, #0]
 25667 0082 5A70     		strb	r2, [r3, #1]
 890:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds);   
 25668              		.loc 1 890 0
 25669 0084 3B68     		ldr	r3, [r7, #0]
 25670 0086 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 25671 0088 1846     		mov	r0, r3
 25672 008a FFF7FEFF 		bl	RTC_Bcd2ToByte
 25673 008e 0346     		mov	r3, r0
 25674 0090 1A46     		mov	r2, r3
 25675 0092 3B68     		ldr	r3, [r7, #0]
 25676 0094 9A70     		strb	r2, [r3, #2]
 25677              	.L63:
 891:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 892:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 25678              		.loc 1 892 0
 25679 0096 07F11007 		add	r7, r7, #16
 25680 009a BD46     		mov	sp, r7
 25681 009c 80BD     		pop	{r7, pc}
 25682              	.L66:
 25683 009e 00BF     		.align	2
 25684              	.L65:
 25685 00a0 00280040 		.word	1073752064
 25686 00a4 7F7F7F00 		.word	8355711
 25687              		.cfi_endproc
 25688              	.LFE121:
 25690              		.section	.text.RTC_GetSubSecond,"ax",%progbits
 25691              		.align	2
 25692              		.global	RTC_GetSubSecond
 25693              		.thumb
 25694              		.thumb_func
 25696              	RTC_GetSubSecond:
 25697              	.LFB122:
 893:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 894:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 895:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Gets the RTC current Calendar Subseconds value.
 896:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   This function freeze the Time and Date registers after reading the 
 897:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         SSR register.
 898:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
 899:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval RTC current Calendar Subseconds value.
 900:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 901:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_GetSubSecond(void)
 902:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 25698              		.loc 1 902 0
 25699              		.cfi_startproc
 25700              		@ args = 0, pretend = 0, frame = 8
 25701              		@ frame_needed = 1, uses_anonymous_args = 0
 25702              		@ link register save eliminated.
 25703 0000 80B4     		push	{r7}
 25704              	.LCFI35:
 25705              		.cfi_def_cfa_offset 4
 25706 0002 83B0     		sub	sp, sp, #12
 25707              	.LCFI36:
 25708              		.cfi_def_cfa_offset 16
 25709 0004 00AF     		add	r7, sp, #0
 25710              		.cfi_offset 7, -4
 25711              	.LCFI37:
 25712              		.cfi_def_cfa_register 7
 903:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 25713              		.loc 1 903 0
 25714 0006 4FF00003 		mov	r3, #0
 25715 000a 7B60     		str	r3, [r7, #4]
 904:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 905:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get subseconds values from the correspondent registers*/
 906:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->SSR);
 25716              		.loc 1 906 0
 25717 000c 054B     		ldr	r3, .L68
 25718 000e 9B6A     		ldr	r3, [r3, #40]
 25719 0010 7B60     		str	r3, [r7, #4]
 907:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 908:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Read DR register to unfroze calendar registers */
 909:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   (void) (RTC->DR);
 25720              		.loc 1 909 0
 25721 0012 044B     		ldr	r3, .L68
 25722 0014 5B68     		ldr	r3, [r3, #4]
 910:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 911:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (tmpreg);
 25723              		.loc 1 911 0
 25724 0016 7B68     		ldr	r3, [r7, #4]
 912:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 25725              		.loc 1 912 0
 25726 0018 1846     		mov	r0, r3
 25727 001a 07F10C07 		add	r7, r7, #12
 25728 001e BD46     		mov	sp, r7
 25729 0020 80BC     		pop	{r7}
 25730 0022 7047     		bx	lr
 25731              	.L69:
 25732              		.align	2
 25733              	.L68:
 25734 0024 00280040 		.word	1073752064
 25735              		.cfi_endproc
 25736              	.LFE122:
 25738              		.section	.text.RTC_SetDate,"ax",%progbits
 25739              		.align	2
 25740              		.global	RTC_SetDate
 25741              		.thumb
 25742              		.thumb_func
 25744              	RTC_SetDate:
 25745              	.LFB123:
 913:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 914:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 915:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Set the RTC current date.
 916:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the entered parameters.
 917:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
 918:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN:  Binary data format 
 919:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD:  BCD data format
 920:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_DateStruct: pointer to a RTC_DateTypeDef structure that contains 
 921:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                         the date configuration information for the RTC.
 922:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 923:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Date register is configured
 924:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Date register is not configured
 925:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 926:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_SetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
 927:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 25746              		.loc 1 927 0
 25747              		.cfi_startproc
 25748              		@ args = 0, pretend = 0, frame = 16
 25749              		@ frame_needed = 1, uses_anonymous_args = 0
 25750 0000 90B5     		push	{r4, r7, lr}
 25751              	.LCFI38:
 25752              		.cfi_def_cfa_offset 12
 25753 0002 85B0     		sub	sp, sp, #20
 25754              	.LCFI39:
 25755              		.cfi_def_cfa_offset 32
 25756 0004 00AF     		add	r7, sp, #0
 25757              		.cfi_offset 14, -4
 25758              		.cfi_offset 7, -8
 25759              		.cfi_offset 4, -12
 25760              	.LCFI40:
 25761              		.cfi_def_cfa_register 7
 25762 0006 7860     		str	r0, [r7, #4]
 25763 0008 3960     		str	r1, [r7, #0]
 928:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 25764              		.loc 1 928 0
 25765 000a 4FF00003 		mov	r3, #0
 25766 000e FB60     		str	r3, [r7, #12]
 929:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 25767              		.loc 1 929 0
 25768 0010 4FF00003 		mov	r3, #0
 25769 0014 FB72     		strb	r3, [r7, #11]
 930:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 931:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 932:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
 933:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 934:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC_Format == RTC_Format_BIN) && ((RTC_DateStruct->RTC_Month & 0x10) == 0x10))
 25770              		.loc 1 934 0
 25771 0016 7B68     		ldr	r3, [r7, #4]
 25772 0018 002B     		cmp	r3, #0
 25773 001a 0FD1     		bne	.L71
 25774              		.loc 1 934 0 is_stmt 0 discriminator 1
 25775 001c 3B68     		ldr	r3, [r7, #0]
 25776 001e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 25777 0020 03F01003 		and	r3, r3, #16
 25778 0024 002B     		cmp	r3, #0
 25779 0026 09D0     		beq	.L71
 935:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 936:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Month = (RTC_DateStruct->RTC_Month & (uint32_t)~(0x10)) + 0x0A;
 25780              		.loc 1 936 0 is_stmt 1
 25781 0028 3B68     		ldr	r3, [r7, #0]
 25782 002a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 25783 002c 23F01003 		bic	r3, r3, #16
 25784 0030 DBB2     		uxtb	r3, r3
 25785 0032 03F10A03 		add	r3, r3, #10
 25786 0036 DAB2     		uxtb	r2, r3
 25787 0038 3B68     		ldr	r3, [r7, #0]
 25788 003a 5A70     		strb	r2, [r3, #1]
 25789              	.L71:
 937:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
 938:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 25790              		.loc 1 938 0
 25791 003c 7B68     		ldr	r3, [r7, #4]
 25792 003e 002B     		cmp	r3, #0
 25793 0040 0DD0     		beq	.L72
 939:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 940:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_YEAR(RTC_DateStruct->RTC_Year));
 941:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MONTH(RTC_DateStruct->RTC_Month));
 942:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_DATE(RTC_DateStruct->RTC_Date));
 943:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 944:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 945:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 946:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year)));
 947:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 25794              		.loc 1 947 0
 25795 0042 3B68     		ldr	r3, [r7, #0]
 25796 0044 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 25797 0046 1846     		mov	r0, r3
 25798 0048 FFF7FEFF 		bl	RTC_Bcd2ToByte
 25799 004c 0346     		mov	r3, r0
 25800 004e FB60     		str	r3, [r7, #12]
 948:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MONTH(tmpreg));
 949:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 25801              		.loc 1 949 0
 25802 0050 3B68     		ldr	r3, [r7, #0]
 25803 0052 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 25804 0054 1846     		mov	r0, r3
 25805 0056 FFF7FEFF 		bl	RTC_Bcd2ToByte
 25806 005a 0346     		mov	r3, r0
 25807 005c FB60     		str	r3, [r7, #12]
 25808              	.L72:
 950:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_DATE(tmpreg));
 951:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 952:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_WEEKDAY(RTC_DateStruct->RTC_WeekDay));
 953:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 954:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
 955:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format != RTC_Format_BIN)
 25809              		.loc 1 955 0
 25810 005e 7B68     		ldr	r3, [r7, #4]
 25811 0060 002B     		cmp	r3, #0
 25812 0062 13D0     		beq	.L73
 956:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 957:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 25813              		.loc 1 957 0
 25814 0064 3B68     		ldr	r3, [r7, #0]
 25815 0066 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 25816 0068 4FEA0342 		lsl	r2, r3, #16
 958:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 25817              		.loc 1 958 0
 25818 006c 3B68     		ldr	r3, [r7, #0]
 25819 006e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 25820 0070 4FEA0323 		lsl	r3, r3, #8
 957:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 25821              		.loc 1 957 0
 25822 0074 1A43     		orrs	r2, r2, r3
 959:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_DateStruct->RTC_Date) | \
 25823              		.loc 1 959 0
 25824 0076 3B68     		ldr	r3, [r7, #0]
 25825 0078 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 958:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 25826              		.loc 1 958 0
 25827 007a 1A43     		orrs	r2, r2, r3
 960:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
 25828              		.loc 1 960 0
 25829 007c 3B68     		ldr	r3, [r7, #0]
 25830 007e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 25831 0080 4FEA4333 		lsl	r3, r3, #13
 957:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 25832              		.loc 1 957 0
 25833 0084 42EA0303 		orr	r3, r2, r3
 25834 0088 FB60     		str	r3, [r7, #12]
 25835 008a 1FE0     		b	.L74
 25836              	.L73:
 961:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
 962:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 963:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 964:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 25837              		.loc 1 964 0
 25838 008c 3B68     		ldr	r3, [r7, #0]
 25839 008e DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 25840 0090 1846     		mov	r0, r3
 25841 0092 FFF7FEFF 		bl	RTC_ByteToBcd2
 25842 0096 0346     		mov	r3, r0
 25843 0098 4FEA0344 		lsl	r4, r3, #16
 965:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 25844              		.loc 1 965 0
 25845 009c 3B68     		ldr	r3, [r7, #0]
 25846 009e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 25847 00a0 1846     		mov	r0, r3
 25848 00a2 FFF7FEFF 		bl	RTC_ByteToBcd2
 25849 00a6 0346     		mov	r3, r0
 25850 00a8 4FEA0323 		lsl	r3, r3, #8
 964:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 25851              		.loc 1 964 0
 25852 00ac 1C43     		orrs	r4, r4, r3
 966:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
 25853              		.loc 1 966 0
 25854 00ae 3B68     		ldr	r3, [r7, #0]
 25855 00b0 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 25856 00b2 1846     		mov	r0, r3
 25857 00b4 FFF7FEFF 		bl	RTC_ByteToBcd2
 25858 00b8 0346     		mov	r3, r0
 965:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 25859              		.loc 1 965 0
 25860 00ba 44EA0302 		orr	r2, r4, r3
 967:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_DateStruct->RTC_WeekDay << 13));
 25861              		.loc 1 967 0
 25862 00be 3B68     		ldr	r3, [r7, #0]
 25863 00c0 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 25864 00c2 4FEA4333 		lsl	r3, r3, #13
 964:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 25865              		.loc 1 964 0
 25866 00c6 42EA0303 		orr	r3, r2, r3
 25867 00ca FB60     		str	r3, [r7, #12]
 25868              	.L74:
 968:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 969:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 970:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 971:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 25869              		.loc 1 971 0
 25870 00cc 174B     		ldr	r3, .L78
 25871 00ce 4FF0CA02 		mov	r2, #202
 25872 00d2 5A62     		str	r2, [r3, #36]
 972:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 25873              		.loc 1 972 0
 25874 00d4 154B     		ldr	r3, .L78
 25875 00d6 4FF05302 		mov	r2, #83
 25876 00da 5A62     		str	r2, [r3, #36]
 973:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 974:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 975:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 25877              		.loc 1 975 0
 25878 00dc FFF7FEFF 		bl	RTC_EnterInitMode
 25879 00e0 0346     		mov	r3, r0
 25880 00e2 002B     		cmp	r3, #0
 25881 00e4 03D1     		bne	.L75
 976:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 977:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 25882              		.loc 1 977 0
 25883 00e6 4FF00003 		mov	r3, #0
 25884 00ea FB72     		strb	r3, [r7, #11]
 25885 00ec 14E0     		b	.L76
 25886              	.L75:
 978:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
 979:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 980:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 981:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set the RTC_DR register */
 982:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->DR = (uint32_t)(tmpreg & RTC_DR_RESERVED_MASK);
 25887              		.loc 1 982 0
 25888 00ee 0F4A     		ldr	r2, .L78
 25889 00f0 FB68     		ldr	r3, [r7, #12]
 25890 00f2 23F07F43 		bic	r3, r3, #-16777216
 25891 00f6 23F0C003 		bic	r3, r3, #192
 25892 00fa 5360     		str	r3, [r2, #4]
 983:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 984:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 985:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode(); 
 25893              		.loc 1 985 0
 25894 00fc FFF7FEFF 		bl	RTC_ExitInitMode
 986:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 987:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if(RTC_WaitForSynchro() == ERROR)
 25895              		.loc 1 987 0
 25896 0100 FFF7FEFF 		bl	RTC_WaitForSynchro
 25897 0104 0346     		mov	r3, r0
 25898 0106 002B     		cmp	r3, #0
 25899 0108 03D1     		bne	.L77
 988:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 989:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 25900              		.loc 1 989 0
 25901 010a 4FF00003 		mov	r3, #0
 25902 010e FB72     		strb	r3, [r7, #11]
 25903 0110 02E0     		b	.L76
 25904              	.L77:
 990:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 991:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 992:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 993:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = SUCCESS;
 25905              		.loc 1 993 0
 25906 0112 4FF00103 		mov	r3, #1
 25907 0116 FB72     		strb	r3, [r7, #11]
 25908              	.L76:
 994:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 995:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 996:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 997:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;   
 25909              		.loc 1 997 0
 25910 0118 044B     		ldr	r3, .L78
 25911 011a 4FF0FF02 		mov	r2, #255
 25912 011e 5A62     		str	r2, [r3, #36]
 998:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 999:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 25913              		.loc 1 999 0
 25914 0120 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
1000:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 25915              		.loc 1 1000 0
 25916 0122 1846     		mov	r0, r3
 25917 0124 07F11407 		add	r7, r7, #20
 25918 0128 BD46     		mov	sp, r7
 25919 012a 90BD     		pop	{r4, r7, pc}
 25920              	.L79:
 25921              		.align	2
 25922              	.L78:
 25923 012c 00280040 		.word	1073752064
 25924              		.cfi_endproc
 25925              	.LFE123:
 25927              		.section	.text.RTC_DateStructInit,"ax",%progbits
 25928              		.align	2
 25929              		.global	RTC_DateStructInit
 25930              		.thumb
 25931              		.thumb_func
 25933              	RTC_DateStructInit:
 25934              	.LFB124:
1001:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1002:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1003:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_DateStruct member with its default value
1004:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         (Monday, January 01 xx00).
1005:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_DateStruct: pointer to a RTC_DateTypeDef structure which will be 
1006:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         initialized.
1007:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1008:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1009:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_DateStructInit(RTC_DateTypeDef* RTC_DateStruct)
1010:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 25935              		.loc 1 1010 0
 25936              		.cfi_startproc
 25937              		@ args = 0, pretend = 0, frame = 8
 25938              		@ frame_needed = 1, uses_anonymous_args = 0
 25939              		@ link register save eliminated.
 25940 0000 80B4     		push	{r7}
 25941              	.LCFI41:
 25942              		.cfi_def_cfa_offset 4
 25943 0002 83B0     		sub	sp, sp, #12
 25944              	.LCFI42:
 25945              		.cfi_def_cfa_offset 16
 25946 0004 00AF     		add	r7, sp, #0
 25947              		.cfi_offset 7, -4
 25948              	.LCFI43:
 25949              		.cfi_def_cfa_register 7
 25950 0006 7860     		str	r0, [r7, #4]
1011:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Monday, January 01 xx00 */
1012:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_WeekDay = RTC_Weekday_Monday;
 25951              		.loc 1 1012 0
 25952 0008 7B68     		ldr	r3, [r7, #4]
 25953 000a 4FF00102 		mov	r2, #1
 25954 000e 1A70     		strb	r2, [r3, #0]
1013:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Date = 1;
 25955              		.loc 1 1013 0
 25956 0010 7B68     		ldr	r3, [r7, #4]
 25957 0012 4FF00102 		mov	r2, #1
 25958 0016 9A70     		strb	r2, [r3, #2]
1014:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Month = RTC_Month_January;
 25959              		.loc 1 1014 0
 25960 0018 7B68     		ldr	r3, [r7, #4]
 25961 001a 4FF00102 		mov	r2, #1
 25962 001e 5A70     		strb	r2, [r3, #1]
1015:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Year = 0;
 25963              		.loc 1 1015 0
 25964 0020 7B68     		ldr	r3, [r7, #4]
 25965 0022 4FF00002 		mov	r2, #0
 25966 0026 DA70     		strb	r2, [r3, #3]
1016:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 25967              		.loc 1 1016 0
 25968 0028 07F10C07 		add	r7, r7, #12
 25969 002c BD46     		mov	sp, r7
 25970 002e 80BC     		pop	{r7}
 25971 0030 7047     		bx	lr
 25972              		.cfi_endproc
 25973              	.LFE124:
 25975 0032 00BF     		.section	.text.RTC_GetDate,"ax",%progbits
 25976              		.align	2
 25977              		.global	RTC_GetDate
 25978              		.thumb
 25979              		.thumb_func
 25981              	RTC_GetDate:
 25982              	.LFB125:
1017:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1018:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1019:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC current date. 
1020:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the returned parameters.
1021:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1022:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1023:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1024:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param RTC_DateStruct: pointer to a RTC_DateTypeDef structure that will 
1025:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                        contain the returned current date configuration.     
1026:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1027:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1028:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_GetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
1029:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 25983              		.loc 1 1029 0
 25984              		.cfi_startproc
 25985              		@ args = 0, pretend = 0, frame = 16
 25986              		@ frame_needed = 1, uses_anonymous_args = 0
 25987 0000 80B5     		push	{r7, lr}
 25988              	.LCFI44:
 25989              		.cfi_def_cfa_offset 8
 25990 0002 84B0     		sub	sp, sp, #16
 25991              	.LCFI45:
 25992              		.cfi_def_cfa_offset 24
 25993 0004 00AF     		add	r7, sp, #0
 25994              		.cfi_offset 14, -4
 25995              		.cfi_offset 7, -8
 25996              	.LCFI46:
 25997              		.cfi_def_cfa_register 7
 25998 0006 7860     		str	r0, [r7, #4]
 25999 0008 3960     		str	r1, [r7, #0]
1030:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 26000              		.loc 1 1030 0
 26001 000a 4FF00003 		mov	r3, #0
 26002 000e FB60     		str	r3, [r7, #12]
1031:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1032:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1033:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
1034:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1035:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_TR register */
1036:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->DR & RTC_DR_RESERVED_MASK); 
 26003              		.loc 1 1036 0
 26004 0010 234B     		ldr	r3, .L83
 26005 0012 5B68     		ldr	r3, [r3, #4]
 26006 0014 23F07F43 		bic	r3, r3, #-16777216
 26007 0018 23F0C003 		bic	r3, r3, #192
 26008 001c FB60     		str	r3, [r7, #12]
1037:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1038:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Fill the structure fields with the read parameters */
1039:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Year = (uint8_t)((tmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 26009              		.loc 1 1039 0
 26010 001e FB68     		ldr	r3, [r7, #12]
 26011 0020 03F47F03 		and	r3, r3, #16711680
 26012 0024 4FEA1343 		lsr	r3, r3, #16
 26013 0028 DAB2     		uxtb	r2, r3
 26014 002a 3B68     		ldr	r3, [r7, #0]
 26015 002c DA70     		strb	r2, [r3, #3]
1040:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Month = (uint8_t)((tmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 26016              		.loc 1 1040 0
 26017 002e FB68     		ldr	r3, [r7, #12]
 26018 0030 03F4F853 		and	r3, r3, #7936
 26019 0034 4FEA1323 		lsr	r3, r3, #8
 26020 0038 DAB2     		uxtb	r2, r3
 26021 003a 3B68     		ldr	r3, [r7, #0]
 26022 003c 5A70     		strb	r2, [r3, #1]
1041:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Date = (uint8_t)(tmpreg & (RTC_DR_DT | RTC_DR_DU));
 26023              		.loc 1 1041 0
 26024 003e FB68     		ldr	r3, [r7, #12]
 26025 0040 DBB2     		uxtb	r3, r3
 26026 0042 03F03F03 		and	r3, r3, #63
 26027 0046 DAB2     		uxtb	r2, r3
 26028 0048 3B68     		ldr	r3, [r7, #0]
 26029 004a 9A70     		strb	r2, [r3, #2]
1042:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_WeekDay = (uint8_t)((tmpreg & (RTC_DR_WDU)) >> 13);
 26030              		.loc 1 1042 0
 26031 004c FB68     		ldr	r3, [r7, #12]
 26032 004e 03F46043 		and	r3, r3, #57344
 26033 0052 4FEA5333 		lsr	r3, r3, #13
 26034 0056 DAB2     		uxtb	r2, r3
 26035 0058 3B68     		ldr	r3, [r7, #0]
 26036 005a 1A70     		strb	r2, [r3, #0]
1043:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1044:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
1045:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 26037              		.loc 1 1045 0
 26038 005c 7B68     		ldr	r3, [r7, #4]
 26039 005e 002B     		cmp	r3, #0
 26040 0060 1AD1     		bne	.L81
1046:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1047:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Convert the structure parameters to Binary format */
1048:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Year = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year);
 26041              		.loc 1 1048 0
 26042 0062 3B68     		ldr	r3, [r7, #0]
 26043 0064 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 26044 0066 1846     		mov	r0, r3
 26045 0068 FFF7FEFF 		bl	RTC_Bcd2ToByte
 26046 006c 0346     		mov	r3, r0
 26047 006e 1A46     		mov	r2, r3
 26048 0070 3B68     		ldr	r3, [r7, #0]
 26049 0072 DA70     		strb	r2, [r3, #3]
1049:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 26050              		.loc 1 1049 0
 26051 0074 3B68     		ldr	r3, [r7, #0]
 26052 0076 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 26053 0078 1846     		mov	r0, r3
 26054 007a FFF7FEFF 		bl	RTC_Bcd2ToByte
 26055 007e 0346     		mov	r3, r0
 26056 0080 1A46     		mov	r2, r3
 26057 0082 3B68     		ldr	r3, [r7, #0]
 26058 0084 5A70     		strb	r2, [r3, #1]
1050:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 26059              		.loc 1 1050 0
 26060 0086 3B68     		ldr	r3, [r7, #0]
 26061 0088 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 26062 008a 1846     		mov	r0, r3
 26063 008c FFF7FEFF 		bl	RTC_Bcd2ToByte
 26064 0090 0346     		mov	r3, r0
 26065 0092 1A46     		mov	r2, r3
 26066 0094 3B68     		ldr	r3, [r7, #0]
 26067 0096 9A70     		strb	r2, [r3, #2]
 26068              	.L81:
1051:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1052:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 26069              		.loc 1 1052 0
 26070 0098 07F11007 		add	r7, r7, #16
 26071 009c BD46     		mov	sp, r7
 26072 009e 80BD     		pop	{r7, pc}
 26073              	.L84:
 26074              		.align	2
 26075              	.L83:
 26076 00a0 00280040 		.word	1073752064
 26077              		.cfi_endproc
 26078              	.LFE125:
 26080              		.section	.text.RTC_SetAlarm,"ax",%progbits
 26081              		.align	2
 26082              		.global	RTC_SetAlarm
 26083              		.thumb
 26084              		.thumb_func
 26086              	RTC_SetAlarm:
 26087              	.LFB126:
1053:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1054:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1055:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1056:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1057:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1058:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group3 Alarms configuration functions
1059:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Alarms (Alarm A and Alarm B) configuration functions 
1060:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1061:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1062:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1063:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               Alarms (Alarm A and Alarm B) configuration functions
1064:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1065:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1066:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to program and read the RTC Alarms.
1067:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1068:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1069:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1070:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1071:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1072:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1073:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Set the specified RTC Alarm.
1074:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The Alarm register can only be written when the corresponding Alarm
1075:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         is disabled (Use the RTC_AlarmCmd(DISABLE)).    
1076:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the returned parameters.
1077:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1078:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1079:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1080:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be configured.
1081:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1082:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_A: to select Alarm A
1083:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_B: to select Alarm B  
1084:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that 
1085:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                          contains the alarm configuration parameters.     
1086:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1087:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1088:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_SetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
1089:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 26088              		.loc 1 1089 0
 26089              		.cfi_startproc
 26090              		@ args = 0, pretend = 0, frame = 24
 26091              		@ frame_needed = 1, uses_anonymous_args = 0
 26092 0000 90B5     		push	{r4, r7, lr}
 26093              	.LCFI47:
 26094              		.cfi_def_cfa_offset 12
 26095 0002 87B0     		sub	sp, sp, #28
 26096              	.LCFI48:
 26097              		.cfi_def_cfa_offset 40
 26098 0004 00AF     		add	r7, sp, #0
 26099              		.cfi_offset 14, -4
 26100              		.cfi_offset 7, -8
 26101              		.cfi_offset 4, -12
 26102              	.LCFI49:
 26103              		.cfi_def_cfa_register 7
 26104 0006 F860     		str	r0, [r7, #12]
 26105 0008 B960     		str	r1, [r7, #8]
 26106 000a 7A60     		str	r2, [r7, #4]
1090:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 26107              		.loc 1 1090 0
 26108 000c 4FF00003 		mov	r3, #0
 26109 0010 7B61     		str	r3, [r7, #20]
1091:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1092:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1093:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
1094:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM(RTC_Alarm));
1095:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_ALARM_MASK(RTC_AlarmStruct->RTC_AlarmMask));
1096:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel));
1097:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1098:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 26110              		.loc 1 1098 0
 26111 0012 FB68     		ldr	r3, [r7, #12]
 26112 0014 002B     		cmp	r3, #0
 26113 0016 0AD1     		bne	.L86
1099:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1100:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 26114              		.loc 1 1100 0
 26115 0018 4E4B     		ldr	r3, .L96
 26116 001a 9B68     		ldr	r3, [r3, #8]
 26117 001c 03F04003 		and	r3, r3, #64
 26118 0020 002B     		cmp	r3, #0
 26119 0022 29D1     		bne	.L88
1101:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1102:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours));
1103:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
1104:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } 
1105:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1106:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1107:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
 26120              		.loc 1 1107 0
 26121 0024 7B68     		ldr	r3, [r7, #4]
 26122 0026 4FF00002 		mov	r2, #0
 26123 002a DA70     		strb	r2, [r3, #3]
 26124 002c 24E0     		b	.L88
 26125              	.L86:
1108:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours));
1109:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1110:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes));
1111:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds));
1112:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1113:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel == RTC_AlarmDateWeekDaySel_Date)
1114:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1115:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(RTC_AlarmStruct->RTC_AlarmDateWeekDay));
1116:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1117:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1118:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1119:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_AlarmStruct->RTC_AlarmDateWeekDay));
1120:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1121:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1122:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1123:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1124:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 26126              		.loc 1 1124 0
 26127 002e 494B     		ldr	r3, .L96
 26128 0030 9B68     		ldr	r3, [r3, #8]
 26129 0032 03F04003 		and	r3, r3, #64
 26130 0036 002B     		cmp	r3, #0
 26131 0038 07D0     		beq	.L89
1125:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1126:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours);
 26132              		.loc 1 1126 0
 26133 003a 7B68     		ldr	r3, [r7, #4]
 26134 003c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 26135 003e 1846     		mov	r0, r3
 26136 0040 FFF7FEFF 		bl	RTC_Bcd2ToByte
 26137 0044 0346     		mov	r3, r0
 26138 0046 7B61     		str	r3, [r7, #20]
 26139 0048 03E0     		b	.L90
 26140              	.L89:
1127:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(tmpreg));
1128:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
1129:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } 
1130:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1131:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1132:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
 26141              		.loc 1 1132 0
 26142 004a 7B68     		ldr	r3, [r7, #4]
 26143 004c 4FF00002 		mov	r2, #0
 26144 0050 DA70     		strb	r2, [r3, #3]
 26145              	.L90:
1133:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours)));
1134:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1135:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1136:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes)));
1137:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)));
1138:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1139:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel == RTC_AlarmDateWeekDaySel_Date)
 26146              		.loc 1 1139 0
 26147 0052 7B68     		ldr	r3, [r7, #4]
 26148 0054 9B68     		ldr	r3, [r3, #8]
 26149 0056 002B     		cmp	r3, #0
 26150 0058 07D1     		bne	.L91
1140:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1141:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 26151              		.loc 1 1141 0
 26152 005a 7B68     		ldr	r3, [r7, #4]
 26153 005c 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 26154 005e 1846     		mov	r0, r3
 26155 0060 FFF7FEFF 		bl	RTC_Bcd2ToByte
 26156 0064 0346     		mov	r3, r0
 26157 0066 7B61     		str	r3, [r7, #20]
 26158 0068 06E0     		b	.L88
 26159              	.L91:
1142:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(tmpreg));    
1143:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1144:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1145:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1146:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 26160              		.loc 1 1146 0
 26161 006a 7B68     		ldr	r3, [r7, #4]
 26162 006c 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 26163 006e 1846     		mov	r0, r3
 26164 0070 FFF7FEFF 		bl	RTC_Bcd2ToByte
 26165 0074 0346     		mov	r3, r0
 26166 0076 7B61     		str	r3, [r7, #20]
 26167              	.L88:
1147:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(tmpreg));      
1148:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }    
1149:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1150:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1151:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
1152:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format != RTC_Format_BIN)
 26168              		.loc 1 1152 0
 26169 0078 FB68     		ldr	r3, [r7, #12]
 26170 007a 002B     		cmp	r3, #0
 26171 007c 1ED0     		beq	.L92
1153:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1154:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 26172              		.loc 1 1154 0
 26173 007e 7B68     		ldr	r3, [r7, #4]
 26174 0080 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 26175 0082 4FEA0342 		lsl	r2, r3, #16
1155:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 26176              		.loc 1 1155 0
 26177 0086 7B68     		ldr	r3, [r7, #4]
 26178 0088 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 26179 008a 4FEA0323 		lsl	r3, r3, #8
1154:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 26180              		.loc 1 1154 0
 26181 008e 1A43     		orrs	r2, r2, r3
1156:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 26182              		.loc 1 1156 0
 26183 0090 7B68     		ldr	r3, [r7, #4]
 26184 0092 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
1155:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 26185              		.loc 1 1155 0
 26186 0094 1A43     		orrs	r2, r2, r3
1157:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 26187              		.loc 1 1157 0
 26188 0096 7B68     		ldr	r3, [r7, #4]
 26189 0098 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 26190 009a 4FEA0343 		lsl	r3, r3, #16
1156:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 26191              		.loc 1 1156 0
 26192 009e 1A43     		orrs	r2, r2, r3
1158:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 26193              		.loc 1 1158 0
 26194 00a0 7B68     		ldr	r3, [r7, #4]
 26195 00a2 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 26196 00a4 4FEA0363 		lsl	r3, r3, #24
1157:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 26197              		.loc 1 1157 0
 26198 00a8 1A43     		orrs	r2, r2, r3
1159:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 26199              		.loc 1 1159 0
 26200 00aa 7B68     		ldr	r3, [r7, #4]
 26201 00ac 9B68     		ldr	r3, [r3, #8]
1158:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 26202              		.loc 1 1158 0
 26203 00ae 1A43     		orrs	r2, r2, r3
1160:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
 26204              		.loc 1 1160 0
 26205 00b0 7B68     		ldr	r3, [r7, #4]
 26206 00b2 5B68     		ldr	r3, [r3, #4]
1154:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 26207              		.loc 1 1154 0
 26208 00b4 42EA0303 		orr	r3, r2, r3
 26209 00b8 7B61     		str	r3, [r7, #20]
 26210 00ba 30E0     		b	.L93
 26211              	.L92:
1161:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
1162:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1163:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1164:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 26212              		.loc 1 1164 0
 26213 00bc 7B68     		ldr	r3, [r7, #4]
 26214 00be 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 26215 00c0 1846     		mov	r0, r3
 26216 00c2 FFF7FEFF 		bl	RTC_ByteToBcd2
 26217 00c6 0346     		mov	r3, r0
 26218 00c8 4FEA0344 		lsl	r4, r3, #16
1165:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 26219              		.loc 1 1165 0
 26220 00cc 7B68     		ldr	r3, [r7, #4]
 26221 00ce 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 26222 00d0 1846     		mov	r0, r3
 26223 00d2 FFF7FEFF 		bl	RTC_ByteToBcd2
 26224 00d6 0346     		mov	r3, r0
 26225 00d8 4FEA0323 		lsl	r3, r3, #8
1164:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 26226              		.loc 1 1164 0
 26227 00dc 1C43     		orrs	r4, r4, r3
1166:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 26228              		.loc 1 1166 0
 26229 00de 7B68     		ldr	r3, [r7, #4]
 26230 00e0 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 26231 00e2 1846     		mov	r0, r3
 26232 00e4 FFF7FEFF 		bl	RTC_ByteToBcd2
 26233 00e8 0346     		mov	r3, r0
1165:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 26234              		.loc 1 1165 0
 26235 00ea 44EA0302 		orr	r2, r4, r3
1167:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 26236              		.loc 1 1167 0
 26237 00ee 7B68     		ldr	r3, [r7, #4]
 26238 00f0 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 26239 00f2 4FEA0343 		lsl	r3, r3, #16
1166:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 26240              		.loc 1 1166 0
 26241 00f6 42EA0304 		orr	r4, r2, r3
1168:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 26242              		.loc 1 1168 0
 26243 00fa 7B68     		ldr	r3, [r7, #4]
 26244 00fc 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 26245 00fe 1846     		mov	r0, r3
 26246 0100 FFF7FEFF 		bl	RTC_ByteToBcd2
 26247 0104 0346     		mov	r3, r0
 26248 0106 4FEA0363 		lsl	r3, r3, #24
1167:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 26249              		.loc 1 1167 0
 26250 010a 44EA0302 		orr	r2, r4, r3
1169:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 26251              		.loc 1 1169 0
 26252 010e 7B68     		ldr	r3, [r7, #4]
 26253 0110 9B68     		ldr	r3, [r3, #8]
1168:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 26254              		.loc 1 1168 0
 26255 0112 1A43     		orrs	r2, r2, r3
1170:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
 26256              		.loc 1 1170 0
 26257 0114 7B68     		ldr	r3, [r7, #4]
 26258 0116 5B68     		ldr	r3, [r3, #4]
1164:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 26259              		.loc 1 1164 0
 26260 0118 42EA0303 		orr	r3, r2, r3
 26261 011c 7B61     		str	r3, [r7, #20]
 26262              	.L93:
1171:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1172:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1173:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1174:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 26263              		.loc 1 1174 0
 26264 011e 0D4B     		ldr	r3, .L96
 26265 0120 4FF0CA02 		mov	r2, #202
 26266 0124 5A62     		str	r2, [r3, #36]
1175:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 26267              		.loc 1 1175 0
 26268 0126 0B4B     		ldr	r3, .L96
 26269 0128 4FF05302 		mov	r2, #83
 26270 012c 5A62     		str	r2, [r3, #36]
1176:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1177:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the Alarm register */
1178:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
 26271              		.loc 1 1178 0
 26272 012e BB68     		ldr	r3, [r7, #8]
 26273 0130 B3F5807F 		cmp	r3, #256
 26274 0134 03D1     		bne	.L94
1179:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1180:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ALRMAR = (uint32_t)tmpreg;
 26275              		.loc 1 1180 0
 26276 0136 074B     		ldr	r3, .L96
 26277 0138 7A69     		ldr	r2, [r7, #20]
 26278 013a DA61     		str	r2, [r3, #28]
 26279 013c 02E0     		b	.L95
 26280              	.L94:
1181:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1182:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1183:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1184:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ALRMBR = (uint32_t)tmpreg;
 26281              		.loc 1 1184 0
 26282 013e 054B     		ldr	r3, .L96
 26283 0140 7A69     		ldr	r2, [r7, #20]
 26284 0142 1A62     		str	r2, [r3, #32]
 26285              	.L95:
1185:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1186:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1187:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1188:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;   
 26286              		.loc 1 1188 0
 26287 0144 034B     		ldr	r3, .L96
 26288 0146 4FF0FF02 		mov	r2, #255
 26289 014a 5A62     		str	r2, [r3, #36]
1189:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 26290              		.loc 1 1189 0
 26291 014c 07F11C07 		add	r7, r7, #28
 26292 0150 BD46     		mov	sp, r7
 26293 0152 90BD     		pop	{r4, r7, pc}
 26294              	.L97:
 26295              		.align	2
 26296              	.L96:
 26297 0154 00280040 		.word	1073752064
 26298              		.cfi_endproc
 26299              	.LFE126:
 26301              		.section	.text.RTC_AlarmStructInit,"ax",%progbits
 26302              		.align	2
 26303              		.global	RTC_AlarmStructInit
 26304              		.thumb
 26305              		.thumb_func
 26307              	RTC_AlarmStructInit:
 26308              	.LFB127:
1190:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1191:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1192:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_AlarmStruct member with its default value
1193:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         (Time = 00h:00mn:00sec / Date = 1st day of the month/Mask =
1194:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         all fields are masked).
1195:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmStruct: pointer to a @ref RTC_AlarmTypeDef structure which
1196:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         will be initialized.
1197:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1198:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1199:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_AlarmStructInit(RTC_AlarmTypeDef* RTC_AlarmStruct)
1200:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 26309              		.loc 1 1200 0
 26310              		.cfi_startproc
 26311              		@ args = 0, pretend = 0, frame = 8
 26312              		@ frame_needed = 1, uses_anonymous_args = 0
 26313              		@ link register save eliminated.
 26314 0000 80B4     		push	{r7}
 26315              	.LCFI50:
 26316              		.cfi_def_cfa_offset 4
 26317 0002 83B0     		sub	sp, sp, #12
 26318              	.LCFI51:
 26319              		.cfi_def_cfa_offset 16
 26320 0004 00AF     		add	r7, sp, #0
 26321              		.cfi_offset 7, -4
 26322              	.LCFI52:
 26323              		.cfi_def_cfa_register 7
 26324 0006 7860     		str	r0, [r7, #4]
1201:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Alarm Time Settings : Time = 00h:00mn:00sec */
1202:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = RTC_H12_AM;
 26325              		.loc 1 1202 0
 26326 0008 7B68     		ldr	r3, [r7, #4]
 26327 000a 4FF00002 		mov	r2, #0
 26328 000e DA70     		strb	r2, [r3, #3]
1203:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = 0;
 26329              		.loc 1 1203 0
 26330 0010 7B68     		ldr	r3, [r7, #4]
 26331 0012 4FF00002 		mov	r2, #0
 26332 0016 1A70     		strb	r2, [r3, #0]
1204:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = 0;
 26333              		.loc 1 1204 0
 26334 0018 7B68     		ldr	r3, [r7, #4]
 26335 001a 4FF00002 		mov	r2, #0
 26336 001e 5A70     		strb	r2, [r3, #1]
1205:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = 0;
 26337              		.loc 1 1205 0
 26338 0020 7B68     		ldr	r3, [r7, #4]
 26339 0022 4FF00002 		mov	r2, #0
 26340 0026 9A70     		strb	r2, [r3, #2]
1206:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1207:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Alarm Date Settings : Date = 1st day of the month */
1208:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = RTC_AlarmDateWeekDaySel_Date;
 26341              		.loc 1 1208 0
 26342 0028 7B68     		ldr	r3, [r7, #4]
 26343 002a 4FF00002 		mov	r2, #0
 26344 002e 9A60     		str	r2, [r3, #8]
1209:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = 1;
 26345              		.loc 1 1209 0
 26346 0030 7B68     		ldr	r3, [r7, #4]
 26347 0032 4FF00102 		mov	r2, #1
 26348 0036 1A73     		strb	r2, [r3, #12]
1210:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1211:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Alarm Masks Settings : Mask =  all fields are not masked */
1212:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmMask = RTC_AlarmMask_None;
 26349              		.loc 1 1212 0
 26350 0038 7B68     		ldr	r3, [r7, #4]
 26351 003a 4FF00002 		mov	r2, #0
 26352 003e 5A60     		str	r2, [r3, #4]
1213:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 26353              		.loc 1 1213 0
 26354 0040 07F10C07 		add	r7, r7, #12
 26355 0044 BD46     		mov	sp, r7
 26356 0046 80BC     		pop	{r7}
 26357 0048 7047     		bx	lr
 26358              		.cfi_endproc
 26359              	.LFE127:
 26361 004a 00BF     		.section	.text.RTC_GetAlarm,"ax",%progbits
 26362              		.align	2
 26363              		.global	RTC_GetAlarm
 26364              		.thumb
 26365              		.thumb_func
 26367              	RTC_GetAlarm:
 26368              	.LFB128:
1214:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1215:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1216:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC Alarm value and masks.
1217:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the output parameters.
1218:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1219:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1220:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1221:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be read.
1222:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1223:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_A: to select Alarm A
1224:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_B: to select Alarm B  
1225:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that will 
1226:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                          contains the output alarm configuration values.     
1227:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1228:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1229:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_GetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
1230:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 26369              		.loc 1 1230 0
 26370              		.cfi_startproc
 26371              		@ args = 0, pretend = 0, frame = 24
 26372              		@ frame_needed = 1, uses_anonymous_args = 0
 26373 0000 80B5     		push	{r7, lr}
 26374              	.LCFI53:
 26375              		.cfi_def_cfa_offset 8
 26376 0002 86B0     		sub	sp, sp, #24
 26377              	.LCFI54:
 26378              		.cfi_def_cfa_offset 32
 26379 0004 00AF     		add	r7, sp, #0
 26380              		.cfi_offset 14, -4
 26381              		.cfi_offset 7, -8
 26382              	.LCFI55:
 26383              		.cfi_def_cfa_register 7
 26384 0006 F860     		str	r0, [r7, #12]
 26385 0008 B960     		str	r1, [r7, #8]
 26386 000a 7A60     		str	r2, [r7, #4]
1231:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 26387              		.loc 1 1231 0
 26388 000c 4FF00003 		mov	r3, #0
 26389 0010 7B61     		str	r3, [r7, #20]
1232:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1233:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1234:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
1235:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM(RTC_Alarm)); 
1236:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1237:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_ALRMxR register */
1238:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
 26390              		.loc 1 1238 0
 26391 0012 BB68     		ldr	r3, [r7, #8]
 26392 0014 B3F5807F 		cmp	r3, #256
 26393 0018 03D1     		bne	.L100
1239:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1240:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(RTC->ALRMAR);
 26394              		.loc 1 1240 0
 26395 001a 314B     		ldr	r3, .L103
 26396 001c DB69     		ldr	r3, [r3, #28]
 26397 001e 7B61     		str	r3, [r7, #20]
 26398 0020 02E0     		b	.L101
 26399              	.L100:
1241:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1242:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1243:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1244:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(RTC->ALRMBR);
 26400              		.loc 1 1244 0
 26401 0022 2F4B     		ldr	r3, .L103
 26402 0024 1B6A     		ldr	r3, [r3, #32]
 26403 0026 7B61     		str	r3, [r7, #20]
 26404              	.L101:
1245:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1246:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1247:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Fill the structure with the read parameters */
1248:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | \
 26405              		.loc 1 1248 0
 26406 0028 7B69     		ldr	r3, [r7, #20]
 26407 002a 03F47C13 		and	r3, r3, #4128768
 26408 002e 4FEA1343 		lsr	r3, r3, #16
 26409 0032 DAB2     		uxtb	r2, r3
 26410 0034 7B68     		ldr	r3, [r7, #4]
 26411 0036 1A70     		strb	r2, [r3, #0]
1249:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_HU)) >> 16);
1250:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | \
 26412              		.loc 1 1250 0
 26413 0038 7B69     		ldr	r3, [r7, #20]
 26414 003a 03F4FE43 		and	r3, r3, #32512
 26415 003e 4FEA1323 		lsr	r3, r3, #8
 26416 0042 DAB2     		uxtb	r2, r3
 26417 0044 7B68     		ldr	r3, [r7, #4]
 26418 0046 5A70     		strb	r2, [r3, #1]
1251:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_MNU)) >> 8);
1252:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | \
 26419              		.loc 1 1252 0
 26420 0048 7B69     		ldr	r3, [r7, #20]
 26421 004a DBB2     		uxtb	r3, r3
 26422 004c 03F07F03 		and	r3, r3, #127
 26423 0050 DAB2     		uxtb	r2, r3
 26424 0052 7B68     		ldr	r3, [r7, #4]
 26425 0054 9A70     		strb	r2, [r3, #2]
1253:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_SU));
1254:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16);
 26426              		.loc 1 1254 0
 26427 0056 7B69     		ldr	r3, [r7, #20]
 26428 0058 03F48003 		and	r3, r3, #4194304
 26429 005c 4FEA1343 		lsr	r3, r3, #16
 26430 0060 DAB2     		uxtb	r2, r3
 26431 0062 7B68     		ldr	r3, [r7, #4]
 26432 0064 DA70     		strb	r2, [r3, #3]
1255:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 
 26433              		.loc 1 1255 0
 26434 0066 7B69     		ldr	r3, [r7, #20]
 26435 0068 03F07C53 		and	r3, r3, #1056964608
 26436 006c 4FEA1363 		lsr	r3, r3, #24
 26437 0070 DAB2     		uxtb	r2, r3
 26438 0072 7B68     		ldr	r3, [r7, #4]
 26439 0074 1A73     		strb	r2, [r3, #12]
1256:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 26440              		.loc 1 1256 0
 26441 0076 7B69     		ldr	r3, [r7, #20]
 26442 0078 03F08042 		and	r2, r3, #1073741824
 26443 007c 7B68     		ldr	r3, [r7, #4]
 26444 007e 9A60     		str	r2, [r3, #8]
1257:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmMask = (uint32_t)(tmpreg & RTC_AlarmMask_All);
 26445              		.loc 1 1257 0
 26446 0080 7B69     		ldr	r3, [r7, #20]
 26447 0082 03F08032 		and	r2, r3, #-2139062144
 26448 0086 7B68     		ldr	r3, [r7, #4]
 26449 0088 5A60     		str	r2, [r3, #4]
1258:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1259:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 26450              		.loc 1 1259 0
 26451 008a FB68     		ldr	r3, [r7, #12]
 26452 008c 002B     		cmp	r3, #0
 26453 008e 23D1     		bne	.L99
1260:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1261:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 26454              		.loc 1 1261 0
 26455 0090 7B68     		ldr	r3, [r7, #4]
 26456 0092 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 26457 0094 1846     		mov	r0, r3
 26458 0096 FFF7FEFF 		bl	RTC_Bcd2ToByte
 26459 009a 0346     		mov	r3, r0
 26460 009c 1A46     		mov	r2, r3
 26461 009e 7B68     		ldr	r3, [r7, #4]
 26462 00a0 1A70     		strb	r2, [r3, #0]
1262:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Hours);
1263:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 26463              		.loc 1 1263 0
 26464 00a2 7B68     		ldr	r3, [r7, #4]
 26465 00a4 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 26466 00a6 1846     		mov	r0, r3
 26467 00a8 FFF7FEFF 		bl	RTC_Bcd2ToByte
 26468 00ac 0346     		mov	r3, r0
 26469 00ae 1A46     		mov	r2, r3
 26470 00b0 7B68     		ldr	r3, [r7, #4]
 26471 00b2 5A70     		strb	r2, [r3, #1]
1264:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Minutes);
1265:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 26472              		.loc 1 1265 0
 26473 00b4 7B68     		ldr	r3, [r7, #4]
 26474 00b6 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 26475 00b8 1846     		mov	r0, r3
 26476 00ba FFF7FEFF 		bl	RTC_Bcd2ToByte
 26477 00be 0346     		mov	r3, r0
 26478 00c0 1A46     		mov	r2, r3
 26479 00c2 7B68     		ldr	r3, [r7, #4]
 26480 00c4 9A70     		strb	r2, [r3, #2]
1266:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Seconds);
1267:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmDateWeekDay = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 26481              		.loc 1 1267 0
 26482 00c6 7B68     		ldr	r3, [r7, #4]
 26483 00c8 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 26484 00ca 1846     		mov	r0, r3
 26485 00cc FFF7FEFF 		bl	RTC_Bcd2ToByte
 26486 00d0 0346     		mov	r3, r0
 26487 00d2 1A46     		mov	r2, r3
 26488 00d4 7B68     		ldr	r3, [r7, #4]
 26489 00d6 1A73     		strb	r2, [r3, #12]
 26490              	.L99:
1268:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
1269:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 26491              		.loc 1 1269 0
 26492 00d8 07F11807 		add	r7, r7, #24
 26493 00dc BD46     		mov	sp, r7
 26494 00de 80BD     		pop	{r7, pc}
 26495              	.L104:
 26496              		.align	2
 26497              	.L103:
 26498 00e0 00280040 		.word	1073752064
 26499              		.cfi_endproc
 26500              	.LFE128:
 26502              		.section	.text.RTC_AlarmCmd,"ax",%progbits
 26503              		.align	2
 26504              		.global	RTC_AlarmCmd
 26505              		.thumb
 26506              		.thumb_func
 26508              	RTC_AlarmCmd:
 26509              	.LFB129:
1270:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1271:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1272:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the specified RTC Alarm.
1273:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be configured.
1274:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
1275:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_A: to select Alarm A
1276:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_B: to select Alarm B  
1277:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the specified alarm.
1278:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1279:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1280:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Alarm is enabled/disabled
1281:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Alarm is not enabled/disabled  
1282:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1283:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_AlarmCmd(uint32_t RTC_Alarm, FunctionalState NewState)
1284:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 26510              		.loc 1 1284 0
 26511              		.cfi_startproc
 26512              		@ args = 0, pretend = 0, frame = 24
 26513              		@ frame_needed = 1, uses_anonymous_args = 0
 26514              		@ link register save eliminated.
 26515 0000 80B4     		push	{r7}
 26516              	.LCFI56:
 26517              		.cfi_def_cfa_offset 4
 26518 0002 87B0     		sub	sp, sp, #28
 26519              	.LCFI57:
 26520              		.cfi_def_cfa_offset 32
 26521 0004 00AF     		add	r7, sp, #0
 26522              		.cfi_offset 7, -4
 26523              	.LCFI58:
 26524              		.cfi_def_cfa_register 7
 26525 0006 7860     		str	r0, [r7, #4]
 26526 0008 0B46     		mov	r3, r1
 26527 000a FB70     		strb	r3, [r7, #3]
1285:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t alarmcounter = 0x00;
 26528              		.loc 1 1285 0
 26529 000c 4FF00003 		mov	r3, #0
 26530 0010 FB60     		str	r3, [r7, #12]
1286:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t alarmstatus = 0x00;
 26531              		.loc 1 1286 0
 26532 0012 4FF00003 		mov	r3, #0
 26533 0016 3B61     		str	r3, [r7, #16]
1287:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 26534              		.loc 1 1287 0
 26535 0018 4FF00003 		mov	r3, #0
 26536 001c FB75     		strb	r3, [r7, #23]
1288:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1289:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1290:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CMD_ALARM(RTC_Alarm));
1291:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1292:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1293:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1294:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 26537              		.loc 1 1294 0
 26538 001e 264B     		ldr	r3, .L111
 26539 0020 4FF0CA02 		mov	r2, #202
 26540 0024 5A62     		str	r2, [r3, #36]
1295:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 26541              		.loc 1 1295 0
 26542 0026 244B     		ldr	r3, .L111
 26543 0028 4FF05302 		mov	r2, #83
 26544 002c 5A62     		str	r2, [r3, #36]
1296:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1297:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the Alarm state */
1298:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 26545              		.loc 1 1298 0
 26546 002e FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 26547 0030 002B     		cmp	r3, #0
 26548 0032 0AD0     		beq	.L106
1299:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1300:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_Alarm;
 26549              		.loc 1 1300 0
 26550 0034 204B     		ldr	r3, .L111
 26551 0036 204A     		ldr	r2, .L111
 26552 0038 9168     		ldr	r1, [r2, #8]
 26553 003a 7A68     		ldr	r2, [r7, #4]
 26554 003c 41EA0202 		orr	r2, r1, r2
 26555 0040 9A60     		str	r2, [r3, #8]
1301:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1302:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;    
 26556              		.loc 1 1302 0
 26557 0042 4FF00103 		mov	r3, #1
 26558 0046 FB75     		strb	r3, [r7, #23]
 26559 0048 2BE0     		b	.L107
 26560              	.L106:
1303:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1304:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1305:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   { 
1306:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable the Alarm in RTC_CR register */
1307:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_Alarm;
 26561              		.loc 1 1307 0
 26562 004a 1B4B     		ldr	r3, .L111
 26563 004c 1A4A     		ldr	r2, .L111
 26564 004e 9168     		ldr	r1, [r2, #8]
 26565 0050 7A68     		ldr	r2, [r7, #4]
 26566 0052 6FEA0202 		mvn	r2, r2
 26567 0056 01EA0202 		and	r2, r1, r2
 26568 005a 9A60     		str	r2, [r3, #8]
 26569              	.L109:
1308:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    
1309:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
1310:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     do
1311:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1312:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       alarmstatus = RTC->ISR & (RTC_Alarm >> 8);
 26570              		.loc 1 1312 0 discriminator 1
 26571 005c 164B     		ldr	r3, .L111
 26572 005e DA68     		ldr	r2, [r3, #12]
 26573 0060 7B68     		ldr	r3, [r7, #4]
 26574 0062 4FEA1323 		lsr	r3, r3, #8
 26575 0066 02EA0303 		and	r3, r2, r3
 26576 006a 3B61     		str	r3, [r7, #16]
1313:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       alarmcounter++;  
 26577              		.loc 1 1313 0 discriminator 1
 26578 006c FB68     		ldr	r3, [r7, #12]
 26579 006e 03F10103 		add	r3, r3, #1
 26580 0072 FB60     		str	r3, [r7, #12]
1314:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((alarmcounter != INITMODE_TIMEOUT) && (alarmstatus == 0x00));
 26581              		.loc 1 1314 0 discriminator 1
 26582 0074 FB68     		ldr	r3, [r7, #12]
 26583 0076 B3F5803F 		cmp	r3, #65536
 26584 007a 02D0     		beq	.L108
 26585 007c 3B69     		ldr	r3, [r7, #16]
 26586 007e 002B     		cmp	r3, #0
 26587 0080 ECD0     		beq	.L109
 26588              	.L108:
1315:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1316:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & (RTC_Alarm >> 8)) == RESET)
 26589              		.loc 1 1316 0
 26590 0082 0D4B     		ldr	r3, .L111
 26591 0084 DA68     		ldr	r2, [r3, #12]
 26592 0086 7B68     		ldr	r3, [r7, #4]
 26593 0088 4FEA1323 		lsr	r3, r3, #8
 26594 008c 02EA0303 		and	r3, r2, r3
 26595 0090 002B     		cmp	r3, #0
 26596 0092 03D1     		bne	.L110
1317:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1318:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 26597              		.loc 1 1318 0
 26598 0094 4FF00003 		mov	r3, #0
 26599 0098 FB75     		strb	r3, [r7, #23]
 26600 009a 02E0     		b	.L107
 26601              	.L110:
1319:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } 
1320:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1321:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1322:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = SUCCESS;
 26602              		.loc 1 1322 0
 26603 009c 4FF00103 		mov	r3, #1
 26604 00a0 FB75     		strb	r3, [r7, #23]
 26605              	.L107:
1323:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }        
1324:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1325:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1326:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1327:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 26606              		.loc 1 1327 0
 26607 00a2 054B     		ldr	r3, .L111
 26608 00a4 4FF0FF02 		mov	r2, #255
 26609 00a8 5A62     		str	r2, [r3, #36]
1328:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1329:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 26610              		.loc 1 1329 0
 26611 00aa FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1330:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 26612              		.loc 1 1330 0
 26613 00ac 1846     		mov	r0, r3
 26614 00ae 07F11C07 		add	r7, r7, #28
 26615 00b2 BD46     		mov	sp, r7
 26616 00b4 80BC     		pop	{r7}
 26617 00b6 7047     		bx	lr
 26618              	.L112:
 26619              		.align	2
 26620              	.L111:
 26621 00b8 00280040 		.word	1073752064
 26622              		.cfi_endproc
 26623              	.LFE129:
 26625              		.section	.text.RTC_AlarmSubSecondConfig,"ax",%progbits
 26626              		.align	2
 26627              		.global	RTC_AlarmSubSecondConfig
 26628              		.thumb
 26629              		.thumb_func
 26631              	RTC_AlarmSubSecondConfig:
 26632              	.LFB130:
1331:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1332:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1333:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configure the RTC AlarmA/B Subseconds value and mask.*
1334:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   This function is performed only when the Alarm is disabled. 
1335:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be configured.
1336:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1337:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_A: to select Alarm A
1338:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_B: to select Alarm B
1339:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmSubSecondValue: specifies the Subseconds value.
1340:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be a value from 0 to 0x00007FFF.
1341:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmSubSecondMask:  specifies the Subseconds Mask.
1342:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be any combination of the following values:
1343:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_All    : All Alarm SS fields are masked.
1344:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          There is no comparison on sub seconds for Alarm.
1345:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_1 : SS[14:1] are don't care in Alarm comparison.
1346:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[0] is compared
1347:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_2 : SS[14:2] are don't care in Alarm comparison.
1348:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[1:0] are compared
1349:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_3 : SS[14:3] are don't care in Alarm comparison.
1350:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[2:0] are compared
1351:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_4 : SS[14:4] are don't care in Alarm comparison.
1352:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[3:0] are compared
1353:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_5 : SS[14:5] are don't care in Alarm comparison.
1354:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[4:0] are compared
1355:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_6 : SS[14:6] are don't care in Alarm comparison.
1356:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[5:0] are compared
1357:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_7 : SS[14:7] are don't care in Alarm comparison.
1358:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[6:0] are compared
1359:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_8 : SS[14:8] are don't care in Alarm comparison.
1360:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[7:0] are compared
1361:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_9 : SS[14:9] are don't care in Alarm comparison.
1362:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[8:0] are compared
1363:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_10: SS[14:10] are don't care in Alarm comparison.
1364:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[9:0] are compared
1365:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_11: SS[14:11] are don't care in Alarm comparison.
1366:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[10:0] are compared
1367:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_12: SS[14:12] are don't care in Alarm comparison.
1368:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[11:0] are compared
1369:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_13: SS[14:13] are don't care in Alarm comparison.
1370:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[12:0] are compared
1371:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14   : SS[14] is don't care in Alarm comparison.
1372:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[13:0] are compared
1373:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_None   : SS[14:0] are compared and must match
1374:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          to activate alarm
1375:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1376:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1377:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_AlarmSubSecondConfig(uint32_t RTC_Alarm, uint32_t RTC_AlarmSubSecondValue, uint32_t RTC_Al
1378:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 26633              		.loc 1 1378 0
 26634              		.cfi_startproc
 26635              		@ args = 0, pretend = 0, frame = 24
 26636              		@ frame_needed = 1, uses_anonymous_args = 0
 26637              		@ link register save eliminated.
 26638 0000 80B4     		push	{r7}
 26639              	.LCFI59:
 26640              		.cfi_def_cfa_offset 4
 26641 0002 87B0     		sub	sp, sp, #28
 26642              	.LCFI60:
 26643              		.cfi_def_cfa_offset 32
 26644 0004 00AF     		add	r7, sp, #0
 26645              		.cfi_offset 7, -4
 26646              	.LCFI61:
 26647              		.cfi_def_cfa_register 7
 26648 0006 F860     		str	r0, [r7, #12]
 26649 0008 B960     		str	r1, [r7, #8]
 26650 000a 7A60     		str	r2, [r7, #4]
1379:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 26651              		.loc 1 1379 0
 26652 000c 4FF00003 		mov	r3, #0
 26653 0010 7B61     		str	r3, [r7, #20]
1380:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1381:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1382:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM(RTC_Alarm));
1383:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(RTC_AlarmSubSecondValue));
1384:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(RTC_AlarmSubSecondMask));
1385:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1386:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1387:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 26654              		.loc 1 1387 0
 26655 0012 104B     		ldr	r3, .L116
 26656 0014 4FF0CA02 		mov	r2, #202
 26657 0018 5A62     		str	r2, [r3, #36]
1388:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 26658              		.loc 1 1388 0
 26659 001a 0E4B     		ldr	r3, .L116
 26660 001c 4FF05302 		mov	r2, #83
 26661 0020 5A62     		str	r2, [r3, #36]
1389:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1390:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the Alarm A or Alarm B SubSecond registers */
1391:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t) (uint32_t)(RTC_AlarmSubSecondValue) | (uint32_t)(RTC_AlarmSubSecondMask);
 26662              		.loc 1 1391 0
 26663 0022 BA68     		ldr	r2, [r7, #8]
 26664 0024 7B68     		ldr	r3, [r7, #4]
 26665 0026 42EA0303 		orr	r3, r2, r3
 26666 002a 7B61     		str	r3, [r7, #20]
1392:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1393:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
 26667              		.loc 1 1393 0
 26668 002c FB68     		ldr	r3, [r7, #12]
 26669 002e B3F5807F 		cmp	r3, #256
 26670 0032 03D1     		bne	.L114
1394:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1395:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the AlarmA SubSecond register */
1396:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ALRMASSR = tmpreg;
 26671              		.loc 1 1396 0
 26672 0034 074B     		ldr	r3, .L116
 26673 0036 7A69     		ldr	r2, [r7, #20]
 26674 0038 5A64     		str	r2, [r3, #68]
 26675 003a 02E0     		b	.L115
 26676              	.L114:
1397:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1398:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1399:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1400:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Alarm B SubSecond register */
1401:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ALRMBSSR = tmpreg;
 26677              		.loc 1 1401 0
 26678 003c 054B     		ldr	r3, .L116
 26679 003e 7A69     		ldr	r2, [r7, #20]
 26680 0040 9A64     		str	r2, [r3, #72]
 26681              	.L115:
1402:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1403:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1404:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1405:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 26682              		.loc 1 1405 0
 26683 0042 044B     		ldr	r3, .L116
 26684 0044 4FF0FF02 		mov	r2, #255
 26685 0048 5A62     		str	r2, [r3, #36]
1406:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1407:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 26686              		.loc 1 1407 0
 26687 004a 07F11C07 		add	r7, r7, #28
 26688 004e BD46     		mov	sp, r7
 26689 0050 80BC     		pop	{r7}
 26690 0052 7047     		bx	lr
 26691              	.L117:
 26692              		.align	2
 26693              	.L116:
 26694 0054 00280040 		.word	1073752064
 26695              		.cfi_endproc
 26696              	.LFE130:
 26698              		.section	.text.RTC_GetAlarmSubSecond,"ax",%progbits
 26699              		.align	2
 26700              		.global	RTC_GetAlarmSubSecond
 26701              		.thumb
 26702              		.thumb_func
 26704              	RTC_GetAlarmSubSecond:
 26705              	.LFB131:
1408:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1409:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1410:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Gets the RTC Alarm Subseconds value.
1411:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be read.
1412:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1413:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_A: to select Alarm A
1414:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_B: to select Alarm B
1415:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
1416:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval RTC Alarm Subseconds value.
1417:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1418:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_GetAlarmSubSecond(uint32_t RTC_Alarm)
1419:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 26706              		.loc 1 1419 0
 26707              		.cfi_startproc
 26708              		@ args = 0, pretend = 0, frame = 16
 26709              		@ frame_needed = 1, uses_anonymous_args = 0
 26710              		@ link register save eliminated.
 26711 0000 80B4     		push	{r7}
 26712              	.LCFI62:
 26713              		.cfi_def_cfa_offset 4
 26714 0002 85B0     		sub	sp, sp, #20
 26715              	.LCFI63:
 26716              		.cfi_def_cfa_offset 24
 26717 0004 00AF     		add	r7, sp, #0
 26718              		.cfi_offset 7, -4
 26719              	.LCFI64:
 26720              		.cfi_def_cfa_register 7
 26721 0006 7860     		str	r0, [r7, #4]
1420:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 26722              		.loc 1 1420 0
 26723 0008 4FF00003 		mov	r3, #0
 26724 000c FB60     		str	r3, [r7, #12]
1421:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1422:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_ALRMxR register */
1423:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
 26725              		.loc 1 1423 0
 26726 000e 7B68     		ldr	r3, [r7, #4]
 26727 0010 B3F5807F 		cmp	r3, #256
 26728 0014 07D1     		bne	.L119
1424:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1425:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)((RTC->ALRMASSR) & RTC_ALRMASSR_SS);
 26729              		.loc 1 1425 0
 26730 0016 0B4B     		ldr	r3, .L121
 26731 0018 5B6C     		ldr	r3, [r3, #68]
 26732 001a 4FEA4343 		lsl	r3, r3, #17
 26733 001e 4FEA5343 		lsr	r3, r3, #17
 26734 0022 FB60     		str	r3, [r7, #12]
 26735 0024 06E0     		b	.L120
 26736              	.L119:
1426:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1427:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1428:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1429:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)((RTC->ALRMBSSR) & RTC_ALRMBSSR_SS);
 26737              		.loc 1 1429 0
 26738 0026 074B     		ldr	r3, .L121
 26739 0028 9B6C     		ldr	r3, [r3, #72]
 26740 002a 4FEA4343 		lsl	r3, r3, #17
 26741 002e 4FEA5343 		lsr	r3, r3, #17
 26742 0032 FB60     		str	r3, [r7, #12]
 26743              	.L120:
1430:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1431:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1432:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (tmpreg);
 26744              		.loc 1 1432 0
 26745 0034 FB68     		ldr	r3, [r7, #12]
1433:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 26746              		.loc 1 1433 0
 26747 0036 1846     		mov	r0, r3
 26748 0038 07F11407 		add	r7, r7, #20
 26749 003c BD46     		mov	sp, r7
 26750 003e 80BC     		pop	{r7}
 26751 0040 7047     		bx	lr
 26752              	.L122:
 26753 0042 00BF     		.align	2
 26754              	.L121:
 26755 0044 00280040 		.word	1073752064
 26756              		.cfi_endproc
 26757              	.LFE131:
 26759              		.section	.text.RTC_WakeUpClockConfig,"ax",%progbits
 26760              		.align	2
 26761              		.global	RTC_WakeUpClockConfig
 26762              		.thumb
 26763              		.thumb_func
 26765              	RTC_WakeUpClockConfig:
 26766              	.LFB132:
1434:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1435:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1436:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1437:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1438:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1439:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group4 WakeUp Timer configuration functions
1440:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   WakeUp Timer configuration functions 
1441:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1442:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1443:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1444:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                      WakeUp Timer configuration functions
1445:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1446:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1447:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to program and read the RTC WakeUp.
1448:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1449:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1450:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1451:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1452:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1453:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1454:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the RTC Wakeup clock source.
1455:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The WakeUp Clock source can only be changed when the RTC WakeUp
1456:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         is disabled (Use the RTC_WakeUpCmd(DISABLE)).      
1457:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_WakeUpClock: Wakeup Clock source.
1458:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1459:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div16: RTC Wakeup Counter Clock = RTCCLK/16
1460:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div8: RTC Wakeup Counter Clock = RTCCLK/8
1461:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div4: RTC Wakeup Counter Clock = RTCCLK/4
1462:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div2: RTC Wakeup Counter Clock = RTCCLK/2
1463:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_CK_SPRE_16bits: RTC Wakeup Counter Clock = CK_SPRE
1464:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_CK_SPRE_17bits: RTC Wakeup Counter Clock = CK_SPRE
1465:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1466:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1467:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_WakeUpClockConfig(uint32_t RTC_WakeUpClock)
1468:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 26767              		.loc 1 1468 0
 26768              		.cfi_startproc
 26769              		@ args = 0, pretend = 0, frame = 8
 26770              		@ frame_needed = 1, uses_anonymous_args = 0
 26771              		@ link register save eliminated.
 26772 0000 80B4     		push	{r7}
 26773              	.LCFI65:
 26774              		.cfi_def_cfa_offset 4
 26775 0002 83B0     		sub	sp, sp, #12
 26776              	.LCFI66:
 26777              		.cfi_def_cfa_offset 16
 26778 0004 00AF     		add	r7, sp, #0
 26779              		.cfi_offset 7, -4
 26780              	.LCFI67:
 26781              		.cfi_def_cfa_register 7
 26782 0006 7860     		str	r0, [r7, #4]
1469:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1470:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_WAKEUP_CLOCK(RTC_WakeUpClock));
1471:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1472:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1473:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 26783              		.loc 1 1473 0
 26784 0008 0E4B     		ldr	r3, .L124
 26785 000a 4FF0CA02 		mov	r2, #202
 26786 000e 5A62     		str	r2, [r3, #36]
1474:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 26787              		.loc 1 1474 0
 26788 0010 0C4B     		ldr	r3, .L124
 26789 0012 4FF05302 		mov	r2, #83
 26790 0016 5A62     		str	r2, [r3, #36]
1475:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1476:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear the Wakeup Timer clock source bits in CR register */
1477:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 26791              		.loc 1 1477 0
 26792 0018 0A4B     		ldr	r3, .L124
 26793 001a 0A4A     		ldr	r2, .L124
 26794 001c 9268     		ldr	r2, [r2, #8]
 26795 001e 22F00702 		bic	r2, r2, #7
 26796 0022 9A60     		str	r2, [r3, #8]
1478:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1479:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the clock source */
1480:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)RTC_WakeUpClock;
 26797              		.loc 1 1480 0
 26798 0024 074B     		ldr	r3, .L124
 26799 0026 074A     		ldr	r2, .L124
 26800 0028 9168     		ldr	r1, [r2, #8]
 26801 002a 7A68     		ldr	r2, [r7, #4]
 26802 002c 41EA0202 		orr	r2, r1, r2
 26803 0030 9A60     		str	r2, [r3, #8]
1481:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1482:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1483:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 26804              		.loc 1 1483 0
 26805 0032 044B     		ldr	r3, .L124
 26806 0034 4FF0FF02 		mov	r2, #255
 26807 0038 5A62     		str	r2, [r3, #36]
1484:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 26808              		.loc 1 1484 0
 26809 003a 07F10C07 		add	r7, r7, #12
 26810 003e BD46     		mov	sp, r7
 26811 0040 80BC     		pop	{r7}
 26812 0042 7047     		bx	lr
 26813              	.L125:
 26814              		.align	2
 26815              	.L124:
 26816 0044 00280040 		.word	1073752064
 26817              		.cfi_endproc
 26818              	.LFE132:
 26820              		.section	.text.RTC_SetWakeUpCounter,"ax",%progbits
 26821              		.align	2
 26822              		.global	RTC_SetWakeUpCounter
 26823              		.thumb
 26824              		.thumb_func
 26826              	RTC_SetWakeUpCounter:
 26827              	.LFB133:
1485:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1486:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1487:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the RTC Wakeup counter.
1488:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The RTC WakeUp counter can only be written when the RTC WakeUp
1489:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         is disabled (Use the RTC_WakeUpCmd(DISABLE)).        
1490:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_WakeUpCounter: specifies the WakeUp counter.
1491:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be a value from 0x0000 to 0xFFFF. 
1492:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1493:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1494:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_SetWakeUpCounter(uint32_t RTC_WakeUpCounter)
1495:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 26828              		.loc 1 1495 0
 26829              		.cfi_startproc
 26830              		@ args = 0, pretend = 0, frame = 8
 26831              		@ frame_needed = 1, uses_anonymous_args = 0
 26832              		@ link register save eliminated.
 26833 0000 80B4     		push	{r7}
 26834              	.LCFI68:
 26835              		.cfi_def_cfa_offset 4
 26836 0002 83B0     		sub	sp, sp, #12
 26837              	.LCFI69:
 26838              		.cfi_def_cfa_offset 16
 26839 0004 00AF     		add	r7, sp, #0
 26840              		.cfi_offset 7, -4
 26841              	.LCFI70:
 26842              		.cfi_def_cfa_register 7
 26843 0006 7860     		str	r0, [r7, #4]
1496:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1497:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_WAKEUP_COUNTER(RTC_WakeUpCounter));
1498:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1499:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1500:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 26844              		.loc 1 1500 0
 26845 0008 094B     		ldr	r3, .L127
 26846 000a 4FF0CA02 		mov	r2, #202
 26847 000e 5A62     		str	r2, [r3, #36]
1501:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 26848              		.loc 1 1501 0
 26849 0010 074B     		ldr	r3, .L127
 26850 0012 4FF05302 		mov	r2, #83
 26851 0016 5A62     		str	r2, [r3, #36]
1502:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1503:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the Wakeup Timer counter */
1504:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WUTR = (uint32_t)RTC_WakeUpCounter;
 26852              		.loc 1 1504 0
 26853 0018 054B     		ldr	r3, .L127
 26854 001a 7A68     		ldr	r2, [r7, #4]
 26855 001c 5A61     		str	r2, [r3, #20]
1505:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1506:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1507:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 26856              		.loc 1 1507 0
 26857 001e 044B     		ldr	r3, .L127
 26858 0020 4FF0FF02 		mov	r2, #255
 26859 0024 5A62     		str	r2, [r3, #36]
1508:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 26860              		.loc 1 1508 0
 26861 0026 07F10C07 		add	r7, r7, #12
 26862 002a BD46     		mov	sp, r7
 26863 002c 80BC     		pop	{r7}
 26864 002e 7047     		bx	lr
 26865              	.L128:
 26866              		.align	2
 26867              	.L127:
 26868 0030 00280040 		.word	1073752064
 26869              		.cfi_endproc
 26870              	.LFE133:
 26872              		.section	.text.RTC_GetWakeUpCounter,"ax",%progbits
 26873              		.align	2
 26874              		.global	RTC_GetWakeUpCounter
 26875              		.thumb
 26876              		.thumb_func
 26878              	RTC_GetWakeUpCounter:
 26879              	.LFB134:
1509:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1510:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1511:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Returns the RTC WakeUp timer counter value.
1512:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
1513:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval The RTC WakeUp Counter value.
1514:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1515:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_GetWakeUpCounter(void)
1516:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 26880              		.loc 1 1516 0
 26881              		.cfi_startproc
 26882              		@ args = 0, pretend = 0, frame = 0
 26883              		@ frame_needed = 1, uses_anonymous_args = 0
 26884              		@ link register save eliminated.
 26885 0000 80B4     		push	{r7}
 26886              	.LCFI71:
 26887              		.cfi_def_cfa_offset 4
 26888 0002 00AF     		add	r7, sp, #0
 26889              		.cfi_offset 7, -4
 26890              	.LCFI72:
 26891              		.cfi_def_cfa_register 7
1517:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the counter value */
1518:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return ((uint32_t)(RTC->WUTR & RTC_WUTR_WUT));
 26892              		.loc 1 1518 0
 26893 0004 044B     		ldr	r3, .L130
 26894 0006 5B69     		ldr	r3, [r3, #20]
 26895 0008 4FEA0343 		lsl	r3, r3, #16
 26896 000c 4FEA1343 		lsr	r3, r3, #16
1519:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 26897              		.loc 1 1519 0
 26898 0010 1846     		mov	r0, r3
 26899 0012 BD46     		mov	sp, r7
 26900 0014 80BC     		pop	{r7}
 26901 0016 7047     		bx	lr
 26902              	.L131:
 26903              		.align	2
 26904              	.L130:
 26905 0018 00280040 		.word	1073752064
 26906              		.cfi_endproc
 26907              	.LFE134:
 26909              		.section	.text.RTC_WakeUpCmd,"ax",%progbits
 26910              		.align	2
 26911              		.global	RTC_WakeUpCmd
 26912              		.thumb
 26913              		.thumb_func
 26915              	RTC_WakeUpCmd:
 26916              	.LFB135:
1520:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1521:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1522:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the RTC WakeUp timer.
1523:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the WakeUp timer.
1524:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1525:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1526:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1527:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_WakeUpCmd(FunctionalState NewState)
1528:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 26917              		.loc 1 1528 0
 26918              		.cfi_startproc
 26919              		@ args = 0, pretend = 0, frame = 24
 26920              		@ frame_needed = 1, uses_anonymous_args = 0
 26921              		@ link register save eliminated.
 26922 0000 80B4     		push	{r7}
 26923              	.LCFI73:
 26924              		.cfi_def_cfa_offset 4
 26925 0002 87B0     		sub	sp, sp, #28
 26926              	.LCFI74:
 26927              		.cfi_def_cfa_offset 32
 26928 0004 00AF     		add	r7, sp, #0
 26929              		.cfi_offset 7, -4
 26930              	.LCFI75:
 26931              		.cfi_def_cfa_register 7
 26932 0006 0346     		mov	r3, r0
 26933 0008 FB71     		strb	r3, [r7, #7]
1529:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t wutcounter = 0x00;
 26934              		.loc 1 1529 0
 26935 000a 4FF00003 		mov	r3, #0
 26936 000e FB60     		str	r3, [r7, #12]
1530:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t wutwfstatus = 0x00;
 26937              		.loc 1 1530 0
 26938 0010 4FF00003 		mov	r3, #0
 26939 0014 3B61     		str	r3, [r7, #16]
1531:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 26940              		.loc 1 1531 0
 26941 0016 4FF00003 		mov	r3, #0
 26942 001a FB75     		strb	r3, [r7, #23]
1532:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1533:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1534:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1535:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1536:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1537:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 26943              		.loc 1 1537 0
 26944 001c 214B     		ldr	r3, .L138
 26945 001e 4FF0CA02 		mov	r2, #202
 26946 0022 5A62     		str	r2, [r3, #36]
1538:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 26947              		.loc 1 1538 0
 26948 0024 1F4B     		ldr	r3, .L138
 26949 0026 4FF05302 		mov	r2, #83
 26950 002a 5A62     		str	r2, [r3, #36]
1539:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1540:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 26951              		.loc 1 1540 0
 26952 002c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 26953 002e 002B     		cmp	r3, #0
 26954 0030 09D0     		beq	.L133
1541:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1542:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Enable the Wakeup Timer */
1543:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_CR_WUTE;
 26955              		.loc 1 1543 0
 26956 0032 1C4B     		ldr	r3, .L138
 26957 0034 1B4A     		ldr	r2, .L138
 26958 0036 9268     		ldr	r2, [r2, #8]
 26959 0038 42F48062 		orr	r2, r2, #1024
 26960 003c 9A60     		str	r2, [r3, #8]
1544:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;    
 26961              		.loc 1 1544 0
 26962 003e 4FF00103 		mov	r3, #1
 26963 0042 FB75     		strb	r3, [r7, #23]
 26964 0044 22E0     		b	.L134
 26965              	.L133:
1545:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1546:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1547:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1548:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable the Wakeup Timer */
1549:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_CR_WUTE;
 26966              		.loc 1 1549 0
 26967 0046 174B     		ldr	r3, .L138
 26968 0048 164A     		ldr	r2, .L138
 26969 004a 9268     		ldr	r2, [r2, #8]
 26970 004c 22F48062 		bic	r2, r2, #1024
 26971 0050 9A60     		str	r2, [r3, #8]
 26972              	.L136:
1550:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
1551:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     do
1552:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1553:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
 26973              		.loc 1 1553 0 discriminator 1
 26974 0052 144B     		ldr	r3, .L138
 26975 0054 DB68     		ldr	r3, [r3, #12]
 26976 0056 03F00403 		and	r3, r3, #4
 26977 005a 3B61     		str	r3, [r7, #16]
1554:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       wutcounter++;  
 26978              		.loc 1 1554 0 discriminator 1
 26979 005c FB68     		ldr	r3, [r7, #12]
 26980 005e 03F10103 		add	r3, r3, #1
 26981 0062 FB60     		str	r3, [r7, #12]
1555:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 26982              		.loc 1 1555 0 discriminator 1
 26983 0064 FB68     		ldr	r3, [r7, #12]
 26984 0066 B3F5803F 		cmp	r3, #65536
 26985 006a 02D0     		beq	.L135
 26986 006c 3B69     		ldr	r3, [r7, #16]
 26987 006e 002B     		cmp	r3, #0
 26988 0070 EFD0     		beq	.L136
 26989              	.L135:
1556:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1557:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
 26990              		.loc 1 1557 0
 26991 0072 0C4B     		ldr	r3, .L138
 26992 0074 DB68     		ldr	r3, [r3, #12]
 26993 0076 03F00403 		and	r3, r3, #4
 26994 007a 002B     		cmp	r3, #0
 26995 007c 03D1     		bne	.L137
1558:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1559:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 26996              		.loc 1 1559 0
 26997 007e 4FF00003 		mov	r3, #0
 26998 0082 FB75     		strb	r3, [r7, #23]
 26999 0084 02E0     		b	.L134
 27000              	.L137:
1560:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1561:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1562:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1563:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = SUCCESS;
 27001              		.loc 1 1563 0
 27002 0086 4FF00103 		mov	r3, #1
 27003 008a FB75     		strb	r3, [r7, #23]
 27004              	.L134:
1564:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }    
1565:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1566:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1567:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1568:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 27005              		.loc 1 1568 0
 27006 008c 054B     		ldr	r3, .L138
 27007 008e 4FF0FF02 		mov	r2, #255
 27008 0092 5A62     		str	r2, [r3, #36]
1569:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1570:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 27009              		.loc 1 1570 0
 27010 0094 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1571:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 27011              		.loc 1 1571 0
 27012 0096 1846     		mov	r0, r3
 27013 0098 07F11C07 		add	r7, r7, #28
 27014 009c BD46     		mov	sp, r7
 27015 009e 80BC     		pop	{r7}
 27016 00a0 7047     		bx	lr
 27017              	.L139:
 27018 00a2 00BF     		.align	2
 27019              	.L138:
 27020 00a4 00280040 		.word	1073752064
 27021              		.cfi_endproc
 27022              	.LFE135:
 27024              		.section	.text.RTC_DayLightSavingConfig,"ax",%progbits
 27025              		.align	2
 27026              		.global	RTC_DayLightSavingConfig
 27027              		.thumb
 27028              		.thumb_func
 27030              	RTC_DayLightSavingConfig:
 27031              	.LFB136:
1572:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1573:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1574:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1575:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1576:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1577:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group5 Daylight Saving configuration functions
1578:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Daylight Saving configuration functions 
1579:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1580:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1581:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1582:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                     Daylight Saving configuration functions
1583:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1584:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1585:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to configure the RTC DayLight Saving.
1586:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1587:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1588:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1589:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1590:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1591:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1592:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Adds or substract one hour from the current time.
1593:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_DayLightSaveOperation: the value of hour adjustment. 
1594:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1595:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_DayLightSaving_SUB1H: Substract one hour (winter time)
1596:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_DayLightSaving_ADD1H: Add one hour (summer time)
1597:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_StoreOperation: Specifies the value to be written in the BCK bit 
1598:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                            in CR register to store the operation.
1599:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1600:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_StoreOperation_Reset: BCK Bit Reset
1601:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_StoreOperation_Set: BCK Bit Set
1602:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1603:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1604:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_DayLightSavingConfig(uint32_t RTC_DayLightSaving, uint32_t RTC_StoreOperation)
1605:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 27032              		.loc 1 1605 0
 27033              		.cfi_startproc
 27034              		@ args = 0, pretend = 0, frame = 8
 27035              		@ frame_needed = 1, uses_anonymous_args = 0
 27036              		@ link register save eliminated.
 27037 0000 80B4     		push	{r7}
 27038              	.LCFI76:
 27039              		.cfi_def_cfa_offset 4
 27040 0002 83B0     		sub	sp, sp, #12
 27041              	.LCFI77:
 27042              		.cfi_def_cfa_offset 16
 27043 0004 00AF     		add	r7, sp, #0
 27044              		.cfi_offset 7, -4
 27045              	.LCFI78:
 27046              		.cfi_def_cfa_register 7
 27047 0006 7860     		str	r0, [r7, #4]
 27048 0008 3960     		str	r1, [r7, #0]
1606:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1607:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_DAYLIGHT_SAVING(RTC_DayLightSaving));
1608:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_STORE_OPERATION(RTC_StoreOperation));
1609:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1610:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1611:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 27049              		.loc 1 1611 0
 27050 000a 104B     		ldr	r3, .L141
 27051 000c 4FF0CA02 		mov	r2, #202
 27052 0010 5A62     		str	r2, [r3, #36]
1612:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 27053              		.loc 1 1612 0
 27054 0012 0E4B     		ldr	r3, .L141
 27055 0014 4FF05302 		mov	r2, #83
 27056 0018 5A62     		str	r2, [r3, #36]
1613:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1614:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear the bits to be configured */
1615:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_BCK);
 27057              		.loc 1 1615 0
 27058 001a 0C4B     		ldr	r3, .L141
 27059 001c 0B4A     		ldr	r2, .L141
 27060 001e 9268     		ldr	r2, [r2, #8]
 27061 0020 22F48022 		bic	r2, r2, #262144
 27062 0024 9A60     		str	r2, [r3, #8]
1616:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1617:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the RTC_CR register */
1618:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)(RTC_DayLightSaving | RTC_StoreOperation);
 27063              		.loc 1 1618 0
 27064 0026 094B     		ldr	r3, .L141
 27065 0028 084A     		ldr	r2, .L141
 27066 002a 9168     		ldr	r1, [r2, #8]
 27067 002c 7868     		ldr	r0, [r7, #4]
 27068 002e 3A68     		ldr	r2, [r7, #0]
 27069 0030 40EA0202 		orr	r2, r0, r2
 27070 0034 41EA0202 		orr	r2, r1, r2
 27071 0038 9A60     		str	r2, [r3, #8]
1619:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1620:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1621:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 27072              		.loc 1 1621 0
 27073 003a 044B     		ldr	r3, .L141
 27074 003c 4FF0FF02 		mov	r2, #255
 27075 0040 5A62     		str	r2, [r3, #36]
1622:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 27076              		.loc 1 1622 0
 27077 0042 07F10C07 		add	r7, r7, #12
 27078 0046 BD46     		mov	sp, r7
 27079 0048 80BC     		pop	{r7}
 27080 004a 7047     		bx	lr
 27081              	.L142:
 27082              		.align	2
 27083              	.L141:
 27084 004c 00280040 		.word	1073752064
 27085              		.cfi_endproc
 27086              	.LFE136:
 27088              		.section	.text.RTC_GetStoreOperation,"ax",%progbits
 27089              		.align	2
 27090              		.global	RTC_GetStoreOperation
 27091              		.thumb
 27092              		.thumb_func
 27094              	RTC_GetStoreOperation:
 27095              	.LFB137:
1623:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1624:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1625:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Returns the RTC Day Light Saving stored operation.
1626:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
1627:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval RTC Day Light Saving stored operation.
1628:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - RTC_StoreOperation_Reset
1629:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - RTC_StoreOperation_Set       
1630:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1631:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_GetStoreOperation(void)
1632:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 27096              		.loc 1 1632 0
 27097              		.cfi_startproc
 27098              		@ args = 0, pretend = 0, frame = 0
 27099              		@ frame_needed = 1, uses_anonymous_args = 0
 27100              		@ link register save eliminated.
 27101 0000 80B4     		push	{r7}
 27102              	.LCFI79:
 27103              		.cfi_def_cfa_offset 4
 27104 0002 00AF     		add	r7, sp, #0
 27105              		.cfi_offset 7, -4
 27106              	.LCFI80:
 27107              		.cfi_def_cfa_register 7
1633:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (RTC->CR & RTC_CR_BCK);
 27108              		.loc 1 1633 0
 27109 0004 034B     		ldr	r3, .L144
 27110 0006 9B68     		ldr	r3, [r3, #8]
 27111 0008 03F48023 		and	r3, r3, #262144
1634:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 27112              		.loc 1 1634 0
 27113 000c 1846     		mov	r0, r3
 27114 000e BD46     		mov	sp, r7
 27115 0010 80BC     		pop	{r7}
 27116 0012 7047     		bx	lr
 27117              	.L145:
 27118              		.align	2
 27119              	.L144:
 27120 0014 00280040 		.word	1073752064
 27121              		.cfi_endproc
 27122              	.LFE137:
 27124              		.section	.text.RTC_OutputConfig,"ax",%progbits
 27125              		.align	2
 27126              		.global	RTC_OutputConfig
 27127              		.thumb
 27128              		.thumb_func
 27130              	RTC_OutputConfig:
 27131              	.LFB138:
1635:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1636:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1637:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1638:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1639:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1640:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group6 Output pin Configuration function
1641:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Output pin Configuration function 
1642:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1643:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1644:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1645:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                          Output pin Configuration function
1646:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1647:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1648:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to configure the RTC Output source.
1649:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1650:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1651:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1652:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1653:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1654:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1655:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the RTC output source (AFO_ALARM).
1656:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Output: Specifies which signal will be routed to the RTC output. 
1657:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1658:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Output_Disable: No output selected
1659:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Output_AlarmA: signal of AlarmA mapped to output
1660:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Output_AlarmB: signal of AlarmB mapped to output
1661:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Output_WakeUp: signal of WakeUp mapped to output
1662:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_OutputPolarity: Specifies the polarity of the output signal. 
1663:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following:
1664:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_OutputPolarity_High: The output pin is high when the 
1665:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                 ALRAF/ALRBF/WUTF is high (depending on OSEL)
1666:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_OutputPolarity_Low: The output pin is low when the 
1667:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                 ALRAF/ALRBF/WUTF is high (depending on OSEL)
1668:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1669:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1670:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_OutputConfig(uint32_t RTC_Output, uint32_t RTC_OutputPolarity)
1671:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 27132              		.loc 1 1671 0
 27133              		.cfi_startproc
 27134              		@ args = 0, pretend = 0, frame = 8
 27135              		@ frame_needed = 1, uses_anonymous_args = 0
 27136              		@ link register save eliminated.
 27137 0000 80B4     		push	{r7}
 27138              	.LCFI81:
 27139              		.cfi_def_cfa_offset 4
 27140 0002 83B0     		sub	sp, sp, #12
 27141              	.LCFI82:
 27142              		.cfi_def_cfa_offset 16
 27143 0004 00AF     		add	r7, sp, #0
 27144              		.cfi_offset 7, -4
 27145              	.LCFI83:
 27146              		.cfi_def_cfa_register 7
 27147 0006 7860     		str	r0, [r7, #4]
 27148 0008 3960     		str	r1, [r7, #0]
1672:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1673:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_OUTPUT(RTC_Output));
1674:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_OUTPUT_POL(RTC_OutputPolarity));
1675:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1676:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1677:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 27149              		.loc 1 1677 0
 27150 000a 104B     		ldr	r3, .L147
 27151 000c 4FF0CA02 		mov	r2, #202
 27152 0010 5A62     		str	r2, [r3, #36]
1678:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 27153              		.loc 1 1678 0
 27154 0012 0E4B     		ldr	r3, .L147
 27155 0014 4FF05302 		mov	r2, #83
 27156 0018 5A62     		str	r2, [r3, #36]
1679:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1680:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear the bits to be configured */
1681:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_OSEL | RTC_CR_POL);
 27157              		.loc 1 1681 0
 27158 001a 0C4B     		ldr	r3, .L147
 27159 001c 0B4A     		ldr	r2, .L147
 27160 001e 9268     		ldr	r2, [r2, #8]
 27161 0020 22F4E002 		bic	r2, r2, #7340032
 27162 0024 9A60     		str	r2, [r3, #8]
1682:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1683:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the output selection and polarity */
1684:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)(RTC_Output | RTC_OutputPolarity);
 27163              		.loc 1 1684 0
 27164 0026 094B     		ldr	r3, .L147
 27165 0028 084A     		ldr	r2, .L147
 27166 002a 9168     		ldr	r1, [r2, #8]
 27167 002c 7868     		ldr	r0, [r7, #4]
 27168 002e 3A68     		ldr	r2, [r7, #0]
 27169 0030 40EA0202 		orr	r2, r0, r2
 27170 0034 41EA0202 		orr	r2, r1, r2
 27171 0038 9A60     		str	r2, [r3, #8]
1685:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1686:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1687:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 27172              		.loc 1 1687 0
 27173 003a 044B     		ldr	r3, .L147
 27174 003c 4FF0FF02 		mov	r2, #255
 27175 0040 5A62     		str	r2, [r3, #36]
1688:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 27176              		.loc 1 1688 0
 27177 0042 07F10C07 		add	r7, r7, #12
 27178 0046 BD46     		mov	sp, r7
 27179 0048 80BC     		pop	{r7}
 27180 004a 7047     		bx	lr
 27181              	.L148:
 27182              		.align	2
 27183              	.L147:
 27184 004c 00280040 		.word	1073752064
 27185              		.cfi_endproc
 27186              	.LFE138:
 27188              		.section	.text.RTC_CoarseCalibConfig,"ax",%progbits
 27189              		.align	2
 27190              		.global	RTC_CoarseCalibConfig
 27191              		.thumb
 27192              		.thumb_func
 27194              	RTC_CoarseCalibConfig:
 27195              	.LFB139:
1689:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1690:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1691:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1692:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1693:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1694:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group7 Digital Calibration configuration functions
1695:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Coarse Calibration configuration functions 
1696:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1697:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1698:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1699:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                   Digital Calibration configuration functions
1700:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1701:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1702:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1703:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1704:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1705:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1706:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1707:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Coarse calibration parameters.
1708:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_CalibSign: specifies the sign of the coarse calibration value.
1709:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
1710:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_CalibSign_Positive: The value sign is positive 
1711:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_CalibSign_Negative: The value sign is negative
1712:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  Value: value of coarse calibration expressed in ppm (coded on 5 bits).
1713:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *    
1714:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   This Calibration value should be between 0 and 63 when using negative
1715:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         sign with a 2-ppm step.
1716:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           
1717:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   This Calibration value should be between 0 and 126 when using positive
1718:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         sign with a 4-ppm step.
1719:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           
1720:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1721:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Coarse calibration are initialized
1722:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Coarse calibration are not initialized     
1723:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1724:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_CoarseCalibConfig(uint32_t RTC_CalibSign, uint32_t Value)
1725:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 27196              		.loc 1 1725 0
 27197              		.cfi_startproc
 27198              		@ args = 0, pretend = 0, frame = 16
 27199              		@ frame_needed = 1, uses_anonymous_args = 0
 27200 0000 80B5     		push	{r7, lr}
 27201              	.LCFI84:
 27202              		.cfi_def_cfa_offset 8
 27203 0002 84B0     		sub	sp, sp, #16
 27204              	.LCFI85:
 27205              		.cfi_def_cfa_offset 24
 27206 0004 00AF     		add	r7, sp, #0
 27207              		.cfi_offset 14, -4
 27208              		.cfi_offset 7, -8
 27209              	.LCFI86:
 27210              		.cfi_def_cfa_register 7
 27211 0006 7860     		str	r0, [r7, #4]
 27212 0008 3960     		str	r1, [r7, #0]
1726:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 27213              		.loc 1 1726 0
 27214 000a 4FF00003 		mov	r3, #0
 27215 000e FB73     		strb	r3, [r7, #15]
1727:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    
1728:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1729:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CALIB_SIGN(RTC_CalibSign));
1730:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CALIB_VALUE(Value)); 
1731:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1732:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1733:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 27216              		.loc 1 1733 0
 27217 0010 124B     		ldr	r3, .L152
 27218 0012 4FF0CA02 		mov	r2, #202
 27219 0016 5A62     		str	r2, [r3, #36]
1734:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 27220              		.loc 1 1734 0
 27221 0018 104B     		ldr	r3, .L152
 27222 001a 4FF05302 		mov	r2, #83
 27223 001e 5A62     		str	r2, [r3, #36]
1735:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1736:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
1737:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 27224              		.loc 1 1737 0
 27225 0020 FFF7FEFF 		bl	RTC_EnterInitMode
 27226 0024 0346     		mov	r3, r0
 27227 0026 002B     		cmp	r3, #0
 27228 0028 03D1     		bne	.L150
1738:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1739:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 27229              		.loc 1 1739 0
 27230 002a 4FF00003 		mov	r3, #0
 27231 002e FB73     		strb	r3, [r7, #15]
 27232 0030 0AE0     		b	.L151
 27233              	.L150:
1740:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1741:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1742:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1743:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set the coarse calibration value */
1744:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CALIBR = (uint32_t)(RTC_CalibSign | Value);
 27234              		.loc 1 1744 0
 27235 0032 0A4B     		ldr	r3, .L152
 27236 0034 7968     		ldr	r1, [r7, #4]
 27237 0036 3A68     		ldr	r2, [r7, #0]
 27238 0038 41EA0202 		orr	r2, r1, r2
 27239 003c 9A61     		str	r2, [r3, #24]
1745:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
1746:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
 27240              		.loc 1 1746 0
 27241 003e FFF7FEFF 		bl	RTC_ExitInitMode
1747:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1748:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
 27242              		.loc 1 1748 0
 27243 0042 4FF00103 		mov	r3, #1
 27244 0046 FB73     		strb	r3, [r7, #15]
 27245              	.L151:
1749:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1750:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1751:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1752:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 27246              		.loc 1 1752 0
 27247 0048 044B     		ldr	r3, .L152
 27248 004a 4FF0FF02 		mov	r2, #255
 27249 004e 5A62     		str	r2, [r3, #36]
1753:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1754:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 27250              		.loc 1 1754 0
 27251 0050 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1755:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 27252              		.loc 1 1755 0
 27253 0052 1846     		mov	r0, r3
 27254 0054 07F11007 		add	r7, r7, #16
 27255 0058 BD46     		mov	sp, r7
 27256 005a 80BD     		pop	{r7, pc}
 27257              	.L153:
 27258              		.align	2
 27259              	.L152:
 27260 005c 00280040 		.word	1073752064
 27261              		.cfi_endproc
 27262              	.LFE139:
 27264              		.section	.text.RTC_CoarseCalibCmd,"ax",%progbits
 27265              		.align	2
 27266              		.global	RTC_CoarseCalibCmd
 27267              		.thumb
 27268              		.thumb_func
 27270              	RTC_CoarseCalibCmd:
 27271              	.LFB140:
1756:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1757:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1758:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the Coarse calibration process.
1759:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the Coarse calibration.
1760:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1761:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1762:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Coarse calibration are enabled/disabled
1763:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Coarse calibration are not enabled/disabled    
1764:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1765:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_CoarseCalibCmd(FunctionalState NewState)
1766:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 27272              		.loc 1 1766 0
 27273              		.cfi_startproc
 27274              		@ args = 0, pretend = 0, frame = 16
 27275              		@ frame_needed = 1, uses_anonymous_args = 0
 27276 0000 80B5     		push	{r7, lr}
 27277              	.LCFI87:
 27278              		.cfi_def_cfa_offset 8
 27279 0002 84B0     		sub	sp, sp, #16
 27280              	.LCFI88:
 27281              		.cfi_def_cfa_offset 24
 27282 0004 00AF     		add	r7, sp, #0
 27283              		.cfi_offset 14, -4
 27284              		.cfi_offset 7, -8
 27285              	.LCFI89:
 27286              		.cfi_def_cfa_register 7
 27287 0006 0346     		mov	r3, r0
 27288 0008 FB71     		strb	r3, [r7, #7]
1767:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 27289              		.loc 1 1767 0
 27290 000a 4FF00003 		mov	r3, #0
 27291 000e FB73     		strb	r3, [r7, #15]
1768:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1769:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1770:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1771:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1772:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1773:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 27292              		.loc 1 1773 0
 27293 0010 174B     		ldr	r3, .L159
 27294 0012 4FF0CA02 		mov	r2, #202
 27295 0016 5A62     		str	r2, [r3, #36]
1774:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 27296              		.loc 1 1774 0
 27297 0018 154B     		ldr	r3, .L159
 27298 001a 4FF05302 		mov	r2, #83
 27299 001e 5A62     		str	r2, [r3, #36]
1775:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1776:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
1777:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 27300              		.loc 1 1777 0
 27301 0020 FFF7FEFF 		bl	RTC_EnterInitMode
 27302 0024 0346     		mov	r3, r0
 27303 0026 002B     		cmp	r3, #0
 27304 0028 03D1     		bne	.L155
1778:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1779:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status =  ERROR;
 27305              		.loc 1 1779 0
 27306 002a 4FF00003 		mov	r3, #0
 27307 002e FB73     		strb	r3, [r7, #15]
 27308 0030 14E0     		b	.L156
 27309              	.L155:
1780:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1781:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1782:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1783:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if (NewState != DISABLE)
 27310              		.loc 1 1783 0
 27311 0032 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 27312 0034 002B     		cmp	r3, #0
 27313 0036 06D0     		beq	.L157
1784:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1785:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Enable the Coarse Calibration */
1786:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR |= (uint32_t)RTC_CR_DCE;
 27314              		.loc 1 1786 0
 27315 0038 0D4B     		ldr	r3, .L159
 27316 003a 0D4A     		ldr	r2, .L159
 27317 003c 9268     		ldr	r2, [r2, #8]
 27318 003e 42F08002 		orr	r2, r2, #128
 27319 0042 9A60     		str	r2, [r3, #8]
 27320 0044 05E0     		b	.L158
 27321              	.L157:
1787:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1788:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1789:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     { 
1790:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Disable the Coarse Calibration */
1791:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR &= (uint32_t)~RTC_CR_DCE;
 27322              		.loc 1 1791 0
 27323 0046 0A4B     		ldr	r3, .L159
 27324 0048 094A     		ldr	r2, .L159
 27325 004a 9268     		ldr	r2, [r2, #8]
 27326 004c 22F08002 		bic	r2, r2, #128
 27327 0050 9A60     		str	r2, [r3, #8]
 27328              	.L158:
1792:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1793:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
1794:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
 27329              		.loc 1 1794 0
 27330 0052 FFF7FEFF 		bl	RTC_ExitInitMode
1795:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1796:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
 27331              		.loc 1 1796 0
 27332 0056 4FF00103 		mov	r3, #1
 27333 005a FB73     		strb	r3, [r7, #15]
 27334              	.L156:
1797:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1798:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1799:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1800:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 27335              		.loc 1 1800 0
 27336 005c 044B     		ldr	r3, .L159
 27337 005e 4FF0FF02 		mov	r2, #255
 27338 0062 5A62     		str	r2, [r3, #36]
1801:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1802:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 27339              		.loc 1 1802 0
 27340 0064 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1803:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 27341              		.loc 1 1803 0
 27342 0066 1846     		mov	r0, r3
 27343 0068 07F11007 		add	r7, r7, #16
 27344 006c BD46     		mov	sp, r7
 27345 006e 80BD     		pop	{r7, pc}
 27346              	.L160:
 27347              		.align	2
 27348              	.L159:
 27349 0070 00280040 		.word	1073752064
 27350              		.cfi_endproc
 27351              	.LFE140:
 27353              		.section	.text.RTC_CalibOutputCmd,"ax",%progbits
 27354              		.align	2
 27355              		.global	RTC_CalibOutputCmd
 27356              		.thumb
 27357              		.thumb_func
 27359              	RTC_CalibOutputCmd:
 27360              	.LFB141:
1804:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1805:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1806:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the RTC clock to be output through the relative pin.
1807:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the digital calibration Output.
1808:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1809:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1810:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1811:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_CalibOutputCmd(FunctionalState NewState)
1812:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 27361              		.loc 1 1812 0
 27362              		.cfi_startproc
 27363              		@ args = 0, pretend = 0, frame = 8
 27364              		@ frame_needed = 1, uses_anonymous_args = 0
 27365              		@ link register save eliminated.
 27366 0000 80B4     		push	{r7}
 27367              	.LCFI90:
 27368              		.cfi_def_cfa_offset 4
 27369 0002 83B0     		sub	sp, sp, #12
 27370              	.LCFI91:
 27371              		.cfi_def_cfa_offset 16
 27372 0004 00AF     		add	r7, sp, #0
 27373              		.cfi_offset 7, -4
 27374              	.LCFI92:
 27375              		.cfi_def_cfa_register 7
 27376 0006 0346     		mov	r3, r0
 27377 0008 FB71     		strb	r3, [r7, #7]
1813:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1814:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1815:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1816:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1817:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 27378              		.loc 1 1817 0
 27379 000a 104B     		ldr	r3, .L164
 27380 000c 4FF0CA02 		mov	r2, #202
 27381 0010 5A62     		str	r2, [r3, #36]
1818:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 27382              		.loc 1 1818 0
 27383 0012 0E4B     		ldr	r3, .L164
 27384 0014 4FF05302 		mov	r2, #83
 27385 0018 5A62     		str	r2, [r3, #36]
1819:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1820:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 27386              		.loc 1 1820 0
 27387 001a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 27388 001c 002B     		cmp	r3, #0
 27389 001e 06D0     		beq	.L162
1821:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1822:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Enable the RTC clock output */
1823:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_CR_COE;
 27390              		.loc 1 1823 0
 27391 0020 0A4B     		ldr	r3, .L164
 27392 0022 0A4A     		ldr	r2, .L164
 27393 0024 9268     		ldr	r2, [r2, #8]
 27394 0026 42F40002 		orr	r2, r2, #8388608
 27395 002a 9A60     		str	r2, [r3, #8]
 27396 002c 05E0     		b	.L163
 27397              	.L162:
1824:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1825:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1826:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   { 
1827:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable the RTC clock output */
1828:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_CR_COE;
 27398              		.loc 1 1828 0
 27399 002e 074B     		ldr	r3, .L164
 27400 0030 064A     		ldr	r2, .L164
 27401 0032 9268     		ldr	r2, [r2, #8]
 27402 0034 22F40002 		bic	r2, r2, #8388608
 27403 0038 9A60     		str	r2, [r3, #8]
 27404              	.L163:
1829:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1830:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1831:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1832:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 27405              		.loc 1 1832 0
 27406 003a 044B     		ldr	r3, .L164
 27407 003c 4FF0FF02 		mov	r2, #255
 27408 0040 5A62     		str	r2, [r3, #36]
1833:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 27409              		.loc 1 1833 0
 27410 0042 07F10C07 		add	r7, r7, #12
 27411 0046 BD46     		mov	sp, r7
 27412 0048 80BC     		pop	{r7}
 27413 004a 7047     		bx	lr
 27414              	.L165:
 27415              		.align	2
 27416              	.L164:
 27417 004c 00280040 		.word	1073752064
 27418              		.cfi_endproc
 27419              	.LFE141:
 27421              		.section	.text.RTC_CalibOutputConfig,"ax",%progbits
 27422              		.align	2
 27423              		.global	RTC_CalibOutputConfig
 27424              		.thumb
 27425              		.thumb_func
 27427              	RTC_CalibOutputConfig:
 27428              	.LFB142:
1834:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1835:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1836:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configure the Calibration Pinout (RTC_CALIB) Selection (1Hz or 512Hz).
1837:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_CalibOutput : Select the Calibration output Selection .
1838:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1839:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_CalibOutput_512Hz: A signal has a regular waveform at 512Hz. 
1840:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_CalibOutput_1Hz  : A signal has a regular waveform at 1Hz.
1841:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1842:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** */
1843:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_CalibOutputConfig(uint32_t RTC_CalibOutput)
1844:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 27429              		.loc 1 1844 0
 27430              		.cfi_startproc
 27431              		@ args = 0, pretend = 0, frame = 8
 27432              		@ frame_needed = 1, uses_anonymous_args = 0
 27433              		@ link register save eliminated.
 27434 0000 80B4     		push	{r7}
 27435              	.LCFI93:
 27436              		.cfi_def_cfa_offset 4
 27437 0002 83B0     		sub	sp, sp, #12
 27438              	.LCFI94:
 27439              		.cfi_def_cfa_offset 16
 27440 0004 00AF     		add	r7, sp, #0
 27441              		.cfi_offset 7, -4
 27442              	.LCFI95:
 27443              		.cfi_def_cfa_register 7
 27444 0006 7860     		str	r0, [r7, #4]
1845:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1846:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CALIB_OUTPUT(RTC_CalibOutput));
1847:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1848:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1849:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 27445              		.loc 1 1849 0
 27446 0008 0E4B     		ldr	r3, .L167
 27447 000a 4FF0CA02 		mov	r2, #202
 27448 000e 5A62     		str	r2, [r3, #36]
1850:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 27449              		.loc 1 1850 0
 27450 0010 0C4B     		ldr	r3, .L167
 27451 0012 4FF05302 		mov	r2, #83
 27452 0016 5A62     		str	r2, [r3, #36]
1851:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1852:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /*clear flags before config*/
1853:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_COSEL);
 27453              		.loc 1 1853 0
 27454 0018 0A4B     		ldr	r3, .L167
 27455 001a 0A4A     		ldr	r2, .L167
 27456 001c 9268     		ldr	r2, [r2, #8]
 27457 001e 22F40022 		bic	r2, r2, #524288
 27458 0022 9A60     		str	r2, [r3, #8]
1854:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1855:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the RTC_CR register */
1856:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)RTC_CalibOutput;
 27459              		.loc 1 1856 0
 27460 0024 074B     		ldr	r3, .L167
 27461 0026 074A     		ldr	r2, .L167
 27462 0028 9168     		ldr	r1, [r2, #8]
 27463 002a 7A68     		ldr	r2, [r7, #4]
 27464 002c 41EA0202 		orr	r2, r1, r2
 27465 0030 9A60     		str	r2, [r3, #8]
1857:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1858:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1859:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 27466              		.loc 1 1859 0
 27467 0032 044B     		ldr	r3, .L167
 27468 0034 4FF0FF02 		mov	r2, #255
 27469 0038 5A62     		str	r2, [r3, #36]
1860:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 27470              		.loc 1 1860 0
 27471 003a 07F10C07 		add	r7, r7, #12
 27472 003e BD46     		mov	sp, r7
 27473 0040 80BC     		pop	{r7}
 27474 0042 7047     		bx	lr
 27475              	.L168:
 27476              		.align	2
 27477              	.L167:
 27478 0044 00280040 		.word	1073752064
 27479              		.cfi_endproc
 27480              	.LFE142:
 27482              		.section	.text.RTC_SmoothCalibConfig,"ax",%progbits
 27483              		.align	2
 27484              		.global	RTC_SmoothCalibConfig
 27485              		.thumb
 27486              		.thumb_func
 27488              	RTC_SmoothCalibConfig:
 27489              	.LFB143:
1861:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1862:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1863:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Smooth Calibration Settings.
1864:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_SmoothCalibPeriod : Select the Smooth Calibration Period.
1865:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be can be one of the following values:
1866:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPeriod_32sec : The smooth calibration periode is 32s.
1867:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPeriod_16sec : The smooth calibration periode is 16s.
1868:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPeriod_8sec  : The smooth calibartion periode is 8s.
1869:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_SmoothCalibPlusPulses : Select to Set or reset the CALP bit.
1870:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1871:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPlusPulses_Set  : Add one RTCCLK puls every 2**11 pulses.
1872:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPlusPulses_Reset: No RTCCLK pulses are added.
1873:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_SmouthCalibMinusPulsesValue: Select the value of CALM[8:0] bits.
1874:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one any value from 0 to 0x000001FF.
1875:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1876:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Calib registers are configured
1877:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Calib registers are not configured
1878:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** */
1879:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_SmoothCalibConfig(uint32_t RTC_SmoothCalibPeriod,
1880:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                   uint32_t RTC_SmoothCalibPlusPulses,
1881:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                   uint32_t RTC_SmouthCalibMinusPulsesValue)
1882:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 27490              		.loc 1 1882 0
 27491              		.cfi_startproc
 27492              		@ args = 0, pretend = 0, frame = 24
 27493              		@ frame_needed = 1, uses_anonymous_args = 0
 27494              		@ link register save eliminated.
 27495 0000 80B4     		push	{r7}
 27496              	.LCFI96:
 27497              		.cfi_def_cfa_offset 4
 27498 0002 87B0     		sub	sp, sp, #28
 27499              	.LCFI97:
 27500              		.cfi_def_cfa_offset 32
 27501 0004 00AF     		add	r7, sp, #0
 27502              		.cfi_offset 7, -4
 27503              	.LCFI98:
 27504              		.cfi_def_cfa_register 7
 27505 0006 F860     		str	r0, [r7, #12]
 27506 0008 B960     		str	r1, [r7, #8]
 27507 000a 7A60     		str	r2, [r7, #4]
1883:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 27508              		.loc 1 1883 0
 27509 000c 4FF00003 		mov	r3, #0
 27510 0010 FB75     		strb	r3, [r7, #23]
1884:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t recalpfcount = 0;
 27511              		.loc 1 1884 0
 27512 0012 4FF00003 		mov	r3, #0
 27513 0016 3B61     		str	r3, [r7, #16]
1885:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1886:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1887:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SMOOTH_CALIB_PERIOD(RTC_SmoothCalibPeriod));
1888:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SMOOTH_CALIB_PLUS(RTC_SmoothCalibPlusPulses));
1889:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SMOOTH_CALIB_MINUS(RTC_SmouthCalibMinusPulsesValue));
1890:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1891:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1892:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 27514              		.loc 1 1892 0
 27515 0018 1E4B     		ldr	r3, .L175
 27516 001a 4FF0CA02 		mov	r2, #202
 27517 001e 5A62     		str	r2, [r3, #36]
1893:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 27518              		.loc 1 1893 0
 27519 0020 1C4B     		ldr	r3, .L175
 27520 0022 4FF05302 		mov	r2, #83
 27521 0026 5A62     		str	r2, [r3, #36]
1894:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1895:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* check if a calibration is pending*/
1896:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RECALPF) != RESET)
 27522              		.loc 1 1896 0
 27523 0028 1A4B     		ldr	r3, .L175
 27524 002a DB68     		ldr	r3, [r3, #12]
 27525 002c 03F48033 		and	r3, r3, #65536
 27526 0030 002B     		cmp	r3, #0
 27527 0032 0ED0     		beq	.L170
1897:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1898:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* wait until the Calibration is completed*/
1899:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
 27528              		.loc 1 1899 0
 27529 0034 03E0     		b	.L171
 27530              	.L172:
1900:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1901:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       recalpfcount++;
 27531              		.loc 1 1901 0
 27532 0036 3B69     		ldr	r3, [r7, #16]
 27533 0038 03F10103 		add	r3, r3, #1
 27534 003c 3B61     		str	r3, [r7, #16]
 27535              	.L171:
1899:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
 27536              		.loc 1 1899 0 discriminator 1
 27537 003e 154B     		ldr	r3, .L175
 27538 0040 DB68     		ldr	r3, [r3, #12]
 27539 0042 03F48033 		and	r3, r3, #65536
 27540 0046 002B     		cmp	r3, #0
 27541 0048 03D0     		beq	.L170
1899:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
 27542              		.loc 1 1899 0 is_stmt 0 discriminator 2
 27543 004a 3B69     		ldr	r3, [r7, #16]
 27544 004c B3F5003F 		cmp	r3, #131072
 27545 0050 F1D1     		bne	.L172
 27546              	.L170:
1902:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1903:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1904:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1905:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* check if the calibration pending is completed or if there is no calibration operation at all*/
1906:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RECALPF) == RESET)
 27547              		.loc 1 1906 0 is_stmt 1
 27548 0052 104B     		ldr	r3, .L175
 27549 0054 DB68     		ldr	r3, [r3, #12]
 27550 0056 03F48033 		and	r3, r3, #65536
 27551 005a 002B     		cmp	r3, #0
 27552 005c 0BD1     		bne	.L173
1907:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1908:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Smooth calibration settings */
1909:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CALR = (uint32_t)((uint32_t)RTC_SmoothCalibPeriod | (uint32_t)RTC_SmoothCalibPlusPulses | 
 27553              		.loc 1 1909 0
 27554 005e 0D4B     		ldr	r3, .L175
 27555 0060 F968     		ldr	r1, [r7, #12]
 27556 0062 BA68     		ldr	r2, [r7, #8]
 27557 0064 1143     		orrs	r1, r1, r2
 27558 0066 7A68     		ldr	r2, [r7, #4]
 27559 0068 41EA0202 		orr	r2, r1, r2
 27560 006c DA63     		str	r2, [r3, #60]
1910:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1911:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
 27561              		.loc 1 1911 0
 27562 006e 4FF00103 		mov	r3, #1
 27563 0072 FB75     		strb	r3, [r7, #23]
 27564 0074 02E0     		b	.L174
 27565              	.L173:
1912:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1913:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1914:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1915:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 27566              		.loc 1 1915 0
 27567 0076 4FF00003 		mov	r3, #0
 27568 007a FB75     		strb	r3, [r7, #23]
 27569              	.L174:
1916:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1917:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1918:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1919:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 27570              		.loc 1 1919 0
 27571 007c 054B     		ldr	r3, .L175
 27572 007e 4FF0FF02 		mov	r2, #255
 27573 0082 5A62     		str	r2, [r3, #36]
1920:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1921:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (ErrorStatus)(status);
 27574              		.loc 1 1921 0
 27575 0084 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1922:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 27576              		.loc 1 1922 0
 27577 0086 1846     		mov	r0, r3
 27578 0088 07F11C07 		add	r7, r7, #28
 27579 008c BD46     		mov	sp, r7
 27580 008e 80BC     		pop	{r7}
 27581 0090 7047     		bx	lr
 27582              	.L176:
 27583 0092 00BF     		.align	2
 27584              	.L175:
 27585 0094 00280040 		.word	1073752064
 27586              		.cfi_endproc
 27587              	.LFE143:
 27589              		.section	.text.RTC_TimeStampCmd,"ax",%progbits
 27590              		.align	2
 27591              		.global	RTC_TimeStampCmd
 27592              		.thumb
 27593              		.thumb_func
 27595              	RTC_TimeStampCmd:
 27596              	.LFB144:
1923:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1924:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1925:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1926:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1927:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1928:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1929:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group8 TimeStamp configuration functions
1930:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   TimeStamp configuration functions 
1931:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1932:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1933:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1934:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                        TimeStamp configuration functions
1935:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1936:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1937:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1938:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1939:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1940:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1941:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1942:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the RTC TimeStamp functionality with the 
1943:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         specified time stamp pin stimulating edge.
1944:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStampEdge: Specifies the pin edge on which the TimeStamp is 
1945:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         activated.
1946:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following:
1947:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampEdge_Rising: the Time stamp event occurs on the rising 
1948:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    edge of the related pin.
1949:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampEdge_Falling: the Time stamp event occurs on the 
1950:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                     falling edge of the related pin.
1951:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the TimeStamp.
1952:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1953:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1954:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1955:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TimeStampCmd(uint32_t RTC_TimeStampEdge, FunctionalState NewState)
1956:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 27597              		.loc 1 1956 0
 27598              		.cfi_startproc
 27599              		@ args = 0, pretend = 0, frame = 16
 27600              		@ frame_needed = 1, uses_anonymous_args = 0
 27601              		@ link register save eliminated.
 27602 0000 80B4     		push	{r7}
 27603              	.LCFI99:
 27604              		.cfi_def_cfa_offset 4
 27605 0002 85B0     		sub	sp, sp, #20
 27606              	.LCFI100:
 27607              		.cfi_def_cfa_offset 24
 27608 0004 00AF     		add	r7, sp, #0
 27609              		.cfi_offset 7, -4
 27610              	.LCFI101:
 27611              		.cfi_def_cfa_register 7
 27612 0006 7860     		str	r0, [r7, #4]
 27613 0008 0B46     		mov	r3, r1
 27614 000a FB70     		strb	r3, [r7, #3]
1957:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 27615              		.loc 1 1957 0
 27616 000c 4FF00003 		mov	r3, #0
 27617 0010 FB60     		str	r3, [r7, #12]
1958:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1959:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1960:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TIMESTAMP_EDGE(RTC_TimeStampEdge));
1961:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1962:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1963:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_CR register and clear the bits to be configured */
1964:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 27618              		.loc 1 1964 0
 27619 0012 154B     		ldr	r3, .L180
 27620 0014 9B68     		ldr	r3, [r3, #8]
 27621 0016 23F40063 		bic	r3, r3, #2048
 27622 001a 23F00803 		bic	r3, r3, #8
 27623 001e FB60     		str	r3, [r7, #12]
1965:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1966:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the new configuration */
1967:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 27624              		.loc 1 1967 0
 27625 0020 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 27626 0022 002B     		cmp	r3, #0
 27627 0024 07D0     		beq	.L178
1968:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1969:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg |= (uint32_t)(RTC_TimeStampEdge | RTC_CR_TSE);
 27628              		.loc 1 1969 0
 27629 0026 7A68     		ldr	r2, [r7, #4]
 27630 0028 FB68     		ldr	r3, [r7, #12]
 27631 002a 42EA0303 		orr	r3, r2, r3
 27632 002e 43F40063 		orr	r3, r3, #2048
 27633 0032 FB60     		str	r3, [r7, #12]
 27634 0034 04E0     		b	.L179
 27635              	.L178:
1970:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1971:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1972:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1973:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg |= (uint32_t)(RTC_TimeStampEdge);
 27636              		.loc 1 1973 0
 27637 0036 FA68     		ldr	r2, [r7, #12]
 27638 0038 7B68     		ldr	r3, [r7, #4]
 27639 003a 42EA0303 		orr	r3, r2, r3
 27640 003e FB60     		str	r3, [r7, #12]
 27641              	.L179:
1974:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1975:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1976:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1977:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 27642              		.loc 1 1977 0
 27643 0040 094B     		ldr	r3, .L180
 27644 0042 4FF0CA02 		mov	r2, #202
 27645 0046 5A62     		str	r2, [r3, #36]
1978:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 27646              		.loc 1 1978 0
 27647 0048 074B     		ldr	r3, .L180
 27648 004a 4FF05302 		mov	r2, #83
 27649 004e 5A62     		str	r2, [r3, #36]
1979:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1980:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the Time Stamp TSEDGE and Enable bits */
1981:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR = (uint32_t)tmpreg;
 27650              		.loc 1 1981 0
 27651 0050 054B     		ldr	r3, .L180
 27652 0052 FA68     		ldr	r2, [r7, #12]
 27653 0054 9A60     		str	r2, [r3, #8]
1982:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1983:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1984:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 27654              		.loc 1 1984 0
 27655 0056 044B     		ldr	r3, .L180
 27656 0058 4FF0FF02 		mov	r2, #255
 27657 005c 5A62     		str	r2, [r3, #36]
1985:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 27658              		.loc 1 1985 0
 27659 005e 07F11407 		add	r7, r7, #20
 27660 0062 BD46     		mov	sp, r7
 27661 0064 80BC     		pop	{r7}
 27662 0066 7047     		bx	lr
 27663              	.L181:
 27664              		.align	2
 27665              	.L180:
 27666 0068 00280040 		.word	1073752064
 27667              		.cfi_endproc
 27668              	.LFE144:
 27670              		.section	.text.RTC_GetTimeStamp,"ax",%progbits
 27671              		.align	2
 27672              		.global	RTC_GetTimeStamp
 27673              		.thumb
 27674              		.thumb_func
 27676              	RTC_GetTimeStamp:
 27677              	.LFB145:
1986:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1987:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1988:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC TimeStamp value and masks.
1989:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the output parameters.
1990:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1991:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1992:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1993:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param RTC_StampTimeStruct: pointer to a RTC_TimeTypeDef structure that will 
1994:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                             contains the TimeStamp time values. 
1995:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param RTC_StampDateStruct: pointer to a RTC_DateTypeDef structure that will 
1996:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                             contains the TimeStamp date values.     
1997:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1998:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1999:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_GetTimeStamp(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_StampTimeStruct, 
2000:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                       RTC_DateTypeDef* RTC_StampDateStruct)
2001:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 27678              		.loc 1 2001 0
 27679              		.cfi_startproc
 27680              		@ args = 0, pretend = 0, frame = 24
 27681              		@ frame_needed = 1, uses_anonymous_args = 0
 27682 0000 80B5     		push	{r7, lr}
 27683              	.LCFI102:
 27684              		.cfi_def_cfa_offset 8
 27685 0002 86B0     		sub	sp, sp, #24
 27686              	.LCFI103:
 27687              		.cfi_def_cfa_offset 32
 27688 0004 00AF     		add	r7, sp, #0
 27689              		.cfi_offset 14, -4
 27690              		.cfi_offset 7, -8
 27691              	.LCFI104:
 27692              		.cfi_def_cfa_register 7
 27693 0006 F860     		str	r0, [r7, #12]
 27694 0008 B960     		str	r1, [r7, #8]
 27695 000a 7A60     		str	r2, [r7, #4]
2002:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmptime = 0, tmpdate = 0;
 27696              		.loc 1 2002 0
 27697 000c 4FF00003 		mov	r3, #0
 27698 0010 7B61     		str	r3, [r7, #20]
 27699 0012 4FF00003 		mov	r3, #0
 27700 0016 3B61     		str	r3, [r7, #16]
2003:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2004:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2005:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
2006:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2007:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the TimeStamp time and date registers values */
2008:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmptime = (uint32_t)(RTC->TSTR & RTC_TR_RESERVED_MASK);
 27701              		.loc 1 2008 0
 27702 0018 414B     		ldr	r3, .L184
 27703 001a 1A6B     		ldr	r2, [r3, #48]
 27704 001c 414B     		ldr	r3, .L184+4
 27705 001e 02EA0303 		and	r3, r2, r3
 27706 0022 7B61     		str	r3, [r7, #20]
2009:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpdate = (uint32_t)(RTC->TSDR & RTC_DR_RESERVED_MASK);
 27707              		.loc 1 2009 0
 27708 0024 3E4B     		ldr	r3, .L184
 27709 0026 5B6B     		ldr	r3, [r3, #52]
 27710 0028 23F07F43 		bic	r3, r3, #-16777216
 27711 002c 23F0C003 		bic	r3, r3, #192
 27712 0030 3B61     		str	r3, [r7, #16]
2010:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2011:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Fill the Time structure fields with the read parameters */
2012:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Hours = (uint8_t)((tmptime & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 27713              		.loc 1 2012 0
 27714 0032 7B69     		ldr	r3, [r7, #20]
 27715 0034 03F47C13 		and	r3, r3, #4128768
 27716 0038 4FEA1343 		lsr	r3, r3, #16
 27717 003c DAB2     		uxtb	r2, r3
 27718 003e BB68     		ldr	r3, [r7, #8]
 27719 0040 1A70     		strb	r2, [r3, #0]
2013:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Minutes = (uint8_t)((tmptime & (RTC_TR_MNT | RTC_TR_MNU)) >> 8);
 27720              		.loc 1 2013 0
 27721 0042 7B69     		ldr	r3, [r7, #20]
 27722 0044 03F4FE43 		and	r3, r3, #32512
 27723 0048 4FEA1323 		lsr	r3, r3, #8
 27724 004c DAB2     		uxtb	r2, r3
 27725 004e BB68     		ldr	r3, [r7, #8]
 27726 0050 5A70     		strb	r2, [r3, #1]
2014:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Seconds = (uint8_t)(tmptime & (RTC_TR_ST | RTC_TR_SU));
 27727              		.loc 1 2014 0
 27728 0052 7B69     		ldr	r3, [r7, #20]
 27729 0054 DBB2     		uxtb	r3, r3
 27730 0056 03F07F03 		and	r3, r3, #127
 27731 005a DAB2     		uxtb	r2, r3
 27732 005c BB68     		ldr	r3, [r7, #8]
 27733 005e 9A70     		strb	r2, [r3, #2]
2015:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_H12 = (uint8_t)((tmptime & (RTC_TR_PM)) >> 16);  
 27734              		.loc 1 2015 0
 27735 0060 7B69     		ldr	r3, [r7, #20]
 27736 0062 03F48003 		and	r3, r3, #4194304
 27737 0066 4FEA1343 		lsr	r3, r3, #16
 27738 006a DAB2     		uxtb	r2, r3
 27739 006c BB68     		ldr	r3, [r7, #8]
 27740 006e DA70     		strb	r2, [r3, #3]
2016:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2017:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Fill the Date structure fields with the read parameters */
2018:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Year = 0;
 27741              		.loc 1 2018 0
 27742 0070 7B68     		ldr	r3, [r7, #4]
 27743 0072 4FF00002 		mov	r2, #0
 27744 0076 DA70     		strb	r2, [r3, #3]
2019:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Month = (uint8_t)((tmpdate & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 27745              		.loc 1 2019 0
 27746 0078 3B69     		ldr	r3, [r7, #16]
 27747 007a 03F4F853 		and	r3, r3, #7936
 27748 007e 4FEA1323 		lsr	r3, r3, #8
 27749 0082 DAB2     		uxtb	r2, r3
 27750 0084 7B68     		ldr	r3, [r7, #4]
 27751 0086 5A70     		strb	r2, [r3, #1]
2020:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Date = (uint8_t)(tmpdate & (RTC_DR_DT | RTC_DR_DU));
 27752              		.loc 1 2020 0
 27753 0088 3B69     		ldr	r3, [r7, #16]
 27754 008a DBB2     		uxtb	r3, r3
 27755 008c 03F03F03 		and	r3, r3, #63
 27756 0090 DAB2     		uxtb	r2, r3
 27757 0092 7B68     		ldr	r3, [r7, #4]
 27758 0094 9A70     		strb	r2, [r3, #2]
2021:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_WeekDay = (uint8_t)((tmpdate & (RTC_DR_WDU)) >> 13);
 27759              		.loc 1 2021 0
 27760 0096 3B69     		ldr	r3, [r7, #16]
 27761 0098 03F46043 		and	r3, r3, #57344
 27762 009c 4FEA5333 		lsr	r3, r3, #13
 27763 00a0 DAB2     		uxtb	r2, r3
 27764 00a2 7B68     		ldr	r3, [r7, #4]
 27765 00a4 1A70     		strb	r2, [r3, #0]
2022:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2023:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
2024:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 27766              		.loc 1 2024 0
 27767 00a6 FB68     		ldr	r3, [r7, #12]
 27768 00a8 002B     		cmp	r3, #0
 27769 00aa 35D1     		bne	.L182
2025:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2026:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Convert the Time structure parameters to Binary format */
2027:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Hours);
 27770              		.loc 1 2027 0
 27771 00ac BB68     		ldr	r3, [r7, #8]
 27772 00ae 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 27773 00b0 1846     		mov	r0, r3
 27774 00b2 FFF7FEFF 		bl	RTC_Bcd2ToByte
 27775 00b6 0346     		mov	r3, r0
 27776 00b8 1A46     		mov	r2, r3
 27777 00ba BB68     		ldr	r3, [r7, #8]
 27778 00bc 1A70     		strb	r2, [r3, #0]
2028:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Minutes);
 27779              		.loc 1 2028 0
 27780 00be BB68     		ldr	r3, [r7, #8]
 27781 00c0 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 27782 00c2 1846     		mov	r0, r3
 27783 00c4 FFF7FEFF 		bl	RTC_Bcd2ToByte
 27784 00c8 0346     		mov	r3, r0
 27785 00ca 1A46     		mov	r2, r3
 27786 00cc BB68     		ldr	r3, [r7, #8]
 27787 00ce 5A70     		strb	r2, [r3, #1]
2029:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Seconds);
 27788              		.loc 1 2029 0
 27789 00d0 BB68     		ldr	r3, [r7, #8]
 27790 00d2 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 27791 00d4 1846     		mov	r0, r3
 27792 00d6 FFF7FEFF 		bl	RTC_Bcd2ToByte
 27793 00da 0346     		mov	r3, r0
 27794 00dc 1A46     		mov	r2, r3
 27795 00de BB68     		ldr	r3, [r7, #8]
 27796 00e0 9A70     		strb	r2, [r3, #2]
2030:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2031:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Convert the Date structure parameters to Binary format */
2032:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Month);
 27797              		.loc 1 2032 0
 27798 00e2 7B68     		ldr	r3, [r7, #4]
 27799 00e4 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 27800 00e6 1846     		mov	r0, r3
 27801 00e8 FFF7FEFF 		bl	RTC_Bcd2ToByte
 27802 00ec 0346     		mov	r3, r0
 27803 00ee 1A46     		mov	r2, r3
 27804 00f0 7B68     		ldr	r3, [r7, #4]
 27805 00f2 5A70     		strb	r2, [r3, #1]
2033:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Date);
 27806              		.loc 1 2033 0
 27807 00f4 7B68     		ldr	r3, [r7, #4]
 27808 00f6 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 27809 00f8 1846     		mov	r0, r3
 27810 00fa FFF7FEFF 		bl	RTC_Bcd2ToByte
 27811 00fe 0346     		mov	r3, r0
 27812 0100 1A46     		mov	r2, r3
 27813 0102 7B68     		ldr	r3, [r7, #4]
 27814 0104 9A70     		strb	r2, [r3, #2]
2034:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_WeekDay = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_WeekDay);
 27815              		.loc 1 2034 0
 27816 0106 7B68     		ldr	r3, [r7, #4]
 27817 0108 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 27818 010a 1846     		mov	r0, r3
 27819 010c FFF7FEFF 		bl	RTC_Bcd2ToByte
 27820 0110 0346     		mov	r3, r0
 27821 0112 1A46     		mov	r2, r3
 27822 0114 7B68     		ldr	r3, [r7, #4]
 27823 0116 1A70     		strb	r2, [r3, #0]
 27824              	.L182:
2035:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2036:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 27825              		.loc 1 2036 0
 27826 0118 07F11807 		add	r7, r7, #24
 27827 011c BD46     		mov	sp, r7
 27828 011e 80BD     		pop	{r7, pc}
 27829              	.L185:
 27830              		.align	2
 27831              	.L184:
 27832 0120 00280040 		.word	1073752064
 27833 0124 7F7F7F00 		.word	8355711
 27834              		.cfi_endproc
 27835              	.LFE145:
 27837              		.section	.text.RTC_GetTimeStampSubSecond,"ax",%progbits
 27838              		.align	2
 27839              		.global	RTC_GetTimeStampSubSecond
 27840              		.thumb
 27841              		.thumb_func
 27843              	RTC_GetTimeStampSubSecond:
 27844              	.LFB146:
2037:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2038:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2039:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC timestamp Subseconds value.
2040:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
2041:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval RTC current timestamp Subseconds value.
2042:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2043:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_GetTimeStampSubSecond(void)
2044:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 27845              		.loc 1 2044 0
 27846              		.cfi_startproc
 27847              		@ args = 0, pretend = 0, frame = 0
 27848              		@ frame_needed = 1, uses_anonymous_args = 0
 27849              		@ link register save eliminated.
 27850 0000 80B4     		push	{r7}
 27851              	.LCFI105:
 27852              		.cfi_def_cfa_offset 4
 27853 0002 00AF     		add	r7, sp, #0
 27854              		.cfi_offset 7, -4
 27855              	.LCFI106:
 27856              		.cfi_def_cfa_register 7
2045:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get timestamp subseconds values from the correspondent registers */
2046:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (uint32_t)(RTC->TSSSR);
 27857              		.loc 1 2046 0
 27858 0004 024B     		ldr	r3, .L187
 27859 0006 9B6B     		ldr	r3, [r3, #56]
2047:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 27860              		.loc 1 2047 0
 27861 0008 1846     		mov	r0, r3
 27862 000a BD46     		mov	sp, r7
 27863 000c 80BC     		pop	{r7}
 27864 000e 7047     		bx	lr
 27865              	.L188:
 27866              		.align	2
 27867              	.L187:
 27868 0010 00280040 		.word	1073752064
 27869              		.cfi_endproc
 27870              	.LFE146:
 27872              		.section	.text.RTC_TamperTriggerConfig,"ax",%progbits
 27873              		.align	2
 27874              		.global	RTC_TamperTriggerConfig
 27875              		.thumb
 27876              		.thumb_func
 27878              	RTC_TamperTriggerConfig:
 27879              	.LFB147:
2048:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2049:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2050:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2051:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2052:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2053:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group9 Tampers configuration functions
2054:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Tampers configuration functions 
2055:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
2056:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
2057:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
2058:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                        Tampers configuration functions
2059:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
2060:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2061:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
2062:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
2063:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2064:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2065:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2066:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the select Tamper pin edge.
2067:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Tamper: Selected tamper pin.
2068:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be RTC_Tamper_1.
2069:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperTrigger: Specifies the trigger on the tamper pin that 
2070:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         stimulates tamper event. 
2071:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2072:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_RisingEdge: Rising Edge of the tamper pin causes tamper event.
2073:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_FallingEdge: Falling Edge of the tamper pin causes tamper event.
2074:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_LowLevel: Low Level of the tamper pin causes tamper event.
2075:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_HighLevel: High Level of the tamper pin causes tamper event.
2076:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2077:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2078:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperTriggerConfig(uint32_t RTC_Tamper, uint32_t RTC_TamperTrigger)
2079:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 27880              		.loc 1 2079 0
 27881              		.cfi_startproc
 27882              		@ args = 0, pretend = 0, frame = 8
 27883              		@ frame_needed = 1, uses_anonymous_args = 0
 27884              		@ link register save eliminated.
 27885 0000 80B4     		push	{r7}
 27886              	.LCFI107:
 27887              		.cfi_def_cfa_offset 4
 27888 0002 83B0     		sub	sp, sp, #12
 27889              	.LCFI108:
 27890              		.cfi_def_cfa_offset 16
 27891 0004 00AF     		add	r7, sp, #0
 27892              		.cfi_offset 7, -4
 27893              	.LCFI109:
 27894              		.cfi_def_cfa_register 7
 27895 0006 7860     		str	r0, [r7, #4]
 27896 0008 3960     		str	r1, [r7, #0]
2080:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2081:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER(RTC_Tamper)); 
2082:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_TRIGGER(RTC_TamperTrigger));
2083:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  
2084:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_TamperTrigger == RTC_TamperTrigger_RisingEdge)
 27897              		.loc 1 2084 0
 27898 000a 3B68     		ldr	r3, [r7, #0]
 27899 000c 002B     		cmp	r3, #0
 27900 000e 0BD1     		bne	.L190
2085:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {  
2086:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the RTC_TAFCR register */
2087:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)((uint32_t)~(RTC_Tamper << 1));	
 27901              		.loc 1 2087 0
 27902 0010 0C4B     		ldr	r3, .L192
 27903 0012 0C4A     		ldr	r2, .L192
 27904 0014 116C     		ldr	r1, [r2, #64]
 27905 0016 7A68     		ldr	r2, [r7, #4]
 27906 0018 4FEA4202 		lsl	r2, r2, #1
 27907 001c 6FEA0202 		mvn	r2, r2
 27908 0020 01EA0202 		and	r2, r1, r2
 27909 0024 1A64     		str	r2, [r3, #64]
 27910 0026 08E0     		b	.L189
 27911              	.L190:
2088:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2089:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2090:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   { 
2091:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the RTC_TAFCR register */
2092:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)(RTC_Tamper << 1);  
 27912              		.loc 1 2092 0
 27913 0028 064B     		ldr	r3, .L192
 27914 002a 064A     		ldr	r2, .L192
 27915 002c 116C     		ldr	r1, [r2, #64]
 27916 002e 7A68     		ldr	r2, [r7, #4]
 27917 0030 4FEA4202 		lsl	r2, r2, #1
 27918 0034 41EA0202 		orr	r2, r1, r2
 27919 0038 1A64     		str	r2, [r3, #64]
 27920              	.L189:
2093:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
2094:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 27921              		.loc 1 2094 0
 27922 003a 07F10C07 		add	r7, r7, #12
 27923 003e BD46     		mov	sp, r7
 27924 0040 80BC     		pop	{r7}
 27925 0042 7047     		bx	lr
 27926              	.L193:
 27927              		.align	2
 27928              	.L192:
 27929 0044 00280040 		.word	1073752064
 27930              		.cfi_endproc
 27931              	.LFE147:
 27933              		.section	.text.RTC_TamperCmd,"ax",%progbits
 27934              		.align	2
 27935              		.global	RTC_TamperCmd
 27936              		.thumb
 27937              		.thumb_func
 27939              	RTC_TamperCmd:
 27940              	.LFB148:
2095:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2096:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2097:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the Tamper detection.
2098:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Tamper: Selected tamper pin.
2099:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be RTC_Tamper_1.
2100:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the tamper pin.
2101:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.                   
2102:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2103:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2104:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperCmd(uint32_t RTC_Tamper, FunctionalState NewState)
2105:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 27941              		.loc 1 2105 0
 27942              		.cfi_startproc
 27943              		@ args = 0, pretend = 0, frame = 8
 27944              		@ frame_needed = 1, uses_anonymous_args = 0
 27945              		@ link register save eliminated.
 27946 0000 80B4     		push	{r7}
 27947              	.LCFI110:
 27948              		.cfi_def_cfa_offset 4
 27949 0002 83B0     		sub	sp, sp, #12
 27950              	.LCFI111:
 27951              		.cfi_def_cfa_offset 16
 27952 0004 00AF     		add	r7, sp, #0
 27953              		.cfi_offset 7, -4
 27954              	.LCFI112:
 27955              		.cfi_def_cfa_register 7
 27956 0006 7860     		str	r0, [r7, #4]
 27957 0008 0B46     		mov	r3, r1
 27958 000a FB70     		strb	r3, [r7, #3]
2106:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2107:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER(RTC_Tamper));  
2108:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2109:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2110:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 27959              		.loc 1 2110 0
 27960 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 27961 000e 002B     		cmp	r3, #0
 27962 0010 07D0     		beq	.L195
2111:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2112:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Enable the selected Tamper pin */
2113:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_Tamper;
 27963              		.loc 1 2113 0
 27964 0012 0B4B     		ldr	r3, .L197
 27965 0014 0A4A     		ldr	r2, .L197
 27966 0016 116C     		ldr	r1, [r2, #64]
 27967 0018 7A68     		ldr	r2, [r7, #4]
 27968 001a 41EA0202 		orr	r2, r1, r2
 27969 001e 1A64     		str	r2, [r3, #64]
 27970 0020 08E0     		b	.L194
 27971              	.L195:
2114:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2115:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2116:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2117:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable the selected Tamper pin */
2118:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_Tamper;    
 27972              		.loc 1 2118 0
 27973 0022 074B     		ldr	r3, .L197
 27974 0024 064A     		ldr	r2, .L197
 27975 0026 116C     		ldr	r1, [r2, #64]
 27976 0028 7A68     		ldr	r2, [r7, #4]
 27977 002a 6FEA0202 		mvn	r2, r2
 27978 002e 01EA0202 		and	r2, r1, r2
 27979 0032 1A64     		str	r2, [r3, #64]
 27980              	.L194:
2119:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
2120:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 27981              		.loc 1 2120 0
 27982 0034 07F10C07 		add	r7, r7, #12
 27983 0038 BD46     		mov	sp, r7
 27984 003a 80BC     		pop	{r7}
 27985 003c 7047     		bx	lr
 27986              	.L198:
 27987 003e 00BF     		.align	2
 27988              	.L197:
 27989 0040 00280040 		.word	1073752064
 27990              		.cfi_endproc
 27991              	.LFE148:
 27993              		.section	.text.RTC_TamperFilterConfig,"ax",%progbits
 27994              		.align	2
 27995              		.global	RTC_TamperFilterConfig
 27996              		.thumb
 27997              		.thumb_func
 27999              	RTC_TamperFilterConfig:
 28000              	.LFB149:
2121:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2122:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2123:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Tampers Filter.
2124:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperFilter: Specifies the tampers filter.
2125:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2126:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_Disable: Tamper filter is disabled.
2127:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_2Sample: Tamper is activated after 2 consecutive 
2128:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    samples at the active level 
2129:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_4Sample: Tamper is activated after 4 consecutive 
2130:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    samples at the active level
2131:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_8Sample: Tamper is activated after 8 consecutive 
2132:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    samples at the active level 
2133:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2134:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2135:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperFilterConfig(uint32_t RTC_TamperFilter)
2136:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 28001              		.loc 1 2136 0
 28002              		.cfi_startproc
 28003              		@ args = 0, pretend = 0, frame = 8
 28004              		@ frame_needed = 1, uses_anonymous_args = 0
 28005              		@ link register save eliminated.
 28006 0000 80B4     		push	{r7}
 28007              	.LCFI113:
 28008              		.cfi_def_cfa_offset 4
 28009 0002 83B0     		sub	sp, sp, #12
 28010              	.LCFI114:
 28011              		.cfi_def_cfa_offset 16
 28012 0004 00AF     		add	r7, sp, #0
 28013              		.cfi_offset 7, -4
 28014              	.LCFI115:
 28015              		.cfi_def_cfa_register 7
 28016 0006 7860     		str	r0, [r7, #4]
2137:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2138:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_FILTER(RTC_TamperFilter));
2139:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    
2140:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear TAMPFLT[1:0] bits in the RTC_TAFCR register */
2141:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFLT);
 28017              		.loc 1 2141 0
 28018 0008 084B     		ldr	r3, .L200
 28019 000a 084A     		ldr	r2, .L200
 28020 000c 126C     		ldr	r2, [r2, #64]
 28021 000e 22F4C052 		bic	r2, r2, #6144
 28022 0012 1A64     		str	r2, [r3, #64]
2142:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2143:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the RTC_TAFCR register */
2144:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperFilter;
 28023              		.loc 1 2144 0
 28024 0014 054B     		ldr	r3, .L200
 28025 0016 054A     		ldr	r2, .L200
 28026 0018 116C     		ldr	r1, [r2, #64]
 28027 001a 7A68     		ldr	r2, [r7, #4]
 28028 001c 41EA0202 		orr	r2, r1, r2
 28029 0020 1A64     		str	r2, [r3, #64]
2145:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 28030              		.loc 1 2145 0
 28031 0022 07F10C07 		add	r7, r7, #12
 28032 0026 BD46     		mov	sp, r7
 28033 0028 80BC     		pop	{r7}
 28034 002a 7047     		bx	lr
 28035              	.L201:
 28036              		.align	2
 28037              	.L200:
 28038 002c 00280040 		.word	1073752064
 28039              		.cfi_endproc
 28040              	.LFE149:
 28042              		.section	.text.RTC_TamperSamplingFreqConfig,"ax",%progbits
 28043              		.align	2
 28044              		.global	RTC_TamperSamplingFreqConfig
 28045              		.thumb
 28046              		.thumb_func
 28048              	RTC_TamperSamplingFreqConfig:
 28049              	.LFB150:
2146:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2147:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2148:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Tampers Sampling Frequency.
2149:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperSamplingFreq: Specifies the tampers Sampling Frequency.
2150:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2151:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div32768: Each of the tamper inputs are sampled
2152:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 32768
2153:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div16384: Each of the tamper inputs are sampled
2154:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 16384
2155:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div8192: Each of the tamper inputs are sampled
2156:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 8192
2157:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div4096: Each of the tamper inputs are sampled
2158:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 4096
2159:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div2048: Each of the tamper inputs are sampled
2160:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 2048
2161:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div1024: Each of the tamper inputs are sampled
2162:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 1024
2163:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div512: Each of the tamper inputs are sampled
2164:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 512  
2165:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div256: Each of the tamper inputs are sampled
2166:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 256  
2167:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2168:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2169:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperSamplingFreqConfig(uint32_t RTC_TamperSamplingFreq)
2170:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 28050              		.loc 1 2170 0
 28051              		.cfi_startproc
 28052              		@ args = 0, pretend = 0, frame = 8
 28053              		@ frame_needed = 1, uses_anonymous_args = 0
 28054              		@ link register save eliminated.
 28055 0000 80B4     		push	{r7}
 28056              	.LCFI116:
 28057              		.cfi_def_cfa_offset 4
 28058 0002 83B0     		sub	sp, sp, #12
 28059              	.LCFI117:
 28060              		.cfi_def_cfa_offset 16
 28061 0004 00AF     		add	r7, sp, #0
 28062              		.cfi_offset 7, -4
 28063              	.LCFI118:
 28064              		.cfi_def_cfa_register 7
 28065 0006 7860     		str	r0, [r7, #4]
2171:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2172:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_SAMPLING_FREQ(RTC_TamperSamplingFreq));
2173:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  
2174:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear TAMPFREQ[2:0] bits in the RTC_TAFCR register */
2175:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFREQ);
 28066              		.loc 1 2175 0
 28067 0008 084B     		ldr	r3, .L203
 28068 000a 084A     		ldr	r2, .L203
 28069 000c 126C     		ldr	r2, [r2, #64]
 28070 000e 22F4E062 		bic	r2, r2, #1792
 28071 0012 1A64     		str	r2, [r3, #64]
2176:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2177:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the RTC_TAFCR register */
2178:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperSamplingFreq;
 28072              		.loc 1 2178 0
 28073 0014 054B     		ldr	r3, .L203
 28074 0016 054A     		ldr	r2, .L203
 28075 0018 116C     		ldr	r1, [r2, #64]
 28076 001a 7A68     		ldr	r2, [r7, #4]
 28077 001c 41EA0202 		orr	r2, r1, r2
 28078 0020 1A64     		str	r2, [r3, #64]
2179:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 28079              		.loc 1 2179 0
 28080 0022 07F10C07 		add	r7, r7, #12
 28081 0026 BD46     		mov	sp, r7
 28082 0028 80BC     		pop	{r7}
 28083 002a 7047     		bx	lr
 28084              	.L204:
 28085              		.align	2
 28086              	.L203:
 28087 002c 00280040 		.word	1073752064
 28088              		.cfi_endproc
 28089              	.LFE150:
 28091              		.section	.text.RTC_TamperPinsPrechargeDuration,"ax",%progbits
 28092              		.align	2
 28093              		.global	RTC_TamperPinsPrechargeDuration
 28094              		.thumb
 28095              		.thumb_func
 28097              	RTC_TamperPinsPrechargeDuration:
 28098              	.LFB151:
2180:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2181:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2182:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Tampers Pins input Precharge Duration.
2183:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperPrechargeDuration: Specifies the Tampers Pins input
2184:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         Precharge Duration.
2185:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2186:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_1RTCCLK: Tamper pins are pre-charged before sampling durin
2187:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_2RTCCLK: Tamper pins are pre-charged before sampling durin
2188:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_4RTCCLK: Tamper pins are pre-charged before sampling durin
2189:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_8RTCCLK: Tamper pins are pre-charged before sampling durin
2190:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2191:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2192:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperPinsPrechargeDuration(uint32_t RTC_TamperPrechargeDuration)
2193:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 28099              		.loc 1 2193 0
 28100              		.cfi_startproc
 28101              		@ args = 0, pretend = 0, frame = 8
 28102              		@ frame_needed = 1, uses_anonymous_args = 0
 28103              		@ link register save eliminated.
 28104 0000 80B4     		push	{r7}
 28105              	.LCFI119:
 28106              		.cfi_def_cfa_offset 4
 28107 0002 83B0     		sub	sp, sp, #12
 28108              	.LCFI120:
 28109              		.cfi_def_cfa_offset 16
 28110 0004 00AF     		add	r7, sp, #0
 28111              		.cfi_offset 7, -4
 28112              	.LCFI121:
 28113              		.cfi_def_cfa_register 7
 28114 0006 7860     		str	r0, [r7, #4]
2194:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2195:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_PRECHARGE_DURATION(RTC_TamperPrechargeDuration));
2196:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    
2197:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear TAMPPRCH[1:0] bits in the RTC_TAFCR register */
2198:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPPRCH);
 28115              		.loc 1 2198 0
 28116 0008 084B     		ldr	r3, .L206
 28117 000a 084A     		ldr	r2, .L206
 28118 000c 126C     		ldr	r2, [r2, #64]
 28119 000e 22F4C042 		bic	r2, r2, #24576
 28120 0012 1A64     		str	r2, [r3, #64]
2199:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2200:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the RTC_TAFCR register */
2201:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperPrechargeDuration;
 28121              		.loc 1 2201 0
 28122 0014 054B     		ldr	r3, .L206
 28123 0016 054A     		ldr	r2, .L206
 28124 0018 116C     		ldr	r1, [r2, #64]
 28125 001a 7A68     		ldr	r2, [r7, #4]
 28126 001c 41EA0202 		orr	r2, r1, r2
 28127 0020 1A64     		str	r2, [r3, #64]
2202:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 28128              		.loc 1 2202 0
 28129 0022 07F10C07 		add	r7, r7, #12
 28130 0026 BD46     		mov	sp, r7
 28131 0028 80BC     		pop	{r7}
 28132 002a 7047     		bx	lr
 28133              	.L207:
 28134              		.align	2
 28135              	.L206:
 28136 002c 00280040 		.word	1073752064
 28137              		.cfi_endproc
 28138              	.LFE151:
 28140              		.section	.text.RTC_TimeStampOnTamperDetectionCmd,"ax",%progbits
 28141              		.align	2
 28142              		.global	RTC_TimeStampOnTamperDetectionCmd
 28143              		.thumb
 28144              		.thumb_func
 28146              	RTC_TimeStampOnTamperDetectionCmd:
 28147              	.LFB152:
2203:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2204:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2205:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the TimeStamp on Tamper Detection Event.
2206:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The timestamp is valid even the TSE bit in tamper control register 
2207:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         is reset.   
2208:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the timestamp on tamper event.
2209:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         This parameter can be: ENABLE or DISABLE.
2210:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2211:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2212:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TimeStampOnTamperDetectionCmd(FunctionalState NewState)
2213:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 28148              		.loc 1 2213 0
 28149              		.cfi_startproc
 28150              		@ args = 0, pretend = 0, frame = 8
 28151              		@ frame_needed = 1, uses_anonymous_args = 0
 28152              		@ link register save eliminated.
 28153 0000 80B4     		push	{r7}
 28154              	.LCFI122:
 28155              		.cfi_def_cfa_offset 4
 28156 0002 83B0     		sub	sp, sp, #12
 28157              	.LCFI123:
 28158              		.cfi_def_cfa_offset 16
 28159 0004 00AF     		add	r7, sp, #0
 28160              		.cfi_offset 7, -4
 28161              	.LCFI124:
 28162              		.cfi_def_cfa_register 7
 28163 0006 0346     		mov	r3, r0
 28164 0008 FB71     		strb	r3, [r7, #7]
2214:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2215:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2216:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    
2217:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 28165              		.loc 1 2217 0
 28166 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 28167 000c 002B     		cmp	r3, #0
 28168 000e 06D0     		beq	.L209
2218:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2219:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Save timestamp on tamper detection event */
2220:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPTS;
 28169              		.loc 1 2220 0
 28170 0010 084B     		ldr	r3, .L211
 28171 0012 084A     		ldr	r2, .L211
 28172 0014 126C     		ldr	r2, [r2, #64]
 28173 0016 42F08002 		orr	r2, r2, #128
 28174 001a 1A64     		str	r2, [r3, #64]
 28175 001c 05E0     		b	.L208
 28176              	.L209:
2221:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2222:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2223:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2224:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Tamper detection does not cause a timestamp to be saved */
2225:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPTS;    
 28177              		.loc 1 2225 0
 28178 001e 054B     		ldr	r3, .L211
 28179 0020 044A     		ldr	r2, .L211
 28180 0022 126C     		ldr	r2, [r2, #64]
 28181 0024 22F08002 		bic	r2, r2, #128
 28182 0028 1A64     		str	r2, [r3, #64]
 28183              	.L208:
2226:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2227:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 28184              		.loc 1 2227 0
 28185 002a 07F10C07 		add	r7, r7, #12
 28186 002e BD46     		mov	sp, r7
 28187 0030 80BC     		pop	{r7}
 28188 0032 7047     		bx	lr
 28189              	.L212:
 28190              		.align	2
 28191              	.L211:
 28192 0034 00280040 		.word	1073752064
 28193              		.cfi_endproc
 28194              	.LFE152:
 28196              		.section	.text.RTC_TamperPullUpCmd,"ax",%progbits
 28197              		.align	2
 28198              		.global	RTC_TamperPullUpCmd
 28199              		.thumb
 28200              		.thumb_func
 28202              	RTC_TamperPullUpCmd:
 28203              	.LFB153:
2228:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2229:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2230:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the Precharge of Tamper pin.
2231:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of tamper pull up.
2232:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be: ENABLE or DISABLE.                   
2233:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2234:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2235:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperPullUpCmd(FunctionalState NewState)
2236:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 28204              		.loc 1 2236 0
 28205              		.cfi_startproc
 28206              		@ args = 0, pretend = 0, frame = 8
 28207              		@ frame_needed = 1, uses_anonymous_args = 0
 28208              		@ link register save eliminated.
 28209 0000 80B4     		push	{r7}
 28210              	.LCFI125:
 28211              		.cfi_def_cfa_offset 4
 28212 0002 83B0     		sub	sp, sp, #12
 28213              	.LCFI126:
 28214              		.cfi_def_cfa_offset 16
 28215 0004 00AF     		add	r7, sp, #0
 28216              		.cfi_offset 7, -4
 28217              	.LCFI127:
 28218              		.cfi_def_cfa_register 7
 28219 0006 0346     		mov	r3, r0
 28220 0008 FB71     		strb	r3, [r7, #7]
2237:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2238:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2239:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2240:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  if (NewState != DISABLE)
 28221              		.loc 1 2240 0
 28222 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 28223 000c 002B     		cmp	r3, #0
 28224 000e 06D0     		beq	.L214
2241:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2242:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Enable precharge of the selected Tamper pin */
2243:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPPUDIS; 
 28225              		.loc 1 2243 0
 28226 0010 084B     		ldr	r3, .L216
 28227 0012 084A     		ldr	r2, .L216
 28228 0014 126C     		ldr	r2, [r2, #64]
 28229 0016 22F40042 		bic	r2, r2, #32768
 28230 001a 1A64     		str	r2, [r3, #64]
 28231 001c 05E0     		b	.L213
 28232              	.L214:
2244:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2245:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2246:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2247:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable precharge of the selected Tamper pin */
2248:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPPUDIS;    
 28233              		.loc 1 2248 0
 28234 001e 054B     		ldr	r3, .L216
 28235 0020 044A     		ldr	r2, .L216
 28236 0022 126C     		ldr	r2, [r2, #64]
 28237 0024 42F40042 		orr	r2, r2, #32768
 28238 0028 1A64     		str	r2, [r3, #64]
 28239              	.L213:
2249:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
2250:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 28240              		.loc 1 2250 0
 28241 002a 07F10C07 		add	r7, r7, #12
 28242 002e BD46     		mov	sp, r7
 28243 0030 80BC     		pop	{r7}
 28244 0032 7047     		bx	lr
 28245              	.L217:
 28246              		.align	2
 28247              	.L216:
 28248 0034 00280040 		.word	1073752064
 28249              		.cfi_endproc
 28250              	.LFE153:
 28252              		.section	.text.RTC_WriteBackupRegister,"ax",%progbits
 28253              		.align	2
 28254              		.global	RTC_WriteBackupRegister
 28255              		.thumb
 28256              		.thumb_func
 28258              	RTC_WriteBackupRegister:
 28259              	.LFB154:
2251:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2252:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2253:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2254:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2255:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2256:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group10 Backup Data Registers configuration functions
2257:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Backup Data Registers configuration functions  
2258:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
2259:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
2260:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
2261:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                        Backup Data Registers configuration functions 
2262:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
2263:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2264:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
2265:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
2266:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2267:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2268:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2269:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Writes a data in a specified RTC Backup data register.
2270:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_BKP_DR: RTC Backup data Register number.
2271:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to 
2272:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                          specify the register.
2273:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  Data: Data to be written in the specified RTC Backup data register.                    
2274:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2275:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2276:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_WriteBackupRegister(uint32_t RTC_BKP_DR, uint32_t Data)
2277:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 28260              		.loc 1 2277 0
 28261              		.cfi_startproc
 28262              		@ args = 0, pretend = 0, frame = 16
 28263              		@ frame_needed = 1, uses_anonymous_args = 0
 28264              		@ link register save eliminated.
 28265 0000 80B4     		push	{r7}
 28266              	.LCFI128:
 28267              		.cfi_def_cfa_offset 4
 28268 0002 85B0     		sub	sp, sp, #20
 28269              	.LCFI129:
 28270              		.cfi_def_cfa_offset 24
 28271 0004 00AF     		add	r7, sp, #0
 28272              		.cfi_offset 7, -4
 28273              	.LCFI130:
 28274              		.cfi_def_cfa_register 7
 28275 0006 7860     		str	r0, [r7, #4]
 28276 0008 3960     		str	r1, [r7, #0]
2278:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t tmp = 0;
 28277              		.loc 1 2278 0
 28278 000a 4FF00003 		mov	r3, #0
 28279 000e FB60     		str	r3, [r7, #12]
2279:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2280:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2281:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_BKP(RTC_BKP_DR));
2282:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2283:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp = RTC_BASE + 0x50;
 28280              		.loc 1 2283 0
 28281 0010 074B     		ldr	r3, .L219
 28282 0012 FB60     		str	r3, [r7, #12]
2284:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp += (RTC_BKP_DR * 4);
 28283              		.loc 1 2284 0
 28284 0014 7B68     		ldr	r3, [r7, #4]
 28285 0016 4FEA8302 		lsl	r2, r3, #2
 28286 001a FB68     		ldr	r3, [r7, #12]
 28287 001c D318     		adds	r3, r2, r3
 28288 001e FB60     		str	r3, [r7, #12]
2285:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2286:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Write the specified register */
2287:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *(__IO uint32_t *)tmp = (uint32_t)Data;
 28289              		.loc 1 2287 0
 28290 0020 FB68     		ldr	r3, [r7, #12]
 28291 0022 3A68     		ldr	r2, [r7, #0]
 28292 0024 1A60     		str	r2, [r3, #0]
2288:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 28293              		.loc 1 2288 0
 28294 0026 07F11407 		add	r7, r7, #20
 28295 002a BD46     		mov	sp, r7
 28296 002c 80BC     		pop	{r7}
 28297 002e 7047     		bx	lr
 28298              	.L220:
 28299              		.align	2
 28300              	.L219:
 28301 0030 50280040 		.word	1073752144
 28302              		.cfi_endproc
 28303              	.LFE154:
 28305              		.section	.text.RTC_ReadBackupRegister,"ax",%progbits
 28306              		.align	2
 28307              		.global	RTC_ReadBackupRegister
 28308              		.thumb
 28309              		.thumb_func
 28311              	RTC_ReadBackupRegister:
 28312              	.LFB155:
2289:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2290:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2291:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Reads data from the specified RTC Backup data Register.
2292:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_BKP_DR: RTC Backup data Register number.
2293:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to 
2294:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                          specify the register.                   
2295:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2296:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2297:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_ReadBackupRegister(uint32_t RTC_BKP_DR)
2298:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 28313              		.loc 1 2298 0
 28314              		.cfi_startproc
 28315              		@ args = 0, pretend = 0, frame = 16
 28316              		@ frame_needed = 1, uses_anonymous_args = 0
 28317              		@ link register save eliminated.
 28318 0000 80B4     		push	{r7}
 28319              	.LCFI131:
 28320              		.cfi_def_cfa_offset 4
 28321 0002 85B0     		sub	sp, sp, #20
 28322              	.LCFI132:
 28323              		.cfi_def_cfa_offset 24
 28324 0004 00AF     		add	r7, sp, #0
 28325              		.cfi_offset 7, -4
 28326              	.LCFI133:
 28327              		.cfi_def_cfa_register 7
 28328 0006 7860     		str	r0, [r7, #4]
2299:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t tmp = 0;
 28329              		.loc 1 2299 0
 28330 0008 4FF00003 		mov	r3, #0
 28331 000c FB60     		str	r3, [r7, #12]
2300:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2301:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2302:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_BKP(RTC_BKP_DR));
2303:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2304:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp = RTC_BASE + 0x50;
 28332              		.loc 1 2304 0
 28333 000e 084B     		ldr	r3, .L222
 28334 0010 FB60     		str	r3, [r7, #12]
2305:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp += (RTC_BKP_DR * 4);
 28335              		.loc 1 2305 0
 28336 0012 7B68     		ldr	r3, [r7, #4]
 28337 0014 4FEA8302 		lsl	r2, r3, #2
 28338 0018 FB68     		ldr	r3, [r7, #12]
 28339 001a D318     		adds	r3, r2, r3
 28340 001c FB60     		str	r3, [r7, #12]
2306:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2307:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Read the specified register */
2308:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (*(__IO uint32_t *)tmp);
 28341              		.loc 1 2308 0
 28342 001e FB68     		ldr	r3, [r7, #12]
 28343 0020 1B68     		ldr	r3, [r3, #0]
2309:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 28344              		.loc 1 2309 0
 28345 0022 1846     		mov	r0, r3
 28346 0024 07F11407 		add	r7, r7, #20
 28347 0028 BD46     		mov	sp, r7
 28348 002a 80BC     		pop	{r7}
 28349 002c 7047     		bx	lr
 28350              	.L223:
 28351 002e 00BF     		.align	2
 28352              	.L222:
 28353 0030 50280040 		.word	1073752144
 28354              		.cfi_endproc
 28355              	.LFE155:
 28357              		.section	.text.RTC_TamperPinSelection,"ax",%progbits
 28358              		.align	2
 28359              		.global	RTC_TamperPinSelection
 28360              		.thumb
 28361              		.thumb_func
 28363              	RTC_TamperPinSelection:
 28364              	.LFB156:
2310:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2311:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2312:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2313:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2314:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2315:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group11 RTC Tamper and TimeStamp Pins Selection and Output Type Config configurat
2316:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   RTC Tamper and TimeStamp Pins Selection and Output Type Config 
2317:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *           configuration functions  
2318:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
2319:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
2320:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
2321:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC Tamper and TimeStamp Pins Selection and Output Type Config configuration 
2322:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   functions 
2323:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
2324:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2325:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
2326:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
2327:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2328:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2329:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2330:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Selects the RTC Tamper Pin.
2331:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperPin: specifies the RTC Tamper Pin.
2332:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2333:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TamperPin_PC13: PC13 is selected as RTC Tamper Pin.
2334:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TamperPin_PI8: PI8 is selected as RTC Tamper Pin.    
2335:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2336:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2337:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperPinSelection(uint32_t RTC_TamperPin)
2338:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 28365              		.loc 1 2338 0
 28366              		.cfi_startproc
 28367              		@ args = 0, pretend = 0, frame = 8
 28368              		@ frame_needed = 1, uses_anonymous_args = 0
 28369              		@ link register save eliminated.
 28370 0000 80B4     		push	{r7}
 28371              	.LCFI134:
 28372              		.cfi_def_cfa_offset 4
 28373 0002 83B0     		sub	sp, sp, #12
 28374              	.LCFI135:
 28375              		.cfi_def_cfa_offset 16
 28376 0004 00AF     		add	r7, sp, #0
 28377              		.cfi_offset 7, -4
 28378              	.LCFI136:
 28379              		.cfi_def_cfa_register 7
 28380 0006 7860     		str	r0, [r7, #4]
2339:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2340:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_PIN(RTC_TamperPin));
2341:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2342:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPINSEL);
 28381              		.loc 1 2342 0
 28382 0008 084B     		ldr	r3, .L225
 28383 000a 084A     		ldr	r2, .L225
 28384 000c 126C     		ldr	r2, [r2, #64]
 28385 000e 22F48032 		bic	r2, r2, #65536
 28386 0012 1A64     		str	r2, [r3, #64]
2343:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_TamperPin);  
 28387              		.loc 1 2343 0
 28388 0014 054B     		ldr	r3, .L225
 28389 0016 054A     		ldr	r2, .L225
 28390 0018 116C     		ldr	r1, [r2, #64]
 28391 001a 7A68     		ldr	r2, [r7, #4]
 28392 001c 41EA0202 		orr	r2, r1, r2
 28393 0020 1A64     		str	r2, [r3, #64]
2344:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 28394              		.loc 1 2344 0
 28395 0022 07F10C07 		add	r7, r7, #12
 28396 0026 BD46     		mov	sp, r7
 28397 0028 80BC     		pop	{r7}
 28398 002a 7047     		bx	lr
 28399              	.L226:
 28400              		.align	2
 28401              	.L225:
 28402 002c 00280040 		.word	1073752064
 28403              		.cfi_endproc
 28404              	.LFE156:
 28406              		.section	.text.RTC_TimeStampPinSelection,"ax",%progbits
 28407              		.align	2
 28408              		.global	RTC_TimeStampPinSelection
 28409              		.thumb
 28410              		.thumb_func
 28412              	RTC_TimeStampPinSelection:
 28413              	.LFB157:
2345:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2346:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2347:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Selects the RTC TimeStamp Pin.
2348:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStampPin: specifies the RTC TimeStamp Pin.
2349:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2350:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampPin_PC13: PC13 is selected as RTC TimeStamp Pin.
2351:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampPin_PI8: PI8 is selected as RTC TimeStamp Pin.    
2352:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2353:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2354:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TimeStampPinSelection(uint32_t RTC_TimeStampPin)
2355:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 28414              		.loc 1 2355 0
 28415              		.cfi_startproc
 28416              		@ args = 0, pretend = 0, frame = 8
 28417              		@ frame_needed = 1, uses_anonymous_args = 0
 28418              		@ link register save eliminated.
 28419 0000 80B4     		push	{r7}
 28420              	.LCFI137:
 28421              		.cfi_def_cfa_offset 4
 28422 0002 83B0     		sub	sp, sp, #12
 28423              	.LCFI138:
 28424              		.cfi_def_cfa_offset 16
 28425 0004 00AF     		add	r7, sp, #0
 28426              		.cfi_offset 7, -4
 28427              	.LCFI139:
 28428              		.cfi_def_cfa_register 7
 28429 0006 7860     		str	r0, [r7, #4]
2356:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2357:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));
2358:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2359:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TSINSEL);
 28430              		.loc 1 2359 0
 28431 0008 084B     		ldr	r3, .L228
 28432 000a 084A     		ldr	r2, .L228
 28433 000c 126C     		ldr	r2, [r2, #64]
 28434 000e 22F40032 		bic	r2, r2, #131072
 28435 0012 1A64     		str	r2, [r3, #64]
2360:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_TimeStampPin);  
 28436              		.loc 1 2360 0
 28437 0014 054B     		ldr	r3, .L228
 28438 0016 054A     		ldr	r2, .L228
 28439 0018 116C     		ldr	r1, [r2, #64]
 28440 001a 7A68     		ldr	r2, [r7, #4]
 28441 001c 41EA0202 		orr	r2, r1, r2
 28442 0020 1A64     		str	r2, [r3, #64]
2361:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 28443              		.loc 1 2361 0
 28444 0022 07F10C07 		add	r7, r7, #12
 28445 0026 BD46     		mov	sp, r7
 28446 0028 80BC     		pop	{r7}
 28447 002a 7047     		bx	lr
 28448              	.L229:
 28449              		.align	2
 28450              	.L228:
 28451 002c 00280040 		.word	1073752064
 28452              		.cfi_endproc
 28453              	.LFE157:
 28455              		.section	.text.RTC_OutputTypeConfig,"ax",%progbits
 28456              		.align	2
 28457              		.global	RTC_OutputTypeConfig
 28458              		.thumb
 28459              		.thumb_func
 28461              	RTC_OutputTypeConfig:
 28462              	.LFB158:
2362:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2363:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2364:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the RTC Output Pin mode. 
2365:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_OutputType: specifies the RTC Output (PC13) pin mode.
2366:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2367:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_OutputType_OpenDrain: RTC Output (PC13) is configured in 
2368:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    Open Drain mode.
2369:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_OutputType_PushPull:  RTC Output (PC13) is configured in 
2370:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    Push Pull mode.    
2371:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2372:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2373:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_OutputTypeConfig(uint32_t RTC_OutputType)
2374:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 28463              		.loc 1 2374 0
 28464              		.cfi_startproc
 28465              		@ args = 0, pretend = 0, frame = 8
 28466              		@ frame_needed = 1, uses_anonymous_args = 0
 28467              		@ link register save eliminated.
 28468 0000 80B4     		push	{r7}
 28469              	.LCFI140:
 28470              		.cfi_def_cfa_offset 4
 28471 0002 83B0     		sub	sp, sp, #12
 28472              	.LCFI141:
 28473              		.cfi_def_cfa_offset 16
 28474 0004 00AF     		add	r7, sp, #0
 28475              		.cfi_offset 7, -4
 28476              	.LCFI142:
 28477              		.cfi_def_cfa_register 7
 28478 0006 7860     		str	r0, [r7, #4]
2375:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2376:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_OUTPUT_TYPE(RTC_OutputType));
2377:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2378:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_ALARMOUTTYPE);
 28479              		.loc 1 2378 0
 28480 0008 084B     		ldr	r3, .L231
 28481 000a 084A     		ldr	r2, .L231
 28482 000c 126C     		ldr	r2, [r2, #64]
 28483 000e 22F48022 		bic	r2, r2, #262144
 28484 0012 1A64     		str	r2, [r3, #64]
2379:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_OutputType);  
 28485              		.loc 1 2379 0
 28486 0014 054B     		ldr	r3, .L231
 28487 0016 054A     		ldr	r2, .L231
 28488 0018 116C     		ldr	r1, [r2, #64]
 28489 001a 7A68     		ldr	r2, [r7, #4]
 28490 001c 41EA0202 		orr	r2, r1, r2
 28491 0020 1A64     		str	r2, [r3, #64]
2380:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 28492              		.loc 1 2380 0
 28493 0022 07F10C07 		add	r7, r7, #12
 28494 0026 BD46     		mov	sp, r7
 28495 0028 80BC     		pop	{r7}
 28496 002a 7047     		bx	lr
 28497              	.L232:
 28498              		.align	2
 28499              	.L231:
 28500 002c 00280040 		.word	1073752064
 28501              		.cfi_endproc
 28502              	.LFE158:
 28504              		.section	.text.RTC_SynchroShiftConfig,"ax",%progbits
 28505              		.align	2
 28506              		.global	RTC_SynchroShiftConfig
 28507              		.thumb
 28508              		.thumb_func
 28510              	RTC_SynchroShiftConfig:
 28511              	.LFB159:
2381:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2382:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2383:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2384:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2385:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2386:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group12 Shift control synchronisation functions
2387:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Shift control synchronisation functions 
2388:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
2389:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
2390:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
2391:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    Shift control synchronisation functions
2392:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
2393:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2394:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
2395:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
2396:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2397:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2398:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2399:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Synchronization Shift Control Settings.
2400:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   When REFCKON is set, firmware must not write to Shift control register 
2401:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_ShiftAdd1S : Select to add or not 1 second to the time Calendar.
2402:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values :
2403:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_ShiftAdd1S_Set  : Add one second to the clock calendar. 
2404:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_ShiftAdd1S_Reset: No effect.
2405:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_ShiftSubFS: Select the number of Second Fractions to Substitute.
2406:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         This parameter can be one any value from 0 to 0x7FFF.
2407:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
2408:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Shift registers are configured
2409:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Shift registers are not configured
2410:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** */
2411:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_SynchroShiftConfig(uint32_t RTC_ShiftAdd1S, uint32_t RTC_ShiftSubFS)
2412:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 28512              		.loc 1 2412 0
 28513              		.cfi_startproc
 28514              		@ args = 0, pretend = 0, frame = 16
 28515              		@ frame_needed = 1, uses_anonymous_args = 0
 28516 0000 80B5     		push	{r7, lr}
 28517              	.LCFI143:
 28518              		.cfi_def_cfa_offset 8
 28519 0002 84B0     		sub	sp, sp, #16
 28520              	.LCFI144:
 28521              		.cfi_def_cfa_offset 24
 28522 0004 00AF     		add	r7, sp, #0
 28523              		.cfi_offset 14, -4
 28524              		.cfi_offset 7, -8
 28525              	.LCFI145:
 28526              		.cfi_def_cfa_register 7
 28527 0006 7860     		str	r0, [r7, #4]
 28528 0008 3960     		str	r1, [r7, #0]
2413:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 28529              		.loc 1 2413 0
 28530 000a 4FF00003 		mov	r3, #0
 28531 000e FB73     		strb	r3, [r7, #15]
2414:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t shpfcount = 0;
 28532              		.loc 1 2414 0
 28533 0010 4FF00003 		mov	r3, #0
 28534 0014 BB60     		str	r3, [r7, #8]
2415:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2416:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2417:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SHIFT_ADD1S(RTC_ShiftAdd1S));
2418:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SHIFT_SUBFS(RTC_ShiftSubFS));
2419:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2420:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
2421:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 28535              		.loc 1 2421 0
 28536 0016 264B     		ldr	r3, .L241
 28537 0018 4FF0CA02 		mov	r2, #202
 28538 001c 5A62     		str	r2, [r3, #36]
2422:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 28539              		.loc 1 2422 0
 28540 001e 244B     		ldr	r3, .L241
 28541 0020 4FF05302 		mov	r2, #83
 28542 0024 5A62     		str	r2, [r3, #36]
2423:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2424:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check if a Shift is pending*/
2425:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_SHPF) != RESET)
 28543              		.loc 1 2425 0
 28544 0026 224B     		ldr	r3, .L241
 28545 0028 DB68     		ldr	r3, [r3, #12]
 28546 002a 03F00803 		and	r3, r3, #8
 28547 002e 002B     		cmp	r3, #0
 28548 0030 0ED0     		beq	.L234
2426:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2427:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Wait until the shift is completed*/
2428:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
 28549              		.loc 1 2428 0
 28550 0032 03E0     		b	.L235
 28551              	.L236:
2429:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
2430:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       shpfcount++;
 28552              		.loc 1 2430 0
 28553 0034 BB68     		ldr	r3, [r7, #8]
 28554 0036 03F10103 		add	r3, r3, #1
 28555 003a BB60     		str	r3, [r7, #8]
 28556              	.L235:
2428:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
 28557              		.loc 1 2428 0 discriminator 1
 28558 003c 1C4B     		ldr	r3, .L241
 28559 003e DB68     		ldr	r3, [r3, #12]
 28560 0040 03F00803 		and	r3, r3, #8
 28561 0044 002B     		cmp	r3, #0
 28562 0046 03D0     		beq	.L234
2428:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
 28563              		.loc 1 2428 0 is_stmt 0 discriminator 2
 28564 0048 BB68     		ldr	r3, [r7, #8]
 28565 004a B3F5805F 		cmp	r3, #4096
 28566 004e F1D1     		bne	.L236
 28567              	.L234:
2431:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
2432:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2433:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2434:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check if the Shift pending is completed or if there is no Shift operation at all*/
2435:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_SHPF) == RESET)
 28568              		.loc 1 2435 0 is_stmt 1
 28569 0050 174B     		ldr	r3, .L241
 28570 0052 DB68     		ldr	r3, [r3, #12]
 28571 0054 03F00803 		and	r3, r3, #8
 28572 0058 002B     		cmp	r3, #0
 28573 005a 1CD1     		bne	.L237
2436:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2437:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* check if the reference clock detection is disabled */
2438:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if((RTC->CR & RTC_CR_REFCKON) == RESET)
 28574              		.loc 1 2438 0
 28575 005c 144B     		ldr	r3, .L241
 28576 005e 9B68     		ldr	r3, [r3, #8]
 28577 0060 03F01003 		and	r3, r3, #16
 28578 0064 002B     		cmp	r3, #0
 28579 0066 12D1     		bne	.L238
2439:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
2440:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Configure the Shift settings */
2441:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->SHIFTR = (uint32_t)(uint32_t)(RTC_ShiftSubFS) | (uint32_t)(RTC_ShiftAdd1S);
 28580              		.loc 1 2441 0
 28581 0068 114B     		ldr	r3, .L241
 28582 006a 3968     		ldr	r1, [r7, #0]
 28583 006c 7A68     		ldr	r2, [r7, #4]
 28584 006e 41EA0202 		orr	r2, r1, r2
 28585 0072 DA62     		str	r2, [r3, #44]
2442:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
2443:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       if(RTC_WaitForSynchro() == ERROR)
 28586              		.loc 1 2443 0
 28587 0074 FFF7FEFF 		bl	RTC_WaitForSynchro
 28588 0078 0346     		mov	r3, r0
 28589 007a 002B     		cmp	r3, #0
 28590 007c 03D1     		bne	.L239
2444:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       {
2445:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****         status = ERROR;
 28591              		.loc 1 2445 0
 28592 007e 4FF00003 		mov	r3, #0
 28593 0082 FB73     		strb	r3, [r7, #15]
 28594 0084 0AE0     		b	.L240
 28595              	.L239:
2446:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       }
2447:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       else
2448:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       {
2449:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****         status = SUCCESS;
 28596              		.loc 1 2449 0
 28597 0086 4FF00103 		mov	r3, #1
 28598 008a FB73     		strb	r3, [r7, #15]
 28599 008c 06E0     		b	.L240
 28600              	.L238:
2450:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       }
2451:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
2452:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
2453:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
2454:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 28601              		.loc 1 2454 0
 28602 008e 4FF00003 		mov	r3, #0
 28603 0092 FB73     		strb	r3, [r7, #15]
 28604 0094 02E0     		b	.L240
 28605              	.L237:
2455:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
2456:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2457:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2458:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2459:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 28606              		.loc 1 2459 0
 28607 0096 4FF00003 		mov	r3, #0
 28608 009a FB73     		strb	r3, [r7, #15]
 28609              	.L240:
2460:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2461:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2462:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
2463:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 28610              		.loc 1 2463 0
 28611 009c 044B     		ldr	r3, .L241
 28612 009e 4FF0FF02 		mov	r2, #255
 28613 00a2 5A62     		str	r2, [r3, #36]
2464:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2465:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (ErrorStatus)(status);
 28614              		.loc 1 2465 0
 28615 00a4 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
2466:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 28616              		.loc 1 2466 0
 28617 00a6 1846     		mov	r0, r3
 28618 00a8 07F11007 		add	r7, r7, #16
 28619 00ac BD46     		mov	sp, r7
 28620 00ae 80BD     		pop	{r7, pc}
 28621              	.L242:
 28622              		.align	2
 28623              	.L241:
 28624 00b0 00280040 		.word	1073752064
 28625              		.cfi_endproc
 28626              	.LFE159:
 28628              		.section	.text.RTC_ITConfig,"ax",%progbits
 28629              		.align	2
 28630              		.global	RTC_ITConfig
 28631              		.thumb
 28632              		.thumb_func
 28634              	RTC_ITConfig:
 28635              	.LFB160:
2467:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2468:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2469:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2470:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2471:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2472:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group13 Interrupts and flags management functions
2473:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Interrupts and flags management functions  
2474:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
2475:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
2476:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
2477:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                        Interrupts and flags management functions
2478:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
2479:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  All RTC interrupts are connected to the EXTI controller.
2480:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  
2481:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  - To enable the RTC Alarm interrupt, the following sequence is required:
2482:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the EXTI Line 17 in interrupt mode and select the rising 
2483:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      edge sensitivity using the EXTI_Init() function.
2484:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the RTC_Alarm IRQ channel in the NVIC using the NVIC_Init()
2485:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      function.
2486:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure the RTC to generate RTC alarms (Alarm A and/or Alarm B) using
2487:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      the RTC_SetAlarm() and RTC_AlarmCmd() functions.
2488:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2489:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  - To enable the RTC Wakeup interrupt, the following sequence is required:
2490:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the EXTI Line 22 in interrupt mode and select the rising 
2491:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      edge sensitivity using the EXTI_Init() function.
2492:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the RTC_WKUP IRQ channel in the NVIC using the NVIC_Init()
2493:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      function.
2494:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure the RTC to generate the RTC wakeup timer event using the 
2495:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      RTC_WakeUpClockConfig(), RTC_SetWakeUpCounter() and RTC_WakeUpCmd() functions.
2496:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2497:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  - To enable the RTC Tamper interrupt, the following sequence is required:
2498:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the EXTI Line 21 in interrupt mode and select the rising 
2499:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      edge sensitivity using the EXTI_Init() function.
2500:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the TAMP_STAMP IRQ channel in the NVIC using the NVIC_Init()
2501:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      function.
2502:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure the RTC to detect the RTC tamper event using the 
2503:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      RTC_TamperTriggerConfig() and RTC_TamperCmd() functions.
2504:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2505:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  - To enable the RTC TimeStamp interrupt, the following sequence is required:
2506:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the EXTI Line 21 in interrupt mode and select the rising 
2507:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      edge sensitivity using the EXTI_Init() function.
2508:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the TAMP_STAMP IRQ channel in the NVIC using the NVIC_Init()
2509:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      function.
2510:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure the RTC to detect the RTC time-stamp event using the 
2511:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      RTC_TimeStampCmd() functions.
2512:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2513:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
2514:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
2515:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2516:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2517:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2518:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the specified RTC interrupts.
2519:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_IT: specifies the RTC interrupt sources to be enabled or disabled. 
2520:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
2521:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TS:  Time Stamp interrupt mask
2522:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_WUT:  WakeUp Timer interrupt mask
2523:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRB:  Alarm B interrupt mask
2524:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRA:  Alarm A interrupt mask
2525:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TAMP: Tamper event interrupt mask
2526:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the specified RTC interrupts.
2527:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
2528:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2529:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2530:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_ITConfig(uint32_t RTC_IT, FunctionalState NewState)
2531:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 28636              		.loc 1 2531 0
 28637              		.cfi_startproc
 28638              		@ args = 0, pretend = 0, frame = 8
 28639              		@ frame_needed = 1, uses_anonymous_args = 0
 28640              		@ link register save eliminated.
 28641 0000 80B4     		push	{r7}
 28642              	.LCFI146:
 28643              		.cfi_def_cfa_offset 4
 28644 0002 83B0     		sub	sp, sp, #12
 28645              	.LCFI147:
 28646              		.cfi_def_cfa_offset 16
 28647 0004 00AF     		add	r7, sp, #0
 28648              		.cfi_offset 7, -4
 28649              	.LCFI148:
 28650              		.cfi_def_cfa_register 7
 28651 0006 7860     		str	r0, [r7, #4]
 28652 0008 0B46     		mov	r3, r1
 28653 000a FB70     		strb	r3, [r7, #3]
2532:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2533:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CONFIG_IT(RTC_IT));
2534:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2535:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2536:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
2537:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 28654              		.loc 1 2537 0
 28655 000c 1E4B     		ldr	r3, .L246
 28656 000e 4FF0CA02 		mov	r2, #202
 28657 0012 5A62     		str	r2, [r3, #36]
2538:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 28658              		.loc 1 2538 0
 28659 0014 1C4B     		ldr	r3, .L246
 28660 0016 4FF05302 		mov	r2, #83
 28661 001a 5A62     		str	r2, [r3, #36]
2539:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2540:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 28662              		.loc 1 2540 0
 28663 001c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 28664 001e 002B     		cmp	r3, #0
 28665 0020 12D0     		beq	.L244
2541:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2542:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Interrupts in the RTC_CR register */
2543:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)(RTC_IT & ~RTC_TAFCR_TAMPIE);
 28666              		.loc 1 2543 0
 28667 0022 194B     		ldr	r3, .L246
 28668 0024 184A     		ldr	r2, .L246
 28669 0026 9168     		ldr	r1, [r2, #8]
 28670 0028 7A68     		ldr	r2, [r7, #4]
 28671 002a 22F00402 		bic	r2, r2, #4
 28672 002e 41EA0202 		orr	r2, r1, r2
 28673 0032 9A60     		str	r2, [r3, #8]
2544:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Tamper Interrupt in the RTC_TAFCR */
2545:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)(RTC_IT & RTC_TAFCR_TAMPIE);
 28674              		.loc 1 2545 0
 28675 0034 144B     		ldr	r3, .L246
 28676 0036 144A     		ldr	r2, .L246
 28677 0038 116C     		ldr	r1, [r2, #64]
 28678 003a 7A68     		ldr	r2, [r7, #4]
 28679 003c 02F00402 		and	r2, r2, #4
 28680 0040 41EA0202 		orr	r2, r1, r2
 28681 0044 1A64     		str	r2, [r3, #64]
 28682 0046 15E0     		b	.L245
 28683              	.L244:
2546:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2547:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2548:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2549:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Interrupts in the RTC_CR register */
2550:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~(RTC_IT & (uint32_t)~RTC_TAFCR_TAMPIE);
 28684              		.loc 1 2550 0
 28685 0048 0F4B     		ldr	r3, .L246
 28686 004a 0F4A     		ldr	r2, .L246
 28687 004c 9168     		ldr	r1, [r2, #8]
 28688 004e 7A68     		ldr	r2, [r7, #4]
 28689 0050 22F00402 		bic	r2, r2, #4
 28690 0054 6FEA0202 		mvn	r2, r2
 28691 0058 01EA0202 		and	r2, r1, r2
 28692 005c 9A60     		str	r2, [r3, #8]
2551:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Tamper Interrupt in the RTC_TAFCR */
2552:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~(RTC_IT & RTC_TAFCR_TAMPIE);
 28693              		.loc 1 2552 0
 28694 005e 0A4B     		ldr	r3, .L246
 28695 0060 094A     		ldr	r2, .L246
 28696 0062 116C     		ldr	r1, [r2, #64]
 28697 0064 7A68     		ldr	r2, [r7, #4]
 28698 0066 02F00402 		and	r2, r2, #4
 28699 006a 6FEA0202 		mvn	r2, r2
 28700 006e 01EA0202 		and	r2, r1, r2
 28701 0072 1A64     		str	r2, [r3, #64]
 28702              	.L245:
2553:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2554:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
2555:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 28703              		.loc 1 2555 0
 28704 0074 044B     		ldr	r3, .L246
 28705 0076 4FF0FF02 		mov	r2, #255
 28706 007a 5A62     		str	r2, [r3, #36]
2556:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 28707              		.loc 1 2556 0
 28708 007c 07F10C07 		add	r7, r7, #12
 28709 0080 BD46     		mov	sp, r7
 28710 0082 80BC     		pop	{r7}
 28711 0084 7047     		bx	lr
 28712              	.L247:
 28713 0086 00BF     		.align	2
 28714              	.L246:
 28715 0088 00280040 		.word	1073752064
 28716              		.cfi_endproc
 28717              	.LFE160:
 28719              		.section	.text.RTC_GetFlagStatus,"ax",%progbits
 28720              		.align	2
 28721              		.global	RTC_GetFlagStatus
 28722              		.thumb
 28723              		.thumb_func
 28725              	RTC_GetFlagStatus:
 28726              	.LFB161:
2557:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2558:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2559:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Checks whether the specified RTC flag is set or not.
2560:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_FLAG: specifies the flag to check.
2561:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2562:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TAMP1F: Tamper 1 event flag
2563:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSOVF: Time Stamp OverFlow flag
2564:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSF: Time Stamp event flag
2565:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_WUTF: WakeUp Timer flag
2566:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRBF: Alarm B flag
2567:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRAF: Alarm A flag
2568:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_INITF: Initialization mode flag
2569:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_RSF: Registers Synchronized flag
2570:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_INITS: Registers Configured flag
2571:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_WUTWF: WakeUp Timer Write flag
2572:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRBWF: Alarm B Write flag
2573:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRAWF: Alarm A write flag
2574:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval The new state of RTC_FLAG (SET or RESET).
2575:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2576:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** FlagStatus RTC_GetFlagStatus(uint32_t RTC_FLAG)
2577:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 28727              		.loc 1 2577 0
 28728              		.cfi_startproc
 28729              		@ args = 0, pretend = 0, frame = 16
 28730              		@ frame_needed = 1, uses_anonymous_args = 0
 28731              		@ link register save eliminated.
 28732 0000 80B4     		push	{r7}
 28733              	.LCFI149:
 28734              		.cfi_def_cfa_offset 4
 28735 0002 85B0     		sub	sp, sp, #20
 28736              	.LCFI150:
 28737              		.cfi_def_cfa_offset 24
 28738 0004 00AF     		add	r7, sp, #0
 28739              		.cfi_offset 7, -4
 28740              	.LCFI151:
 28741              		.cfi_def_cfa_register 7
 28742 0006 7860     		str	r0, [r7, #4]
2578:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   FlagStatus bitstatus = RESET;
 28743              		.loc 1 2578 0
 28744 0008 4FF00003 		mov	r3, #0
 28745 000c FB73     		strb	r3, [r7, #15]
2579:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 28746              		.loc 1 2579 0
 28747 000e 4FF00003 		mov	r3, #0
 28748 0012 BB60     		str	r3, [r7, #8]
2580:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2581:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2582:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_GET_FLAG(RTC_FLAG));
2583:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2584:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get all the flags */
2585:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->ISR & RTC_FLAGS_MASK);
 28749              		.loc 1 2585 0
 28750 0014 0D4B     		ldr	r3, .L251
 28751 0016 DA68     		ldr	r2, [r3, #12]
 28752 0018 43F67773 		movw	r3, #16247
 28753 001c 02EA0303 		and	r3, r2, r3
 28754 0020 BB60     		str	r3, [r7, #8]
2586:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2587:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Return the status of the flag */
2588:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((tmpreg & RTC_FLAG) != (uint32_t)RESET)
 28755              		.loc 1 2588 0
 28756 0022 BA68     		ldr	r2, [r7, #8]
 28757 0024 7B68     		ldr	r3, [r7, #4]
 28758 0026 02EA0303 		and	r3, r2, r3
 28759 002a 002B     		cmp	r3, #0
 28760 002c 03D0     		beq	.L249
2589:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2590:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bitstatus = SET;
 28761              		.loc 1 2590 0
 28762 002e 4FF00103 		mov	r3, #1
 28763 0032 FB73     		strb	r3, [r7, #15]
 28764 0034 02E0     		b	.L250
 28765              	.L249:
2591:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2592:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2593:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2594:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bitstatus = RESET;
 28766              		.loc 1 2594 0
 28767 0036 4FF00003 		mov	r3, #0
 28768 003a FB73     		strb	r3, [r7, #15]
 28769              	.L250:
2595:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2596:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return bitstatus;
 28770              		.loc 1 2596 0
 28771 003c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
2597:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 28772              		.loc 1 2597 0
 28773 003e 1846     		mov	r0, r3
 28774 0040 07F11407 		add	r7, r7, #20
 28775 0044 BD46     		mov	sp, r7
 28776 0046 80BC     		pop	{r7}
 28777 0048 7047     		bx	lr
 28778              	.L252:
 28779 004a 00BF     		.align	2
 28780              	.L251:
 28781 004c 00280040 		.word	1073752064
 28782              		.cfi_endproc
 28783              	.LFE161:
 28785              		.section	.text.RTC_ClearFlag,"ax",%progbits
 28786              		.align	2
 28787              		.global	RTC_ClearFlag
 28788              		.thumb
 28789              		.thumb_func
 28791              	RTC_ClearFlag:
 28792              	.LFB162:
2598:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2599:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2600:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Clears the RTC's pending flags.
2601:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_FLAG: specifies the RTC flag to clear.
2602:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
2603:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TAMP1F: Tamper 1 event flag
2604:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSOVF: Time Stamp Overflow flag 
2605:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSF: Time Stamp event flag
2606:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_WUTF: WakeUp Timer flag
2607:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRBF: Alarm B flag
2608:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRAF: Alarm A flag
2609:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_RSF: Registers Synchronized flag
2610:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2611:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2612:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_ClearFlag(uint32_t RTC_FLAG)
2613:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 28793              		.loc 1 2613 0
 28794              		.cfi_startproc
 28795              		@ args = 0, pretend = 0, frame = 8
 28796              		@ frame_needed = 1, uses_anonymous_args = 0
 28797              		@ link register save eliminated.
 28798 0000 80B4     		push	{r7}
 28799              	.LCFI152:
 28800              		.cfi_def_cfa_offset 4
 28801 0002 83B0     		sub	sp, sp, #12
 28802              	.LCFI153:
 28803              		.cfi_def_cfa_offset 16
 28804 0004 00AF     		add	r7, sp, #0
 28805              		.cfi_offset 7, -4
 28806              	.LCFI154:
 28807              		.cfi_def_cfa_register 7
 28808 0006 7860     		str	r0, [r7, #4]
2614:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2615:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CLEAR_FLAG(RTC_FLAG));
2616:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2617:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear the Flags in the RTC_ISR register */
2618:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->ISR = (uint32_t)((uint32_t)(~((RTC_FLAG | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR &
 28809              		.loc 1 2618 0
 28810 0008 0A4A     		ldr	r2, .L254
 28811 000a 7B68     		ldr	r3, [r7, #4]
 28812 000c 4FEA0343 		lsl	r3, r3, #16
 28813 0010 4FEA1343 		lsr	r3, r3, #16
 28814 0014 43F08003 		orr	r3, r3, #128
 28815 0018 6FEA0301 		mvn	r1, r3
 28816 001c 054B     		ldr	r3, .L254
 28817 001e DB68     		ldr	r3, [r3, #12]
 28818 0020 03F08003 		and	r3, r3, #128
 28819 0024 41EA0303 		orr	r3, r1, r3
 28820 0028 D360     		str	r3, [r2, #12]
2619:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 28821              		.loc 1 2619 0
 28822 002a 07F10C07 		add	r7, r7, #12
 28823 002e BD46     		mov	sp, r7
 28824 0030 80BC     		pop	{r7}
 28825 0032 7047     		bx	lr
 28826              	.L255:
 28827              		.align	2
 28828              	.L254:
 28829 0034 00280040 		.word	1073752064
 28830              		.cfi_endproc
 28831              	.LFE162:
 28833              		.section	.text.RTC_GetITStatus,"ax",%progbits
 28834              		.align	2
 28835              		.global	RTC_GetITStatus
 28836              		.thumb
 28837              		.thumb_func
 28839              	RTC_GetITStatus:
 28840              	.LFB163:
2620:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2621:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2622:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Checks whether the specified RTC interrupt has occurred or not.
2623:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_IT: specifies the RTC interrupt source to check.
2624:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2625:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TS: Time Stamp interrupt 
2626:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_WUT: WakeUp Timer interrupt 
2627:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRB: Alarm B interrupt 
2628:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRA: Alarm A interrupt 
2629:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt 
2630:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval The new state of RTC_IT (SET or RESET).
2631:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2632:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ITStatus RTC_GetITStatus(uint32_t RTC_IT)
2633:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 28841              		.loc 1 2633 0
 28842              		.cfi_startproc
 28843              		@ args = 0, pretend = 0, frame = 24
 28844              		@ frame_needed = 1, uses_anonymous_args = 0
 28845              		@ link register save eliminated.
 28846 0000 80B4     		push	{r7}
 28847              	.LCFI155:
 28848              		.cfi_def_cfa_offset 4
 28849 0002 87B0     		sub	sp, sp, #28
 28850              	.LCFI156:
 28851              		.cfi_def_cfa_offset 32
 28852 0004 00AF     		add	r7, sp, #0
 28853              		.cfi_offset 7, -4
 28854              	.LCFI157:
 28855              		.cfi_def_cfa_register 7
 28856 0006 7860     		str	r0, [r7, #4]
2634:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ITStatus bitstatus = RESET;
 28857              		.loc 1 2634 0
 28858 0008 4FF00003 		mov	r3, #0
 28859 000c FB75     		strb	r3, [r7, #23]
2635:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0, enablestatus = 0;
 28860              		.loc 1 2635 0
 28861 000e 4FF00003 		mov	r3, #0
 28862 0012 3B61     		str	r3, [r7, #16]
 28863 0014 4FF00003 		mov	r3, #0
 28864 0018 FB60     		str	r3, [r7, #12]
2636:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  
2637:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2638:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_GET_IT(RTC_IT));
2639:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2640:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the TAMPER Interrupt enable bit and pending bit */
2641:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->TAFCR & (RTC_TAFCR_TAMPIE));
 28865              		.loc 1 2641 0
 28866 001a 194B     		ldr	r3, .L259
 28867 001c 1B6C     		ldr	r3, [r3, #64]
 28868 001e 03F00403 		and	r3, r3, #4
 28869 0022 3B61     		str	r3, [r7, #16]
2642:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  
2643:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the Interrupt enable Status */
2644:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   enablestatus = (uint32_t)((RTC->CR & RTC_IT) | (tmpreg & (RTC_IT >> 15)));
 28870              		.loc 1 2644 0
 28871 0024 164B     		ldr	r3, .L259
 28872 0026 9A68     		ldr	r2, [r3, #8]
 28873 0028 7B68     		ldr	r3, [r7, #4]
 28874 002a 1A40     		ands	r2, r2, r3
 28875 002c 7B68     		ldr	r3, [r7, #4]
 28876 002e 4FEAD331 		lsr	r1, r3, #15
 28877 0032 3B69     		ldr	r3, [r7, #16]
 28878 0034 01EA0303 		and	r3, r1, r3
 28879 0038 42EA0303 		orr	r3, r2, r3
 28880 003c FB60     		str	r3, [r7, #12]
2645:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2646:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the Interrupt pending bit */
2647:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)((RTC->ISR & (uint32_t)(RTC_IT >> 4)));
 28881              		.loc 1 2647 0
 28882 003e 104B     		ldr	r3, .L259
 28883 0040 DA68     		ldr	r2, [r3, #12]
 28884 0042 7B68     		ldr	r3, [r7, #4]
 28885 0044 4FEA1313 		lsr	r3, r3, #4
 28886 0048 02EA0303 		and	r3, r2, r3
 28887 004c 3B61     		str	r3, [r7, #16]
2648:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2649:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the status of the Interrupt */
2650:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((enablestatus != (uint32_t)RESET) && ((tmpreg & 0x0000FFFF) != (uint32_t)RESET))
 28888              		.loc 1 2650 0
 28889 004e FB68     		ldr	r3, [r7, #12]
 28890 0050 002B     		cmp	r3, #0
 28891 0052 0AD0     		beq	.L257
 28892              		.loc 1 2650 0 is_stmt 0 discriminator 1
 28893 0054 3B69     		ldr	r3, [r7, #16]
 28894 0056 4FEA0343 		lsl	r3, r3, #16
 28895 005a 4FEA1343 		lsr	r3, r3, #16
 28896 005e 002B     		cmp	r3, #0
 28897 0060 03D0     		beq	.L257
2651:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2652:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bitstatus = SET;
 28898              		.loc 1 2652 0 is_stmt 1
 28899 0062 4FF00103 		mov	r3, #1
 28900 0066 FB75     		strb	r3, [r7, #23]
 28901 0068 02E0     		b	.L258
 28902              	.L257:
2653:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2654:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2655:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2656:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bitstatus = RESET;
 28903              		.loc 1 2656 0
 28904 006a 4FF00003 		mov	r3, #0
 28905 006e FB75     		strb	r3, [r7, #23]
 28906              	.L258:
2657:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2658:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return bitstatus;
 28907              		.loc 1 2658 0
 28908 0070 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
2659:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 28909              		.loc 1 2659 0
 28910 0072 1846     		mov	r0, r3
 28911 0074 07F11C07 		add	r7, r7, #28
 28912 0078 BD46     		mov	sp, r7
 28913 007a 80BC     		pop	{r7}
 28914 007c 7047     		bx	lr
 28915              	.L260:
 28916 007e 00BF     		.align	2
 28917              	.L259:
 28918 0080 00280040 		.word	1073752064
 28919              		.cfi_endproc
 28920              	.LFE163:
 28922              		.section	.text.RTC_ClearITPendingBit,"ax",%progbits
 28923              		.align	2
 28924              		.global	RTC_ClearITPendingBit
 28925              		.thumb
 28926              		.thumb_func
 28928              	RTC_ClearITPendingBit:
 28929              	.LFB164:
2660:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2661:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2662:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Clears the RTC's interrupt pending bits.
2663:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_IT: specifies the RTC interrupt pending bit to clear.
2664:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
2665:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TS: Time Stamp interrupt 
2666:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_WUT: WakeUp Timer interrupt 
2667:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRB: Alarm B interrupt 
2668:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRA: Alarm A interrupt 
2669:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt 
2670:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2671:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2672:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_ClearITPendingBit(uint32_t RTC_IT)
2673:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 28930              		.loc 1 2673 0
 28931              		.cfi_startproc
 28932              		@ args = 0, pretend = 0, frame = 16
 28933              		@ frame_needed = 1, uses_anonymous_args = 0
 28934              		@ link register save eliminated.
 28935 0000 80B4     		push	{r7}
 28936              	.LCFI158:
 28937              		.cfi_def_cfa_offset 4
 28938 0002 85B0     		sub	sp, sp, #20
 28939              	.LCFI159:
 28940              		.cfi_def_cfa_offset 24
 28941 0004 00AF     		add	r7, sp, #0
 28942              		.cfi_offset 7, -4
 28943              	.LCFI160:
 28944              		.cfi_def_cfa_register 7
 28945 0006 7860     		str	r0, [r7, #4]
2674:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 28946              		.loc 1 2674 0
 28947 0008 4FF00003 		mov	r3, #0
 28948 000c FB60     		str	r3, [r7, #12]
2675:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2676:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2677:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CLEAR_IT(RTC_IT));
2678:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2679:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_ISR Interrupt pending bits mask */
2680:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC_IT >> 4);
 28949              		.loc 1 2680 0
 28950 000e 7B68     		ldr	r3, [r7, #4]
 28951 0010 4FEA1313 		lsr	r3, r3, #4
 28952 0014 FB60     		str	r3, [r7, #12]
2681:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2682:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear the interrupt pending bits in the RTC_ISR register */
2683:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->ISR = (uint32_t)((uint32_t)(~((tmpreg | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR & R
 28953              		.loc 1 2683 0
 28954 0016 0B4A     		ldr	r2, .L262
 28955 0018 FB68     		ldr	r3, [r7, #12]
 28956 001a 4FEA0343 		lsl	r3, r3, #16
 28957 001e 4FEA1343 		lsr	r3, r3, #16
 28958 0022 43F08003 		orr	r3, r3, #128
 28959 0026 6FEA0301 		mvn	r1, r3
 28960 002a 064B     		ldr	r3, .L262
 28961 002c DB68     		ldr	r3, [r3, #12]
 28962 002e 03F08003 		and	r3, r3, #128
 28963 0032 41EA0303 		orr	r3, r1, r3
 28964 0036 D360     		str	r3, [r2, #12]
2684:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 28965              		.loc 1 2684 0
 28966 0038 07F11407 		add	r7, r7, #20
 28967 003c BD46     		mov	sp, r7
 28968 003e 80BC     		pop	{r7}
 28969 0040 7047     		bx	lr
 28970              	.L263:
 28971 0042 00BF     		.align	2
 28972              	.L262:
 28973 0044 00280040 		.word	1073752064
 28974              		.cfi_endproc
 28975              	.LFE164:
 28977              		.section	.text.RTC_ByteToBcd2,"ax",%progbits
 28978              		.align	2
 28979              		.thumb
 28980              		.thumb_func
 28982              	RTC_ByteToBcd2:
 28983              	.LFB165:
2685:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2686:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2687:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2688:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2689:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2690:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2691:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Converts a 2 digit decimal to BCD format.
2692:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  Value: Byte to be converted.
2693:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval Converted byte
2694:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2695:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** static uint8_t RTC_ByteToBcd2(uint8_t Value)
2696:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 28984              		.loc 1 2696 0
 28985              		.cfi_startproc
 28986              		@ args = 0, pretend = 0, frame = 16
 28987              		@ frame_needed = 1, uses_anonymous_args = 0
 28988              		@ link register save eliminated.
 28989 0000 80B4     		push	{r7}
 28990              	.LCFI161:
 28991              		.cfi_def_cfa_offset 4
 28992 0002 85B0     		sub	sp, sp, #20
 28993              	.LCFI162:
 28994              		.cfi_def_cfa_offset 24
 28995 0004 00AF     		add	r7, sp, #0
 28996              		.cfi_offset 7, -4
 28997              	.LCFI163:
 28998              		.cfi_def_cfa_register 7
 28999 0006 0346     		mov	r3, r0
 29000 0008 FB71     		strb	r3, [r7, #7]
2697:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint8_t bcdhigh = 0;
 29001              		.loc 1 2697 0
 29002 000a 4FF00003 		mov	r3, #0
 29003 000e FB73     		strb	r3, [r7, #15]
2698:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2699:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   while (Value >= 10)
 29004              		.loc 1 2699 0
 29005 0010 07E0     		b	.L265
 29006              	.L266:
2700:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2701:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bcdhigh++;
 29007              		.loc 1 2701 0
 29008 0012 FB7B     		ldrb	r3, [r7, #15]
 29009 0014 03F10103 		add	r3, r3, #1
 29010 0018 FB73     		strb	r3, [r7, #15]
2702:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     Value -= 10;
 29011              		.loc 1 2702 0
 29012 001a FB79     		ldrb	r3, [r7, #7]
 29013 001c A3F10A03 		sub	r3, r3, #10
 29014 0020 FB71     		strb	r3, [r7, #7]
 29015              	.L265:
2699:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   while (Value >= 10)
 29016              		.loc 1 2699 0 discriminator 1
 29017 0022 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 29018 0024 092B     		cmp	r3, #9
 29019 0026 F4D8     		bhi	.L266
2703:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2704:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2705:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return  ((uint8_t)(bcdhigh << 4) | Value);
 29020              		.loc 1 2705 0
 29021 0028 FB7B     		ldrb	r3, [r7, #15]
 29022 002a 4FEA0313 		lsl	r3, r3, #4
 29023 002e DAB2     		uxtb	r2, r3
 29024 0030 FB79     		ldrb	r3, [r7, #7]
 29025 0032 42EA0303 		orr	r3, r2, r3
 29026 0036 DBB2     		uxtb	r3, r3
2706:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 29027              		.loc 1 2706 0
 29028 0038 1846     		mov	r0, r3
 29029 003a 07F11407 		add	r7, r7, #20
 29030 003e BD46     		mov	sp, r7
 29031 0040 80BC     		pop	{r7}
 29032 0042 7047     		bx	lr
 29033              		.cfi_endproc
 29034              	.LFE165:
 29036              		.section	.text.RTC_Bcd2ToByte,"ax",%progbits
 29037              		.align	2
 29038              		.thumb
 29039              		.thumb_func
 29041              	RTC_Bcd2ToByte:
 29042              	.LFB166:
2707:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2708:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2709:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Convert from 2 digit BCD to Binary.
2710:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  Value: BCD value to be converted.
2711:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval Converted word
2712:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2713:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** static uint8_t RTC_Bcd2ToByte(uint8_t Value)
2714:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 29043              		.loc 1 2714 0
 29044              		.cfi_startproc
 29045              		@ args = 0, pretend = 0, frame = 16
 29046              		@ frame_needed = 1, uses_anonymous_args = 0
 29047              		@ link register save eliminated.
 29048 0000 80B4     		push	{r7}
 29049              	.LCFI164:
 29050              		.cfi_def_cfa_offset 4
 29051 0002 85B0     		sub	sp, sp, #20
 29052              	.LCFI165:
 29053              		.cfi_def_cfa_offset 24
 29054 0004 00AF     		add	r7, sp, #0
 29055              		.cfi_offset 7, -4
 29056              	.LCFI166:
 29057              		.cfi_def_cfa_register 7
 29058 0006 0346     		mov	r3, r0
 29059 0008 FB71     		strb	r3, [r7, #7]
2715:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint8_t tmp = 0;
 29060              		.loc 1 2715 0
 29061 000a 4FF00003 		mov	r3, #0
 29062 000e FB73     		strb	r3, [r7, #15]
2716:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 29063              		.loc 1 2716 0
 29064 0010 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 29065 0012 4FEA1313 		lsr	r3, r3, #4
 29066 0016 DBB2     		uxtb	r3, r3
 29067 0018 1A46     		mov	r2, r3
 29068 001a 4FEA8202 		lsl	r2, r2, #2
 29069 001e D318     		adds	r3, r2, r3
 29070 0020 4FEA4303 		lsl	r3, r3, #1
 29071 0024 FB73     		strb	r3, [r7, #15]
2717:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (tmp + (Value & (uint8_t)0x0F));
 29072              		.loc 1 2717 0
 29073 0026 FB79     		ldrb	r3, [r7, #7]
 29074 0028 03F00F03 		and	r3, r3, #15
 29075 002c DAB2     		uxtb	r2, r3
 29076 002e FB7B     		ldrb	r3, [r7, #15]
 29077 0030 D318     		adds	r3, r2, r3
 29078 0032 DBB2     		uxtb	r3, r3
2718:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 29079              		.loc 1 2718 0
 29080 0034 1846     		mov	r0, r3
 29081 0036 07F11407 		add	r7, r7, #20
 29082 003a BD46     		mov	sp, r7
 29083 003c 80BC     		pop	{r7}
 29084 003e 7047     		bx	lr
 29085              		.cfi_endproc
 29086              	.LFE166:
 29088              		.text
 29089              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_rtc.c
     /tmp/ccDoNgKn.s:24606  .text.RTC_DeInit:00000000 $t
     /tmp/ccDoNgKn.s:24611  .text.RTC_DeInit:00000000 RTC_DeInit
     /tmp/ccDoNgKn.s:24968  .text.RTC_EnterInitMode:00000000 RTC_EnterInitMode
     /tmp/ccDoNgKn.s:25100  .text.RTC_WaitForSynchro:00000000 RTC_WaitForSynchro
     /tmp/ccDoNgKn.s:24760  .text.RTC_DeInit:000000f8 $d
     /tmp/ccDoNgKn.s:24766  .text.RTC_Init:00000000 $t
     /tmp/ccDoNgKn.s:24771  .text.RTC_Init:00000000 RTC_Init
     /tmp/ccDoNgKn.s:25063  .text.RTC_ExitInitMode:00000000 RTC_ExitInitMode
     /tmp/ccDoNgKn.s:24858  .text.RTC_Init:00000088 $d
     /tmp/ccDoNgKn.s:24863  .text.RTC_StructInit:00000000 $t
     /tmp/ccDoNgKn.s:24868  .text.RTC_StructInit:00000000 RTC_StructInit
     /tmp/ccDoNgKn.s:24907  .text.RTC_WriteProtectionCmd:00000000 $t
     /tmp/ccDoNgKn.s:24912  .text.RTC_WriteProtectionCmd:00000000 RTC_WriteProtectionCmd
     /tmp/ccDoNgKn.s:24958  .text.RTC_WriteProtectionCmd:00000034 $d
     /tmp/ccDoNgKn.s:24963  .text.RTC_EnterInitMode:00000000 $t
     /tmp/ccDoNgKn.s:25053  .text.RTC_EnterInitMode:0000007c $d
     /tmp/ccDoNgKn.s:25058  .text.RTC_ExitInitMode:00000000 $t
     /tmp/ccDoNgKn.s:25090  .text.RTC_ExitInitMode:00000018 $d
     /tmp/ccDoNgKn.s:25095  .text.RTC_WaitForSynchro:00000000 $t
     /tmp/ccDoNgKn.s:25188  .text.RTC_WaitForSynchro:00000084 $d
     /tmp/ccDoNgKn.s:25193  .text.RTC_RefClockCmd:00000000 $t
     /tmp/ccDoNgKn.s:25198  .text.RTC_RefClockCmd:00000000 RTC_RefClockCmd
     /tmp/ccDoNgKn.s:25277  .text.RTC_RefClockCmd:00000070 $d
     /tmp/ccDoNgKn.s:25282  .text.RTC_BypassShadowCmd:00000000 $t
     /tmp/ccDoNgKn.s:25287  .text.RTC_BypassShadowCmd:00000000 RTC_BypassShadowCmd
     /tmp/ccDoNgKn.s:25345  .text.RTC_BypassShadowCmd:0000004c $d
     /tmp/ccDoNgKn.s:25350  .text.RTC_SetTime:00000000 $t
     /tmp/ccDoNgKn.s:25355  .text.RTC_SetTime:00000000 RTC_SetTime
     /tmp/ccDoNgKn.s:29041  .text.RTC_Bcd2ToByte:00000000 RTC_Bcd2ToByte
     /tmp/ccDoNgKn.s:28982  .text.RTC_ByteToBcd2:00000000 RTC_ByteToBcd2
     /tmp/ccDoNgKn.s:25531  .text.RTC_SetTime:00000124 $d
     /tmp/ccDoNgKn.s:25537  .text.RTC_TimeStructInit:00000000 $t
     /tmp/ccDoNgKn.s:25542  .text.RTC_TimeStructInit:00000000 RTC_TimeStructInit
     /tmp/ccDoNgKn.s:25585  .text.RTC_GetTime:00000000 $t
     /tmp/ccDoNgKn.s:25590  .text.RTC_GetTime:00000000 RTC_GetTime
     /tmp/ccDoNgKn.s:25685  .text.RTC_GetTime:000000a0 $d
     /tmp/ccDoNgKn.s:25691  .text.RTC_GetSubSecond:00000000 $t
     /tmp/ccDoNgKn.s:25696  .text.RTC_GetSubSecond:00000000 RTC_GetSubSecond
     /tmp/ccDoNgKn.s:25734  .text.RTC_GetSubSecond:00000024 $d
     /tmp/ccDoNgKn.s:25739  .text.RTC_SetDate:00000000 $t
     /tmp/ccDoNgKn.s:25744  .text.RTC_SetDate:00000000 RTC_SetDate
     /tmp/ccDoNgKn.s:25923  .text.RTC_SetDate:0000012c $d
     /tmp/ccDoNgKn.s:25928  .text.RTC_DateStructInit:00000000 $t
     /tmp/ccDoNgKn.s:25933  .text.RTC_DateStructInit:00000000 RTC_DateStructInit
     /tmp/ccDoNgKn.s:25976  .text.RTC_GetDate:00000000 $t
     /tmp/ccDoNgKn.s:25981  .text.RTC_GetDate:00000000 RTC_GetDate
     /tmp/ccDoNgKn.s:26076  .text.RTC_GetDate:000000a0 $d
     /tmp/ccDoNgKn.s:26081  .text.RTC_SetAlarm:00000000 $t
     /tmp/ccDoNgKn.s:26086  .text.RTC_SetAlarm:00000000 RTC_SetAlarm
     /tmp/ccDoNgKn.s:26297  .text.RTC_SetAlarm:00000154 $d
     /tmp/ccDoNgKn.s:26302  .text.RTC_AlarmStructInit:00000000 $t
     /tmp/ccDoNgKn.s:26307  .text.RTC_AlarmStructInit:00000000 RTC_AlarmStructInit
     /tmp/ccDoNgKn.s:26362  .text.RTC_GetAlarm:00000000 $t
     /tmp/ccDoNgKn.s:26367  .text.RTC_GetAlarm:00000000 RTC_GetAlarm
     /tmp/ccDoNgKn.s:26498  .text.RTC_GetAlarm:000000e0 $d
     /tmp/ccDoNgKn.s:26503  .text.RTC_AlarmCmd:00000000 $t
     /tmp/ccDoNgKn.s:26508  .text.RTC_AlarmCmd:00000000 RTC_AlarmCmd
     /tmp/ccDoNgKn.s:26621  .text.RTC_AlarmCmd:000000b8 $d
     /tmp/ccDoNgKn.s:26626  .text.RTC_AlarmSubSecondConfig:00000000 $t
     /tmp/ccDoNgKn.s:26631  .text.RTC_AlarmSubSecondConfig:00000000 RTC_AlarmSubSecondConfig
     /tmp/ccDoNgKn.s:26694  .text.RTC_AlarmSubSecondConfig:00000054 $d
     /tmp/ccDoNgKn.s:26699  .text.RTC_GetAlarmSubSecond:00000000 $t
     /tmp/ccDoNgKn.s:26704  .text.RTC_GetAlarmSubSecond:00000000 RTC_GetAlarmSubSecond
     /tmp/ccDoNgKn.s:26755  .text.RTC_GetAlarmSubSecond:00000044 $d
     /tmp/ccDoNgKn.s:26760  .text.RTC_WakeUpClockConfig:00000000 $t
     /tmp/ccDoNgKn.s:26765  .text.RTC_WakeUpClockConfig:00000000 RTC_WakeUpClockConfig
     /tmp/ccDoNgKn.s:26816  .text.RTC_WakeUpClockConfig:00000044 $d
     /tmp/ccDoNgKn.s:26821  .text.RTC_SetWakeUpCounter:00000000 $t
     /tmp/ccDoNgKn.s:26826  .text.RTC_SetWakeUpCounter:00000000 RTC_SetWakeUpCounter
     /tmp/ccDoNgKn.s:26868  .text.RTC_SetWakeUpCounter:00000030 $d
     /tmp/ccDoNgKn.s:26873  .text.RTC_GetWakeUpCounter:00000000 $t
     /tmp/ccDoNgKn.s:26878  .text.RTC_GetWakeUpCounter:00000000 RTC_GetWakeUpCounter
     /tmp/ccDoNgKn.s:26905  .text.RTC_GetWakeUpCounter:00000018 $d
     /tmp/ccDoNgKn.s:26910  .text.RTC_WakeUpCmd:00000000 $t
     /tmp/ccDoNgKn.s:26915  .text.RTC_WakeUpCmd:00000000 RTC_WakeUpCmd
     /tmp/ccDoNgKn.s:27020  .text.RTC_WakeUpCmd:000000a4 $d
     /tmp/ccDoNgKn.s:27025  .text.RTC_DayLightSavingConfig:00000000 $t
     /tmp/ccDoNgKn.s:27030  .text.RTC_DayLightSavingConfig:00000000 RTC_DayLightSavingConfig
     /tmp/ccDoNgKn.s:27084  .text.RTC_DayLightSavingConfig:0000004c $d
     /tmp/ccDoNgKn.s:27089  .text.RTC_GetStoreOperation:00000000 $t
     /tmp/ccDoNgKn.s:27094  .text.RTC_GetStoreOperation:00000000 RTC_GetStoreOperation
     /tmp/ccDoNgKn.s:27120  .text.RTC_GetStoreOperation:00000014 $d
     /tmp/ccDoNgKn.s:27125  .text.RTC_OutputConfig:00000000 $t
     /tmp/ccDoNgKn.s:27130  .text.RTC_OutputConfig:00000000 RTC_OutputConfig
     /tmp/ccDoNgKn.s:27184  .text.RTC_OutputConfig:0000004c $d
     /tmp/ccDoNgKn.s:27189  .text.RTC_CoarseCalibConfig:00000000 $t
     /tmp/ccDoNgKn.s:27194  .text.RTC_CoarseCalibConfig:00000000 RTC_CoarseCalibConfig
     /tmp/ccDoNgKn.s:27260  .text.RTC_CoarseCalibConfig:0000005c $d
     /tmp/ccDoNgKn.s:27265  .text.RTC_CoarseCalibCmd:00000000 $t
     /tmp/ccDoNgKn.s:27270  .text.RTC_CoarseCalibCmd:00000000 RTC_CoarseCalibCmd
     /tmp/ccDoNgKn.s:27349  .text.RTC_CoarseCalibCmd:00000070 $d
     /tmp/ccDoNgKn.s:27354  .text.RTC_CalibOutputCmd:00000000 $t
     /tmp/ccDoNgKn.s:27359  .text.RTC_CalibOutputCmd:00000000 RTC_CalibOutputCmd
     /tmp/ccDoNgKn.s:27417  .text.RTC_CalibOutputCmd:0000004c $d
     /tmp/ccDoNgKn.s:27422  .text.RTC_CalibOutputConfig:00000000 $t
     /tmp/ccDoNgKn.s:27427  .text.RTC_CalibOutputConfig:00000000 RTC_CalibOutputConfig
     /tmp/ccDoNgKn.s:27478  .text.RTC_CalibOutputConfig:00000044 $d
     /tmp/ccDoNgKn.s:27483  .text.RTC_SmoothCalibConfig:00000000 $t
     /tmp/ccDoNgKn.s:27488  .text.RTC_SmoothCalibConfig:00000000 RTC_SmoothCalibConfig
     /tmp/ccDoNgKn.s:27585  .text.RTC_SmoothCalibConfig:00000094 $d
     /tmp/ccDoNgKn.s:27590  .text.RTC_TimeStampCmd:00000000 $t
     /tmp/ccDoNgKn.s:27595  .text.RTC_TimeStampCmd:00000000 RTC_TimeStampCmd
     /tmp/ccDoNgKn.s:27666  .text.RTC_TimeStampCmd:00000068 $d
     /tmp/ccDoNgKn.s:27671  .text.RTC_GetTimeStamp:00000000 $t
     /tmp/ccDoNgKn.s:27676  .text.RTC_GetTimeStamp:00000000 RTC_GetTimeStamp
     /tmp/ccDoNgKn.s:27832  .text.RTC_GetTimeStamp:00000120 $d
     /tmp/ccDoNgKn.s:27838  .text.RTC_GetTimeStampSubSecond:00000000 $t
     /tmp/ccDoNgKn.s:27843  .text.RTC_GetTimeStampSubSecond:00000000 RTC_GetTimeStampSubSecond
     /tmp/ccDoNgKn.s:27868  .text.RTC_GetTimeStampSubSecond:00000010 $d
     /tmp/ccDoNgKn.s:27873  .text.RTC_TamperTriggerConfig:00000000 $t
     /tmp/ccDoNgKn.s:27878  .text.RTC_TamperTriggerConfig:00000000 RTC_TamperTriggerConfig
     /tmp/ccDoNgKn.s:27929  .text.RTC_TamperTriggerConfig:00000044 $d
     /tmp/ccDoNgKn.s:27934  .text.RTC_TamperCmd:00000000 $t
     /tmp/ccDoNgKn.s:27939  .text.RTC_TamperCmd:00000000 RTC_TamperCmd
     /tmp/ccDoNgKn.s:27989  .text.RTC_TamperCmd:00000040 $d
     /tmp/ccDoNgKn.s:27994  .text.RTC_TamperFilterConfig:00000000 $t
     /tmp/ccDoNgKn.s:27999  .text.RTC_TamperFilterConfig:00000000 RTC_TamperFilterConfig
     /tmp/ccDoNgKn.s:28038  .text.RTC_TamperFilterConfig:0000002c $d
     /tmp/ccDoNgKn.s:28043  .text.RTC_TamperSamplingFreqConfig:00000000 $t
     /tmp/ccDoNgKn.s:28048  .text.RTC_TamperSamplingFreqConfig:00000000 RTC_TamperSamplingFreqConfig
     /tmp/ccDoNgKn.s:28087  .text.RTC_TamperSamplingFreqConfig:0000002c $d
     /tmp/ccDoNgKn.s:28092  .text.RTC_TamperPinsPrechargeDuration:00000000 $t
     /tmp/ccDoNgKn.s:28097  .text.RTC_TamperPinsPrechargeDuration:00000000 RTC_TamperPinsPrechargeDuration
     /tmp/ccDoNgKn.s:28136  .text.RTC_TamperPinsPrechargeDuration:0000002c $d
     /tmp/ccDoNgKn.s:28141  .text.RTC_TimeStampOnTamperDetectionCmd:00000000 $t
     /tmp/ccDoNgKn.s:28146  .text.RTC_TimeStampOnTamperDetectionCmd:00000000 RTC_TimeStampOnTamperDetectionCmd
     /tmp/ccDoNgKn.s:28192  .text.RTC_TimeStampOnTamperDetectionCmd:00000034 $d
     /tmp/ccDoNgKn.s:28197  .text.RTC_TamperPullUpCmd:00000000 $t
     /tmp/ccDoNgKn.s:28202  .text.RTC_TamperPullUpCmd:00000000 RTC_TamperPullUpCmd
     /tmp/ccDoNgKn.s:28248  .text.RTC_TamperPullUpCmd:00000034 $d
     /tmp/ccDoNgKn.s:28253  .text.RTC_WriteBackupRegister:00000000 $t
     /tmp/ccDoNgKn.s:28258  .text.RTC_WriteBackupRegister:00000000 RTC_WriteBackupRegister
     /tmp/ccDoNgKn.s:28301  .text.RTC_WriteBackupRegister:00000030 $d
     /tmp/ccDoNgKn.s:28306  .text.RTC_ReadBackupRegister:00000000 $t
     /tmp/ccDoNgKn.s:28311  .text.RTC_ReadBackupRegister:00000000 RTC_ReadBackupRegister
     /tmp/ccDoNgKn.s:28353  .text.RTC_ReadBackupRegister:00000030 $d
     /tmp/ccDoNgKn.s:28358  .text.RTC_TamperPinSelection:00000000 $t
     /tmp/ccDoNgKn.s:28363  .text.RTC_TamperPinSelection:00000000 RTC_TamperPinSelection
     /tmp/ccDoNgKn.s:28402  .text.RTC_TamperPinSelection:0000002c $d
     /tmp/ccDoNgKn.s:28407  .text.RTC_TimeStampPinSelection:00000000 $t
     /tmp/ccDoNgKn.s:28412  .text.RTC_TimeStampPinSelection:00000000 RTC_TimeStampPinSelection
     /tmp/ccDoNgKn.s:28451  .text.RTC_TimeStampPinSelection:0000002c $d
     /tmp/ccDoNgKn.s:28456  .text.RTC_OutputTypeConfig:00000000 $t
     /tmp/ccDoNgKn.s:28461  .text.RTC_OutputTypeConfig:00000000 RTC_OutputTypeConfig
     /tmp/ccDoNgKn.s:28500  .text.RTC_OutputTypeConfig:0000002c $d
     /tmp/ccDoNgKn.s:28505  .text.RTC_SynchroShiftConfig:00000000 $t
     /tmp/ccDoNgKn.s:28510  .text.RTC_SynchroShiftConfig:00000000 RTC_SynchroShiftConfig
     /tmp/ccDoNgKn.s:28624  .text.RTC_SynchroShiftConfig:000000b0 $d
     /tmp/ccDoNgKn.s:28629  .text.RTC_ITConfig:00000000 $t
     /tmp/ccDoNgKn.s:28634  .text.RTC_ITConfig:00000000 RTC_ITConfig
     /tmp/ccDoNgKn.s:28715  .text.RTC_ITConfig:00000088 $d
     /tmp/ccDoNgKn.s:28720  .text.RTC_GetFlagStatus:00000000 $t
     /tmp/ccDoNgKn.s:28725  .text.RTC_GetFlagStatus:00000000 RTC_GetFlagStatus
     /tmp/ccDoNgKn.s:28781  .text.RTC_GetFlagStatus:0000004c $d
     /tmp/ccDoNgKn.s:28786  .text.RTC_ClearFlag:00000000 $t
     /tmp/ccDoNgKn.s:28791  .text.RTC_ClearFlag:00000000 RTC_ClearFlag
     /tmp/ccDoNgKn.s:28829  .text.RTC_ClearFlag:00000034 $d
     /tmp/ccDoNgKn.s:28834  .text.RTC_GetITStatus:00000000 $t
     /tmp/ccDoNgKn.s:28839  .text.RTC_GetITStatus:00000000 RTC_GetITStatus
     /tmp/ccDoNgKn.s:28918  .text.RTC_GetITStatus:00000080 $d
     /tmp/ccDoNgKn.s:28923  .text.RTC_ClearITPendingBit:00000000 $t
     /tmp/ccDoNgKn.s:28928  .text.RTC_ClearITPendingBit:00000000 RTC_ClearITPendingBit
     /tmp/ccDoNgKn.s:28973  .text.RTC_ClearITPendingBit:00000044 $d
     /tmp/ccDoNgKn.s:28978  .text.RTC_ByteToBcd2:00000000 $t
     /tmp/ccDoNgKn.s:29037  .text.RTC_Bcd2ToByte:00000000 $t
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
