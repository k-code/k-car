   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 18, 4
  12              		.thumb
  13              		.file	"stm32f4xx_rng.c"
  23              	.Ltext0:
  24              		.file 1 "../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c"
 24575              		.align	2
 24576              		.global	RNG_DeInit
 24577              		.thumb
 24578              		.thumb_func
 24580              	RNG_DeInit:
 24581              	.LFB110:
   1:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /**
   2:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   ******************************************************************************
   3:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @file    stm32f4xx_rng.c
   4:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @author  MCD Application Team
   5:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @version V1.0.0
   6:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @date    30-September-2011
   7:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     * @brief This file provides firmware functions to manage the following 
   8:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          functionalities of the Random Number Generator (RNG) peripheral:           
   9:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *           - Initialization and Configuration 
  10:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *           - Get 32 bit Random number      
  11:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *           - Interrupts and flags management       
  12:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         
  13:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *  @verbatim
  14:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *                               
  15:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          ===================================================================      
  16:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *                                   How to use this driver
  17:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          ===================================================================          
  18:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          1. Enable The RNG controller clock using 
  19:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *            RCC_AHB2PeriphClockCmd(RCC_AHB2Periph_RNG, ENABLE) function.
  20:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *              
  21:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          2. Activate the RNG peripheral using RNG_Cmd() function.
  22:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          
  23:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          3. Wait until the 32 bit Random number Generator contains a valid 
  24:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *            random data (using polling/interrupt mode). For more details, 
  25:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *            refer to "Interrupts and flags management functions" module 
  26:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *            description.
  27:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *           
  28:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          4. Get the 32 bit Random number using RNG_GetRandomNumber() function
  29:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          
  30:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          5. To get another 32 bit Random number, go to step 3.       
  31:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *
  32:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         
  33:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *              
  34:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *  @endverbatim
  35:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         
  36:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   ******************************************************************************
  37:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @attention
  38:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *
  39:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  40:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  41:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  42:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  43:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  44:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  45:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *
  46:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  47:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   ******************************************************************************  
  48:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
  49:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
  50:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /* Includes ------------------------------------------------------------------*/
  51:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** #include "stm32f4xx_rng.h"
  52:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** #include "stm32f4xx_rcc.h"
  53:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
  54:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  55:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @{
  56:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
  57:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
  58:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /** @defgroup RNG 
  59:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @brief RNG driver modules
  60:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @{
  61:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */ 
  62:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
  63:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /* Private typedef -----------------------------------------------------------*/
  64:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /* Private define ------------------------------------------------------------*/
  65:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /* Private macro -------------------------------------------------------------*/
  66:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /* Private variables ---------------------------------------------------------*/
  67:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /* Private function prototypes -----------------------------------------------*/
  68:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /* Private functions ---------------------------------------------------------*/
  69:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
  70:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /** @defgroup RNG_Private_Functions
  71:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @{
  72:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */ 
  73:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
  74:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /** @defgroup RNG_Group1 Initialization and Configuration functions
  75:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  *  @brief    Initialization and Configuration functions 
  76:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  *
  77:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** @verbatim    
  78:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  ===============================================================================
  79:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****                       Initialization and Configuration functions
  80:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  ===============================================================================  
  81:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   This section provides functions allowing to 
  82:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****    - Initialize the RNG peripheral
  83:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****    - Enable or disable the RNG peripheral
  84:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****    
  85:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** @endverbatim
  86:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @{
  87:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
  88:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
  89:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /**
  90:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @brief  Deinitializes the RNG peripheral registers to their default reset values.
  91:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @param  None
  92:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @retval None
  93:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
  94:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** void RNG_DeInit(void)
  95:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** {
 24582              		.loc 1 95 0
 24583              		.cfi_startproc
 24584              		@ args = 0, pretend = 0, frame = 0
 24585              		@ frame_needed = 1, uses_anonymous_args = 0
 24586 0000 80B5     		push	{r7, lr}
 24587              	.LCFI0:
 24588              		.cfi_def_cfa_offset 8
 24589 0002 00AF     		add	r7, sp, #0
 24590              		.cfi_offset 14, -4
 24591              		.cfi_offset 7, -8
 24592              	.LCFI1:
 24593              		.cfi_def_cfa_register 7
  96:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Enable RNG reset state */
  97:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, ENABLE);
 24594              		.loc 1 97 0
 24595 0004 4FF04000 		mov	r0, #64
 24596 0008 4FF00101 		mov	r1, #1
 24597 000c FFF7FEFF 		bl	RCC_AHB2PeriphResetCmd
  98:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
  99:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Release RNG from reset state */
 100:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, DISABLE);
 24598              		.loc 1 100 0
 24599 0010 4FF04000 		mov	r0, #64
 24600 0014 4FF00001 		mov	r1, #0
 24601 0018 FFF7FEFF 		bl	RCC_AHB2PeriphResetCmd
 101:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** }
 24602              		.loc 1 101 0
 24603 001c 80BD     		pop	{r7, pc}
 24604              		.cfi_endproc
 24605              	.LFE110:
 24607 001e 00BF     		.section	.text.RNG_Cmd,"ax",%progbits
 24608              		.align	2
 24609              		.global	RNG_Cmd
 24610              		.thumb
 24611              		.thumb_func
 24613              	RNG_Cmd:
 24614              	.LFB111:
 102:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 103:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /**
 104:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @brief  Enables or disables the RNG peripheral.
 105:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @param  NewState: new state of the RNG peripheral.
 106:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          This parameter can be: ENABLE or DISABLE.
 107:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @retval None
 108:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
 109:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** void RNG_Cmd(FunctionalState NewState)
 110:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** {
 24615              		.loc 1 110 0
 24616              		.cfi_startproc
 24617              		@ args = 0, pretend = 0, frame = 8
 24618              		@ frame_needed = 1, uses_anonymous_args = 0
 24619              		@ link register save eliminated.
 24620 0000 80B4     		push	{r7}
 24621              	.LCFI2:
 24622              		.cfi_def_cfa_offset 4
 24623 0002 83B0     		sub	sp, sp, #12
 24624              	.LCFI3:
 24625              		.cfi_def_cfa_offset 16
 24626 0004 00AF     		add	r7, sp, #0
 24627              		.cfi_offset 7, -4
 24628              	.LCFI4:
 24629              		.cfi_def_cfa_register 7
 24630 0006 0346     		mov	r3, r0
 24631 0008 FB71     		strb	r3, [r7, #7]
 111:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Check the parameters */
 112:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 113:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 114:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   if (NewState != DISABLE)
 24632              		.loc 1 114 0
 24633 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 24634 000c 002B     		cmp	r3, #0
 24635 000e 06D0     		beq	.L3
 115:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   {
 116:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     /* Enable the RNG */
 117:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     RNG->CR |= RNG_CR_RNGEN;
 24636              		.loc 1 117 0
 24637 0010 084B     		ldr	r3, .L5
 24638 0012 084A     		ldr	r2, .L5
 24639 0014 1268     		ldr	r2, [r2, #0]
 24640 0016 42F00402 		orr	r2, r2, #4
 24641 001a 1A60     		str	r2, [r3, #0]
 24642 001c 05E0     		b	.L2
 24643              	.L3:
 118:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   }
 119:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   else
 120:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   {
 121:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     /* Disable the RNG */
 122:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     RNG->CR &= ~RNG_CR_RNGEN;
 24644              		.loc 1 122 0
 24645 001e 054B     		ldr	r3, .L5
 24646 0020 044A     		ldr	r2, .L5
 24647 0022 1268     		ldr	r2, [r2, #0]
 24648 0024 22F00402 		bic	r2, r2, #4
 24649 0028 1A60     		str	r2, [r3, #0]
 24650              	.L2:
 123:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   }
 124:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** }
 24651              		.loc 1 124 0
 24652 002a 07F10C07 		add	r7, r7, #12
 24653 002e BD46     		mov	sp, r7
 24654 0030 80BC     		pop	{r7}
 24655 0032 7047     		bx	lr
 24656              	.L6:
 24657              		.align	2
 24658              	.L5:
 24659 0034 00080650 		.word	1342572544
 24660              		.cfi_endproc
 24661              	.LFE111:
 24663              		.section	.text.RNG_GetRandomNumber,"ax",%progbits
 24664              		.align	2
 24665              		.global	RNG_GetRandomNumber
 24666              		.thumb
 24667              		.thumb_func
 24669              	RNG_GetRandomNumber:
 24670              	.LFB112:
 125:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /**
 126:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @}
 127:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
 128:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 129:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /** @defgroup RNG_Group2 Get 32 bit Random number function
 130:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  *  @brief    Get 32 bit Random number function 
 131:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  *
 132:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 133:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** @verbatim    
 134:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  ===============================================================================
 135:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****                       Get 32 bit Random number function
 136:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  ===============================================================================  
 137:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   This section provides a function allowing to get the 32 bit Random number  
 138:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   
 139:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   @note  Before to call this function you have to wait till DRDY flag is set,
 140:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****          using RNG_GetFlagStatus(RNG_FLAG_DRDY) function. 
 141:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****    
 142:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** @endverbatim
 143:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @{
 144:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
 145:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 146:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 147:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /**
 148:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @brief  Returns a 32-bit random number.
 149:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *   
 150:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @note   Before to call this function you have to wait till DRDY (data ready)
 151:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         flag is set, using RNG_GetFlagStatus(RNG_FLAG_DRDY) function.
 152:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @note   Each time the the Random number data is read (using RNG_GetRandomNumber()
 153:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         function), the RNG_FLAG_DRDY flag is automatically cleared.
 154:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @note   In the case of a seed error, the generation of random numbers is 
 155:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         interrupted for as long as the SECS bit is '1'. If a number is 
 156:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         available in the RNG_DR register, it must not be used because it may 
 157:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         not have enough entropy. In this case, it is recommended to clear the 
 158:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         SEIS bit(using RNG_ClearFlag(RNG_FLAG_SECS) function), then disable 
 159:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         and enable the RNG peripheral (using RNG_Cmd() function) to 
 160:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         reinitialize and restart the RNG.
 161:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @note   In the case of a clock error, the RNG is no more able to generate 
 162:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         random numbers because the PLL48CLK clock is not correct. User have 
 163:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         to check that the clock controller is correctly configured to provide
 164:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         the RNG clock and clear the CEIS bit (using RNG_ClearFlag(RNG_FLAG_CECS) 
 165:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         function) . The clock error has no impact on the previously generated 
 166:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         random numbers, and the RNG_DR register contents can be used.
 167:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         
 168:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @param  None
 169:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @retval 32-bit random number.
 170:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
 171:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** uint32_t RNG_GetRandomNumber(void)
 172:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** {
 24671              		.loc 1 172 0
 24672              		.cfi_startproc
 24673              		@ args = 0, pretend = 0, frame = 0
 24674              		@ frame_needed = 1, uses_anonymous_args = 0
 24675              		@ link register save eliminated.
 24676 0000 80B4     		push	{r7}
 24677              	.LCFI5:
 24678              		.cfi_def_cfa_offset 4
 24679 0002 00AF     		add	r7, sp, #0
 24680              		.cfi_offset 7, -4
 24681              	.LCFI6:
 24682              		.cfi_def_cfa_register 7
 173:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Return the 32 bit random number from the DR register */
 174:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   return RNG->DR;
 24683              		.loc 1 174 0
 24684 0004 024B     		ldr	r3, .L8
 24685 0006 9B68     		ldr	r3, [r3, #8]
 175:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** }
 24686              		.loc 1 175 0
 24687 0008 1846     		mov	r0, r3
 24688 000a BD46     		mov	sp, r7
 24689 000c 80BC     		pop	{r7}
 24690 000e 7047     		bx	lr
 24691              	.L9:
 24692              		.align	2
 24693              	.L8:
 24694 0010 00080650 		.word	1342572544
 24695              		.cfi_endproc
 24696              	.LFE112:
 24698              		.section	.text.RNG_ITConfig,"ax",%progbits
 24699              		.align	2
 24700              		.global	RNG_ITConfig
 24701              		.thumb
 24702              		.thumb_func
 24704              	RNG_ITConfig:
 24705              	.LFB113:
 176:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 177:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 178:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /**
 179:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @}
 180:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
 181:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 182:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /** @defgroup RNG_Group3 Interrupts and flags management functions
 183:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  *  @brief   Interrupts and flags management functions
 184:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  *
 185:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** @verbatim   
 186:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  ===============================================================================
 187:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****                    Interrupts and flags management functions
 188:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  ===============================================================================  
 189:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 190:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   This section provides functions allowing to configure the RNG Interrupts and 
 191:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   to get the status and clear flags and Interrupts pending bits.
 192:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   
 193:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   The RNG provides 3 Interrupts sources and 3 Flags:
 194:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   
 195:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   Flags :
 196:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   ---------- 
 197:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****      1. RNG_FLAG_DRDY :  In the case of the RNG_DR register contains valid 
 198:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****                          random data. it is cleared by reading the valid data 
 199:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****                          (using RNG_GetRandomNumber() function).
 200:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 201:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****      2. RNG_FLAG_CECS : In the case of a seed error detection. 
 202:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       
 203:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****      3. RNG_FLAG_SECS : In the case of a clock error detection.
 204:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****               
 205:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 206:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   Interrupts :
 207:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   ------------
 208:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****    if enabled, an RNG interrupt is pending :
 209:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     
 210:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****    1.  In the case of the RNG_DR register contains valid random data. 
 211:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****        This interrupt source is cleared once the RNG_DR register has been read 
 212:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****        (using RNG_GetRandomNumber() function) until a new valid value is 
 213:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****        computed. 
 214:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****    
 215:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****    or 
 216:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****    2. In the case of a seed error : One of the following faulty sequences has 
 217:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       been detected:
 218:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       - More than 64 consecutive bits at the same value (0 or 1)
 219:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       - More than 32 consecutive alternance of 0 and 1 (0101010101...01)
 220:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       This interrupt source is cleared using RNG_ClearITPendingBit(RNG_IT_SEI)
 221:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       function.
 222:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****    
 223:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****    or
 224:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****    3. In the case of a clock error : the PLL48CLK (RNG peripheral clock source) 
 225:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       was not correctly detected (fPLL48CLK< fHCLK/16).
 226:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       This interrupt source is cleared using RNG_ClearITPendingBit(RNG_IT_CEI)
 227:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       function.
 228:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       @note In this case, User have to check that the clock controller is 
 229:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****             correctly configured to provide the RNG clock. 
 230:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 231:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   Managing the RNG controller events :
 232:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   ------------------------------------ 
 233:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   The user should identify which mode will be used in his application to manage 
 234:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   the RNG controller events: Polling mode or Interrupt mode.
 235:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   
 236:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   1.  In the Polling Mode it is advised to use the following functions:
 237:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       - RNG_GetFlagStatus() : to check if flags events occur. 
 238:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       - RNG_ClearFlag()     : to clear the flags events.
 239:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   
 240:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   @note RNG_FLAG_DRDY can not be cleared by RNG_ClearFlag(). it is cleared only 
 241:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****         by reading the Random number data.      
 242:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   
 243:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   2.  In the Interrupt Mode it is advised to use the following functions:
 244:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       - RNG_ITConfig()       : to enable or disable the interrupt source.
 245:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       - RNG_GetITStatus()    : to check if Interrupt occurs.
 246:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       - RNG_ClearITPendingBit() : to clear the Interrupt pending Bit 
 247:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****                                 (corresponding Flag). 
 248:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   
 249:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 250:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** @endverbatim
 251:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @{
 252:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */ 
 253:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 254:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /**
 255:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @brief  Enables or disables the RNG interrupt.
 256:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @note   The RNG provides 3 interrupt sources,
 257:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *           - Computed data is ready event (DRDY), and           
 258:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *           - Seed error Interrupt (SEI) and 
 259:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *           - Clock error Interrupt (CEI), 
 260:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         all these interrupts sources are enabled by setting the IE bit in 
 261:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         CR register. However, each interrupt have its specific status bit
 262:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         (see RNG_GetITStatus() function) and clear bit except the DRDY event
 263:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         (see RNG_ClearITPendingBit() function).
 264:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @param  NewState: new state of the RNG interrupt.
 265:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          This parameter can be: ENABLE or DISABLE.
 266:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @retval None
 267:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
 268:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** void RNG_ITConfig(FunctionalState NewState)
 269:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** {
 24706              		.loc 1 269 0
 24707              		.cfi_startproc
 24708              		@ args = 0, pretend = 0, frame = 8
 24709              		@ frame_needed = 1, uses_anonymous_args = 0
 24710              		@ link register save eliminated.
 24711 0000 80B4     		push	{r7}
 24712              	.LCFI7:
 24713              		.cfi_def_cfa_offset 4
 24714 0002 83B0     		sub	sp, sp, #12
 24715              	.LCFI8:
 24716              		.cfi_def_cfa_offset 16
 24717 0004 00AF     		add	r7, sp, #0
 24718              		.cfi_offset 7, -4
 24719              	.LCFI9:
 24720              		.cfi_def_cfa_register 7
 24721 0006 0346     		mov	r3, r0
 24722 0008 FB71     		strb	r3, [r7, #7]
 270:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Check the parameters */
 271:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 272:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 273:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   if (NewState != DISABLE)
 24723              		.loc 1 273 0
 24724 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 24725 000c 002B     		cmp	r3, #0
 24726 000e 06D0     		beq	.L11
 274:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   {
 275:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     /* Enable the RNG interrupt */
 276:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     RNG->CR |= RNG_CR_IE;
 24727              		.loc 1 276 0
 24728 0010 084B     		ldr	r3, .L13
 24729 0012 084A     		ldr	r2, .L13
 24730 0014 1268     		ldr	r2, [r2, #0]
 24731 0016 42F00802 		orr	r2, r2, #8
 24732 001a 1A60     		str	r2, [r3, #0]
 24733 001c 05E0     		b	.L10
 24734              	.L11:
 277:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   }
 278:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   else
 279:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   {
 280:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     /* Disable the RNG interrupt */
 281:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     RNG->CR &= ~RNG_CR_IE;
 24735              		.loc 1 281 0
 24736 001e 054B     		ldr	r3, .L13
 24737 0020 044A     		ldr	r2, .L13
 24738 0022 1268     		ldr	r2, [r2, #0]
 24739 0024 22F00802 		bic	r2, r2, #8
 24740 0028 1A60     		str	r2, [r3, #0]
 24741              	.L10:
 282:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   }
 283:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** }
 24742              		.loc 1 283 0
 24743 002a 07F10C07 		add	r7, r7, #12
 24744 002e BD46     		mov	sp, r7
 24745 0030 80BC     		pop	{r7}
 24746 0032 7047     		bx	lr
 24747              	.L14:
 24748              		.align	2
 24749              	.L13:
 24750 0034 00080650 		.word	1342572544
 24751              		.cfi_endproc
 24752              	.LFE113:
 24754              		.section	.text.RNG_GetFlagStatus,"ax",%progbits
 24755              		.align	2
 24756              		.global	RNG_GetFlagStatus
 24757              		.thumb
 24758              		.thumb_func
 24760              	RNG_GetFlagStatus:
 24761              	.LFB114:
 284:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 285:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /**
 286:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @brief  Checks whether the specified RNG flag is set or not.
 287:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @param  RNG_FLAG: specifies the RNG flag to check.
 288:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          This parameter can be one of the following values:
 289:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *            @arg RNG_FLAG_DRDY: Data Ready flag.
 290:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *            @arg RNG_FLAG_CECS: Clock Error Current flag.
 291:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *            @arg RNG_FLAG_SECS: Seed Error Current flag.
 292:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @retval The new state of RNG_FLAG (SET or RESET).
 293:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
 294:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** FlagStatus RNG_GetFlagStatus(uint8_t RNG_FLAG)
 295:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** {
 24762              		.loc 1 295 0
 24763              		.cfi_startproc
 24764              		@ args = 0, pretend = 0, frame = 16
 24765              		@ frame_needed = 1, uses_anonymous_args = 0
 24766              		@ link register save eliminated.
 24767 0000 80B4     		push	{r7}
 24768              	.LCFI10:
 24769              		.cfi_def_cfa_offset 4
 24770 0002 85B0     		sub	sp, sp, #20
 24771              	.LCFI11:
 24772              		.cfi_def_cfa_offset 24
 24773 0004 00AF     		add	r7, sp, #0
 24774              		.cfi_offset 7, -4
 24775              	.LCFI12:
 24776              		.cfi_def_cfa_register 7
 24777 0006 0346     		mov	r3, r0
 24778 0008 FB71     		strb	r3, [r7, #7]
 296:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   FlagStatus bitstatus = RESET;
 24779              		.loc 1 296 0
 24780 000a 4FF00003 		mov	r3, #0
 24781 000e FB73     		strb	r3, [r7, #15]
 297:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Check the parameters */
 298:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   assert_param(IS_RNG_GET_FLAG(RNG_FLAG));
 299:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 300:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Check the status of the specified RNG flag */
 301:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   if ((RNG->SR & RNG_FLAG) != (uint8_t)RESET)
 24782              		.loc 1 301 0
 24783 0010 0A4B     		ldr	r3, .L18
 24784 0012 5A68     		ldr	r2, [r3, #4]
 24785 0014 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 24786 0016 02EA0303 		and	r3, r2, r3
 24787 001a 002B     		cmp	r3, #0
 24788 001c 03D0     		beq	.L16
 302:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   {
 303:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     /* RNG_FLAG is set */
 304:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     bitstatus = SET;
 24789              		.loc 1 304 0
 24790 001e 4FF00103 		mov	r3, #1
 24791 0022 FB73     		strb	r3, [r7, #15]
 24792 0024 02E0     		b	.L17
 24793              	.L16:
 305:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   }
 306:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   else
 307:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   {
 308:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     /* RNG_FLAG is reset */
 309:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     bitstatus = RESET;
 24794              		.loc 1 309 0
 24795 0026 4FF00003 		mov	r3, #0
 24796 002a FB73     		strb	r3, [r7, #15]
 24797              	.L17:
 310:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   }
 311:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Return the RNG_FLAG status */
 312:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   return  bitstatus;
 24798              		.loc 1 312 0
 24799 002c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 313:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** }
 24800              		.loc 1 313 0
 24801 002e 1846     		mov	r0, r3
 24802 0030 07F11407 		add	r7, r7, #20
 24803 0034 BD46     		mov	sp, r7
 24804 0036 80BC     		pop	{r7}
 24805 0038 7047     		bx	lr
 24806              	.L19:
 24807 003a 00BF     		.align	2
 24808              	.L18:
 24809 003c 00080650 		.word	1342572544
 24810              		.cfi_endproc
 24811              	.LFE114:
 24813              		.section	.text.RNG_ClearFlag,"ax",%progbits
 24814              		.align	2
 24815              		.global	RNG_ClearFlag
 24816              		.thumb
 24817              		.thumb_func
 24819              	RNG_ClearFlag:
 24820              	.LFB115:
 314:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 315:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 316:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /**
 317:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @brief  Clears the RNG flags.
 318:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @param  RNG_FLAG: specifies the flag to clear. 
 319:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          This parameter can be any combination of the following values:
 320:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *            @arg RNG_FLAG_CECS: Clock Error Current flag.
 321:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *            @arg RNG_FLAG_SECS: Seed Error Current flag.
 322:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @note   RNG_FLAG_DRDY can not be cleared by RNG_ClearFlag() function. 
 323:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         This flag is cleared only by reading the Random number data (using 
 324:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         RNG_GetRandomNumber() function).                           
 325:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @retval None
 326:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
 327:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** void RNG_ClearFlag(uint8_t RNG_FLAG)
 328:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** {
 24821              		.loc 1 328 0
 24822              		.cfi_startproc
 24823              		@ args = 0, pretend = 0, frame = 8
 24824              		@ frame_needed = 1, uses_anonymous_args = 0
 24825              		@ link register save eliminated.
 24826 0000 80B4     		push	{r7}
 24827              	.LCFI13:
 24828              		.cfi_def_cfa_offset 4
 24829 0002 83B0     		sub	sp, sp, #12
 24830              	.LCFI14:
 24831              		.cfi_def_cfa_offset 16
 24832 0004 00AF     		add	r7, sp, #0
 24833              		.cfi_offset 7, -4
 24834              	.LCFI15:
 24835              		.cfi_def_cfa_register 7
 24836 0006 0346     		mov	r3, r0
 24837 0008 FB71     		strb	r3, [r7, #7]
 329:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Check the parameters */
 330:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   assert_param(IS_RNG_CLEAR_FLAG(RNG_FLAG));
 331:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Clear the selected RNG flags */
 332:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   RNG->SR = ~(uint32_t)(((uint32_t)RNG_FLAG) << 4);
 24838              		.loc 1 332 0
 24839 000a 064B     		ldr	r3, .L21
 24840 000c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 24841 000e 4FEA0212 		lsl	r2, r2, #4
 24842 0012 6FEA0202 		mvn	r2, r2
 24843 0016 5A60     		str	r2, [r3, #4]
 333:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** }
 24844              		.loc 1 333 0
 24845 0018 07F10C07 		add	r7, r7, #12
 24846 001c BD46     		mov	sp, r7
 24847 001e 80BC     		pop	{r7}
 24848 0020 7047     		bx	lr
 24849              	.L22:
 24850 0022 00BF     		.align	2
 24851              	.L21:
 24852 0024 00080650 		.word	1342572544
 24853              		.cfi_endproc
 24854              	.LFE115:
 24856              		.section	.text.RNG_GetITStatus,"ax",%progbits
 24857              		.align	2
 24858              		.global	RNG_GetITStatus
 24859              		.thumb
 24860              		.thumb_func
 24862              	RNG_GetITStatus:
 24863              	.LFB116:
 334:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 335:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /**
 336:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @brief  Checks whether the specified RNG interrupt has occurred or not.
 337:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @param  RNG_IT: specifies the RNG interrupt source to check.
 338:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          This parameter can be one of the following values:
 339:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *            @arg RNG_IT_CEI: Clock Error Interrupt.
 340:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *            @arg RNG_IT_SEI: Seed Error Interrupt.                   
 341:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @retval The new state of RNG_IT (SET or RESET).
 342:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
 343:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** ITStatus RNG_GetITStatus(uint8_t RNG_IT)
 344:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** {
 24864              		.loc 1 344 0
 24865              		.cfi_startproc
 24866              		@ args = 0, pretend = 0, frame = 16
 24867              		@ frame_needed = 1, uses_anonymous_args = 0
 24868              		@ link register save eliminated.
 24869 0000 80B4     		push	{r7}
 24870              	.LCFI16:
 24871              		.cfi_def_cfa_offset 4
 24872 0002 85B0     		sub	sp, sp, #20
 24873              	.LCFI17:
 24874              		.cfi_def_cfa_offset 24
 24875 0004 00AF     		add	r7, sp, #0
 24876              		.cfi_offset 7, -4
 24877              	.LCFI18:
 24878              		.cfi_def_cfa_register 7
 24879 0006 0346     		mov	r3, r0
 24880 0008 FB71     		strb	r3, [r7, #7]
 345:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   ITStatus bitstatus = RESET;
 24881              		.loc 1 345 0
 24882 000a 4FF00003 		mov	r3, #0
 24883 000e FB73     		strb	r3, [r7, #15]
 346:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Check the parameters */
 347:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   assert_param(IS_RNG_GET_IT(RNG_IT));
 348:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 349:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Check the status of the specified RNG interrupt */
 350:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   if ((RNG->SR & RNG_IT) != (uint8_t)RESET)
 24884              		.loc 1 350 0
 24885 0010 0A4B     		ldr	r3, .L26
 24886 0012 5A68     		ldr	r2, [r3, #4]
 24887 0014 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 24888 0016 02EA0303 		and	r3, r2, r3
 24889 001a 002B     		cmp	r3, #0
 24890 001c 03D0     		beq	.L24
 351:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   {
 352:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     /* RNG_IT is set */
 353:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     bitstatus = SET;
 24891              		.loc 1 353 0
 24892 001e 4FF00103 		mov	r3, #1
 24893 0022 FB73     		strb	r3, [r7, #15]
 24894 0024 02E0     		b	.L25
 24895              	.L24:
 354:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   }
 355:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   else
 356:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   {
 357:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     /* RNG_IT is reset */
 358:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     bitstatus = RESET;
 24896              		.loc 1 358 0
 24897 0026 4FF00003 		mov	r3, #0
 24898 002a FB73     		strb	r3, [r7, #15]
 24899              	.L25:
 359:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   }
 360:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Return the RNG_IT status */
 361:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   return bitstatus;
 24900              		.loc 1 361 0
 24901 002c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 362:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** }
 24902              		.loc 1 362 0
 24903 002e 1846     		mov	r0, r3
 24904 0030 07F11407 		add	r7, r7, #20
 24905 0034 BD46     		mov	sp, r7
 24906 0036 80BC     		pop	{r7}
 24907 0038 7047     		bx	lr
 24908              	.L27:
 24909 003a 00BF     		.align	2
 24910              	.L26:
 24911 003c 00080650 		.word	1342572544
 24912              		.cfi_endproc
 24913              	.LFE116:
 24915              		.section	.text.RNG_ClearITPendingBit,"ax",%progbits
 24916              		.align	2
 24917              		.global	RNG_ClearITPendingBit
 24918              		.thumb
 24919              		.thumb_func
 24921              	RNG_ClearITPendingBit:
 24922              	.LFB117:
 363:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 364:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 365:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /**
 366:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @brief  Clears the RNG interrupt pending bit(s).
 367:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @param  RNG_IT: specifies the RNG interrupt pending bit(s) to clear.
 368:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          This parameter can be any combination of the following values:
 369:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *            @arg RNG_IT_CEI: Clock Error Interrupt.
 370:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *            @arg RNG_IT_SEI: Seed Error Interrupt.
 371:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @retval None
 372:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
 373:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** void RNG_ClearITPendingBit(uint8_t RNG_IT)
 374:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** {
 24923              		.loc 1 374 0
 24924              		.cfi_startproc
 24925              		@ args = 0, pretend = 0, frame = 8
 24926              		@ frame_needed = 1, uses_anonymous_args = 0
 24927              		@ link register save eliminated.
 24928 0000 80B4     		push	{r7}
 24929              	.LCFI19:
 24930              		.cfi_def_cfa_offset 4
 24931 0002 83B0     		sub	sp, sp, #12
 24932              	.LCFI20:
 24933              		.cfi_def_cfa_offset 16
 24934 0004 00AF     		add	r7, sp, #0
 24935              		.cfi_offset 7, -4
 24936              	.LCFI21:
 24937              		.cfi_def_cfa_register 7
 24938 0006 0346     		mov	r3, r0
 24939 0008 FB71     		strb	r3, [r7, #7]
 375:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Check the parameters */
 376:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   assert_param(IS_RNG_IT(RNG_IT));
 377:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 378:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Clear the selected RNG interrupt pending bit */
 379:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   RNG->SR = (uint8_t)~RNG_IT;
 24940              		.loc 1 379 0
 24941 000a 054B     		ldr	r3, .L29
 24942 000c FA79     		ldrb	r2, [r7, #7]
 24943 000e 6FEA0202 		mvn	r2, r2
 24944 0012 D2B2     		uxtb	r2, r2
 24945 0014 5A60     		str	r2, [r3, #4]
 380:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** }
 24946              		.loc 1 380 0
 24947 0016 07F10C07 		add	r7, r7, #12
 24948 001a BD46     		mov	sp, r7
 24949 001c 80BC     		pop	{r7}
 24950 001e 7047     		bx	lr
 24951              	.L30:
 24952              		.align	2
 24953              	.L29:
 24954 0020 00080650 		.word	1342572544
 24955              		.cfi_endproc
 24956              	.LFE117:
 24958              		.text
 24959              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_rng.c
     /tmp/ccWbxt2c.s:24575  .text.RNG_DeInit:00000000 $t
     /tmp/ccWbxt2c.s:24580  .text.RNG_DeInit:00000000 RNG_DeInit
     /tmp/ccWbxt2c.s:24608  .text.RNG_Cmd:00000000 $t
     /tmp/ccWbxt2c.s:24613  .text.RNG_Cmd:00000000 RNG_Cmd
     /tmp/ccWbxt2c.s:24659  .text.RNG_Cmd:00000034 $d
     /tmp/ccWbxt2c.s:24664  .text.RNG_GetRandomNumber:00000000 $t
     /tmp/ccWbxt2c.s:24669  .text.RNG_GetRandomNumber:00000000 RNG_GetRandomNumber
     /tmp/ccWbxt2c.s:24694  .text.RNG_GetRandomNumber:00000010 $d
     /tmp/ccWbxt2c.s:24699  .text.RNG_ITConfig:00000000 $t
     /tmp/ccWbxt2c.s:24704  .text.RNG_ITConfig:00000000 RNG_ITConfig
     /tmp/ccWbxt2c.s:24750  .text.RNG_ITConfig:00000034 $d
     /tmp/ccWbxt2c.s:24755  .text.RNG_GetFlagStatus:00000000 $t
     /tmp/ccWbxt2c.s:24760  .text.RNG_GetFlagStatus:00000000 RNG_GetFlagStatus
     /tmp/ccWbxt2c.s:24809  .text.RNG_GetFlagStatus:0000003c $d
     /tmp/ccWbxt2c.s:24814  .text.RNG_ClearFlag:00000000 $t
     /tmp/ccWbxt2c.s:24819  .text.RNG_ClearFlag:00000000 RNG_ClearFlag
     /tmp/ccWbxt2c.s:24852  .text.RNG_ClearFlag:00000024 $d
     /tmp/ccWbxt2c.s:24857  .text.RNG_GetITStatus:00000000 $t
     /tmp/ccWbxt2c.s:24862  .text.RNG_GetITStatus:00000000 RNG_GetITStatus
     /tmp/ccWbxt2c.s:24911  .text.RNG_GetITStatus:0000003c $d
     /tmp/ccWbxt2c.s:24916  .text.RNG_ClearITPendingBit:00000000 $t
     /tmp/ccWbxt2c.s:24921  .text.RNG_ClearITPendingBit:00000000 RNG_ClearITPendingBit
     /tmp/ccWbxt2c.s:24954  .text.RNG_ClearITPendingBit:00000020 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
RCC_AHB2PeriphResetCmd
