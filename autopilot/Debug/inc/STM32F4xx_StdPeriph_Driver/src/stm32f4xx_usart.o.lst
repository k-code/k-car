   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 18, 4
  12              		.thumb
  13              		.file	"stm32f4xx_usart.c"
  23              	.Ltext0:
  24              		.file 1 "../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c"
 24590              		.align	2
 24591              		.global	USART_DeInit
 24592              		.thumb
 24593              		.thumb_func
 24595              	USART_DeInit:
 24596              	.LFB110:
   1:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
   2:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   ******************************************************************************
   3:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @file    stm32f4xx_usart.c
   4:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @author  MCD Application Team
   5:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @version V1.0.0
   6:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @date    30-September-2011
   7:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          functionalities of the Universal synchronous asynchronous receiver
   9:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          transmitter (USART):           
  10:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           - Initialization and Configuration
  11:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           - Data transfers
  12:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           - Multi-Processor Communication
  13:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           - LIN mode
  14:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           - Half-duplex mode
  15:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           - Smartcard mode
  16:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           - IrDA mode
  17:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           - DMA transfers management
  18:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           - Interrupts and flags management 
  19:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           
  20:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *  @verbatim
  21:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *      
  22:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          ===================================================================
  23:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                                 How to use this driver
  24:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          ===================================================================
  25:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          1. Enable peripheral clock using the follwoing functions
  26:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *             RCC_APB2PeriphClockCmd(RCC_APB2Periph_USARTx, ENABLE) for USART1 and USART6 
  27:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *             RCC_APB1PeriphClockCmd(RCC_APB1Periph_USARTx, ENABLE) for USART2, USART3, UART4 or 
  28:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  29:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          2.  According to the USART mode, enable the GPIO clocks using 
  30:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *              RCC_AHB1PeriphClockCmd() function. (The I/O can be TX, RX, CTS, 
  31:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *              or/and SCLK). 
  32:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  33:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          3. Peripheral's alternate function: 
  34:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                 - Connect the pin to the desired peripherals' Alternate 
  35:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                   Function (AF) using GPIO_PinAFConfig() function
  36:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                 - Configure the desired pin in alternate function by:
  37:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                   GPIO_InitStruct->GPIO_Mode = GPIO_Mode_AF
  38:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                 - Select the type, pull-up/pull-down and output speed via 
  39:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                   GPIO_PuPd, GPIO_OType and GPIO_Speed members
  40:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                 - Call GPIO_Init() function
  41:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *        
  42:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          4. Program the Baud Rate, Word Length , Stop Bit, Parity, Hardware 
  43:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *             flow control and Mode(Receiver/Transmitter) using the USART_Init()
  44:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *             function.
  45:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  46:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          5. For synchronous mode, enable the clock and program the polarity,
  47:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *             phase and last bit using the USART_ClockInit() function.
  48:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  49:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          5. Enable the NVIC and the corresponding interrupt using the function 
  50:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *             USART_ITConfig() if you need to use interrupt mode. 
  51:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  52:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          6. When using the DMA mode 
  53:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                   - Configure the DMA using DMA_Init() function
  54:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                   - Active the needed channel Request using USART_DMACmd() function
  55:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * 
  56:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          7. Enable the USART using the USART_Cmd() function.
  57:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * 
  58:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          8. Enable the DMA using the DMA_Cmd() function, when using DMA mode. 
  59:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  60:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          Refer to Multi-Processor, LIN, half-duplex, Smartcard, IrDA sub-sections
  61:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          for more details
  62:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          
  63:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          In order to reach higher communication baudrates, it is possible to
  64:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          enable the oversampling by 8 mode using the function USART_OverSampling8Cmd().
  65:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This function should be called after enabling the USART clock (RCC_APBxPeriphClockCmd(
  66:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          and before calling the function USART_Init().
  67:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          
  68:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *  @endverbatim
  69:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *        
  70:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   ******************************************************************************
  71:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @attention
  72:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  73:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  74:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  75:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  76:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  77:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  78:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  79:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  80:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  81:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   ******************************************************************************  
  82:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */ 
  83:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
  84:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /* Includes ------------------------------------------------------------------*/
  85:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** #include "stm32f4xx_usart.h"
  86:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** #include "stm32f4xx_rcc.h"
  87:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
  88:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  89:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
  90:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
  91:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
  92:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART 
  93:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief USART driver modules
  94:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
  95:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
  96:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
  97:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /* Private typedef -----------------------------------------------------------*/
  98:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /* Private define ------------------------------------------------------------*/
  99:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 100:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*!< USART CR1 register clear Mask ((~(uint16_t)0xE9F3)) */
 101:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** #define CR1_CLEAR_MASK            ((uint16_t)(USART_CR1_M | USART_CR1_PCE | \
 102:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                                               USART_CR1_PS | USART_CR1_TE | \
 103:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                                               USART_CR1_RE))
 104:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 105:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*!< USART CR2 register clock bits clear Mask ((~(uint16_t)0xF0FF)) */
 106:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** #define CR2_CLOCK_CLEAR_MASK      ((uint16_t)(USART_CR2_CLKEN | USART_CR2_CPOL | \
 107:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                                               USART_CR2_CPHA | USART_CR2_LBCL))
 108:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 109:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*!< USART CR3 register clear Mask ((~(uint16_t)0xFCFF)) */
 110:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** #define CR3_CLEAR_MASK            ((uint16_t)(USART_CR3_RTSE | USART_CR3_CTSE))
 111:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 112:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*!< USART Interrupts mask */
 113:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** #define IT_MASK                   ((uint16_t)0x001F)
 114:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 115:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /* Private macro -------------------------------------------------------------*/
 116:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /* Private variables ---------------------------------------------------------*/
 117:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /* Private function prototypes -----------------------------------------------*/
 118:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /* Private functions ---------------------------------------------------------*/
 119:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 120:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Private_Functions
 121:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 122:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 123:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 124:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group1 Initialization and Configuration functions
 125:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   Initialization and Configuration functions 
 126:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
 127:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
 128:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
 129:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                   Initialization and Configuration functions
 130:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
 131:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 132:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   This subsection provides a set of functions allowing to initialize the USART 
 133:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   in asynchronous and in synchronous modes.
 134:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    - For the asynchronous mode only these parameters can be configured: 
 135:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Baud Rate
 136:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Word Length 
 137:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Stop Bit
 138:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Parity: If the parity is enabled, then the MSB bit of the data written
 139:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           in the data register is transmitted but is changed by the parity bit.
 140:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           Depending on the frame length defined by the M bit (8-bits or 9-bits),
 141:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           the possible USART frame formats are as listed in the following table:
 142:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    +-------------------------------------------------------------+     
 143:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |   M bit |  PCE bit  |            USART frame                |
 144:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |---------------------|---------------------------------------|             
 145:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |    0    |    0      |    | SB | 8 bit data | STB |          |
 146:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |---------|-----------|---------------------------------------|  
 147:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |    0    |    1      |    | SB | 7 bit data | PB | STB |     |
 148:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |---------|-----------|---------------------------------------|  
 149:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |    1    |    0      |    | SB | 9 bit data | STB |          |
 150:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |---------|-----------|---------------------------------------|  
 151:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |    1    |    1      |    | SB | 8 bit data | PB | STB |     |
 152:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    +-------------------------------------------------------------+            
 153:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Hardware flow control
 154:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Receiver/transmitter modes
 155:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 156:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   The USART_Init() function follows the USART  asynchronous configuration procedure
 157:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   (details for the procedure are available in reference manual (RM0090)).
 158:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 159:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   - For the synchronous mode in addition to the asynchronous mode parameters these 
 160:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     parameters should be also configured:
 161:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - USART Clock Enabled
 162:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - USART polarity
 163:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - USART phase
 164:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - USART LastBit
 165:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 166:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   These parameters can be configured using the USART_ClockInit() function.
 167:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 168:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
 169:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 170:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 171:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 172:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 173:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Deinitializes the USARTx peripheral registers to their default reset values.
 174:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 175:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 176:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 177:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 178:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_DeInit(USART_TypeDef* USARTx)
 179:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 24597              		.loc 1 179 0
 24598              		.cfi_startproc
 24599              		@ args = 0, pretend = 0, frame = 8
 24600              		@ frame_needed = 1, uses_anonymous_args = 0
 24601 0000 80B5     		push	{r7, lr}
 24602              	.LCFI0:
 24603              		.cfi_def_cfa_offset 8
 24604 0002 82B0     		sub	sp, sp, #8
 24605              	.LCFI1:
 24606              		.cfi_def_cfa_offset 16
 24607 0004 00AF     		add	r7, sp, #0
 24608              		.cfi_offset 14, -4
 24609              		.cfi_offset 7, -8
 24610              	.LCFI2:
 24611              		.cfi_def_cfa_register 7
 24612 0006 7860     		str	r0, [r7, #4]
 180:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 181:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 182:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 183:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (USARTx == USART1)
 24613              		.loc 1 183 0
 24614 0008 7A68     		ldr	r2, [r7, #4]
 24615 000a 344B     		ldr	r3, .L8
 24616 000c 9A42     		cmp	r2, r3
 24617 000e 0CD1     		bne	.L2
 184:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 185:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 24618              		.loc 1 185 0
 24619 0010 4FF01000 		mov	r0, #16
 24620 0014 4FF00101 		mov	r1, #1
 24621 0018 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 186:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 24622              		.loc 1 186 0
 24623 001c 4FF01000 		mov	r0, #16
 24624 0020 4FF00001 		mov	r1, #0
 24625 0024 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 24626 0028 53E0     		b	.L1
 24627              	.L2:
 187:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 188:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else if (USARTx == USART2)
 24628              		.loc 1 188 0
 24629 002a 7A68     		ldr	r2, [r7, #4]
 24630 002c 2C4B     		ldr	r3, .L8+4
 24631 002e 9A42     		cmp	r2, r3
 24632 0030 0CD1     		bne	.L4
 189:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 190:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 24633              		.loc 1 190 0
 24634 0032 4FF40030 		mov	r0, #131072
 24635 0036 4FF00101 		mov	r1, #1
 24636 003a FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 191:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 24637              		.loc 1 191 0
 24638 003e 4FF40030 		mov	r0, #131072
 24639 0042 4FF00001 		mov	r1, #0
 24640 0046 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 24641 004a 42E0     		b	.L1
 24642              	.L4:
 192:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 193:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else if (USARTx == USART3)
 24643              		.loc 1 193 0
 24644 004c 7A68     		ldr	r2, [r7, #4]
 24645 004e 254B     		ldr	r3, .L8+8
 24646 0050 9A42     		cmp	r2, r3
 24647 0052 0CD1     		bne	.L5
 194:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 195:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 24648              		.loc 1 195 0
 24649 0054 4FF48020 		mov	r0, #262144
 24650 0058 4FF00101 		mov	r1, #1
 24651 005c FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 196:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 24652              		.loc 1 196 0
 24653 0060 4FF48020 		mov	r0, #262144
 24654 0064 4FF00001 		mov	r1, #0
 24655 0068 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 24656 006c 31E0     		b	.L1
 24657              	.L5:
 197:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }    
 198:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else if (USARTx == UART4)
 24658              		.loc 1 198 0
 24659 006e 7A68     		ldr	r2, [r7, #4]
 24660 0070 1D4B     		ldr	r3, .L8+12
 24661 0072 9A42     		cmp	r2, r3
 24662 0074 0CD1     		bne	.L6
 199:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 200:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 24663              		.loc 1 200 0
 24664 0076 4FF40020 		mov	r0, #524288
 24665 007a 4FF00101 		mov	r1, #1
 24666 007e FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 201:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 24667              		.loc 1 201 0
 24668 0082 4FF40020 		mov	r0, #524288
 24669 0086 4FF00001 		mov	r1, #0
 24670 008a FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 24671 008e 20E0     		b	.L1
 24672              	.L6:
 202:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 203:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else if (USARTx == UART5)
 24673              		.loc 1 203 0
 24674 0090 7A68     		ldr	r2, [r7, #4]
 24675 0092 164B     		ldr	r3, .L8+16
 24676 0094 9A42     		cmp	r2, r3
 24677 0096 0CD1     		bne	.L7
 204:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 205:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 24678              		.loc 1 205 0
 24679 0098 4FF48010 		mov	r0, #1048576
 24680 009c 4FF00101 		mov	r1, #1
 24681 00a0 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 206:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 24682              		.loc 1 206 0
 24683 00a4 4FF48010 		mov	r0, #1048576
 24684 00a8 4FF00001 		mov	r1, #0
 24685 00ac FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 24686 00b0 0FE0     		b	.L1
 24687              	.L7:
 207:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }     
 208:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 209:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 210:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     if (USARTx == USART6)
 24688              		.loc 1 210 0
 24689 00b2 7A68     		ldr	r2, [r7, #4]
 24690 00b4 0E4B     		ldr	r3, .L8+20
 24691 00b6 9A42     		cmp	r2, r3
 24692 00b8 0BD1     		bne	.L1
 211:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     { 
 212:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
 24693              		.loc 1 212 0
 24694 00ba 4FF02000 		mov	r0, #32
 24695 00be 4FF00101 		mov	r1, #1
 24696 00c2 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 213:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 24697              		.loc 1 213 0
 24698 00c6 4FF02000 		mov	r0, #32
 24699 00ca 4FF00001 		mov	r1, #0
 24700 00ce FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 24701              	.L1:
 214:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     }
 215:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 216:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 24702              		.loc 1 216 0
 24703 00d2 07F10807 		add	r7, r7, #8
 24704 00d6 BD46     		mov	sp, r7
 24705 00d8 80BD     		pop	{r7, pc}
 24706              	.L9:
 24707 00da 00BF     		.align	2
 24708              	.L8:
 24709 00dc 00100140 		.word	1073811456
 24710 00e0 00440040 		.word	1073759232
 24711 00e4 00480040 		.word	1073760256
 24712 00e8 004C0040 		.word	1073761280
 24713 00ec 00500040 		.word	1073762304
 24714 00f0 00140140 		.word	1073812480
 24715              		.cfi_endproc
 24716              	.LFE110:
 24718              		.section	.text.USART_Init,"ax",%progbits
 24719              		.align	2
 24720              		.global	USART_Init
 24721              		.thumb
 24722              		.thumb_func
 24724              	USART_Init:
 24725              	.LFB111:
 217:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 218:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 219:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Initializes the USARTx peripheral according to the specified
 220:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         parameters in the USART_InitStruct .
 221:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 222:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 223:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
 224:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         the configuration information for the specified USART peripheral.
 225:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 226:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 227:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
 228:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 24726              		.loc 1 228 0
 24727              		.cfi_startproc
 24728              		@ args = 0, pretend = 0, frame = 40
 24729              		@ frame_needed = 1, uses_anonymous_args = 0
 24730 0000 80B5     		push	{r7, lr}
 24731              	.LCFI3:
 24732              		.cfi_def_cfa_offset 8
 24733 0002 8AB0     		sub	sp, sp, #40
 24734              	.LCFI4:
 24735              		.cfi_def_cfa_offset 48
 24736 0004 00AF     		add	r7, sp, #0
 24737              		.cfi_offset 14, -4
 24738              		.cfi_offset 7, -8
 24739              	.LCFI5:
 24740              		.cfi_def_cfa_register 7
 24741 0006 7860     		str	r0, [r7, #4]
 24742 0008 3960     		str	r1, [r7, #0]
 229:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t tmpreg = 0x00, apbclock = 0x00;
 24743              		.loc 1 229 0
 24744 000a 4FF00003 		mov	r3, #0
 24745 000e 7B62     		str	r3, [r7, #36]
 24746 0010 4FF00003 		mov	r3, #0
 24747 0014 3B62     		str	r3, [r7, #32]
 230:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t integerdivider = 0x00;
 24748              		.loc 1 230 0
 24749 0016 4FF00003 		mov	r3, #0
 24750 001a FB61     		str	r3, [r7, #28]
 231:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t fractionaldivider = 0x00;
 24751              		.loc 1 231 0
 24752 001c 4FF00003 		mov	r3, #0
 24753 0020 BB61     		str	r3, [r7, #24]
 232:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   RCC_ClocksTypeDef RCC_ClocksStatus;
 233:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 234:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 235:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 236:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_BAUDRATE(USART_InitStruct->USART_BaudRate));  
 237:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_WORD_LENGTH(USART_InitStruct->USART_WordLength));
 238:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_STOPBITS(USART_InitStruct->USART_StopBits));
 239:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
 240:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
 241:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
 242:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 243:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* The hardware flow control is available only for USART1, USART2, USART3 and USART6 */
 244:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
 245:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 246:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
 247:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 248:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 249:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*---------------------------- USART CR2 Configuration -----------------------*/
 250:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg = USARTx->CR2;
 24754              		.loc 1 250 0
 24755 0022 7B68     		ldr	r3, [r7, #4]
 24756 0024 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 24757 0026 9BB2     		uxth	r3, r3
 24758 0028 7B62     		str	r3, [r7, #36]
 251:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 252:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Clear STOP[13:12] bits */
 253:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 24759              		.loc 1 253 0
 24760 002a 7B6A     		ldr	r3, [r7, #36]
 24761 002c 23F44053 		bic	r3, r3, #12288
 24762 0030 7B62     		str	r3, [r7, #36]
 254:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 255:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
 256:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       Set STOP[13:12] bits according to USART_StopBits value */
 257:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 24763              		.loc 1 257 0
 24764 0032 3B68     		ldr	r3, [r7, #0]
 24765 0034 DB88     		ldrh	r3, [r3, #6]
 24766 0036 7A6A     		ldr	r2, [r7, #36]
 24767 0038 42EA0303 		orr	r3, r2, r3
 24768 003c 7B62     		str	r3, [r7, #36]
 258:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 259:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Write to USART CR2 */
 260:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR2 = (uint16_t)tmpreg;
 24769              		.loc 1 260 0
 24770 003e 7B6A     		ldr	r3, [r7, #36]
 24771 0040 9AB2     		uxth	r2, r3
 24772 0042 7B68     		ldr	r3, [r7, #4]
 24773 0044 1A82     		strh	r2, [r3, #16]	@ movhi
 261:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 262:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*---------------------------- USART CR1 Configuration -----------------------*/
 263:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg = USARTx->CR1;
 24774              		.loc 1 263 0
 24775 0046 7B68     		ldr	r3, [r7, #4]
 24776 0048 9B89     		ldrh	r3, [r3, #12]	@ movhi
 24777 004a 9BB2     		uxth	r3, r3
 24778 004c 7B62     		str	r3, [r7, #36]
 264:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 265:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Clear M, PCE, PS, TE and RE bits */
 266:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 24779              		.loc 1 266 0
 24780 004e 7B6A     		ldr	r3, [r7, #36]
 24781 0050 23F4B053 		bic	r3, r3, #5632
 24782 0054 23F00C03 		bic	r3, r3, #12
 24783 0058 7B62     		str	r3, [r7, #36]
 267:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 268:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Configure the USART Word Length, Parity and mode: 
 269:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      Set the M bits according to USART_WordLength value 
 270:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      Set PCE and PS bits according to USART_Parity value
 271:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      Set TE and RE bits according to USART_Mode value */
 272:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 24784              		.loc 1 272 0
 24785 005a 3B68     		ldr	r3, [r7, #0]
 24786 005c 9A88     		ldrh	r2, [r3, #4]
 24787 005e 3B68     		ldr	r3, [r7, #0]
 24788 0060 1B89     		ldrh	r3, [r3, #8]
 24789 0062 42EA0303 		orr	r3, r2, r3
 24790 0066 9AB2     		uxth	r2, r3
 273:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****             USART_InitStruct->USART_Mode;
 24791              		.loc 1 273 0
 24792 0068 3B68     		ldr	r3, [r7, #0]
 24793 006a 5B89     		ldrh	r3, [r3, #10]
 272:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 24794              		.loc 1 272 0
 24795 006c 42EA0303 		orr	r3, r2, r3
 24796 0070 9BB2     		uxth	r3, r3
 24797 0072 7A6A     		ldr	r2, [r7, #36]
 24798 0074 42EA0303 		orr	r3, r2, r3
 24799 0078 7B62     		str	r3, [r7, #36]
 274:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 275:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Write to USART CR1 */
 276:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR1 = (uint16_t)tmpreg;
 24800              		.loc 1 276 0
 24801 007a 7B6A     		ldr	r3, [r7, #36]
 24802 007c 9AB2     		uxth	r2, r3
 24803 007e 7B68     		ldr	r3, [r7, #4]
 24804 0080 9A81     		strh	r2, [r3, #12]	@ movhi
 277:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 278:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*---------------------------- USART CR3 Configuration -----------------------*/  
 279:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg = USARTx->CR3;
 24805              		.loc 1 279 0
 24806 0082 7B68     		ldr	r3, [r7, #4]
 24807 0084 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 24808 0086 9BB2     		uxth	r3, r3
 24809 0088 7B62     		str	r3, [r7, #36]
 280:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 281:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Clear CTSE and RTSE bits */
 282:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 24810              		.loc 1 282 0
 24811 008a 7B6A     		ldr	r3, [r7, #36]
 24812 008c 23F44073 		bic	r3, r3, #768
 24813 0090 7B62     		str	r3, [r7, #36]
 283:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 284:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Configure the USART HFC : 
 285:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
 286:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 24814              		.loc 1 286 0
 24815 0092 3B68     		ldr	r3, [r7, #0]
 24816 0094 9B89     		ldrh	r3, [r3, #12]
 24817 0096 7A6A     		ldr	r2, [r7, #36]
 24818 0098 42EA0303 		orr	r3, r2, r3
 24819 009c 7B62     		str	r3, [r7, #36]
 287:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 288:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Write to USART CR3 */
 289:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR3 = (uint16_t)tmpreg;
 24820              		.loc 1 289 0
 24821 009e 7B6A     		ldr	r3, [r7, #36]
 24822 00a0 9AB2     		uxth	r2, r3
 24823 00a2 7B68     		ldr	r3, [r7, #4]
 24824 00a4 9A82     		strh	r2, [r3, #20]	@ movhi
 290:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 291:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*---------------------------- USART BRR Configuration -----------------------*/
 292:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Configure the USART Baud Rate */
 293:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   RCC_GetClocksFreq(&RCC_ClocksStatus);
 24825              		.loc 1 293 0
 24826 00a6 07F10803 		add	r3, r7, #8
 24827 00aa 1846     		mov	r0, r3
 24828 00ac FFF7FEFF 		bl	RCC_GetClocksFreq
 294:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 295:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if ((USARTx == USART1) || (USARTx == USART6))
 24829              		.loc 1 295 0
 24830 00b0 7A68     		ldr	r2, [r7, #4]
 24831 00b2 3A4B     		ldr	r3, .L18
 24832 00b4 9A42     		cmp	r2, r3
 24833 00b6 03D0     		beq	.L11
 24834              		.loc 1 295 0 is_stmt 0 discriminator 1
 24835 00b8 7A68     		ldr	r2, [r7, #4]
 24836 00ba 394B     		ldr	r3, .L18+4
 24837 00bc 9A42     		cmp	r2, r3
 24838 00be 02D1     		bne	.L12
 24839              	.L11:
 296:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 297:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 24840              		.loc 1 297 0 is_stmt 1
 24841 00c0 7B69     		ldr	r3, [r7, #20]
 24842 00c2 3B62     		str	r3, [r7, #32]
 24843 00c4 01E0     		b	.L13
 24844              	.L12:
 298:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 299:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 300:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 301:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 24845              		.loc 1 301 0
 24846 00c6 3B69     		ldr	r3, [r7, #16]
 24847 00c8 3B62     		str	r3, [r7, #32]
 24848              	.L13:
 302:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 303:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 304:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Determine the integer part */
 305:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 24849              		.loc 1 305 0
 24850 00ca 7B68     		ldr	r3, [r7, #4]
 24851 00cc 9B89     		ldrh	r3, [r3, #12]	@ movhi
 24852 00ce 9BB2     		uxth	r3, r3
 24853 00d0 9BB2     		uxth	r3, r3
 24854 00d2 1BB2     		sxth	r3, r3
 24855 00d4 002B     		cmp	r3, #0
 24856 00d6 0FDA     		bge	.L14
 306:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 307:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Integer part computing in case Oversampling mode is 8 Samples */
 308:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 24857              		.loc 1 308 0
 24858 00d8 3A6A     		ldr	r2, [r7, #32]
 24859 00da 1346     		mov	r3, r2
 24860 00dc 4FEA8303 		lsl	r3, r3, #2
 24861 00e0 9B18     		adds	r3, r3, r2
 24862 00e2 4FEA8302 		lsl	r2, r3, #2
 24863 00e6 9A18     		adds	r2, r3, r2
 24864 00e8 3B68     		ldr	r3, [r7, #0]
 24865 00ea 1B68     		ldr	r3, [r3, #0]
 24866 00ec 4FEA4303 		lsl	r3, r3, #1
 24867 00f0 B2FBF3F3 		udiv	r3, r2, r3
 24868 00f4 FB61     		str	r3, [r7, #28]
 24869 00f6 0EE0     		b	.L15
 24870              	.L14:
 309:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 310:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
 311:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 312:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Integer part computing in case Oversampling mode is 16 Samples */
 313:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 24871              		.loc 1 313 0
 24872 00f8 3A6A     		ldr	r2, [r7, #32]
 24873 00fa 1346     		mov	r3, r2
 24874 00fc 4FEA8303 		lsl	r3, r3, #2
 24875 0100 9B18     		adds	r3, r3, r2
 24876 0102 4FEA8302 		lsl	r2, r3, #2
 24877 0106 9A18     		adds	r2, r3, r2
 24878 0108 3B68     		ldr	r3, [r7, #0]
 24879 010a 1B68     		ldr	r3, [r3, #0]
 24880 010c 4FEA8303 		lsl	r3, r3, #2
 24881 0110 B2FBF3F3 		udiv	r3, r2, r3
 24882 0114 FB61     		str	r3, [r7, #28]
 24883              	.L15:
 314:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 315:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg = (integerdivider / 100) << 4;
 24884              		.loc 1 315 0
 24885 0116 FA69     		ldr	r2, [r7, #28]
 24886 0118 224B     		ldr	r3, .L18+8
 24887 011a A3FB0213 		umull	r1, r3, r3, r2
 24888 011e 4FEA5313 		lsr	r3, r3, #5
 24889 0122 4FEA0313 		lsl	r3, r3, #4
 24890 0126 7B62     		str	r3, [r7, #36]
 316:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 317:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Determine the fractional part */
 318:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 24891              		.loc 1 318 0
 24892 0128 7B6A     		ldr	r3, [r7, #36]
 24893 012a 4FEA1313 		lsr	r3, r3, #4
 24894 012e 4FF06402 		mov	r2, #100
 24895 0132 02FB03F3 		mul	r3, r2, r3
 24896 0136 FA69     		ldr	r2, [r7, #28]
 24897 0138 D31A     		subs	r3, r2, r3
 24898 013a BB61     		str	r3, [r7, #24]
 319:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 320:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Implement the fractional part in the register */
 321:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 24899              		.loc 1 321 0
 24900 013c 7B68     		ldr	r3, [r7, #4]
 24901 013e 9B89     		ldrh	r3, [r3, #12]	@ movhi
 24902 0140 9BB2     		uxth	r3, r3
 24903 0142 9BB2     		uxth	r3, r3
 24904 0144 1BB2     		sxth	r3, r3
 24905 0146 002B     		cmp	r3, #0
 24906 0148 10DA     		bge	.L16
 322:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 323:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 24907              		.loc 1 323 0
 24908 014a BB69     		ldr	r3, [r7, #24]
 24909 014c 4FEAC303 		lsl	r3, r3, #3
 24910 0150 03F13202 		add	r2, r3, #50
 24911 0154 134B     		ldr	r3, .L18+8
 24912 0156 A3FB0213 		umull	r1, r3, r3, r2
 24913 015a 4FEA5313 		lsr	r3, r3, #5
 24914 015e 03F00703 		and	r3, r3, #7
 24915 0162 7A6A     		ldr	r2, [r7, #36]
 24916 0164 42EA0303 		orr	r3, r2, r3
 24917 0168 7B62     		str	r3, [r7, #36]
 24918 016a 0FE0     		b	.L17
 24919              	.L16:
 324:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 325:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
 326:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 327:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 24920              		.loc 1 327 0
 24921 016c BB69     		ldr	r3, [r7, #24]
 24922 016e 4FEA0313 		lsl	r3, r3, #4
 24923 0172 03F13202 		add	r2, r3, #50
 24924 0176 0B4B     		ldr	r3, .L18+8
 24925 0178 A3FB0213 		umull	r1, r3, r3, r2
 24926 017c 4FEA5313 		lsr	r3, r3, #5
 24927 0180 03F00F03 		and	r3, r3, #15
 24928 0184 7A6A     		ldr	r2, [r7, #36]
 24929 0186 42EA0303 		orr	r3, r2, r3
 24930 018a 7B62     		str	r3, [r7, #36]
 24931              	.L17:
 328:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 329:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 330:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Write to USART BRR register */
 331:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->BRR = (uint16_t)tmpreg;
 24932              		.loc 1 331 0
 24933 018c 7B6A     		ldr	r3, [r7, #36]
 24934 018e 9AB2     		uxth	r2, r3
 24935 0190 7B68     		ldr	r3, [r7, #4]
 24936 0192 1A81     		strh	r2, [r3, #8]	@ movhi
 332:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 24937              		.loc 1 332 0
 24938 0194 07F12807 		add	r7, r7, #40
 24939 0198 BD46     		mov	sp, r7
 24940 019a 80BD     		pop	{r7, pc}
 24941              	.L19:
 24942              		.align	2
 24943              	.L18:
 24944 019c 00100140 		.word	1073811456
 24945 01a0 00140140 		.word	1073812480
 24946 01a4 1F85EB51 		.word	1374389535
 24947              		.cfi_endproc
 24948              	.LFE111:
 24950              		.section	.text.USART_StructInit,"ax",%progbits
 24951              		.align	2
 24952              		.global	USART_StructInit
 24953              		.thumb
 24954              		.thumb_func
 24956              	USART_StructInit:
 24957              	.LFB112:
 333:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 334:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 335:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Fills each USART_InitStruct member with its default value.
 336:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure which will
 337:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         be initialized.
 338:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 339:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 340:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
 341:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 24958              		.loc 1 341 0
 24959              		.cfi_startproc
 24960              		@ args = 0, pretend = 0, frame = 8
 24961              		@ frame_needed = 1, uses_anonymous_args = 0
 24962              		@ link register save eliminated.
 24963 0000 80B4     		push	{r7}
 24964              	.LCFI6:
 24965              		.cfi_def_cfa_offset 4
 24966 0002 83B0     		sub	sp, sp, #12
 24967              	.LCFI7:
 24968              		.cfi_def_cfa_offset 16
 24969 0004 00AF     		add	r7, sp, #0
 24970              		.cfi_offset 7, -4
 24971              	.LCFI8:
 24972              		.cfi_def_cfa_register 7
 24973 0006 7860     		str	r0, [r7, #4]
 342:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* USART_InitStruct members default value */
 343:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_BaudRate = 9600;
 24974              		.loc 1 343 0
 24975 0008 7B68     		ldr	r3, [r7, #4]
 24976 000a 4FF41652 		mov	r2, #9600
 24977 000e 1A60     		str	r2, [r3, #0]
 344:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 24978              		.loc 1 344 0
 24979 0010 7B68     		ldr	r3, [r7, #4]
 24980 0012 4FF00002 		mov	r2, #0
 24981 0016 9A80     		strh	r2, [r3, #4]	@ movhi
 345:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_StopBits = USART_StopBits_1;
 24982              		.loc 1 345 0
 24983 0018 7B68     		ldr	r3, [r7, #4]
 24984 001a 4FF00002 		mov	r2, #0
 24985 001e DA80     		strh	r2, [r3, #6]	@ movhi
 346:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_Parity = USART_Parity_No ;
 24986              		.loc 1 346 0
 24987 0020 7B68     		ldr	r3, [r7, #4]
 24988 0022 4FF00002 		mov	r2, #0
 24989 0026 1A81     		strh	r2, [r3, #8]	@ movhi
 347:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 24990              		.loc 1 347 0
 24991 0028 7B68     		ldr	r3, [r7, #4]
 24992 002a 4FF00C02 		mov	r2, #12
 24993 002e 5A81     		strh	r2, [r3, #10]	@ movhi
 348:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 24994              		.loc 1 348 0
 24995 0030 7B68     		ldr	r3, [r7, #4]
 24996 0032 4FF00002 		mov	r2, #0
 24997 0036 9A81     		strh	r2, [r3, #12]	@ movhi
 349:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 24998              		.loc 1 349 0
 24999 0038 07F10C07 		add	r7, r7, #12
 25000 003c BD46     		mov	sp, r7
 25001 003e 80BC     		pop	{r7}
 25002 0040 7047     		bx	lr
 25003              		.cfi_endproc
 25004              	.LFE112:
 25006 0042 00BF     		.section	.text.USART_ClockInit,"ax",%progbits
 25007              		.align	2
 25008              		.global	USART_ClockInit
 25009              		.thumb
 25010              		.thumb_func
 25012              	USART_ClockInit:
 25013              	.LFB113:
 350:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 351:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 352:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Initializes the USARTx peripheral Clock according to the 
 353:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         specified parameters in the USART_ClockInitStruct .
 354:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3 or 6 to select the USART peripheral.
 355:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef structure that
 356:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         contains the configuration information for the specified  USART peripheral.
 357:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   The Smart Card and Synchronous modes are not available for UART4 and UART5.    
 358:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 359:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 360:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
 361:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 25014              		.loc 1 361 0
 25015              		.cfi_startproc
 25016              		@ args = 0, pretend = 0, frame = 16
 25017              		@ frame_needed = 1, uses_anonymous_args = 0
 25018              		@ link register save eliminated.
 25019 0000 80B4     		push	{r7}
 25020              	.LCFI9:
 25021              		.cfi_def_cfa_offset 4
 25022 0002 85B0     		sub	sp, sp, #20
 25023              	.LCFI10:
 25024              		.cfi_def_cfa_offset 24
 25025 0004 00AF     		add	r7, sp, #0
 25026              		.cfi_offset 7, -4
 25027              	.LCFI11:
 25028              		.cfi_def_cfa_register 7
 25029 0006 7860     		str	r0, [r7, #4]
 25030 0008 3960     		str	r1, [r7, #0]
 362:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t tmpreg = 0x00;
 25031              		.loc 1 362 0
 25032 000a 4FF00003 		mov	r3, #0
 25033 000e FB60     		str	r3, [r7, #12]
 363:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 364:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_1236_PERIPH(USARTx));
 365:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_CLOCK(USART_ClockInitStruct->USART_Clock));
 366:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
 367:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
 368:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
 369:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 370:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*---------------------------- USART CR2 Configuration -----------------------*/
 371:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg = USARTx->CR2;
 25034              		.loc 1 371 0
 25035 0010 7B68     		ldr	r3, [r7, #4]
 25036 0012 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 25037 0014 9BB2     		uxth	r3, r3
 25038 0016 FB60     		str	r3, [r7, #12]
 372:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Clear CLKEN, CPOL, CPHA and LBCL bits */
 373:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 25039              		.loc 1 373 0
 25040 0018 FB68     		ldr	r3, [r7, #12]
 25041 001a 23F47063 		bic	r3, r3, #3840
 25042 001e FB60     		str	r3, [r7, #12]
 374:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
 375:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Set CLKEN bit according to USART_Clock value */
 376:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Set CPOL bit according to USART_CPOL value */
 377:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Set CPHA bit according to USART_CPHA value */
 378:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Set LBCL bit according to USART_LastBit value */
 379:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 25043              		.loc 1 379 0
 25044 0020 3B68     		ldr	r3, [r7, #0]
 25045 0022 1A88     		ldrh	r2, [r3, #0]
 25046 0024 3B68     		ldr	r3, [r7, #0]
 25047 0026 5B88     		ldrh	r3, [r3, #2]
 380:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                  USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 25048              		.loc 1 380 0
 25049 0028 42EA0303 		orr	r3, r2, r3
 25050 002c 9AB2     		uxth	r2, r3
 25051 002e 3B68     		ldr	r3, [r7, #0]
 25052 0030 9B88     		ldrh	r3, [r3, #4]
 25053 0032 42EA0303 		orr	r3, r2, r3
 25054 0036 9AB2     		uxth	r2, r3
 25055 0038 3B68     		ldr	r3, [r7, #0]
 25056 003a DB88     		ldrh	r3, [r3, #6]
 25057 003c 42EA0303 		orr	r3, r2, r3
 25058 0040 9BB2     		uxth	r3, r3
 379:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 25059              		.loc 1 379 0
 25060 0042 FA68     		ldr	r2, [r7, #12]
 25061 0044 42EA0303 		orr	r3, r2, r3
 25062 0048 FB60     		str	r3, [r7, #12]
 381:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Write to USART CR2 */
 382:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR2 = (uint16_t)tmpreg;
 25063              		.loc 1 382 0
 25064 004a FB68     		ldr	r3, [r7, #12]
 25065 004c 9AB2     		uxth	r2, r3
 25066 004e 7B68     		ldr	r3, [r7, #4]
 25067 0050 1A82     		strh	r2, [r3, #16]	@ movhi
 383:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 25068              		.loc 1 383 0
 25069 0052 07F11407 		add	r7, r7, #20
 25070 0056 BD46     		mov	sp, r7
 25071 0058 80BC     		pop	{r7}
 25072 005a 7047     		bx	lr
 25073              		.cfi_endproc
 25074              	.LFE113:
 25076              		.section	.text.USART_ClockStructInit,"ax",%progbits
 25077              		.align	2
 25078              		.global	USART_ClockStructInit
 25079              		.thumb
 25080              		.thumb_func
 25082              	USART_ClockStructInit:
 25083              	.LFB114:
 384:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 385:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 386:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Fills each USART_ClockInitStruct member with its default value.
 387:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef structure
 388:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         which will be initialized.
 389:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 390:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 391:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
 392:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 25084              		.loc 1 392 0
 25085              		.cfi_startproc
 25086              		@ args = 0, pretend = 0, frame = 8
 25087              		@ frame_needed = 1, uses_anonymous_args = 0
 25088              		@ link register save eliminated.
 25089 0000 80B4     		push	{r7}
 25090              	.LCFI12:
 25091              		.cfi_def_cfa_offset 4
 25092 0002 83B0     		sub	sp, sp, #12
 25093              	.LCFI13:
 25094              		.cfi_def_cfa_offset 16
 25095 0004 00AF     		add	r7, sp, #0
 25096              		.cfi_offset 7, -4
 25097              	.LCFI14:
 25098              		.cfi_def_cfa_register 7
 25099 0006 7860     		str	r0, [r7, #4]
 393:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* USART_ClockInitStruct members default value */
 394:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 25100              		.loc 1 394 0
 25101 0008 7B68     		ldr	r3, [r7, #4]
 25102 000a 4FF00002 		mov	r2, #0
 25103 000e 1A80     		strh	r2, [r3, #0]	@ movhi
 395:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 25104              		.loc 1 395 0
 25105 0010 7B68     		ldr	r3, [r7, #4]
 25106 0012 4FF00002 		mov	r2, #0
 25107 0016 5A80     		strh	r2, [r3, #2]	@ movhi
 396:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 25108              		.loc 1 396 0
 25109 0018 7B68     		ldr	r3, [r7, #4]
 25110 001a 4FF00002 		mov	r2, #0
 25111 001e 9A80     		strh	r2, [r3, #4]	@ movhi
 397:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 25112              		.loc 1 397 0
 25113 0020 7B68     		ldr	r3, [r7, #4]
 25114 0022 4FF00002 		mov	r2, #0
 25115 0026 DA80     		strh	r2, [r3, #6]	@ movhi
 398:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 25116              		.loc 1 398 0
 25117 0028 07F10C07 		add	r7, r7, #12
 25118 002c BD46     		mov	sp, r7
 25119 002e 80BC     		pop	{r7}
 25120 0030 7047     		bx	lr
 25121              		.cfi_endproc
 25122              	.LFE114:
 25124 0032 00BF     		.section	.text.USART_Cmd,"ax",%progbits
 25125              		.align	2
 25126              		.global	USART_Cmd
 25127              		.thumb
 25128              		.thumb_func
 25130              	USART_Cmd:
 25131              	.LFB115:
 399:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 400:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 401:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the specified USART peripheral.
 402:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 403:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 404:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the USARTx peripheral.
 405:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 406:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 407:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 408:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
 409:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 25132              		.loc 1 409 0
 25133              		.cfi_startproc
 25134              		@ args = 0, pretend = 0, frame = 8
 25135              		@ frame_needed = 1, uses_anonymous_args = 0
 25136              		@ link register save eliminated.
 25137 0000 80B4     		push	{r7}
 25138              	.LCFI15:
 25139              		.cfi_def_cfa_offset 4
 25140 0002 83B0     		sub	sp, sp, #12
 25141              	.LCFI16:
 25142              		.cfi_def_cfa_offset 16
 25143 0004 00AF     		add	r7, sp, #0
 25144              		.cfi_offset 7, -4
 25145              	.LCFI17:
 25146              		.cfi_def_cfa_register 7
 25147 0006 7860     		str	r0, [r7, #4]
 25148 0008 0B46     		mov	r3, r1
 25149 000a FB70     		strb	r3, [r7, #3]
 410:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 411:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 412:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 413:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 414:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 25150              		.loc 1 414 0
 25151 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 25152 000e 002B     		cmp	r3, #0
 25153 0010 08D0     		beq	.L24
 415:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 416:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the selected USART by setting the UE bit in the CR1 register */
 417:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR1 |= USART_CR1_UE;
 25154              		.loc 1 417 0
 25155 0012 7B68     		ldr	r3, [r7, #4]
 25156 0014 9B89     		ldrh	r3, [r3, #12]	@ movhi
 25157 0016 9BB2     		uxth	r3, r3
 25158 0018 43F40053 		orr	r3, r3, #8192
 25159 001c 9AB2     		uxth	r2, r3
 25160 001e 7B68     		ldr	r3, [r7, #4]
 25161 0020 9A81     		strh	r2, [r3, #12]	@ movhi
 25162 0022 07E0     		b	.L23
 25163              	.L24:
 418:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 419:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 420:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 421:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the selected USART by clearing the UE bit in the CR1 register */
 422:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 25164              		.loc 1 422 0
 25165 0024 7B68     		ldr	r3, [r7, #4]
 25166 0026 9B89     		ldrh	r3, [r3, #12]	@ movhi
 25167 0028 9BB2     		uxth	r3, r3
 25168 002a 23F40053 		bic	r3, r3, #8192
 25169 002e 9AB2     		uxth	r2, r3
 25170 0030 7B68     		ldr	r3, [r7, #4]
 25171 0032 9A81     		strh	r2, [r3, #12]	@ movhi
 25172              	.L23:
 423:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 424:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 25173              		.loc 1 424 0
 25174 0034 07F10C07 		add	r7, r7, #12
 25175 0038 BD46     		mov	sp, r7
 25176 003a 80BC     		pop	{r7}
 25177 003c 7047     		bx	lr
 25178              		.cfi_endproc
 25179              	.LFE115:
 25181 003e 00BF     		.section	.text.USART_SetPrescaler,"ax",%progbits
 25182              		.align	2
 25183              		.global	USART_SetPrescaler
 25184              		.thumb
 25185              		.thumb_func
 25187              	USART_SetPrescaler:
 25188              	.LFB116:
 425:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 426:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 427:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Sets the system clock prescaler.
 428:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 429:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 430:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_Prescaler: specifies the prescaler clock. 
 431:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   The function is used for IrDA mode with UART4 and UART5.   
 432:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 433:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 434:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
 435:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** { 
 25189              		.loc 1 435 0
 25190              		.cfi_startproc
 25191              		@ args = 0, pretend = 0, frame = 8
 25192              		@ frame_needed = 1, uses_anonymous_args = 0
 25193              		@ link register save eliminated.
 25194 0000 80B4     		push	{r7}
 25195              	.LCFI18:
 25196              		.cfi_def_cfa_offset 4
 25197 0002 83B0     		sub	sp, sp, #12
 25198              	.LCFI19:
 25199              		.cfi_def_cfa_offset 16
 25200 0004 00AF     		add	r7, sp, #0
 25201              		.cfi_offset 7, -4
 25202              	.LCFI20:
 25203              		.cfi_def_cfa_register 7
 25204 0006 7860     		str	r0, [r7, #4]
 25205 0008 0B46     		mov	r3, r1
 25206 000a FB70     		strb	r3, [r7, #3]
 436:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 437:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 438:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 439:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Clear the USART prescaler */
 440:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->GTPR &= USART_GTPR_GT;
 25207              		.loc 1 440 0
 25208 000c 7B68     		ldr	r3, [r7, #4]
 25209 000e 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 25210 0010 9BB2     		uxth	r3, r3
 25211 0012 23F0FF03 		bic	r3, r3, #255
 25212 0016 9AB2     		uxth	r2, r3
 25213 0018 7B68     		ldr	r3, [r7, #4]
 25214 001a 1A83     		strh	r2, [r3, #24]	@ movhi
 441:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Set the USART prescaler */
 442:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->GTPR |= USART_Prescaler;
 25215              		.loc 1 442 0
 25216 001c 7B68     		ldr	r3, [r7, #4]
 25217 001e 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 25218 0020 9AB2     		uxth	r2, r3
 25219 0022 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 25220 0024 9BB2     		uxth	r3, r3
 25221 0026 42EA0303 		orr	r3, r2, r3
 25222 002a 9AB2     		uxth	r2, r3
 25223 002c 7B68     		ldr	r3, [r7, #4]
 25224 002e 1A83     		strh	r2, [r3, #24]	@ movhi
 443:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 25225              		.loc 1 443 0
 25226 0030 07F10C07 		add	r7, r7, #12
 25227 0034 BD46     		mov	sp, r7
 25228 0036 80BC     		pop	{r7}
 25229 0038 7047     		bx	lr
 25230              		.cfi_endproc
 25231              	.LFE116:
 25233 003a 00BF     		.section	.text.USART_OverSampling8Cmd,"ax",%progbits
 25234              		.align	2
 25235              		.global	USART_OverSampling8Cmd
 25236              		.thumb
 25237              		.thumb_func
 25239              	USART_OverSampling8Cmd:
 25240              	.LFB117:
 444:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 445:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 446:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's 8x oversampling mode.
 447:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   This function has to be called before calling USART_Init() function
 448:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         in order to have correct baudrate Divider value.
 449:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 450:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 451:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the USART 8x oversampling mode.
 452:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 453:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 454:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 455:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
 456:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 25241              		.loc 1 456 0
 25242              		.cfi_startproc
 25243              		@ args = 0, pretend = 0, frame = 8
 25244              		@ frame_needed = 1, uses_anonymous_args = 0
 25245              		@ link register save eliminated.
 25246 0000 80B4     		push	{r7}
 25247              	.LCFI21:
 25248              		.cfi_def_cfa_offset 4
 25249 0002 83B0     		sub	sp, sp, #12
 25250              	.LCFI22:
 25251              		.cfi_def_cfa_offset 16
 25252 0004 00AF     		add	r7, sp, #0
 25253              		.cfi_offset 7, -4
 25254              	.LCFI23:
 25255              		.cfi_def_cfa_register 7
 25256 0006 7860     		str	r0, [r7, #4]
 25257 0008 0B46     		mov	r3, r1
 25258 000a FB70     		strb	r3, [r7, #3]
 457:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 458:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 459:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 460:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 461:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 25259              		.loc 1 461 0
 25260 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 25261 000e 002B     		cmp	r3, #0
 25262 0010 0AD0     		beq	.L28
 462:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 463:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
 464:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR1 |= USART_CR1_OVER8;
 25263              		.loc 1 464 0
 25264 0012 7B68     		ldr	r3, [r7, #4]
 25265 0014 9B89     		ldrh	r3, [r3, #12]	@ movhi
 25266 0016 9BB2     		uxth	r3, r3
 25267 0018 6FEA4343 		mvn	r3, r3, lsl #17
 25268 001c 6FEA5343 		mvn	r3, r3, lsr #17
 25269 0020 9AB2     		uxth	r2, r3
 25270 0022 7B68     		ldr	r3, [r7, #4]
 25271 0024 9A81     		strh	r2, [r3, #12]	@ movhi
 25272 0026 09E0     		b	.L27
 25273              	.L28:
 465:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 466:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 467:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 468:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
 469:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
 25274              		.loc 1 469 0
 25275 0028 7B68     		ldr	r3, [r7, #4]
 25276 002a 9B89     		ldrh	r3, [r3, #12]	@ movhi
 25277 002c 9BB2     		uxth	r3, r3
 25278 002e 4FEA4343 		lsl	r3, r3, #17
 25279 0032 4FEA5343 		lsr	r3, r3, #17
 25280 0036 9AB2     		uxth	r2, r3
 25281 0038 7B68     		ldr	r3, [r7, #4]
 25282 003a 9A81     		strh	r2, [r3, #12]	@ movhi
 25283              	.L27:
 470:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 471:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }  
 25284              		.loc 1 471 0
 25285 003c 07F10C07 		add	r7, r7, #12
 25286 0040 BD46     		mov	sp, r7
 25287 0042 80BC     		pop	{r7}
 25288 0044 7047     		bx	lr
 25289              		.cfi_endproc
 25290              	.LFE117:
 25292 0046 00BF     		.section	.text.USART_OneBitMethodCmd,"ax",%progbits
 25293              		.align	2
 25294              		.global	USART_OneBitMethodCmd
 25295              		.thumb
 25296              		.thumb_func
 25298              	USART_OneBitMethodCmd:
 25299              	.LFB118:
 472:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 473:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 474:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's one bit sampling method.
 475:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 476:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 477:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the USART one bit sampling method.
 478:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 479:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 480:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 481:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 482:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 25300              		.loc 1 482 0
 25301              		.cfi_startproc
 25302              		@ args = 0, pretend = 0, frame = 8
 25303              		@ frame_needed = 1, uses_anonymous_args = 0
 25304              		@ link register save eliminated.
 25305 0000 80B4     		push	{r7}
 25306              	.LCFI24:
 25307              		.cfi_def_cfa_offset 4
 25308 0002 83B0     		sub	sp, sp, #12
 25309              	.LCFI25:
 25310              		.cfi_def_cfa_offset 16
 25311 0004 00AF     		add	r7, sp, #0
 25312              		.cfi_offset 7, -4
 25313              	.LCFI26:
 25314              		.cfi_def_cfa_register 7
 25315 0006 7860     		str	r0, [r7, #4]
 25316 0008 0B46     		mov	r3, r1
 25317 000a FB70     		strb	r3, [r7, #3]
 483:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 484:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 485:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 486:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 487:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 25318              		.loc 1 487 0
 25319 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 25320 000e 002B     		cmp	r3, #0
 25321 0010 08D0     		beq	.L31
 488:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 489:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
 490:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_CR3_ONEBIT;
 25322              		.loc 1 490 0
 25323 0012 7B68     		ldr	r3, [r7, #4]
 25324 0014 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 25325 0016 9BB2     		uxth	r3, r3
 25326 0018 43F40063 		orr	r3, r3, #2048
 25327 001c 9AB2     		uxth	r2, r3
 25328 001e 7B68     		ldr	r3, [r7, #4]
 25329 0020 9A82     		strh	r2, [r3, #20]	@ movhi
 25330 0022 07E0     		b	.L30
 25331              	.L31:
 491:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 492:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 493:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 494:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
 495:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
 25332              		.loc 1 495 0
 25333 0024 7B68     		ldr	r3, [r7, #4]
 25334 0026 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 25335 0028 9BB2     		uxth	r3, r3
 25336 002a 23F40063 		bic	r3, r3, #2048
 25337 002e 9AB2     		uxth	r2, r3
 25338 0030 7B68     		ldr	r3, [r7, #4]
 25339 0032 9A82     		strh	r2, [r3, #20]	@ movhi
 25340              	.L30:
 496:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 497:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 25341              		.loc 1 497 0
 25342 0034 07F10C07 		add	r7, r7, #12
 25343 0038 BD46     		mov	sp, r7
 25344 003a 80BC     		pop	{r7}
 25345 003c 7047     		bx	lr
 25346              		.cfi_endproc
 25347              	.LFE118:
 25349 003e 00BF     		.section	.text.USART_SendData,"ax",%progbits
 25350              		.align	2
 25351              		.global	USART_SendData
 25352              		.thumb
 25353              		.thumb_func
 25355              	USART_SendData:
 25356              	.LFB119:
 498:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 499:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 500:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
 501:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 502:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 503:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group2 Data transfers functions
 504:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   Data transfers functions 
 505:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
 506:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
 507:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
 508:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                             Data transfers functions
 509:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
 510:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 511:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   This subsection provides a set of functions allowing to manage the USART data 
 512:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   transfers.
 513:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 514:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   During an USART reception, data shifts in least significant bit first through 
 515:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   the RX pin. In this mode, the USART_DR register consists of a buffer (RDR) 
 516:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   between the internal bus and the received shift register.
 517:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 518:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   When a transmission is taking place, a write instruction to the USART_DR register 
 519:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   stores the data in the TDR register and which is copied in the shift register 
 520:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   at the end of the current transmission.
 521:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 522:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   The read access of the USART_DR register can be done using the USART_ReceiveData()
 523:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   function and returns the RDR buffered value. Whereas a write access to the USART_DR 
 524:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   can be done using USART_SendData() function and stores the written data into 
 525:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   TDR buffer.
 526:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 527:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
 528:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 529:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 530:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 531:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 532:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Transmits single data through the USARTx peripheral.
 533:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 534:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 535:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  Data: the data to transmit.
 536:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 537:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 538:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
 539:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 25357              		.loc 1 539 0
 25358              		.cfi_startproc
 25359              		@ args = 0, pretend = 0, frame = 8
 25360              		@ frame_needed = 1, uses_anonymous_args = 0
 25361              		@ link register save eliminated.
 25362 0000 80B4     		push	{r7}
 25363              	.LCFI27:
 25364              		.cfi_def_cfa_offset 4
 25365 0002 83B0     		sub	sp, sp, #12
 25366              	.LCFI28:
 25367              		.cfi_def_cfa_offset 16
 25368 0004 00AF     		add	r7, sp, #0
 25369              		.cfi_offset 7, -4
 25370              	.LCFI29:
 25371              		.cfi_def_cfa_register 7
 25372 0006 7860     		str	r0, [r7, #4]
 25373 0008 0B46     		mov	r3, r1
 25374 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 540:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 541:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 542:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_DATA(Data)); 
 543:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
 544:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Transmit Data */
 545:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->DR = (Data & (uint16_t)0x01FF);
 25375              		.loc 1 545 0
 25376 000c 7B88     		ldrh	r3, [r7, #2]	@ movhi
 25377 000e 4FEAC353 		lsl	r3, r3, #23
 25378 0012 4FEAD353 		lsr	r3, r3, #23
 25379 0016 9AB2     		uxth	r2, r3
 25380 0018 7B68     		ldr	r3, [r7, #4]
 25381 001a 9A80     		strh	r2, [r3, #4]	@ movhi
 546:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 25382              		.loc 1 546 0
 25383 001c 07F10C07 		add	r7, r7, #12
 25384 0020 BD46     		mov	sp, r7
 25385 0022 80BC     		pop	{r7}
 25386 0024 7047     		bx	lr
 25387              		.cfi_endproc
 25388              	.LFE119:
 25390 0026 00BF     		.section	.text.USART_ReceiveData,"ax",%progbits
 25391              		.align	2
 25392              		.global	USART_ReceiveData
 25393              		.thumb
 25394              		.thumb_func
 25396              	USART_ReceiveData:
 25397              	.LFB120:
 547:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 548:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 549:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Returns the most recent received data by the USARTx peripheral.
 550:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 551:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 552:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval The received data.
 553:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 554:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
 555:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 25398              		.loc 1 555 0
 25399              		.cfi_startproc
 25400              		@ args = 0, pretend = 0, frame = 8
 25401              		@ frame_needed = 1, uses_anonymous_args = 0
 25402              		@ link register save eliminated.
 25403 0000 80B4     		push	{r7}
 25404              	.LCFI30:
 25405              		.cfi_def_cfa_offset 4
 25406 0002 83B0     		sub	sp, sp, #12
 25407              	.LCFI31:
 25408              		.cfi_def_cfa_offset 16
 25409 0004 00AF     		add	r7, sp, #0
 25410              		.cfi_offset 7, -4
 25411              	.LCFI32:
 25412              		.cfi_def_cfa_register 7
 25413 0006 7860     		str	r0, [r7, #4]
 556:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 557:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 558:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 559:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Receive Data */
 560:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 25414              		.loc 1 560 0
 25415 0008 7B68     		ldr	r3, [r7, #4]
 25416 000a 9B88     		ldrh	r3, [r3, #4]	@ movhi
 25417 000c 9BB2     		uxth	r3, r3
 25418 000e 4FEAC353 		lsl	r3, r3, #23
 25419 0012 4FEAD353 		lsr	r3, r3, #23
 25420 0016 9BB2     		uxth	r3, r3
 561:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 25421              		.loc 1 561 0
 25422 0018 1846     		mov	r0, r3
 25423 001a 07F10C07 		add	r7, r7, #12
 25424 001e BD46     		mov	sp, r7
 25425 0020 80BC     		pop	{r7}
 25426 0022 7047     		bx	lr
 25427              		.cfi_endproc
 25428              	.LFE120:
 25430              		.section	.text.USART_SetAddress,"ax",%progbits
 25431              		.align	2
 25432              		.global	USART_SetAddress
 25433              		.thumb
 25434              		.thumb_func
 25436              	USART_SetAddress:
 25437              	.LFB121:
 562:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 563:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 564:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
 565:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 566:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 567:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group3 MultiProcessor Communication functions
 568:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   Multi-Processor Communication functions 
 569:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
 570:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
 571:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
 572:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                     Multi-Processor Communication functions
 573:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
 574:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 575:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   This subsection provides a set of functions allowing to manage the USART 
 576:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   multiprocessor communication.
 577:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 578:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   For instance one of the USARTs can be the master, its TX output is connected to 
 579:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   the RX input of the other USART. The others are slaves, their respective TX outputs 
 580:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   are logically ANDed together and connected to the RX input of the master.
 581:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 582:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART multiprocessor communication is possible through the following procedure:
 583:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. Program the Baud rate, Word length = 9 bits, Stop bits, Parity, Mode transmitter 
 584:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         or Mode receiver and hardware flow control values using the USART_Init()
 585:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         function.
 586:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. Configures the USART address using the USART_SetAddress() function.
 587:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      3. Configures the wake up method (USART_WakeUp_IdleLine or USART_WakeUp_AddressMark)
 588:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         using USART_WakeUpConfig() function only for the slaves.
 589:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      4. Enable the USART using the USART_Cmd() function.
 590:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      5. Enter the USART slaves in mute mode using USART_ReceiverWakeUpCmd() function.
 591:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 592:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   The USART Slave exit from mute mode when receive the wake up condition.
 593:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 594:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
 595:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 596:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 597:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 598:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 599:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Sets the address of the USART node.
 600:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 601:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 602:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_Address: Indicates the address of the USART node.
 603:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 604:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 605:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
 606:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 25438              		.loc 1 606 0
 25439              		.cfi_startproc
 25440              		@ args = 0, pretend = 0, frame = 8
 25441              		@ frame_needed = 1, uses_anonymous_args = 0
 25442              		@ link register save eliminated.
 25443 0000 80B4     		push	{r7}
 25444              	.LCFI33:
 25445              		.cfi_def_cfa_offset 4
 25446 0002 83B0     		sub	sp, sp, #12
 25447              	.LCFI34:
 25448              		.cfi_def_cfa_offset 16
 25449 0004 00AF     		add	r7, sp, #0
 25450              		.cfi_offset 7, -4
 25451              	.LCFI35:
 25452              		.cfi_def_cfa_register 7
 25453 0006 7860     		str	r0, [r7, #4]
 25454 0008 0B46     		mov	r3, r1
 25455 000a FB70     		strb	r3, [r7, #3]
 607:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 608:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 609:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ADDRESS(USART_Address)); 
 610:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
 611:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Clear the USART address */
 612:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_ADD);
 25456              		.loc 1 612 0
 25457 000c 7B68     		ldr	r3, [r7, #4]
 25458 000e 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 25459 0010 9BB2     		uxth	r3, r3
 25460 0012 23F00F03 		bic	r3, r3, #15
 25461 0016 9AB2     		uxth	r2, r3
 25462 0018 7B68     		ldr	r3, [r7, #4]
 25463 001a 1A82     		strh	r2, [r3, #16]	@ movhi
 613:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Set the USART address node */
 614:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR2 |= USART_Address;
 25464              		.loc 1 614 0
 25465 001c 7B68     		ldr	r3, [r7, #4]
 25466 001e 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 25467 0020 9AB2     		uxth	r2, r3
 25468 0022 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 25469 0024 9BB2     		uxth	r3, r3
 25470 0026 42EA0303 		orr	r3, r2, r3
 25471 002a 9AB2     		uxth	r2, r3
 25472 002c 7B68     		ldr	r3, [r7, #4]
 25473 002e 1A82     		strh	r2, [r3, #16]	@ movhi
 615:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 25474              		.loc 1 615 0
 25475 0030 07F10C07 		add	r7, r7, #12
 25476 0034 BD46     		mov	sp, r7
 25477 0036 80BC     		pop	{r7}
 25478 0038 7047     		bx	lr
 25479              		.cfi_endproc
 25480              	.LFE121:
 25482 003a 00BF     		.section	.text.USART_ReceiverWakeUpCmd,"ax",%progbits
 25483              		.align	2
 25484              		.global	USART_ReceiverWakeUpCmd
 25485              		.thumb
 25486              		.thumb_func
 25488              	USART_ReceiverWakeUpCmd:
 25489              	.LFB122:
 616:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 617:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 618:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Determines if the USART is in mute mode or not.
 619:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 620:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 621:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the USART mute mode.
 622:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 623:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 624:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 625:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 626:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 25490              		.loc 1 626 0
 25491              		.cfi_startproc
 25492              		@ args = 0, pretend = 0, frame = 8
 25493              		@ frame_needed = 1, uses_anonymous_args = 0
 25494              		@ link register save eliminated.
 25495 0000 80B4     		push	{r7}
 25496              	.LCFI36:
 25497              		.cfi_def_cfa_offset 4
 25498 0002 83B0     		sub	sp, sp, #12
 25499              	.LCFI37:
 25500              		.cfi_def_cfa_offset 16
 25501 0004 00AF     		add	r7, sp, #0
 25502              		.cfi_offset 7, -4
 25503              	.LCFI38:
 25504              		.cfi_def_cfa_register 7
 25505 0006 7860     		str	r0, [r7, #4]
 25506 0008 0B46     		mov	r3, r1
 25507 000a FB70     		strb	r3, [r7, #3]
 627:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 628:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 629:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState)); 
 630:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 631:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 25508              		.loc 1 631 0
 25509 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 25510 000e 002B     		cmp	r3, #0
 25511 0010 08D0     		beq	.L37
 632:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 633:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
 634:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR1 |= USART_CR1_RWU;
 25512              		.loc 1 634 0
 25513 0012 7B68     		ldr	r3, [r7, #4]
 25514 0014 9B89     		ldrh	r3, [r3, #12]	@ movhi
 25515 0016 9BB2     		uxth	r3, r3
 25516 0018 43F00203 		orr	r3, r3, #2
 25517 001c 9AB2     		uxth	r2, r3
 25518 001e 7B68     		ldr	r3, [r7, #4]
 25519 0020 9A81     		strh	r2, [r3, #12]	@ movhi
 25520 0022 07E0     		b	.L36
 25521              	.L37:
 635:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 636:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 637:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 638:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
 639:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
 25522              		.loc 1 639 0
 25523 0024 7B68     		ldr	r3, [r7, #4]
 25524 0026 9B89     		ldrh	r3, [r3, #12]	@ movhi
 25525 0028 9BB2     		uxth	r3, r3
 25526 002a 23F00203 		bic	r3, r3, #2
 25527 002e 9AB2     		uxth	r2, r3
 25528 0030 7B68     		ldr	r3, [r7, #4]
 25529 0032 9A81     		strh	r2, [r3, #12]	@ movhi
 25530              	.L36:
 640:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 641:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 25531              		.loc 1 641 0
 25532 0034 07F10C07 		add	r7, r7, #12
 25533 0038 BD46     		mov	sp, r7
 25534 003a 80BC     		pop	{r7}
 25535 003c 7047     		bx	lr
 25536              		.cfi_endproc
 25537              	.LFE122:
 25539 003e 00BF     		.section	.text.USART_WakeUpConfig,"ax",%progbits
 25540              		.align	2
 25541              		.global	USART_WakeUpConfig
 25542              		.thumb
 25543              		.thumb_func
 25545              	USART_WakeUpConfig:
 25546              	.LFB123:
 642:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 643:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Selects the USART WakeUp method.
 644:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 645:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 646:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_WakeUp: specifies the USART wakeup method.
 647:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
 648:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
 649:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_WakeUp_AddressMark: WakeUp by an address mark
 650:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 651:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 652:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
 653:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 25547              		.loc 1 653 0
 25548              		.cfi_startproc
 25549              		@ args = 0, pretend = 0, frame = 8
 25550              		@ frame_needed = 1, uses_anonymous_args = 0
 25551              		@ link register save eliminated.
 25552 0000 80B4     		push	{r7}
 25553              	.LCFI39:
 25554              		.cfi_def_cfa_offset 4
 25555 0002 83B0     		sub	sp, sp, #12
 25556              	.LCFI40:
 25557              		.cfi_def_cfa_offset 16
 25558 0004 00AF     		add	r7, sp, #0
 25559              		.cfi_offset 7, -4
 25560              	.LCFI41:
 25561              		.cfi_def_cfa_register 7
 25562 0006 7860     		str	r0, [r7, #4]
 25563 0008 0B46     		mov	r3, r1
 25564 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 654:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 655:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 656:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_WAKEUP(USART_WakeUp));
 657:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 658:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_WAKE);
 25565              		.loc 1 658 0
 25566 000c 7B68     		ldr	r3, [r7, #4]
 25567 000e 9B89     		ldrh	r3, [r3, #12]	@ movhi
 25568 0010 9BB2     		uxth	r3, r3
 25569 0012 23F40063 		bic	r3, r3, #2048
 25570 0016 9AB2     		uxth	r2, r3
 25571 0018 7B68     		ldr	r3, [r7, #4]
 25572 001a 9A81     		strh	r2, [r3, #12]	@ movhi
 659:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR1 |= USART_WakeUp;
 25573              		.loc 1 659 0
 25574 001c 7B68     		ldr	r3, [r7, #4]
 25575 001e 9B89     		ldrh	r3, [r3, #12]	@ movhi
 25576 0020 9AB2     		uxth	r2, r3
 25577 0022 7B88     		ldrh	r3, [r7, #2]	@ movhi
 25578 0024 42EA0303 		orr	r3, r2, r3
 25579 0028 9AB2     		uxth	r2, r3
 25580 002a 7B68     		ldr	r3, [r7, #4]
 25581 002c 9A81     		strh	r2, [r3, #12]	@ movhi
 660:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 25582              		.loc 1 660 0
 25583 002e 07F10C07 		add	r7, r7, #12
 25584 0032 BD46     		mov	sp, r7
 25585 0034 80BC     		pop	{r7}
 25586 0036 7047     		bx	lr
 25587              		.cfi_endproc
 25588              	.LFE123:
 25590              		.section	.text.USART_LINBreakDetectLengthConfig,"ax",%progbits
 25591              		.align	2
 25592              		.global	USART_LINBreakDetectLengthConfig
 25593              		.thumb
 25594              		.thumb_func
 25596              	USART_LINBreakDetectLengthConfig:
 25597              	.LFB124:
 661:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 662:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 663:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
 664:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 665:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 666:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group4 LIN mode functions
 667:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   LIN mode functions 
 668:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
 669:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
 670:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
 671:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                                 LIN mode functions
 672:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
 673:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 674:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   This subsection provides a set of functions allowing to manage the USART LIN 
 675:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Mode communication.
 676:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 677:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   In LIN mode, 8-bit data format with 1 stop bit is required in accordance with 
 678:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   the LIN standard.
 679:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 680:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Only this LIN Feature is supported by the USART IP:
 681:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     - LIN Master Synchronous Break send capability and LIN slave break detection
 682:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       capability :  13-bit break generation and 10/11 bit break detection
 683:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 684:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 685:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART LIN Master transmitter communication is possible through the following procedure:
 686:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. Program the Baud rate, Word length = 8bits, Stop bits = 1bit, Parity, 
 687:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         Mode transmitter or Mode receiver and hardware flow control values using 
 688:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         the USART_Init() function.
 689:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. Enable the USART using the USART_Cmd() function.
 690:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      3. Enable the LIN mode using the USART_LINCmd() function.
 691:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      4. Send the break character using USART_SendBreak() function.
 692:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 693:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART LIN Master receiver communication is possible through the following procedure:
 694:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. Program the Baud rate, Word length = 8bits, Stop bits = 1bit, Parity, 
 695:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         Mode transmitter or Mode receiver and hardware flow control values using 
 696:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         the USART_Init() function.
 697:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. Enable the USART using the USART_Cmd() function.
 698:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      3. Configures the break detection length using the USART_LINBreakDetectLengthConfig()
 699:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         function.
 700:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      4. Enable the LIN mode using the USART_LINCmd() function.
 701:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 702:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 703:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note In LIN mode, the following bits must be kept cleared:
 704:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - CLKEN in the USART_CR2 register,
 705:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - STOP[1:0], SCEN, HDSEL and IREN in the USART_CR3 register.
 706:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 707:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
 708:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 709:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 710:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 711:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 712:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Sets the USART LIN Break detection length.
 713:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 714:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 715:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_LINBreakDetectLength: specifies the LIN break detection length.
 716:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
 717:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_LINBreakDetectLength_10b: 10-bit break detection
 718:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_LINBreakDetectLength_11b: 11-bit break detection
 719:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 720:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 721:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
 722:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 25598              		.loc 1 722 0
 25599              		.cfi_startproc
 25600              		@ args = 0, pretend = 0, frame = 8
 25601              		@ frame_needed = 1, uses_anonymous_args = 0
 25602              		@ link register save eliminated.
 25603 0000 80B4     		push	{r7}
 25604              	.LCFI42:
 25605              		.cfi_def_cfa_offset 4
 25606 0002 83B0     		sub	sp, sp, #12
 25607              	.LCFI43:
 25608              		.cfi_def_cfa_offset 16
 25609 0004 00AF     		add	r7, sp, #0
 25610              		.cfi_offset 7, -4
 25611              	.LCFI44:
 25612              		.cfi_def_cfa_register 7
 25613 0006 7860     		str	r0, [r7, #4]
 25614 0008 0B46     		mov	r3, r1
 25615 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 723:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 724:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 725:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
 726:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 727:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LBDL);
 25616              		.loc 1 727 0
 25617 000c 7B68     		ldr	r3, [r7, #4]
 25618 000e 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 25619 0010 9BB2     		uxth	r3, r3
 25620 0012 23F02003 		bic	r3, r3, #32
 25621 0016 9AB2     		uxth	r2, r3
 25622 0018 7B68     		ldr	r3, [r7, #4]
 25623 001a 1A82     		strh	r2, [r3, #16]	@ movhi
 728:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR2 |= USART_LINBreakDetectLength;  
 25624              		.loc 1 728 0
 25625 001c 7B68     		ldr	r3, [r7, #4]
 25626 001e 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 25627 0020 9AB2     		uxth	r2, r3
 25628 0022 7B88     		ldrh	r3, [r7, #2]	@ movhi
 25629 0024 42EA0303 		orr	r3, r2, r3
 25630 0028 9AB2     		uxth	r2, r3
 25631 002a 7B68     		ldr	r3, [r7, #4]
 25632 002c 1A82     		strh	r2, [r3, #16]	@ movhi
 729:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 25633              		.loc 1 729 0
 25634 002e 07F10C07 		add	r7, r7, #12
 25635 0032 BD46     		mov	sp, r7
 25636 0034 80BC     		pop	{r7}
 25637 0036 7047     		bx	lr
 25638              		.cfi_endproc
 25639              	.LFE124:
 25641              		.section	.text.USART_LINCmd,"ax",%progbits
 25642              		.align	2
 25643              		.global	USART_LINCmd
 25644              		.thumb
 25645              		.thumb_func
 25647              	USART_LINCmd:
 25648              	.LFB125:
 730:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 731:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 732:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's LIN mode.
 733:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 734:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 735:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the USART LIN mode.
 736:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 737:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 738:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 739:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 740:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 25649              		.loc 1 740 0
 25650              		.cfi_startproc
 25651              		@ args = 0, pretend = 0, frame = 8
 25652              		@ frame_needed = 1, uses_anonymous_args = 0
 25653              		@ link register save eliminated.
 25654 0000 80B4     		push	{r7}
 25655              	.LCFI45:
 25656              		.cfi_def_cfa_offset 4
 25657 0002 83B0     		sub	sp, sp, #12
 25658              	.LCFI46:
 25659              		.cfi_def_cfa_offset 16
 25660 0004 00AF     		add	r7, sp, #0
 25661              		.cfi_offset 7, -4
 25662              	.LCFI47:
 25663              		.cfi_def_cfa_register 7
 25664 0006 7860     		str	r0, [r7, #4]
 25665 0008 0B46     		mov	r3, r1
 25666 000a FB70     		strb	r3, [r7, #3]
 741:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 742:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 743:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 744:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 745:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 25667              		.loc 1 745 0
 25668 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 25669 000e 002B     		cmp	r3, #0
 25670 0010 08D0     		beq	.L42
 746:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 747:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
 748:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR2 |= USART_CR2_LINEN;
 25671              		.loc 1 748 0
 25672 0012 7B68     		ldr	r3, [r7, #4]
 25673 0014 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 25674 0016 9BB2     		uxth	r3, r3
 25675 0018 43F48043 		orr	r3, r3, #16384
 25676 001c 9AB2     		uxth	r2, r3
 25677 001e 7B68     		ldr	r3, [r7, #4]
 25678 0020 1A82     		strh	r2, [r3, #16]	@ movhi
 25679 0022 07E0     		b	.L41
 25680              	.L42:
 749:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 750:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 751:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 752:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
 753:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
 25681              		.loc 1 753 0
 25682 0024 7B68     		ldr	r3, [r7, #4]
 25683 0026 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 25684 0028 9BB2     		uxth	r3, r3
 25685 002a 23F48043 		bic	r3, r3, #16384
 25686 002e 9AB2     		uxth	r2, r3
 25687 0030 7B68     		ldr	r3, [r7, #4]
 25688 0032 1A82     		strh	r2, [r3, #16]	@ movhi
 25689              	.L41:
 754:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 755:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 25690              		.loc 1 755 0
 25691 0034 07F10C07 		add	r7, r7, #12
 25692 0038 BD46     		mov	sp, r7
 25693 003a 80BC     		pop	{r7}
 25694 003c 7047     		bx	lr
 25695              		.cfi_endproc
 25696              	.LFE125:
 25698 003e 00BF     		.section	.text.USART_SendBreak,"ax",%progbits
 25699              		.align	2
 25700              		.global	USART_SendBreak
 25701              		.thumb
 25702              		.thumb_func
 25704              	USART_SendBreak:
 25705              	.LFB126:
 756:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 757:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 758:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Transmits break characters.
 759:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 760:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 761:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 762:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 763:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_SendBreak(USART_TypeDef* USARTx)
 764:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 25706              		.loc 1 764 0
 25707              		.cfi_startproc
 25708              		@ args = 0, pretend = 0, frame = 8
 25709              		@ frame_needed = 1, uses_anonymous_args = 0
 25710              		@ link register save eliminated.
 25711 0000 80B4     		push	{r7}
 25712              	.LCFI48:
 25713              		.cfi_def_cfa_offset 4
 25714 0002 83B0     		sub	sp, sp, #12
 25715              	.LCFI49:
 25716              		.cfi_def_cfa_offset 16
 25717 0004 00AF     		add	r7, sp, #0
 25718              		.cfi_offset 7, -4
 25719              	.LCFI50:
 25720              		.cfi_def_cfa_register 7
 25721 0006 7860     		str	r0, [r7, #4]
 765:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 766:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 767:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 768:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Send break characters */
 769:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR1 |= USART_CR1_SBK;
 25722              		.loc 1 769 0
 25723 0008 7B68     		ldr	r3, [r7, #4]
 25724 000a 9B89     		ldrh	r3, [r3, #12]	@ movhi
 25725 000c 9BB2     		uxth	r3, r3
 25726 000e 43F00103 		orr	r3, r3, #1
 25727 0012 9AB2     		uxth	r2, r3
 25728 0014 7B68     		ldr	r3, [r7, #4]
 25729 0016 9A81     		strh	r2, [r3, #12]	@ movhi
 770:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 25730              		.loc 1 770 0
 25731 0018 07F10C07 		add	r7, r7, #12
 25732 001c BD46     		mov	sp, r7
 25733 001e 80BC     		pop	{r7}
 25734 0020 7047     		bx	lr
 25735              		.cfi_endproc
 25736              	.LFE126:
 25738 0022 00BF     		.section	.text.USART_HalfDuplexCmd,"ax",%progbits
 25739              		.align	2
 25740              		.global	USART_HalfDuplexCmd
 25741              		.thumb
 25742              		.thumb_func
 25744              	USART_HalfDuplexCmd:
 25745              	.LFB127:
 771:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 772:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 773:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
 774:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 775:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 776:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group5 Halfduplex mode function
 777:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   Half-duplex mode function 
 778:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
 779:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
 780:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
 781:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                          Half-duplex mode function
 782:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
 783:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 784:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   This subsection provides a set of functions allowing to manage the USART 
 785:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Half-duplex communication.
 786:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 787:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   The USART can be configured to follow a single-wire half-duplex protocol where 
 788:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   the TX and RX lines are internally connected.
 789:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 790:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART Half duplex communication is possible through the following procedure:
 791:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. Program the Baud rate, Word length, Stop bits, Parity, Mode transmitter 
 792:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         or Mode receiver and hardware flow control values using the USART_Init()
 793:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         function.
 794:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. Configures the USART address using the USART_SetAddress() function.
 795:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      3. Enable the USART using the USART_Cmd() function.
 796:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      4. Enable the half duplex mode using USART_HalfDuplexCmd() function.
 797:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 798:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 799:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note The RX pin is no longer used
 800:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note In Half-duplex mode the following bits must be kept cleared:
 801:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - LINEN and CLKEN bits in the USART_CR2 register.
 802:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - SCEN and IREN bits in the USART_CR3 register.
 803:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 804:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
 805:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 806:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 807:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 808:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 809:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's Half Duplex communication.
 810:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 811:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 812:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the USART Communication.
 813:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 814:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 815:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 816:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 817:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 25746              		.loc 1 817 0
 25747              		.cfi_startproc
 25748              		@ args = 0, pretend = 0, frame = 8
 25749              		@ frame_needed = 1, uses_anonymous_args = 0
 25750              		@ link register save eliminated.
 25751 0000 80B4     		push	{r7}
 25752              	.LCFI51:
 25753              		.cfi_def_cfa_offset 4
 25754 0002 83B0     		sub	sp, sp, #12
 25755              	.LCFI52:
 25756              		.cfi_def_cfa_offset 16
 25757 0004 00AF     		add	r7, sp, #0
 25758              		.cfi_offset 7, -4
 25759              	.LCFI53:
 25760              		.cfi_def_cfa_register 7
 25761 0006 7860     		str	r0, [r7, #4]
 25762 0008 0B46     		mov	r3, r1
 25763 000a FB70     		strb	r3, [r7, #3]
 818:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 819:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 820:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 821:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 822:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 25764              		.loc 1 822 0
 25765 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 25766 000e 002B     		cmp	r3, #0
 25767 0010 08D0     		beq	.L46
 823:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 824:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
 825:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_CR3_HDSEL;
 25768              		.loc 1 825 0
 25769 0012 7B68     		ldr	r3, [r7, #4]
 25770 0014 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 25771 0016 9BB2     		uxth	r3, r3
 25772 0018 43F00803 		orr	r3, r3, #8
 25773 001c 9AB2     		uxth	r2, r3
 25774 001e 7B68     		ldr	r3, [r7, #4]
 25775 0020 9A82     		strh	r2, [r3, #20]	@ movhi
 25776 0022 07E0     		b	.L45
 25777              	.L46:
 826:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 827:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 828:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 829:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
 830:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
 25778              		.loc 1 830 0
 25779 0024 7B68     		ldr	r3, [r7, #4]
 25780 0026 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 25781 0028 9BB2     		uxth	r3, r3
 25782 002a 23F00803 		bic	r3, r3, #8
 25783 002e 9AB2     		uxth	r2, r3
 25784 0030 7B68     		ldr	r3, [r7, #4]
 25785 0032 9A82     		strh	r2, [r3, #20]	@ movhi
 25786              	.L45:
 831:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 832:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 25787              		.loc 1 832 0
 25788 0034 07F10C07 		add	r7, r7, #12
 25789 0038 BD46     		mov	sp, r7
 25790 003a 80BC     		pop	{r7}
 25791 003c 7047     		bx	lr
 25792              		.cfi_endproc
 25793              	.LFE127:
 25795 003e 00BF     		.section	.text.USART_SetGuardTime,"ax",%progbits
 25796              		.align	2
 25797              		.global	USART_SetGuardTime
 25798              		.thumb
 25799              		.thumb_func
 25801              	USART_SetGuardTime:
 25802              	.LFB128:
 833:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 834:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 835:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
 836:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 837:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 838:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 839:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group6 Smartcard mode functions
 840:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   Smartcard mode functions 
 841:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
 842:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
 843:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
 844:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                                Smartcard mode functions
 845:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
 846:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 847:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   This subsection provides a set of functions allowing to manage the USART 
 848:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Smartcard communication.
 849:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 850:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   The Smartcard interface is designed to support asynchronous protocol Smartcards as
 851:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   defined in the ISO 7816-3 standard.
 852:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 853:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   The USART can provide a clock to the smartcard through the SCLK output.
 854:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   In smartcard mode, SCLK is not associated to the communication but is simply derived 
 855:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   from the internal peripheral input clock through a 5-bit prescaler.
 856:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 857:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Smartcard communication is possible through the following procedure:
 858:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. Configures the Smartcard Prescaler using the USART_SetPrescaler() function.
 859:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. Configures the Smartcard Guard Time using the USART_SetGuardTime() function.
 860:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      3. Program the USART clock using the USART_ClockInit() function as following:
 861:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - USART Clock enabled
 862:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - USART CPOL Low
 863:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - USART CPHA on first edge
 864:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - USART Last Bit Clock Enabled
 865:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      4. Program the Smartcard interface using the USART_Init() function as following:
 866:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Word Length = 9 Bits
 867:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - 1.5 Stop Bit
 868:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Even parity
 869:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - BaudRate = 12096 baud
 870:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Hardware flow control disabled (RTS and CTS signals)
 871:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Tx and Rx enabled
 872:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      5. Optionally you can enable the parity error interrupt using the USART_ITConfig()
 873:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         function
 874:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      6. Enable the USART using the USART_Cmd() function.
 875:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      7. Enable the Smartcard NACK using the USART_SmartCardNACKCmd() function.
 876:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      8. Enable the Smartcard interface using the USART_SmartCardCmd() function.
 877:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 878:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Please refer to the ISO 7816-3 specification for more details.
 879:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 880:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 881:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note It is also possible to choose 0.5 stop bit for receiving but it is recommended 
 882:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       to use 1.5 stop bits for both transmitting and receiving to avoid switching 
 883:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       between the two configurations.
 884:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note In smartcard mode, the following bits must be kept cleared:
 885:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - LINEN bit in the USART_CR2 register.
 886:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - HDSEL and IREN bits in the USART_CR3 register.
 887:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note Smartcard mode is available on USART peripherals only (not available on UART4 
 888:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       and UART5 peripherals).
 889:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 890:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
 891:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 892:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 893:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 894:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 895:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Sets the specified USART guard time.
 896:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3 or 6 to select the USART or 
 897:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 898:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_GuardTime: specifies the guard time.   
 899:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 900:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 901:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
 902:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {    
 25803              		.loc 1 902 0
 25804              		.cfi_startproc
 25805              		@ args = 0, pretend = 0, frame = 8
 25806              		@ frame_needed = 1, uses_anonymous_args = 0
 25807              		@ link register save eliminated.
 25808 0000 80B4     		push	{r7}
 25809              	.LCFI54:
 25810              		.cfi_def_cfa_offset 4
 25811 0002 83B0     		sub	sp, sp, #12
 25812              	.LCFI55:
 25813              		.cfi_def_cfa_offset 16
 25814 0004 00AF     		add	r7, sp, #0
 25815              		.cfi_offset 7, -4
 25816              	.LCFI56:
 25817              		.cfi_def_cfa_register 7
 25818 0006 7860     		str	r0, [r7, #4]
 25819 0008 0B46     		mov	r3, r1
 25820 000a FB70     		strb	r3, [r7, #3]
 903:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 904:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_1236_PERIPH(USARTx));
 905:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 906:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Clear the USART Guard time */
 907:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->GTPR &= USART_GTPR_PSC;
 25821              		.loc 1 907 0
 25822 000c 7B68     		ldr	r3, [r7, #4]
 25823 000e 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 25824 0010 9BB2     		uxth	r3, r3
 25825 0012 03F0FF03 		and	r3, r3, #255
 25826 0016 9AB2     		uxth	r2, r3
 25827 0018 7B68     		ldr	r3, [r7, #4]
 25828 001a 1A83     		strh	r2, [r3, #24]	@ movhi
 908:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Set the USART guard time */
 909:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 25829              		.loc 1 909 0
 25830 001c 7B68     		ldr	r3, [r7, #4]
 25831 001e 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 25832 0020 9AB2     		uxth	r2, r3
 25833 0022 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 25834 0024 9BB2     		uxth	r3, r3
 25835 0026 4FEA0323 		lsl	r3, r3, #8
 25836 002a 9BB2     		uxth	r3, r3
 25837 002c 42EA0303 		orr	r3, r2, r3
 25838 0030 9AB2     		uxth	r2, r3
 25839 0032 7B68     		ldr	r3, [r7, #4]
 25840 0034 1A83     		strh	r2, [r3, #24]	@ movhi
 910:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 25841              		.loc 1 910 0
 25842 0036 07F10C07 		add	r7, r7, #12
 25843 003a BD46     		mov	sp, r7
 25844 003c 80BC     		pop	{r7}
 25845 003e 7047     		bx	lr
 25846              		.cfi_endproc
 25847              	.LFE128:
 25849              		.section	.text.USART_SmartCardCmd,"ax",%progbits
 25850              		.align	2
 25851              		.global	USART_SmartCardCmd
 25852              		.thumb
 25853              		.thumb_func
 25855              	USART_SmartCardCmd:
 25856              	.LFB129:
 911:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 912:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 913:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's Smart Card mode.
 914:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3 or 6 to select the USART or 
 915:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 916:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the Smart Card mode.
 917:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.      
 918:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 919:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 920:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 921:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 25857              		.loc 1 921 0
 25858              		.cfi_startproc
 25859              		@ args = 0, pretend = 0, frame = 8
 25860              		@ frame_needed = 1, uses_anonymous_args = 0
 25861              		@ link register save eliminated.
 25862 0000 80B4     		push	{r7}
 25863              	.LCFI57:
 25864              		.cfi_def_cfa_offset 4
 25865 0002 83B0     		sub	sp, sp, #12
 25866              	.LCFI58:
 25867              		.cfi_def_cfa_offset 16
 25868 0004 00AF     		add	r7, sp, #0
 25869              		.cfi_offset 7, -4
 25870              	.LCFI59:
 25871              		.cfi_def_cfa_register 7
 25872 0006 7860     		str	r0, [r7, #4]
 25873 0008 0B46     		mov	r3, r1
 25874 000a FB70     		strb	r3, [r7, #3]
 922:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 923:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_1236_PERIPH(USARTx));
 924:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 925:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 25875              		.loc 1 925 0
 25876 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 25877 000e 002B     		cmp	r3, #0
 25878 0010 08D0     		beq	.L50
 926:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 927:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the SC mode by setting the SCEN bit in the CR3 register */
 928:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_CR3_SCEN;
 25879              		.loc 1 928 0
 25880 0012 7B68     		ldr	r3, [r7, #4]
 25881 0014 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 25882 0016 9BB2     		uxth	r3, r3
 25883 0018 43F02003 		orr	r3, r3, #32
 25884 001c 9AB2     		uxth	r2, r3
 25885 001e 7B68     		ldr	r3, [r7, #4]
 25886 0020 9A82     		strh	r2, [r3, #20]	@ movhi
 25887 0022 07E0     		b	.L49
 25888              	.L50:
 929:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 930:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 931:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 932:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
 933:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
 25889              		.loc 1 933 0
 25890 0024 7B68     		ldr	r3, [r7, #4]
 25891 0026 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 25892 0028 9BB2     		uxth	r3, r3
 25893 002a 23F02003 		bic	r3, r3, #32
 25894 002e 9AB2     		uxth	r2, r3
 25895 0030 7B68     		ldr	r3, [r7, #4]
 25896 0032 9A82     		strh	r2, [r3, #20]	@ movhi
 25897              	.L49:
 934:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 935:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 25898              		.loc 1 935 0
 25899 0034 07F10C07 		add	r7, r7, #12
 25900 0038 BD46     		mov	sp, r7
 25901 003a 80BC     		pop	{r7}
 25902 003c 7047     		bx	lr
 25903              		.cfi_endproc
 25904              	.LFE129:
 25906 003e 00BF     		.section	.text.USART_SmartCardNACKCmd,"ax",%progbits
 25907              		.align	2
 25908              		.global	USART_SmartCardNACKCmd
 25909              		.thumb
 25910              		.thumb_func
 25912              	USART_SmartCardNACKCmd:
 25913              	.LFB130:
 936:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 937:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 938:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables NACK transmission.
 939:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3 or 6 to select the USART or 
 940:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 941:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the NACK transmission.
 942:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.  
 943:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 944:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 945:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 946:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 25914              		.loc 1 946 0
 25915              		.cfi_startproc
 25916              		@ args = 0, pretend = 0, frame = 8
 25917              		@ frame_needed = 1, uses_anonymous_args = 0
 25918              		@ link register save eliminated.
 25919 0000 80B4     		push	{r7}
 25920              	.LCFI60:
 25921              		.cfi_def_cfa_offset 4
 25922 0002 83B0     		sub	sp, sp, #12
 25923              	.LCFI61:
 25924              		.cfi_def_cfa_offset 16
 25925 0004 00AF     		add	r7, sp, #0
 25926              		.cfi_offset 7, -4
 25927              	.LCFI62:
 25928              		.cfi_def_cfa_register 7
 25929 0006 7860     		str	r0, [r7, #4]
 25930 0008 0B46     		mov	r3, r1
 25931 000a FB70     		strb	r3, [r7, #3]
 947:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 948:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_1236_PERIPH(USARTx)); 
 949:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 950:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 25932              		.loc 1 950 0
 25933 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 25934 000e 002B     		cmp	r3, #0
 25935 0010 08D0     		beq	.L53
 951:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 952:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
 953:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_CR3_NACK;
 25936              		.loc 1 953 0
 25937 0012 7B68     		ldr	r3, [r7, #4]
 25938 0014 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 25939 0016 9BB2     		uxth	r3, r3
 25940 0018 43F01003 		orr	r3, r3, #16
 25941 001c 9AB2     		uxth	r2, r3
 25942 001e 7B68     		ldr	r3, [r7, #4]
 25943 0020 9A82     		strh	r2, [r3, #20]	@ movhi
 25944 0022 07E0     		b	.L52
 25945              	.L53:
 954:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 955:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 956:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 957:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
 958:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
 25946              		.loc 1 958 0
 25947 0024 7B68     		ldr	r3, [r7, #4]
 25948 0026 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 25949 0028 9BB2     		uxth	r3, r3
 25950 002a 23F01003 		bic	r3, r3, #16
 25951 002e 9AB2     		uxth	r2, r3
 25952 0030 7B68     		ldr	r3, [r7, #4]
 25953 0032 9A82     		strh	r2, [r3, #20]	@ movhi
 25954              	.L52:
 959:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 960:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 25955              		.loc 1 960 0
 25956 0034 07F10C07 		add	r7, r7, #12
 25957 0038 BD46     		mov	sp, r7
 25958 003a 80BC     		pop	{r7}
 25959 003c 7047     		bx	lr
 25960              		.cfi_endproc
 25961              	.LFE130:
 25963 003e 00BF     		.section	.text.USART_IrDAConfig,"ax",%progbits
 25964              		.align	2
 25965              		.global	USART_IrDAConfig
 25966              		.thumb
 25967              		.thumb_func
 25969              	USART_IrDAConfig:
 25970              	.LFB131:
 961:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 962:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 963:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
 964:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 965:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 966:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group7 IrDA mode functions
 967:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   IrDA mode functions 
 968:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
 969:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
 970:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
 971:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                                 IrDA mode functions
 972:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
 973:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 974:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   This subsection provides a set of functions allowing to manage the USART 
 975:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   IrDA communication.
 976:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 977:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   IrDA is a half duplex communication protocol. If the Transmitter is busy, any data
 978:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   on the IrDA receive line will be ignored by the IrDA decoder and if the Receiver 
 979:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   is busy, data on the TX from the USART to IrDA will not be encoded by IrDA.
 980:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   While receiving data, transmission should be avoided as the data to be transmitted
 981:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   could be corrupted.
 982:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 983:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   IrDA communication is possible through the following procedure:
 984:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. Program the Baud rate, Word length = 8 bits, Stop bits, Parity, Transmitter/Receiver 
 985:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         modes and hardware flow control values using the USART_Init() function.
 986:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. Enable the USART using the USART_Cmd() function.
 987:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      3. Configures the IrDA pulse width by configuring the prescaler using  
 988:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         the USART_SetPrescaler() function.
 989:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      4. Configures the IrDA  USART_IrDAMode_LowPower or USART_IrDAMode_Normal mode
 990:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         using the USART_IrDAConfig() function.
 991:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      5. Enable the IrDA using the USART_IrDACmd() function.
 992:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 993:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note A pulse of width less than two and greater than one PSC period(s) may or may
 994:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       not be rejected.
 995:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note The receiver set up time should be managed by software. The IrDA physical layer
 996:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       specification specifies a minimum of 10 ms delay between transmission and 
 997:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       reception (IrDA is a half duplex protocol).
 998:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note In IrDA mode, the following bits must be kept cleared:
 999:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - LINEN, STOP and CLKEN bits in the USART_CR2 register.
1000:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - SCEN and HDSEL bits in the USART_CR3 register.
1001:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1002:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
1003:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
1004:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1005:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1006:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1007:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Configures the USART's IrDA interface.
1008:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1009:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1010:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_IrDAMode: specifies the IrDA mode.
1011:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
1012:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IrDAMode_LowPower
1013:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IrDAMode_Normal
1014:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
1015:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1016:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
1017:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 25971              		.loc 1 1017 0
 25972              		.cfi_startproc
 25973              		@ args = 0, pretend = 0, frame = 8
 25974              		@ frame_needed = 1, uses_anonymous_args = 0
 25975              		@ link register save eliminated.
 25976 0000 80B4     		push	{r7}
 25977              	.LCFI63:
 25978              		.cfi_def_cfa_offset 4
 25979 0002 83B0     		sub	sp, sp, #12
 25980              	.LCFI64:
 25981              		.cfi_def_cfa_offset 16
 25982 0004 00AF     		add	r7, sp, #0
 25983              		.cfi_offset 7, -4
 25984              	.LCFI65:
 25985              		.cfi_def_cfa_register 7
 25986 0006 7860     		str	r0, [r7, #4]
 25987 0008 0B46     		mov	r3, r1
 25988 000a 7B80     		strh	r3, [r7, #2]	@ movhi
1018:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1019:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1020:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
1021:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1022:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IRLP);
 25989              		.loc 1 1022 0
 25990 000c 7B68     		ldr	r3, [r7, #4]
 25991 000e 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 25992 0010 9BB2     		uxth	r3, r3
 25993 0012 23F00403 		bic	r3, r3, #4
 25994 0016 9AB2     		uxth	r2, r3
 25995 0018 7B68     		ldr	r3, [r7, #4]
 25996 001a 9A82     		strh	r2, [r3, #20]	@ movhi
1023:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR3 |= USART_IrDAMode;
 25997              		.loc 1 1023 0
 25998 001c 7B68     		ldr	r3, [r7, #4]
 25999 001e 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 26000 0020 9AB2     		uxth	r2, r3
 26001 0022 7B88     		ldrh	r3, [r7, #2]	@ movhi
 26002 0024 42EA0303 		orr	r3, r2, r3
 26003 0028 9AB2     		uxth	r2, r3
 26004 002a 7B68     		ldr	r3, [r7, #4]
 26005 002c 9A82     		strh	r2, [r3, #20]	@ movhi
1024:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 26006              		.loc 1 1024 0
 26007 002e 07F10C07 		add	r7, r7, #12
 26008 0032 BD46     		mov	sp, r7
 26009 0034 80BC     		pop	{r7}
 26010 0036 7047     		bx	lr
 26011              		.cfi_endproc
 26012              	.LFE131:
 26014              		.section	.text.USART_IrDACmd,"ax",%progbits
 26015              		.align	2
 26016              		.global	USART_IrDACmd
 26017              		.thumb
 26018              		.thumb_func
 26020              	USART_IrDACmd:
 26021              	.LFB132:
1025:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1026:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1027:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's IrDA interface.
1028:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1029:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1030:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the IrDA mode.
1031:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
1032:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
1033:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1034:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
1035:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 26022              		.loc 1 1035 0
 26023              		.cfi_startproc
 26024              		@ args = 0, pretend = 0, frame = 8
 26025              		@ frame_needed = 1, uses_anonymous_args = 0
 26026              		@ link register save eliminated.
 26027 0000 80B4     		push	{r7}
 26028              	.LCFI66:
 26029              		.cfi_def_cfa_offset 4
 26030 0002 83B0     		sub	sp, sp, #12
 26031              	.LCFI67:
 26032              		.cfi_def_cfa_offset 16
 26033 0004 00AF     		add	r7, sp, #0
 26034              		.cfi_offset 7, -4
 26035              	.LCFI68:
 26036              		.cfi_def_cfa_register 7
 26037 0006 7860     		str	r0, [r7, #4]
 26038 0008 0B46     		mov	r3, r1
 26039 000a FB70     		strb	r3, [r7, #3]
1036:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1037:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1038:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1039:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1040:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 26040              		.loc 1 1040 0
 26041 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 26042 000e 002B     		cmp	r3, #0
 26043 0010 08D0     		beq	.L57
1041:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1042:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
1043:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_CR3_IREN;
 26044              		.loc 1 1043 0
 26045 0012 7B68     		ldr	r3, [r7, #4]
 26046 0014 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 26047 0016 9BB2     		uxth	r3, r3
 26048 0018 43F00203 		orr	r3, r3, #2
 26049 001c 9AB2     		uxth	r2, r3
 26050 001e 7B68     		ldr	r3, [r7, #4]
 26051 0020 9A82     		strh	r2, [r3, #20]	@ movhi
 26052 0022 07E0     		b	.L56
 26053              	.L57:
1044:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1045:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
1046:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1047:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
1048:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
 26054              		.loc 1 1048 0
 26055 0024 7B68     		ldr	r3, [r7, #4]
 26056 0026 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 26057 0028 9BB2     		uxth	r3, r3
 26058 002a 23F00203 		bic	r3, r3, #2
 26059 002e 9AB2     		uxth	r2, r3
 26060 0030 7B68     		ldr	r3, [r7, #4]
 26061 0032 9A82     		strh	r2, [r3, #20]	@ movhi
 26062              	.L56:
1049:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1050:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 26063              		.loc 1 1050 0
 26064 0034 07F10C07 		add	r7, r7, #12
 26065 0038 BD46     		mov	sp, r7
 26066 003a 80BC     		pop	{r7}
 26067 003c 7047     		bx	lr
 26068              		.cfi_endproc
 26069              	.LFE132:
 26071 003e 00BF     		.section	.text.USART_DMACmd,"ax",%progbits
 26072              		.align	2
 26073              		.global	USART_DMACmd
 26074              		.thumb
 26075              		.thumb_func
 26077              	USART_DMACmd:
 26078              	.LFB133:
1051:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1052:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1053:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
1054:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1055:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1056:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group8 DMA transfers management functions
1057:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   DMA transfers management functions
1058:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
1059:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
1060:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
1061:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                       DMA transfers management functions
1062:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
1063:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1064:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
1065:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
1066:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1067:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
1068:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1069:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's DMA interface.
1070:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1071:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1072:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_DMAReq: specifies the DMA request.
1073:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be any combination of the following values:
1074:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_DMAReq_Tx: USART DMA transmit request
1075:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_DMAReq_Rx: USART DMA receive request
1076:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the DMA Request sources.
1077:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.   
1078:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
1079:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1080:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
1081:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 26079              		.loc 1 1081 0
 26080              		.cfi_startproc
 26081              		@ args = 0, pretend = 0, frame = 8
 26082              		@ frame_needed = 1, uses_anonymous_args = 0
 26083              		@ link register save eliminated.
 26084 0000 80B4     		push	{r7}
 26085              	.LCFI69:
 26086              		.cfi_def_cfa_offset 4
 26087 0002 83B0     		sub	sp, sp, #12
 26088              	.LCFI70:
 26089              		.cfi_def_cfa_offset 16
 26090 0004 00AF     		add	r7, sp, #0
 26091              		.cfi_offset 7, -4
 26092              	.LCFI71:
 26093              		.cfi_def_cfa_register 7
 26094 0006 7860     		str	r0, [r7, #4]
 26095 0008 1346     		mov	r3, r2
 26096 000a 0A46     		mov	r2, r1	@ movhi
 26097 000c 7A80     		strh	r2, [r7, #2]	@ movhi
 26098 000e 7B70     		strb	r3, [r7, #1]
1082:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1083:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1084:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_DMAREQ(USART_DMAReq));  
1085:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState)); 
1086:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1087:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 26099              		.loc 1 1087 0
 26100 0010 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 26101 0012 002B     		cmp	r3, #0
 26102 0014 09D0     		beq	.L60
1088:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1089:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the DMA transfer for selected requests by setting the DMAT and/or
1090:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****        DMAR bits in the USART CR3 register */
1091:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_DMAReq;
 26103              		.loc 1 1091 0
 26104 0016 7B68     		ldr	r3, [r7, #4]
 26105 0018 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 26106 001a 9AB2     		uxth	r2, r3
 26107 001c 7B88     		ldrh	r3, [r7, #2]	@ movhi
 26108 001e 42EA0303 		orr	r3, r2, r3
 26109 0022 9AB2     		uxth	r2, r3
 26110 0024 7B68     		ldr	r3, [r7, #4]
 26111 0026 9A82     		strh	r2, [r3, #20]	@ movhi
 26112 0028 0BE0     		b	.L59
 26113              	.L60:
1092:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1093:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
1094:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1095:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
1096:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****        DMAR bits in the USART CR3 register */
1097:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 26114              		.loc 1 1097 0
 26115 002a 7B68     		ldr	r3, [r7, #4]
 26116 002c 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 26117 002e 9AB2     		uxth	r2, r3
 26118 0030 7B88     		ldrh	r3, [r7, #2]	@ movhi
 26119 0032 6FEA0303 		mvn	r3, r3
 26120 0036 9BB2     		uxth	r3, r3
 26121 0038 02EA0303 		and	r3, r2, r3
 26122 003c 9AB2     		uxth	r2, r3
 26123 003e 7B68     		ldr	r3, [r7, #4]
 26124 0040 9A82     		strh	r2, [r3, #20]	@ movhi
 26125              	.L59:
1098:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1099:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 26126              		.loc 1 1099 0
 26127 0042 07F10C07 		add	r7, r7, #12
 26128 0046 BD46     		mov	sp, r7
 26129 0048 80BC     		pop	{r7}
 26130 004a 7047     		bx	lr
 26131              		.cfi_endproc
 26132              	.LFE133:
 26134              		.section	.text.USART_ITConfig,"ax",%progbits
 26135              		.align	2
 26136              		.global	USART_ITConfig
 26137              		.thumb
 26138              		.thumb_func
 26140              	USART_ITConfig:
 26141              	.LFB134:
1100:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1101:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1102:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
1103:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1104:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
1105:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group9 Interrupts and flags management functions
1106:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   Interrupts and flags management functions 
1107:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
1108:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
1109:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
1110:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                    Interrupts and flags management functions
1111:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
1112:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1113:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   This subsection provides a set of functions allowing to configure the USART 
1114:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Interrupts sources, DMA channels requests and check or clear the flags or 
1115:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   pending bits status.
1116:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   The user should identify which mode will be used in his application to manage 
1117:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   the communication: Polling mode, Interrupt mode or DMA mode. 
1118:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1119:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Polling Mode
1120:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   =============
1121:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   In Polling Mode, the SPI communication can be managed by 10 flags:
1122:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. USART_FLAG_TXE : to indicate the status of the transmit buffer register
1123:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. USART_FLAG_RXNE : to indicate the status of the receive buffer register
1124:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      3. USART_FLAG_TC : to indicate the status of the transmit operation
1125:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      4. USART_FLAG_IDLE : to indicate the status of the Idle Line             
1126:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      5. USART_FLAG_CTS : to indicate the status of the nCTS input
1127:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      6. USART_FLAG_LBD : to indicate the status of the LIN break detection
1128:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      7. USART_FLAG_NE : to indicate if a noise error occur
1129:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      8. USART_FLAG_FE : to indicate if a frame error occur
1130:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      9. USART_FLAG_PE : to indicate if a parity error occur
1131:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      10. USART_FLAG_ORE : to indicate if an Overrun error occur
1132:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1133:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   In this Mode it is advised to use the following functions:
1134:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       - FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG);
1135:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       - void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG);
1136:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1137:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Interrupt Mode
1138:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   ===============
1139:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   In Interrupt Mode, the USART communication can be managed by 8 interrupt sources
1140:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   and 10 pending bits: 
1141:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1142:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Pending Bits:
1143:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   ------------- 
1144:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. USART_IT_TXE : to indicate the status of the transmit buffer register
1145:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. USART_IT_RXNE : to indicate the status of the receive buffer register
1146:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      3. USART_IT_TC : to indicate the status of the transmit operation
1147:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      4. USART_IT_IDLE : to indicate the status of the Idle Line             
1148:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      5. USART_IT_CTS : to indicate the status of the nCTS input
1149:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      6. USART_IT_LBD : to indicate the status of the LIN break detection
1150:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      7. USART_IT_NE : to indicate if a noise error occur
1151:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      8. USART_IT_FE : to indicate if a frame error occur
1152:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      9. USART_IT_PE : to indicate if a parity error occur
1153:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      10. USART_IT_ORE : to indicate if an Overrun error occur
1154:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1155:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Interrupt Source:
1156:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   -----------------
1157:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. USART_IT_TXE : specifies the interrupt source for the Tx buffer empty 
1158:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                        interrupt. 
1159:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. USART_IT_RXNE : specifies the interrupt source for the Rx buffer not 
1160:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                         empty interrupt.
1161:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      3. USART_IT_TC : specifies the interrupt source for the Transmit complete 
1162:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                        interrupt. 
1163:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      4. USART_IT_IDLE : specifies the interrupt source for the Idle Line interrupt.             
1164:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      5. USART_IT_CTS : specifies the interrupt source for the CTS interrupt. 
1165:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      6. USART_IT_LBD : specifies the interrupt source for the LIN break detection
1166:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                        interrupt. 
1167:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      7. USART_IT_PE : specifies the interrupt source for the parity error interrupt. 
1168:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      8. USART_IT_ERR :  specifies the interrupt source for the errors interrupt.
1169:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1170:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note Some parameters are coded in order to use them as interrupt source or as pending bits.
1171:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1172:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   In this Mode it is advised to use the following functions:
1173:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      - void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState);
1174:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      - ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT);
1175:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      - void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT);
1176:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1177:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   DMA Mode
1178:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   ========
1179:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   In DMA Mode, the USART communication can be managed by 2 DMA Channel requests:
1180:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. USART_DMAReq_Tx: specifies the Tx buffer DMA transfer request
1181:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. USART_DMAReq_Rx: specifies the Rx buffer DMA transfer request
1182:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1183:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   In this Mode it is advised to use the following function:
1184:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      - void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState);
1185:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1186:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
1187:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
1188:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1189:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1190:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1191:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the specified USART interrupts.
1192:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1193:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1194:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_IT: specifies the USART interrupt sources to be enabled or disabled.
1195:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
1196:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_CTS:  CTS change interrupt
1197:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_LBD:  LIN Break detection interrupt
1198:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_TXE:  Transmit Data Register empty interrupt
1199:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_TC:   Transmission complete interrupt
1200:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_RXNE: Receive Data register not empty interrupt
1201:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_IDLE: Idle line detection interrupt
1202:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_PE:   Parity Error interrupt
1203:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_ERR:  Error interrupt(Frame error, noise error, overrun error)
1204:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the specified USARTx interrupts.
1205:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
1206:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
1207:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1208:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
1209:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 26142              		.loc 1 1209 0
 26143              		.cfi_startproc
 26144              		@ args = 0, pretend = 0, frame = 24
 26145              		@ frame_needed = 1, uses_anonymous_args = 0
 26146              		@ link register save eliminated.
 26147 0000 80B4     		push	{r7}
 26148              	.LCFI72:
 26149              		.cfi_def_cfa_offset 4
 26150 0002 87B0     		sub	sp, sp, #28
 26151              	.LCFI73:
 26152              		.cfi_def_cfa_offset 32
 26153 0004 00AF     		add	r7, sp, #0
 26154              		.cfi_offset 7, -4
 26155              	.LCFI74:
 26156              		.cfi_def_cfa_register 7
 26157 0006 7860     		str	r0, [r7, #4]
 26158 0008 1346     		mov	r3, r2
 26159 000a 0A46     		mov	r2, r1	@ movhi
 26160 000c 7A80     		strh	r2, [r7, #2]	@ movhi
 26161 000e 7B70     		strb	r3, [r7, #1]
1210:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 26162              		.loc 1 1210 0
 26163 0010 4FF00003 		mov	r3, #0
 26164 0014 3B61     		str	r3, [r7, #16]
 26165 0016 4FF00003 		mov	r3, #0
 26166 001a FB60     		str	r3, [r7, #12]
 26167 001c 4FF00003 		mov	r3, #0
 26168 0020 BB60     		str	r3, [r7, #8]
1211:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t usartxbase = 0x00;
 26169              		.loc 1 1211 0
 26170 0022 4FF00003 		mov	r3, #0
 26171 0026 7B61     		str	r3, [r7, #20]
1212:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1213:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1214:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_CONFIG_IT(USART_IT));
1215:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1216:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1217:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* The CTS interrupt is not available for UART4 and UART5 */
1218:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (USART_IT == USART_IT_CTS)
1219:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1220:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
1221:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   } 
1222:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1223:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   usartxbase = (uint32_t)USARTx;
 26172              		.loc 1 1223 0
 26173 0028 7B68     		ldr	r3, [r7, #4]
 26174 002a 7B61     		str	r3, [r7, #20]
1224:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1225:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Get the USART register index */
1226:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   usartreg = (((uint8_t)USART_IT) >> 0x05);
 26175              		.loc 1 1226 0
 26176 002c 7B88     		ldrh	r3, [r7, #2]	@ movhi
 26177 002e DBB2     		uxtb	r3, r3
 26178 0030 4FEA5313 		lsr	r3, r3, #5
 26179 0034 DBB2     		uxtb	r3, r3
 26180 0036 3B61     		str	r3, [r7, #16]
1227:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1228:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Get the interrupt position */
1229:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   itpos = USART_IT & IT_MASK;
 26181              		.loc 1 1229 0
 26182 0038 7B88     		ldrh	r3, [r7, #2]
 26183 003a 03F01F03 		and	r3, r3, #31
 26184 003e FB60     		str	r3, [r7, #12]
1230:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   itmask = (((uint32_t)0x01) << itpos);
 26185              		.loc 1 1230 0
 26186 0040 FB68     		ldr	r3, [r7, #12]
 26187 0042 4FF00102 		mov	r2, #1
 26188 0046 02FA03F3 		lsl	r3, r2, r3
 26189 004a BB60     		str	r3, [r7, #8]
1231:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1232:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (usartreg == 0x01) /* The IT is in CR1 register */
 26190              		.loc 1 1232 0
 26191 004c 3B69     		ldr	r3, [r7, #16]
 26192 004e 012B     		cmp	r3, #1
 26193 0050 04D1     		bne	.L63
1233:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1234:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     usartxbase += 0x0C;
 26194              		.loc 1 1234 0
 26195 0052 7B69     		ldr	r3, [r7, #20]
 26196 0054 03F10C03 		add	r3, r3, #12
 26197 0058 7B61     		str	r3, [r7, #20]
 26198 005a 0BE0     		b	.L64
 26199              	.L63:
1235:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1236:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else if (usartreg == 0x02) /* The IT is in CR2 register */
 26200              		.loc 1 1236 0
 26201 005c 3B69     		ldr	r3, [r7, #16]
 26202 005e 022B     		cmp	r3, #2
 26203 0060 04D1     		bne	.L65
1237:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1238:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     usartxbase += 0x10;
 26204              		.loc 1 1238 0
 26205 0062 7B69     		ldr	r3, [r7, #20]
 26206 0064 03F11003 		add	r3, r3, #16
 26207 0068 7B61     		str	r3, [r7, #20]
 26208 006a 03E0     		b	.L64
 26209              	.L65:
1239:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1240:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else /* The IT is in CR3 register */
1241:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1242:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     usartxbase += 0x14; 
 26210              		.loc 1 1242 0
 26211 006c 7B69     		ldr	r3, [r7, #20]
 26212 006e 03F11403 		add	r3, r3, #20
 26213 0072 7B61     		str	r3, [r7, #20]
 26214              	.L64:
1243:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1244:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 26215              		.loc 1 1244 0
 26216 0074 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 26217 0076 002B     		cmp	r3, #0
 26218 0078 07D0     		beq	.L66
1245:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1246:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     *(__IO uint32_t*)usartxbase  |= itmask;
 26219              		.loc 1 1246 0
 26220 007a 7B69     		ldr	r3, [r7, #20]
 26221 007c 7A69     		ldr	r2, [r7, #20]
 26222 007e 1168     		ldr	r1, [r2, #0]
 26223 0080 BA68     		ldr	r2, [r7, #8]
 26224 0082 41EA0202 		orr	r2, r1, r2
 26225 0086 1A60     		str	r2, [r3, #0]
 26226 0088 08E0     		b	.L62
 26227              	.L66:
1247:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1248:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
1249:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1250:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     *(__IO uint32_t*)usartxbase &= ~itmask;
 26228              		.loc 1 1250 0
 26229 008a 7B69     		ldr	r3, [r7, #20]
 26230 008c 7A69     		ldr	r2, [r7, #20]
 26231 008e 1168     		ldr	r1, [r2, #0]
 26232 0090 BA68     		ldr	r2, [r7, #8]
 26233 0092 6FEA0202 		mvn	r2, r2
 26234 0096 01EA0202 		and	r2, r1, r2
 26235 009a 1A60     		str	r2, [r3, #0]
 26236              	.L62:
1251:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1252:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 26237              		.loc 1 1252 0
 26238 009c 07F11C07 		add	r7, r7, #28
 26239 00a0 BD46     		mov	sp, r7
 26240 00a2 80BC     		pop	{r7}
 26241 00a4 7047     		bx	lr
 26242              		.cfi_endproc
 26243              	.LFE134:
 26245 00a6 00BF     		.section	.text.USART_GetFlagStatus,"ax",%progbits
 26246              		.align	2
 26247              		.global	USART_GetFlagStatus
 26248              		.thumb
 26249              		.thumb_func
 26251              	USART_GetFlagStatus:
 26252              	.LFB135:
1253:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1254:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1255:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Checks whether the specified USART flag is set or not.
1256:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1257:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1258:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_FLAG: specifies the flag to check.
1259:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
1260:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_CTS:  CTS Change flag (not available for UART4 and UART5)
1261:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_LBD:  LIN Break detection flag
1262:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_TXE:  Transmit data register empty flag
1263:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_TC:   Transmission Complete flag
1264:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_RXNE: Receive data register not empty flag
1265:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_IDLE: Idle Line detection flag
1266:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_ORE:  OverRun Error flag
1267:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_NE:   Noise Error flag
1268:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_FE:   Framing Error flag
1269:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_PE:   Parity Error flag
1270:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval The new state of USART_FLAG (SET or RESET).
1271:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1272:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
1273:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 26253              		.loc 1 1273 0
 26254              		.cfi_startproc
 26255              		@ args = 0, pretend = 0, frame = 16
 26256              		@ frame_needed = 1, uses_anonymous_args = 0
 26257              		@ link register save eliminated.
 26258 0000 80B4     		push	{r7}
 26259              	.LCFI75:
 26260              		.cfi_def_cfa_offset 4
 26261 0002 85B0     		sub	sp, sp, #20
 26262              	.LCFI76:
 26263              		.cfi_def_cfa_offset 24
 26264 0004 00AF     		add	r7, sp, #0
 26265              		.cfi_offset 7, -4
 26266              	.LCFI77:
 26267              		.cfi_def_cfa_register 7
 26268 0006 7860     		str	r0, [r7, #4]
 26269 0008 0B46     		mov	r3, r1
 26270 000a 7B80     		strh	r3, [r7, #2]	@ movhi
1274:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   FlagStatus bitstatus = RESET;
 26271              		.loc 1 1274 0
 26272 000c 4FF00003 		mov	r3, #0
 26273 0010 FB73     		strb	r3, [r7, #15]
1275:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1276:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1277:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_FLAG(USART_FLAG));
1278:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1279:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* The CTS flag is not available for UART4 and UART5 */
1280:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (USART_FLAG == USART_FLAG_CTS)
1281:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1282:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
1283:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   } 
1284:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1285:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 26274              		.loc 1 1285 0
 26275 0012 7B68     		ldr	r3, [r7, #4]
 26276 0014 1B88     		ldrh	r3, [r3, #0]	@ movhi
 26277 0016 9AB2     		uxth	r2, r3
 26278 0018 7B88     		ldrh	r3, [r7, #2]	@ movhi
 26279 001a 02EA0303 		and	r3, r2, r3
 26280 001e 9BB2     		uxth	r3, r3
 26281 0020 002B     		cmp	r3, #0
 26282 0022 03D0     		beq	.L69
1286:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1287:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     bitstatus = SET;
 26283              		.loc 1 1287 0
 26284 0024 4FF00103 		mov	r3, #1
 26285 0028 FB73     		strb	r3, [r7, #15]
 26286 002a 02E0     		b	.L70
 26287              	.L69:
1288:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1289:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
1290:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1291:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     bitstatus = RESET;
 26288              		.loc 1 1291 0
 26289 002c 4FF00003 		mov	r3, #0
 26290 0030 FB73     		strb	r3, [r7, #15]
 26291              	.L70:
1292:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1293:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   return bitstatus;
 26292              		.loc 1 1293 0
 26293 0032 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1294:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 26294              		.loc 1 1294 0
 26295 0034 1846     		mov	r0, r3
 26296 0036 07F11407 		add	r7, r7, #20
 26297 003a BD46     		mov	sp, r7
 26298 003c 80BC     		pop	{r7}
 26299 003e 7047     		bx	lr
 26300              		.cfi_endproc
 26301              	.LFE135:
 26303              		.section	.text.USART_ClearFlag,"ax",%progbits
 26304              		.align	2
 26305              		.global	USART_ClearFlag
 26306              		.thumb
 26307              		.thumb_func
 26309              	USART_ClearFlag:
 26310              	.LFB136:
1295:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1296:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1297:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Clears the USARTx's pending flags.
1298:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1299:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1300:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_FLAG: specifies the flag to clear.
1301:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be any combination of the following values:
1302:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_CTS:  CTS Change flag (not available for UART4 and UART5).
1303:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_LBD:  LIN Break detection flag.
1304:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_TC:   Transmission Complete flag.
1305:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_RXNE: Receive data register not empty flag.
1306:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *   
1307:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   PE (Parity error), FE (Framing error), NE (Noise error), ORE (OverRun 
1308:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          error) and IDLE (Idle line detected) flags are cleared by software 
1309:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          sequence: a read operation to USART_SR register (USART_GetFlagStatus()) 
1310:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          followed by a read operation to USART_DR register (USART_ReceiveData()).
1311:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   RXNE flag can be also cleared by a read to the USART_DR register 
1312:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          (USART_ReceiveData()).
1313:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   TC flag can be also cleared by software sequence: a read operation to 
1314:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          USART_SR register (USART_GetFlagStatus()) followed by a write operation
1315:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          to USART_DR register (USART_SendData()).
1316:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   TXE flag is cleared only by a write to the USART_DR register 
1317:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          (USART_SendData()).
1318:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *   
1319:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
1320:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1321:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
1322:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 26311              		.loc 1 1322 0
 26312              		.cfi_startproc
 26313              		@ args = 0, pretend = 0, frame = 8
 26314              		@ frame_needed = 1, uses_anonymous_args = 0
 26315              		@ link register save eliminated.
 26316 0000 80B4     		push	{r7}
 26317              	.LCFI78:
 26318              		.cfi_def_cfa_offset 4
 26319 0002 83B0     		sub	sp, sp, #12
 26320              	.LCFI79:
 26321              		.cfi_def_cfa_offset 16
 26322 0004 00AF     		add	r7, sp, #0
 26323              		.cfi_offset 7, -4
 26324              	.LCFI80:
 26325              		.cfi_def_cfa_register 7
 26326 0006 7860     		str	r0, [r7, #4]
 26327 0008 0B46     		mov	r3, r1
 26328 000a 7B80     		strh	r3, [r7, #2]	@ movhi
1323:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1324:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1325:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_CLEAR_FLAG(USART_FLAG));
1326:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1327:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* The CTS flag is not available for UART4 and UART5 */
1328:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
1329:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1330:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
1331:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   } 
1332:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****        
1333:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->SR = (uint16_t)~USART_FLAG;
 26329              		.loc 1 1333 0
 26330 000c 7B88     		ldrh	r3, [r7, #2]	@ movhi
 26331 000e 6FEA0303 		mvn	r3, r3
 26332 0012 9AB2     		uxth	r2, r3
 26333 0014 7B68     		ldr	r3, [r7, #4]
 26334 0016 1A80     		strh	r2, [r3, #0]	@ movhi
1334:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 26335              		.loc 1 1334 0
 26336 0018 07F10C07 		add	r7, r7, #12
 26337 001c BD46     		mov	sp, r7
 26338 001e 80BC     		pop	{r7}
 26339 0020 7047     		bx	lr
 26340              		.cfi_endproc
 26341              	.LFE136:
 26343 0022 00BF     		.section	.text.USART_GetITStatus,"ax",%progbits
 26344              		.align	2
 26345              		.global	USART_GetITStatus
 26346              		.thumb
 26347              		.thumb_func
 26349              	USART_GetITStatus:
 26350              	.LFB137:
1335:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1336:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1337:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Checks whether the specified USART interrupt has occurred or not.
1338:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1339:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1340:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_IT: specifies the USART interrupt source to check.
1341:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
1342:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_CTS:  CTS change interrupt (not available for UART4 and UART5)
1343:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_LBD:  LIN Break detection interrupt
1344:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_TXE:  Transmit Data Register empty interrupt
1345:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_TC:   Transmission complete interrupt
1346:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_RXNE: Receive Data register not empty interrupt
1347:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_IDLE: Idle line detection interrupt
1348:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_ORE_RX : OverRun Error interrupt if the RXNEIE bit is set
1349:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_ORE_ER : OverRun Error interrupt if the EIE bit is set  
1350:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_NE:   Noise Error interrupt
1351:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_FE:   Framing Error interrupt
1352:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_PE:   Parity Error interrupt
1353:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval The new state of USART_IT (SET or RESET).
1354:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1355:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
1356:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 26351              		.loc 1 1356 0
 26352              		.cfi_startproc
 26353              		@ args = 0, pretend = 0, frame = 24
 26354              		@ frame_needed = 1, uses_anonymous_args = 0
 26355              		@ link register save eliminated.
 26356 0000 80B4     		push	{r7}
 26357              	.LCFI81:
 26358              		.cfi_def_cfa_offset 4
 26359 0002 87B0     		sub	sp, sp, #28
 26360              	.LCFI82:
 26361              		.cfi_def_cfa_offset 32
 26362 0004 00AF     		add	r7, sp, #0
 26363              		.cfi_offset 7, -4
 26364              	.LCFI83:
 26365              		.cfi_def_cfa_register 7
 26366 0006 7860     		str	r0, [r7, #4]
 26367 0008 0B46     		mov	r3, r1
 26368 000a 7B80     		strh	r3, [r7, #2]	@ movhi
1357:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 26369              		.loc 1 1357 0
 26370 000c 4FF00003 		mov	r3, #0
 26371 0010 FB60     		str	r3, [r7, #12]
 26372 0012 4FF00003 		mov	r3, #0
 26373 0016 7B61     		str	r3, [r7, #20]
 26374 0018 4FF00003 		mov	r3, #0
 26375 001c BB60     		str	r3, [r7, #8]
1358:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   ITStatus bitstatus = RESET;
 26376              		.loc 1 1358 0
 26377 001e 4FF00003 		mov	r3, #0
 26378 0022 FB74     		strb	r3, [r7, #19]
1359:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1360:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1361:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_GET_IT(USART_IT)); 
1362:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1363:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* The CTS interrupt is not available for UART4 and UART5 */ 
1364:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (USART_IT == USART_IT_CTS)
1365:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1366:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
1367:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   } 
1368:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1369:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Get the USART register index */
1370:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   usartreg = (((uint8_t)USART_IT) >> 0x05);
 26379              		.loc 1 1370 0
 26380 0024 7B88     		ldrh	r3, [r7, #2]	@ movhi
 26381 0026 DBB2     		uxtb	r3, r3
 26382 0028 4FEA5313 		lsr	r3, r3, #5
 26383 002c DBB2     		uxtb	r3, r3
 26384 002e BB60     		str	r3, [r7, #8]
1371:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Get the interrupt position */
1372:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   itmask = USART_IT & IT_MASK;
 26385              		.loc 1 1372 0
 26386 0030 7B88     		ldrh	r3, [r7, #2]
 26387 0032 03F01F03 		and	r3, r3, #31
 26388 0036 7B61     		str	r3, [r7, #20]
1373:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   itmask = (uint32_t)0x01 << itmask;
 26389              		.loc 1 1373 0
 26390 0038 7B69     		ldr	r3, [r7, #20]
 26391 003a 4FF00102 		mov	r2, #1
 26392 003e 02FA03F3 		lsl	r3, r2, r3
 26393 0042 7B61     		str	r3, [r7, #20]
1374:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
1375:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (usartreg == 0x01) /* The IT  is in CR1 register */
 26394              		.loc 1 1375 0
 26395 0044 BB68     		ldr	r3, [r7, #8]
 26396 0046 012B     		cmp	r3, #1
 26397 0048 07D1     		bne	.L73
1376:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1377:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     itmask &= USARTx->CR1;
 26398              		.loc 1 1377 0
 26399 004a 7B68     		ldr	r3, [r7, #4]
 26400 004c 9B89     		ldrh	r3, [r3, #12]	@ movhi
 26401 004e 9BB2     		uxth	r3, r3
 26402 0050 7A69     		ldr	r2, [r7, #20]
 26403 0052 02EA0303 		and	r3, r2, r3
 26404 0056 7B61     		str	r3, [r7, #20]
 26405 0058 11E0     		b	.L74
 26406              	.L73:
1378:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1379:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else if (usartreg == 0x02) /* The IT  is in CR2 register */
 26407              		.loc 1 1379 0
 26408 005a BB68     		ldr	r3, [r7, #8]
 26409 005c 022B     		cmp	r3, #2
 26410 005e 07D1     		bne	.L75
1380:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1381:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     itmask &= USARTx->CR2;
 26411              		.loc 1 1381 0
 26412 0060 7B68     		ldr	r3, [r7, #4]
 26413 0062 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 26414 0064 9BB2     		uxth	r3, r3
 26415 0066 7A69     		ldr	r2, [r7, #20]
 26416 0068 02EA0303 		and	r3, r2, r3
 26417 006c 7B61     		str	r3, [r7, #20]
 26418 006e 06E0     		b	.L74
 26419              	.L75:
1382:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1383:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else /* The IT  is in CR3 register */
1384:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1385:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     itmask &= USARTx->CR3;
 26420              		.loc 1 1385 0
 26421 0070 7B68     		ldr	r3, [r7, #4]
 26422 0072 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 26423 0074 9BB2     		uxth	r3, r3
 26424 0076 7A69     		ldr	r2, [r7, #20]
 26425 0078 02EA0303 		and	r3, r2, r3
 26426 007c 7B61     		str	r3, [r7, #20]
 26427              	.L74:
1386:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1387:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
1388:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   bitpos = USART_IT >> 0x08;
 26428              		.loc 1 1388 0
 26429 007e 7B88     		ldrh	r3, [r7, #2]
 26430 0080 4FEA1323 		lsr	r3, r3, #8
 26431 0084 9BB2     		uxth	r3, r3
 26432 0086 FB60     		str	r3, [r7, #12]
1389:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   bitpos = (uint32_t)0x01 << bitpos;
 26433              		.loc 1 1389 0
 26434 0088 FB68     		ldr	r3, [r7, #12]
 26435 008a 4FF00102 		mov	r2, #1
 26436 008e 02FA03F3 		lsl	r3, r2, r3
 26437 0092 FB60     		str	r3, [r7, #12]
1390:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   bitpos &= USARTx->SR;
 26438              		.loc 1 1390 0
 26439 0094 7B68     		ldr	r3, [r7, #4]
 26440 0096 1B88     		ldrh	r3, [r3, #0]	@ movhi
 26441 0098 9BB2     		uxth	r3, r3
 26442 009a FA68     		ldr	r2, [r7, #12]
 26443 009c 02EA0303 		and	r3, r2, r3
 26444 00a0 FB60     		str	r3, [r7, #12]
1391:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 26445              		.loc 1 1391 0
 26446 00a2 7B69     		ldr	r3, [r7, #20]
 26447 00a4 002B     		cmp	r3, #0
 26448 00a6 06D0     		beq	.L76
 26449              		.loc 1 1391 0 is_stmt 0 discriminator 1
 26450 00a8 FB68     		ldr	r3, [r7, #12]
 26451 00aa 002B     		cmp	r3, #0
 26452 00ac 03D0     		beq	.L76
1392:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1393:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     bitstatus = SET;
 26453              		.loc 1 1393 0 is_stmt 1
 26454 00ae 4FF00103 		mov	r3, #1
 26455 00b2 FB74     		strb	r3, [r7, #19]
 26456 00b4 02E0     		b	.L77
 26457              	.L76:
1394:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1395:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
1396:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1397:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     bitstatus = RESET;
 26458              		.loc 1 1397 0
 26459 00b6 4FF00003 		mov	r3, #0
 26460 00ba FB74     		strb	r3, [r7, #19]
 26461              	.L77:
1398:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1399:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
1400:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   return bitstatus;  
 26462              		.loc 1 1400 0
 26463 00bc FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
1401:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 26464              		.loc 1 1401 0
 26465 00be 1846     		mov	r0, r3
 26466 00c0 07F11C07 		add	r7, r7, #28
 26467 00c4 BD46     		mov	sp, r7
 26468 00c6 80BC     		pop	{r7}
 26469 00c8 7047     		bx	lr
 26470              		.cfi_endproc
 26471              	.LFE137:
 26473 00ca 00BF     		.section	.text.USART_ClearITPendingBit,"ax",%progbits
 26474              		.align	2
 26475              		.global	USART_ClearITPendingBit
 26476              		.thumb
 26477              		.thumb_func
 26479              	USART_ClearITPendingBit:
 26480              	.LFB138:
1402:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1403:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1404:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Clears the USARTx's interrupt pending bits.
1405:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1406:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1407:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_IT: specifies the interrupt pending bit to clear.
1408:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
1409:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_CTS:  CTS change interrupt (not available for UART4 and UART5)
1410:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_LBD:  LIN Break detection interrupt
1411:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_TC:   Transmission complete interrupt. 
1412:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_RXNE: Receive Data register not empty interrupt.
1413:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
1414:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   PE (Parity error), FE (Framing error), NE (Noise error), ORE (OverRun 
1415:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          error) and IDLE (Idle line detected) pending bits are cleared by 
1416:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          software sequence: a read operation to USART_SR register 
1417:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          (USART_GetITStatus()) followed by a read operation to USART_DR register 
1418:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          (USART_ReceiveData()).
1419:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   RXNE pending bit can be also cleared by a read to the USART_DR register 
1420:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          (USART_ReceiveData()).
1421:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   TC pending bit can be also cleared by software sequence: a read 
1422:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          operation to USART_SR register (USART_GetITStatus()) followed by a write 
1423:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          operation to USART_DR register (USART_SendData()).
1424:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   TXE pending bit is cleared only by a write to the USART_DR register 
1425:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          (USART_SendData()).
1426:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *  
1427:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
1428:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1429:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
1430:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 26481              		.loc 1 1430 0
 26482              		.cfi_startproc
 26483              		@ args = 0, pretend = 0, frame = 16
 26484              		@ frame_needed = 1, uses_anonymous_args = 0
 26485              		@ link register save eliminated.
 26486 0000 80B4     		push	{r7}
 26487              	.LCFI84:
 26488              		.cfi_def_cfa_offset 4
 26489 0002 85B0     		sub	sp, sp, #20
 26490              	.LCFI85:
 26491              		.cfi_def_cfa_offset 24
 26492 0004 00AF     		add	r7, sp, #0
 26493              		.cfi_offset 7, -4
 26494              	.LCFI86:
 26495              		.cfi_def_cfa_register 7
 26496 0006 7860     		str	r0, [r7, #4]
 26497 0008 0B46     		mov	r3, r1
 26498 000a 7B80     		strh	r3, [r7, #2]	@ movhi
1431:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint16_t bitpos = 0x00, itmask = 0x00;
 26499              		.loc 1 1431 0
 26500 000c 4FF00003 		mov	r3, #0
 26501 0010 FB81     		strh	r3, [r7, #14]	@ movhi
 26502 0012 4FF00003 		mov	r3, #0
 26503 0016 BB81     		strh	r3, [r7, #12]	@ movhi
1432:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1433:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1434:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_CLEAR_IT(USART_IT)); 
1435:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1436:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* The CTS interrupt is not available for UART4 and UART5 */
1437:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (USART_IT == USART_IT_CTS)
1438:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1439:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
1440:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   } 
1441:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1442:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   bitpos = USART_IT >> 0x08;
 26504              		.loc 1 1442 0
 26505 0018 7B88     		ldrh	r3, [r7, #2]
 26506 001a 4FEA1323 		lsr	r3, r3, #8
 26507 001e FB81     		strh	r3, [r7, #14]	@ movhi
1443:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 26508              		.loc 1 1443 0
 26509 0020 FB89     		ldrh	r3, [r7, #14]
 26510 0022 4FF00102 		mov	r2, #1
 26511 0026 02FA03F3 		lsl	r3, r2, r3
 26512 002a BB81     		strh	r3, [r7, #12]	@ movhi
1444:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->SR = (uint16_t)~itmask;
 26513              		.loc 1 1444 0
 26514 002c BB89     		ldrh	r3, [r7, #12]	@ movhi
 26515 002e 6FEA0303 		mvn	r3, r3
 26516 0032 9AB2     		uxth	r2, r3
 26517 0034 7B68     		ldr	r3, [r7, #4]
 26518 0036 1A80     		strh	r2, [r3, #0]	@ movhi
1445:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 26519              		.loc 1 1445 0
 26520 0038 07F11407 		add	r7, r7, #20
 26521 003c BD46     		mov	sp, r7
 26522 003e 80BC     		pop	{r7}
 26523 0040 7047     		bx	lr
 26524              		.cfi_endproc
 26525              	.LFE138:
 26527 0042 00BF     		.text
 26528              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_usart.c
     /tmp/cc5UNOWi.s:24590  .text.USART_DeInit:00000000 $t
     /tmp/cc5UNOWi.s:24595  .text.USART_DeInit:00000000 USART_DeInit
     /tmp/cc5UNOWi.s:24709  .text.USART_DeInit:000000dc $d
     /tmp/cc5UNOWi.s:24719  .text.USART_Init:00000000 $t
     /tmp/cc5UNOWi.s:24724  .text.USART_Init:00000000 USART_Init
     /tmp/cc5UNOWi.s:24944  .text.USART_Init:0000019c $d
     /tmp/cc5UNOWi.s:24951  .text.USART_StructInit:00000000 $t
     /tmp/cc5UNOWi.s:24956  .text.USART_StructInit:00000000 USART_StructInit
     /tmp/cc5UNOWi.s:25007  .text.USART_ClockInit:00000000 $t
     /tmp/cc5UNOWi.s:25012  .text.USART_ClockInit:00000000 USART_ClockInit
     /tmp/cc5UNOWi.s:25077  .text.USART_ClockStructInit:00000000 $t
     /tmp/cc5UNOWi.s:25082  .text.USART_ClockStructInit:00000000 USART_ClockStructInit
     /tmp/cc5UNOWi.s:25125  .text.USART_Cmd:00000000 $t
     /tmp/cc5UNOWi.s:25130  .text.USART_Cmd:00000000 USART_Cmd
     /tmp/cc5UNOWi.s:25182  .text.USART_SetPrescaler:00000000 $t
     /tmp/cc5UNOWi.s:25187  .text.USART_SetPrescaler:00000000 USART_SetPrescaler
     /tmp/cc5UNOWi.s:25234  .text.USART_OverSampling8Cmd:00000000 $t
     /tmp/cc5UNOWi.s:25239  .text.USART_OverSampling8Cmd:00000000 USART_OverSampling8Cmd
     /tmp/cc5UNOWi.s:25293  .text.USART_OneBitMethodCmd:00000000 $t
     /tmp/cc5UNOWi.s:25298  .text.USART_OneBitMethodCmd:00000000 USART_OneBitMethodCmd
     /tmp/cc5UNOWi.s:25350  .text.USART_SendData:00000000 $t
     /tmp/cc5UNOWi.s:25355  .text.USART_SendData:00000000 USART_SendData
     /tmp/cc5UNOWi.s:25391  .text.USART_ReceiveData:00000000 $t
     /tmp/cc5UNOWi.s:25396  .text.USART_ReceiveData:00000000 USART_ReceiveData
     /tmp/cc5UNOWi.s:25431  .text.USART_SetAddress:00000000 $t
     /tmp/cc5UNOWi.s:25436  .text.USART_SetAddress:00000000 USART_SetAddress
     /tmp/cc5UNOWi.s:25483  .text.USART_ReceiverWakeUpCmd:00000000 $t
     /tmp/cc5UNOWi.s:25488  .text.USART_ReceiverWakeUpCmd:00000000 USART_ReceiverWakeUpCmd
     /tmp/cc5UNOWi.s:25540  .text.USART_WakeUpConfig:00000000 $t
     /tmp/cc5UNOWi.s:25545  .text.USART_WakeUpConfig:00000000 USART_WakeUpConfig
     /tmp/cc5UNOWi.s:25591  .text.USART_LINBreakDetectLengthConfig:00000000 $t
     /tmp/cc5UNOWi.s:25596  .text.USART_LINBreakDetectLengthConfig:00000000 USART_LINBreakDetectLengthConfig
     /tmp/cc5UNOWi.s:25642  .text.USART_LINCmd:00000000 $t
     /tmp/cc5UNOWi.s:25647  .text.USART_LINCmd:00000000 USART_LINCmd
     /tmp/cc5UNOWi.s:25699  .text.USART_SendBreak:00000000 $t
     /tmp/cc5UNOWi.s:25704  .text.USART_SendBreak:00000000 USART_SendBreak
     /tmp/cc5UNOWi.s:25739  .text.USART_HalfDuplexCmd:00000000 $t
     /tmp/cc5UNOWi.s:25744  .text.USART_HalfDuplexCmd:00000000 USART_HalfDuplexCmd
     /tmp/cc5UNOWi.s:25796  .text.USART_SetGuardTime:00000000 $t
     /tmp/cc5UNOWi.s:25801  .text.USART_SetGuardTime:00000000 USART_SetGuardTime
     /tmp/cc5UNOWi.s:25850  .text.USART_SmartCardCmd:00000000 $t
     /tmp/cc5UNOWi.s:25855  .text.USART_SmartCardCmd:00000000 USART_SmartCardCmd
     /tmp/cc5UNOWi.s:25907  .text.USART_SmartCardNACKCmd:00000000 $t
     /tmp/cc5UNOWi.s:25912  .text.USART_SmartCardNACKCmd:00000000 USART_SmartCardNACKCmd
     /tmp/cc5UNOWi.s:25964  .text.USART_IrDAConfig:00000000 $t
     /tmp/cc5UNOWi.s:25969  .text.USART_IrDAConfig:00000000 USART_IrDAConfig
     /tmp/cc5UNOWi.s:26015  .text.USART_IrDACmd:00000000 $t
     /tmp/cc5UNOWi.s:26020  .text.USART_IrDACmd:00000000 USART_IrDACmd
     /tmp/cc5UNOWi.s:26072  .text.USART_DMACmd:00000000 $t
     /tmp/cc5UNOWi.s:26077  .text.USART_DMACmd:00000000 USART_DMACmd
     /tmp/cc5UNOWi.s:26135  .text.USART_ITConfig:00000000 $t
     /tmp/cc5UNOWi.s:26140  .text.USART_ITConfig:00000000 USART_ITConfig
     /tmp/cc5UNOWi.s:26246  .text.USART_GetFlagStatus:00000000 $t
     /tmp/cc5UNOWi.s:26251  .text.USART_GetFlagStatus:00000000 USART_GetFlagStatus
     /tmp/cc5UNOWi.s:26304  .text.USART_ClearFlag:00000000 $t
     /tmp/cc5UNOWi.s:26309  .text.USART_ClearFlag:00000000 USART_ClearFlag
     /tmp/cc5UNOWi.s:26344  .text.USART_GetITStatus:00000000 $t
     /tmp/cc5UNOWi.s:26349  .text.USART_GetITStatus:00000000 USART_GetITStatus
     /tmp/cc5UNOWi.s:26474  .text.USART_ClearITPendingBit:00000000 $t
     /tmp/cc5UNOWi.s:26479  .text.USART_ClearITPendingBit:00000000 USART_ClearITPendingBit
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
RCC_APB2PeriphResetCmd
RCC_APB1PeriphResetCmd
RCC_GetClocksFreq
