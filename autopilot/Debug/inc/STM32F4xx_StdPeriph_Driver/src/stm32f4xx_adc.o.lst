   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 18, 4
  12              		.thumb
  13              		.file	"stm32f4xx_adc.c"
  23              	.Ltext0:
  24              		.file 1 "../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c"
 24635              		.align	2
 24636              		.global	ADC_DeInit
 24637              		.thumb
 24638              		.thumb_func
 24640              	ADC_DeInit:
 24641              	.LFB110:
   1:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
   2:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ******************************************************************************
   3:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @file    stm32f4xx_adc.c
   4:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @author  MCD Application Team
   5:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @version V1.0.0
   6:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @date    30-September-2011
   7:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          functionalities of the Analog to Digital Convertor (ADC) peripheral:
   9:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           - Initialization and Configuration (in addition to ADC multi mode 
  10:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *             selection)
  11:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           - Analog Watchdog configuration
  12:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           - Temperature Sensor & Vrefint (Voltage Reference internal) & VBAT
  13:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *             management 
  14:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           - Regular Channels Configuration
  15:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           - Regular Channels DMA Configuration
  16:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           - Injected channels Configuration
  17:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           - Interrupts and flags management
  18:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         
  19:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *  @verbatim
  20:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  21:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          ===================================================================
  22:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *                                   How to use this driver
  23:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          ===================================================================
  24:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
  25:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          1.  Enable the ADC interface clock using 
  26:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *                  RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADCx, ENABLE); 
  27:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *     
  28:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          2. ADC pins configuration
  29:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *               - Enable the clock for the ADC GPIOs using the following function:
  30:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *                   RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOx, ENABLE);   
  31:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *                - Configure these ADC pins in analog mode using GPIO_Init();  
  32:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  33:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          3. Configure the ADC Prescaler, conversion resolution and data 
  34:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              alignment using the ADC_Init() function.
  35:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          4. Activate the ADC peripheral using ADC_Cmd() function.
  36:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  37:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          Regular channels group configuration
  38:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          ====================================    
  39:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - To configure the ADC regular channels group features, use 
  40:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              ADC_Init() and ADC_RegularChannelConfig() functions.
  41:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - To activate the continuous mode, use the ADC_continuousModeCmd()
  42:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              function.
  43:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - To configurate and activate the Discontinuous mode, use the 
  44:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              ADC_DiscModeChannelCountConfig() and ADC_DiscModeCmd() functions.
  45:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - To read the ADC converted values, use the ADC_GetConversionValue()
  46:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              function.
  47:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  48:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          Multi mode ADCs Regular channels configuration
  49:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          ===============================================
  50:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - Refer to "Regular channels group configuration" description to
  51:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              configure the ADC1, ADC2 and ADC3 regular channels.        
  52:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - Select the Multi mode ADC regular channels features (dual or 
  53:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              triple mode) using ADC_CommonInit() function and configure 
  54:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              the DMA mode using ADC_MultiModeDMARequestAfterLastTransferCmd() 
  55:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              functions.        
  56:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - Read the ADCs converted values using the 
  57:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              ADC_GetMultiModeConversionValue() function.
  58:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  59:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          DMA for Regular channels group features configuration
  60:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          ====================================================== 
  61:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           - To enable the DMA mode for regular channels group, use the 
  62:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *             ADC_DMACmd() function.
  63:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           - To enable the generation of DMA requests continuously at the end
  64:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *             of the last DMA transfer, use the ADC_DMARequestAfterLastTransferCmd() 
  65:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *             function.
  66:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  67:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          Injected channels group configuration
  68:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          =====================================    
  69:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - To configure the ADC Injected channels group features, use 
  70:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              ADC_InjectedChannelConfig() and  ADC_InjectedSequencerLengthConfig()
  71:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              functions.
  72:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - To activate the continuous mode, use the ADC_continuousModeCmd()
  73:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              function.
  74:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - To activate the Injected Discontinuous mode, use the 
  75:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              ADC_InjectedDiscModeCmd() function.  
  76:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - To activate the AutoInjected mode, use the ADC_AutoInjectedConvCmd() 
  77:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              function.        
  78:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - To read the ADC converted values, use the ADC_GetInjectedConversionValue() 
  79:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              function.
  80:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  81:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *  @endverbatim
  82:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  83:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ******************************************************************************
  84:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @attention
  85:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  86:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  87:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  88:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  89:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  90:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  91:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  92:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  93:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  94:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ******************************************************************************  
  95:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */ 
  96:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
  97:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* Includes ------------------------------------------------------------------*/
  98:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #include "stm32f4xx_adc.h"
  99:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #include "stm32f4xx_rcc.h"
 100:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 101:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
 102:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
 103:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 104:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 105:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @defgroup ADC 
 106:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief ADC driver modules
 107:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
 108:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */ 
 109:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 110:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* Private typedef -----------------------------------------------------------*/
 111:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* Private define ------------------------------------------------------------*/ 
 112:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 113:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC DISCNUM mask */
 114:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CR1_DISCNUM_RESET         ((uint32_t)0xFFFF1FFF)
 115:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 116:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC AWDCH mask */
 117:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CR1_AWDCH_RESET           ((uint32_t)0xFFFFFFE0)   
 118:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 119:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC Analog watchdog enable mode mask */
 120:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CR1_AWDMode_RESET         ((uint32_t)0xFF3FFDFF)   
 121:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 122:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* CR1 register Mask */
 123:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CR1_CLEAR_MASK            ((uint32_t)0xFCFFFEFF)
 124:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 125:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC EXTEN mask */
 126:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CR2_EXTEN_RESET           ((uint32_t)0xCFFFFFFF)  
 127:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 128:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC JEXTEN mask */
 129:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CR2_JEXTEN_RESET          ((uint32_t)0xFFCFFFFF)  
 130:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 131:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC JEXTSEL mask */
 132:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CR2_JEXTSEL_RESET         ((uint32_t)0xFFF0FFFF)  
 133:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 134:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* CR2 register Mask */
 135:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CR2_CLEAR_MASK            ((uint32_t)0xC0FFF7FD)
 136:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 137:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC SQx mask */
 138:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define SQR3_SQ_SET               ((uint32_t)0x0000001F)  
 139:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define SQR2_SQ_SET               ((uint32_t)0x0000001F)  
 140:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define SQR1_SQ_SET               ((uint32_t)0x0000001F)  
 141:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 142:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC L Mask */
 143:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define SQR1_L_RESET              ((uint32_t)0xFF0FFFFF) 
 144:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 145:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC JSQx mask */
 146:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define JSQR_JSQ_SET              ((uint32_t)0x0000001F) 
 147:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 148:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC JL mask */
 149:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define JSQR_JL_SET               ((uint32_t)0x00300000) 
 150:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define JSQR_JL_RESET             ((uint32_t)0xFFCFFFFF) 
 151:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 152:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC SMPx mask */
 153:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define SMPR1_SMP_SET             ((uint32_t)0x00000007)  
 154:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define SMPR2_SMP_SET             ((uint32_t)0x00000007) 
 155:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 156:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC JDRx registers offset */
 157:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define JDR_OFFSET                ((uint8_t)0x28) 
 158:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 159:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC CDR register base address */
 160:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CDR_ADDRESS               ((uint32_t)0x40012308)   
 161:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 162:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC CCR register Mask */
 163:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CR_CLEAR_MASK             ((uint32_t)0xFFFC30E0)  
 164:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 165:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* Private macro -------------------------------------------------------------*/
 166:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* Private variables ---------------------------------------------------------*/
 167:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* Private function prototypes -----------------------------------------------*/
 168:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* Private functions ---------------------------------------------------------*/
 169:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 170:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @defgroup ADC_Private_Functions
 171:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
 172:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */ 
 173:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 174:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @defgroup ADC_Group1 Initialization and Configuration functions
 175:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *  @brief    Initialization and Configuration functions 
 176:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *
 177:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @verbatim    
 178:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================
 179:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                       Initialization and Configuration functions
 180:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================  
 181:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   This section provides functions allowing to:
 182:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - Initialize and configure the ADC Prescaler
 183:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - ADC Conversion Resolution (12bit..6bit)
 184:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - Scan Conversion Mode (multichannels or one channel) for regular group
 185:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - ADC Continuous Conversion Mode (Continuous or Single conversion) for 
 186:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      regular group
 187:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - External trigger Edge and source of regular group, 
 188:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - Converted data alignment (left or right)
 189:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - The number of ADC conversions that will be done using the sequencer for 
 190:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      regular channel group
 191:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - Multi ADC mode selection
 192:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - Direct memory access mode selection for multi ADC mode  
 193:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - Delay between 2 sampling phases (used in dual or triple interleaved modes)
 194:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - Enable or disable the ADC peripheral
 195:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    
 196:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @endverbatim
 197:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
 198:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 199:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 200:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 201:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Deinitializes all ADCs peripherals registers to their default reset 
 202:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         values.
 203:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  None
 204:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 205:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 206:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_DeInit(void)
 207:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 24642              		.loc 1 207 0
 24643              		.cfi_startproc
 24644              		@ args = 0, pretend = 0, frame = 0
 24645              		@ frame_needed = 1, uses_anonymous_args = 0
 24646 0000 80B5     		push	{r7, lr}
 24647              	.LCFI0:
 24648              		.cfi_def_cfa_offset 8
 24649 0002 00AF     		add	r7, sp, #0
 24650              		.cfi_offset 14, -4
 24651              		.cfi_offset 7, -8
 24652              	.LCFI1:
 24653              		.cfi_def_cfa_register 7
 208:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Enable all ADCs reset state */
 209:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, ENABLE);
 24654              		.loc 1 209 0
 24655 0004 4FF48070 		mov	r0, #256
 24656 0008 4FF00101 		mov	r1, #1
 24657 000c FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 210:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 211:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Release all ADCs from reset state */
 212:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, DISABLE);
 24658              		.loc 1 212 0
 24659 0010 4FF48070 		mov	r0, #256
 24660 0014 4FF00001 		mov	r1, #0
 24661 0018 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 213:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 24662              		.loc 1 213 0
 24663 001c 80BD     		pop	{r7, pc}
 24664              		.cfi_endproc
 24665              	.LFE110:
 24667 001e 00BF     		.section	.text.ADC_Init,"ax",%progbits
 24668              		.align	2
 24669              		.global	ADC_Init
 24670              		.thumb
 24671              		.thumb_func
 24673              	ADC_Init:
 24674              	.LFB111:
 214:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 215:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 216:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Initializes the ADCx peripheral according to the specified parameters 
 217:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         in the ADC_InitStruct.
 218:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @note   This function is used to configure the global features of the ADC ( 
 219:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         Resolution and Data Alignment), however, the rest of the configuration
 220:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         parameters are specific to the regular channels group (scan mode 
 221:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         activation, continuous mode activation, External trigger source and 
 222:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         edge, number of conversion in the regular channels group sequencer).  
 223:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 224:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
 225:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         the configuration information for the specified ADC peripheral.
 226:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 227:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 228:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
 229:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 24675              		.loc 1 229 0
 24676              		.cfi_startproc
 24677              		@ args = 0, pretend = 0, frame = 16
 24678              		@ frame_needed = 1, uses_anonymous_args = 0
 24679              		@ link register save eliminated.
 24680 0000 80B4     		push	{r7}
 24681              	.LCFI2:
 24682              		.cfi_def_cfa_offset 4
 24683 0002 85B0     		sub	sp, sp, #20
 24684              	.LCFI3:
 24685              		.cfi_def_cfa_offset 24
 24686 0004 00AF     		add	r7, sp, #0
 24687              		.cfi_offset 7, -4
 24688              	.LCFI4:
 24689              		.cfi_def_cfa_register 7
 24690 0006 7860     		str	r0, [r7, #4]
 24691 0008 3960     		str	r1, [r7, #0]
 230:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg1 = 0;
 24692              		.loc 1 230 0
 24693 000a 4FF00003 		mov	r3, #0
 24694 000e FB60     		str	r3, [r7, #12]
 231:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint8_t tmpreg2 = 0;
 24695              		.loc 1 231 0
 24696 0010 4FF00003 		mov	r3, #0
 24697 0014 FB72     		strb	r3, [r7, #11]
 232:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 233:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 234:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_RESOLUTION(ADC_InitStruct->ADC_Resolution)); 
 235:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(ADC_InitStruct->ADC_ScanConvMode));
 236:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(ADC_InitStruct->ADC_ContinuousConvMode)); 
 237:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_EXT_TRIG_EDGE(ADC_InitStruct->ADC_ExternalTrigConvEdge)); 
 238:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_EXT_TRIG(ADC_InitStruct->ADC_ExternalTrigConv));    
 239:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
 240:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
 241:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 242:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /*---------------------------- ADCx CR1 Configuration -----------------*/
 243:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the ADCx CR1 value */
 244:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 = ADCx->CR1;
 24698              		.loc 1 244 0
 24699 0016 7B68     		ldr	r3, [r7, #4]
 24700 0018 5B68     		ldr	r3, [r3, #4]
 24701 001a FB60     		str	r3, [r7, #12]
 245:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 246:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear RES and SCAN bits */
 247:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 &= CR1_CLEAR_MASK;
 24702              		.loc 1 247 0
 24703 001c FB68     		ldr	r3, [r7, #12]
 24704 001e 23F04073 		bic	r3, r3, #50331648
 24705 0022 23F48073 		bic	r3, r3, #256
 24706 0026 FB60     		str	r3, [r7, #12]
 248:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 249:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Configure ADCx: scan conversion mode and resolution */
 250:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set SCAN bit according to ADC_ScanConvMode value */
 251:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set RES bit according to ADC_Resolution value */ 
 252:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 24707              		.loc 1 252 0
 24708 0028 3B68     		ldr	r3, [r7, #0]
 24709 002a 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 24710 002c 4FEA0322 		lsl	r2, r3, #8
 253:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                                    ADC_InitStruct->ADC_Resolution);
 24711              		.loc 1 253 0
 24712 0030 3B68     		ldr	r3, [r7, #0]
 24713 0032 1B68     		ldr	r3, [r3, #0]
 252:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 24714              		.loc 1 252 0
 24715 0034 42EA0303 		orr	r3, r2, r3
 24716 0038 FA68     		ldr	r2, [r7, #12]
 24717 003a 42EA0303 		orr	r3, r2, r3
 24718 003e FB60     		str	r3, [r7, #12]
 254:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Write to ADCx CR1 */
 255:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->CR1 = tmpreg1;
 24719              		.loc 1 255 0
 24720 0040 7B68     		ldr	r3, [r7, #4]
 24721 0042 FA68     		ldr	r2, [r7, #12]
 24722 0044 5A60     		str	r2, [r3, #4]
 256:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /*---------------------------- ADCx CR2 Configuration -----------------*/
 257:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the ADCx CR2 value */
 258:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 = ADCx->CR2;
 24723              		.loc 1 258 0
 24724 0046 7B68     		ldr	r3, [r7, #4]
 24725 0048 9B68     		ldr	r3, [r3, #8]
 24726 004a FB60     		str	r3, [r7, #12]
 259:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 260:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
 261:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 &= CR2_CLEAR_MASK;
 24727              		.loc 1 261 0
 24728 004c FA68     		ldr	r2, [r7, #12]
 24729 004e 1C4B     		ldr	r3, .L3
 24730 0050 02EA0303 		and	r3, r2, r3
 24731 0054 FB60     		str	r3, [r7, #12]
 262:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 263:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Configure ADCx: external trigger event and edge, data alignment and 
 264:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      continuous conversion mode */
 265:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set ALIGN bit according to ADC_DataAlign value */
 266:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
 267:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
 268:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set CONT bit according to ADC_ContinuousConvMode value */
 269:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 24732              		.loc 1 269 0
 24733 0056 3B68     		ldr	r3, [r7, #0]
 24734 0058 1A69     		ldr	r2, [r3, #16]
 270:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         ADC_InitStruct->ADC_ExternalTrigConv | 
 24735              		.loc 1 270 0
 24736 005a 3B68     		ldr	r3, [r7, #0]
 24737 005c DB68     		ldr	r3, [r3, #12]
 269:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 24738              		.loc 1 269 0
 24739 005e 1A43     		orrs	r2, r2, r3
 271:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 24740              		.loc 1 271 0
 24741 0060 3B68     		ldr	r3, [r7, #0]
 24742 0062 9B68     		ldr	r3, [r3, #8]
 270:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         ADC_InitStruct->ADC_ExternalTrigConv | 
 24743              		.loc 1 270 0
 24744 0064 1A43     		orrs	r2, r2, r3
 272:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 24745              		.loc 1 272 0
 24746 0066 3B68     		ldr	r3, [r7, #0]
 24747 0068 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 24748 006a 4FEA4303 		lsl	r3, r3, #1
 269:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 24749              		.loc 1 269 0
 24750 006e 42EA0303 		orr	r3, r2, r3
 24751 0072 FA68     		ldr	r2, [r7, #12]
 24752 0074 42EA0303 		orr	r3, r2, r3
 24753 0078 FB60     		str	r3, [r7, #12]
 273:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         
 274:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Write to ADCx CR2 */
 275:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->CR2 = tmpreg1;
 24754              		.loc 1 275 0
 24755 007a 7B68     		ldr	r3, [r7, #4]
 24756 007c FA68     		ldr	r2, [r7, #12]
 24757 007e 9A60     		str	r2, [r3, #8]
 276:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /*---------------------------- ADCx SQR1 Configuration -----------------*/
 277:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the ADCx SQR1 value */
 278:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 = ADCx->SQR1;
 24758              		.loc 1 278 0
 24759 0080 7B68     		ldr	r3, [r7, #4]
 24760 0082 DB6A     		ldr	r3, [r3, #44]
 24761 0084 FB60     		str	r3, [r7, #12]
 279:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 280:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear L bits */
 281:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 &= SQR1_L_RESET;
 24762              		.loc 1 281 0
 24763 0086 FB68     		ldr	r3, [r7, #12]
 24764 0088 23F47003 		bic	r3, r3, #15728640
 24765 008c FB60     		str	r3, [r7, #12]
 282:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 283:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Configure ADCx: regular channel sequence length */
 284:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set L bits according to ADC_NbrOfConversion value */
 285:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 24766              		.loc 1 285 0
 24767 008e 3B68     		ldr	r3, [r7, #0]
 24768 0090 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
 24769 0092 03F1FF33 		add	r3, r3, #-1
 24770 0096 DAB2     		uxtb	r2, r3
 24771 0098 FB7A     		ldrb	r3, [r7, #11]
 24772 009a 42EA0303 		orr	r3, r2, r3
 24773 009e FB72     		strb	r3, [r7, #11]
 286:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 24774              		.loc 1 286 0
 24775 00a0 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 24776 00a2 4FEA0353 		lsl	r3, r3, #20
 24777 00a6 FA68     		ldr	r2, [r7, #12]
 24778 00a8 42EA0303 		orr	r3, r2, r3
 24779 00ac FB60     		str	r3, [r7, #12]
 287:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 288:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Write to ADCx SQR1 */
 289:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->SQR1 = tmpreg1;
 24780              		.loc 1 289 0
 24781 00ae 7B68     		ldr	r3, [r7, #4]
 24782 00b0 FA68     		ldr	r2, [r7, #12]
 24783 00b2 DA62     		str	r2, [r3, #44]
 290:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 24784              		.loc 1 290 0
 24785 00b4 07F11407 		add	r7, r7, #20
 24786 00b8 BD46     		mov	sp, r7
 24787 00ba 80BC     		pop	{r7}
 24788 00bc 7047     		bx	lr
 24789              	.L4:
 24790 00be 00BF     		.align	2
 24791              	.L3:
 24792 00c0 FDF7FFC0 		.word	-1056966659
 24793              		.cfi_endproc
 24794              	.LFE111:
 24796              		.section	.text.ADC_StructInit,"ax",%progbits
 24797              		.align	2
 24798              		.global	ADC_StructInit
 24799              		.thumb
 24800              		.thumb_func
 24802              	ADC_StructInit:
 24803              	.LFB112:
 291:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 292:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 293:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Fills each ADC_InitStruct member with its default value.
 294:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @note   This function is used to initialize the global features of the ADC ( 
 295:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         Resolution and Data Alignment), however, the rest of the configuration
 296:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         parameters are specific to the regular channels group (scan mode 
 297:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         activation, continuous mode activation, External trigger source and 
 298:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         edge, number of conversion in the regular channels group sequencer).  
 299:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure which will 
 300:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         be initialized.
 301:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 302:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 303:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
 304:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 24804              		.loc 1 304 0
 24805              		.cfi_startproc
 24806              		@ args = 0, pretend = 0, frame = 8
 24807              		@ frame_needed = 1, uses_anonymous_args = 0
 24808              		@ link register save eliminated.
 24809 0000 80B4     		push	{r7}
 24810              	.LCFI5:
 24811              		.cfi_def_cfa_offset 4
 24812 0002 83B0     		sub	sp, sp, #12
 24813              	.LCFI6:
 24814              		.cfi_def_cfa_offset 16
 24815 0004 00AF     		add	r7, sp, #0
 24816              		.cfi_offset 7, -4
 24817              	.LCFI7:
 24818              		.cfi_def_cfa_register 7
 24819 0006 7860     		str	r0, [r7, #4]
 305:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Initialize the ADC_Mode member */
 306:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;
 24820              		.loc 1 306 0
 24821 0008 7B68     		ldr	r3, [r7, #4]
 24822 000a 4FF00002 		mov	r2, #0
 24823 000e 1A60     		str	r2, [r3, #0]
 307:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 308:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* initialize the ADC_ScanConvMode member */
 309:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 24824              		.loc 1 309 0
 24825 0010 7B68     		ldr	r3, [r7, #4]
 24826 0012 4FF00002 		mov	r2, #0
 24827 0016 1A71     		strb	r2, [r3, #4]
 310:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 311:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Initialize the ADC_ContinuousConvMode member */
 312:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 24828              		.loc 1 312 0
 24829 0018 7B68     		ldr	r3, [r7, #4]
 24830 001a 4FF00002 		mov	r2, #0
 24831 001e 5A71     		strb	r2, [r3, #5]
 313:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 314:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Initialize the ADC_ExternalTrigConvEdge member */
 315:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 24832              		.loc 1 315 0
 24833 0020 7B68     		ldr	r3, [r7, #4]
 24834 0022 4FF00002 		mov	r2, #0
 24835 0026 9A60     		str	r2, [r3, #8]
 316:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 317:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Initialize the ADC_ExternalTrigConv member */
 318:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 24836              		.loc 1 318 0
 24837 0028 7B68     		ldr	r3, [r7, #4]
 24838 002a 4FF00002 		mov	r2, #0
 24839 002e DA60     		str	r2, [r3, #12]
 319:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 320:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Initialize the ADC_DataAlign member */
 321:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 24840              		.loc 1 321 0
 24841 0030 7B68     		ldr	r3, [r7, #4]
 24842 0032 4FF00002 		mov	r2, #0
 24843 0036 1A61     		str	r2, [r3, #16]
 322:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 323:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Initialize the ADC_NbrOfConversion member */
 324:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_NbrOfConversion = 1;
 24844              		.loc 1 324 0
 24845 0038 7B68     		ldr	r3, [r7, #4]
 24846 003a 4FF00102 		mov	r2, #1
 24847 003e 1A75     		strb	r2, [r3, #20]
 325:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 24848              		.loc 1 325 0
 24849 0040 07F10C07 		add	r7, r7, #12
 24850 0044 BD46     		mov	sp, r7
 24851 0046 80BC     		pop	{r7}
 24852 0048 7047     		bx	lr
 24853              		.cfi_endproc
 24854              	.LFE112:
 24856 004a 00BF     		.section	.text.ADC_CommonInit,"ax",%progbits
 24857              		.align	2
 24858              		.global	ADC_CommonInit
 24859              		.thumb
 24860              		.thumb_func
 24862              	ADC_CommonInit:
 24863              	.LFB113:
 326:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 327:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 328:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Initializes the ADCs peripherals according to the specified parameters 
 329:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         in the ADC_CommonInitStruct.
 330:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure 
 331:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         that contains the configuration information for  All ADCs peripherals.
 332:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 333:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 334:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_CommonInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
 335:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 24864              		.loc 1 335 0
 24865              		.cfi_startproc
 24866              		@ args = 0, pretend = 0, frame = 16
 24867              		@ frame_needed = 1, uses_anonymous_args = 0
 24868              		@ link register save eliminated.
 24869 0000 80B4     		push	{r7}
 24870              	.LCFI8:
 24871              		.cfi_def_cfa_offset 4
 24872 0002 85B0     		sub	sp, sp, #20
 24873              	.LCFI9:
 24874              		.cfi_def_cfa_offset 24
 24875 0004 00AF     		add	r7, sp, #0
 24876              		.cfi_offset 7, -4
 24877              	.LCFI10:
 24878              		.cfi_def_cfa_register 7
 24879 0006 7860     		str	r0, [r7, #4]
 336:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg1 = 0;
 24880              		.loc 1 336 0
 24881 0008 4FF00003 		mov	r3, #0
 24882 000c FB60     		str	r3, [r7, #12]
 337:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 338:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_MODE(ADC_CommonInitStruct->ADC_Mode));
 339:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
 340:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
 341:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
 342:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /*---------------------------- ADC CCR Configuration -----------------*/
 343:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the ADC CCR value */
 344:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 = ADC->CCR;
 24883              		.loc 1 344 0
 24884 000e 104B     		ldr	r3, .L7
 24885 0010 5B68     		ldr	r3, [r3, #4]
 24886 0012 FB60     		str	r3, [r7, #12]
 345:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 346:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear MULTI, DELAY, DMA and ADCPRE bits */
 347:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 &= CR_CLEAR_MASK;
 24887              		.loc 1 347 0
 24888 0014 FA68     		ldr	r2, [r7, #12]
 24889 0016 0F4B     		ldr	r3, .L7+4
 24890 0018 02EA0303 		and	r3, r2, r3
 24891 001c FB60     		str	r3, [r7, #12]
 348:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 349:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Configure ADCx: Multi mode, Delay between two sampling time, ADC prescaler,
 350:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      and DMA access mode for multimode */
 351:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set MULTI bits according to ADC_Mode value */
 352:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set ADCPRE bits according to ADC_Prescaler value */
 353:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set DMA bits according to ADC_DMAAccessMode value */
 354:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
 355:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 24892              		.loc 1 355 0
 24893 001e 7B68     		ldr	r3, [r7, #4]
 24894 0020 1A68     		ldr	r2, [r3, #0]
 356:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         ADC_CommonInitStruct->ADC_Prescaler | 
 24895              		.loc 1 356 0
 24896 0022 7B68     		ldr	r3, [r7, #4]
 24897 0024 5B68     		ldr	r3, [r3, #4]
 355:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 24898              		.loc 1 355 0
 24899 0026 1A43     		orrs	r2, r2, r3
 357:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         ADC_CommonInitStruct->ADC_DMAAccessMode | 
 24900              		.loc 1 357 0
 24901 0028 7B68     		ldr	r3, [r7, #4]
 24902 002a 9B68     		ldr	r3, [r3, #8]
 356:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         ADC_CommonInitStruct->ADC_Prescaler | 
 24903              		.loc 1 356 0
 24904 002c 1A43     		orrs	r2, r2, r3
 358:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         ADC_CommonInitStruct->ADC_TwoSamplingDelay);
 24905              		.loc 1 358 0
 24906 002e 7B68     		ldr	r3, [r7, #4]
 24907 0030 DB68     		ldr	r3, [r3, #12]
 355:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 24908              		.loc 1 355 0
 24909 0032 42EA0303 		orr	r3, r2, r3
 24910 0036 FA68     		ldr	r2, [r7, #12]
 24911 0038 42EA0303 		orr	r3, r2, r3
 24912 003c FB60     		str	r3, [r7, #12]
 359:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         
 360:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Write to ADC CCR */
 361:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC->CCR = tmpreg1;
 24913              		.loc 1 361 0
 24914 003e 044B     		ldr	r3, .L7
 24915 0040 FA68     		ldr	r2, [r7, #12]
 24916 0042 5A60     		str	r2, [r3, #4]
 362:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 24917              		.loc 1 362 0
 24918 0044 07F11407 		add	r7, r7, #20
 24919 0048 BD46     		mov	sp, r7
 24920 004a 80BC     		pop	{r7}
 24921 004c 7047     		bx	lr
 24922              	.L8:
 24923 004e 00BF     		.align	2
 24924              	.L7:
 24925 0050 00230140 		.word	1073816320
 24926 0054 E030FCFF 		.word	-249632
 24927              		.cfi_endproc
 24928              	.LFE113:
 24930              		.section	.text.ADC_CommonStructInit,"ax",%progbits
 24931              		.align	2
 24932              		.global	ADC_CommonStructInit
 24933              		.thumb
 24934              		.thumb_func
 24936              	ADC_CommonStructInit:
 24937              	.LFB114:
 363:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 364:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 365:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Fills each ADC_CommonInitStruct member with its default value.
 366:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure
 367:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         which will be initialized.
 368:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 369:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 370:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_CommonStructInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
 371:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 24938              		.loc 1 371 0
 24939              		.cfi_startproc
 24940              		@ args = 0, pretend = 0, frame = 8
 24941              		@ frame_needed = 1, uses_anonymous_args = 0
 24942              		@ link register save eliminated.
 24943 0000 80B4     		push	{r7}
 24944              	.LCFI11:
 24945              		.cfi_def_cfa_offset 4
 24946 0002 83B0     		sub	sp, sp, #12
 24947              	.LCFI12:
 24948              		.cfi_def_cfa_offset 16
 24949 0004 00AF     		add	r7, sp, #0
 24950              		.cfi_offset 7, -4
 24951              	.LCFI13:
 24952              		.cfi_def_cfa_register 7
 24953 0006 7860     		str	r0, [r7, #4]
 372:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Initialize the ADC_Mode member */
 373:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_CommonInitStruct->ADC_Mode = ADC_Mode_Independent;
 24954              		.loc 1 373 0
 24955 0008 7B68     		ldr	r3, [r7, #4]
 24956 000a 4FF00002 		mov	r2, #0
 24957 000e 1A60     		str	r2, [r3, #0]
 374:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 375:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* initialize the ADC_Prescaler member */
 376:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_CommonInitStruct->ADC_Prescaler = ADC_Prescaler_Div2;
 24958              		.loc 1 376 0
 24959 0010 7B68     		ldr	r3, [r7, #4]
 24960 0012 4FF00002 		mov	r2, #0
 24961 0016 5A60     		str	r2, [r3, #4]
 377:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 378:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Initialize the ADC_DMAAccessMode member */
 379:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_CommonInitStruct->ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 24962              		.loc 1 379 0
 24963 0018 7B68     		ldr	r3, [r7, #4]
 24964 001a 4FF00002 		mov	r2, #0
 24965 001e 9A60     		str	r2, [r3, #8]
 380:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 381:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Initialize the ADC_TwoSamplingDelay member */
 382:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_CommonInitStruct->ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 24966              		.loc 1 382 0
 24967 0020 7B68     		ldr	r3, [r7, #4]
 24968 0022 4FF00002 		mov	r2, #0
 24969 0026 DA60     		str	r2, [r3, #12]
 383:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 24970              		.loc 1 383 0
 24971 0028 07F10C07 		add	r7, r7, #12
 24972 002c BD46     		mov	sp, r7
 24973 002e 80BC     		pop	{r7}
 24974 0030 7047     		bx	lr
 24975              		.cfi_endproc
 24976              	.LFE114:
 24978 0032 00BF     		.section	.text.ADC_Cmd,"ax",%progbits
 24979              		.align	2
 24980              		.global	ADC_Cmd
 24981              		.thumb
 24982              		.thumb_func
 24984              	ADC_Cmd:
 24985              	.LFB115:
 384:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 385:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 386:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the specified ADC peripheral.
 387:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 388:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the ADCx peripheral. 
 389:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 390:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 391:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 392:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 393:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 24986              		.loc 1 393 0
 24987              		.cfi_startproc
 24988              		@ args = 0, pretend = 0, frame = 8
 24989              		@ frame_needed = 1, uses_anonymous_args = 0
 24990              		@ link register save eliminated.
 24991 0000 80B4     		push	{r7}
 24992              	.LCFI14:
 24993              		.cfi_def_cfa_offset 4
 24994 0002 83B0     		sub	sp, sp, #12
 24995              	.LCFI15:
 24996              		.cfi_def_cfa_offset 16
 24997 0004 00AF     		add	r7, sp, #0
 24998              		.cfi_offset 7, -4
 24999              	.LCFI16:
 25000              		.cfi_def_cfa_register 7
 25001 0006 7860     		str	r0, [r7, #4]
 25002 0008 0B46     		mov	r3, r1
 25003 000a FB70     		strb	r3, [r7, #3]
 394:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 395:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 396:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 397:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 25004              		.loc 1 397 0
 25005 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 25006 000e 002B     		cmp	r3, #0
 25007 0010 06D0     		beq	.L11
 398:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 399:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Set the ADON bit to wake up the ADC from power down mode */
 400:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 25008              		.loc 1 400 0
 25009 0012 7B68     		ldr	r3, [r7, #4]
 25010 0014 9B68     		ldr	r3, [r3, #8]
 25011 0016 43F00102 		orr	r2, r3, #1
 25012 001a 7B68     		ldr	r3, [r7, #4]
 25013 001c 9A60     		str	r2, [r3, #8]
 25014 001e 05E0     		b	.L10
 25015              	.L11:
 401:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 402:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
 403:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 404:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC peripheral */
 405:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 25016              		.loc 1 405 0
 25017 0020 7B68     		ldr	r3, [r7, #4]
 25018 0022 9B68     		ldr	r3, [r3, #8]
 25019 0024 23F00102 		bic	r2, r3, #1
 25020 0028 7B68     		ldr	r3, [r7, #4]
 25021 002a 9A60     		str	r2, [r3, #8]
 25022              	.L10:
 406:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 407:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 25023              		.loc 1 407 0
 25024 002c 07F10C07 		add	r7, r7, #12
 25025 0030 BD46     		mov	sp, r7
 25026 0032 80BC     		pop	{r7}
 25027 0034 7047     		bx	lr
 25028              		.cfi_endproc
 25029              	.LFE115:
 25031 0036 00BF     		.section	.text.ADC_AnalogWatchdogCmd,"ax",%progbits
 25032              		.align	2
 25033              		.global	ADC_AnalogWatchdogCmd
 25034              		.thumb
 25035              		.thumb_func
 25037              	ADC_AnalogWatchdogCmd:
 25038              	.LFB116:
 408:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 409:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @}
 410:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 411:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 412:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @defgroup ADC_Group2 Analog Watchdog configuration functions
 413:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *  @brief    Analog Watchdog configuration functions 
 414:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *
 415:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @verbatim   
 416:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================
 417:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                     Analog Watchdog configuration functions
 418:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================  
 419:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 420:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   This section provides functions allowing to configure the Analog Watchdog
 421:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   (AWD) feature in the ADC.
 422:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 423:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   A typical configuration Analog Watchdog is done following these steps :
 424:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    1. the ADC guarded channel(s) is (are) selected using the 
 425:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       ADC_AnalogWatchdogSingleChannelConfig() function.
 426:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    2. The Analog watchdog lower and higher threshold are configured using the  
 427:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      ADC_AnalogWatchdogThresholdsConfig() function.
 428:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    3. The Analog watchdog is enabled and configured to enable the check, on one
 429:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       or more channels, using the  ADC_AnalogWatchdogCmd() function.
 430:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 431:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @endverbatim
 432:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
 433:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 434:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 435:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 436:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the analog watchdog on single/all regular or 
 437:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         injected channels
 438:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 439:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_AnalogWatchdog: the ADC analog watchdog configuration.
 440:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         This parameter can be one of the following values:
 441:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_SingleRegEnable: Analog watchdog on a single regular channel
 442:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_SingleInjecEnable: Analog watchdog on a single injected chan
 443:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_SingleRegOrInjecEnable: Analog watchdog on a single regular 
 444:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_AllRegEnable: Analog watchdog on all regular channel
 445:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_AllInjecEnable: Analog watchdog on all injected channel
 446:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_AllRegAllInjecEnable: Analog watchdog on all regular and inj
 447:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_None: No channel guarded by the analog watchdog
 448:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None	  
 449:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 450:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_AnalogWatchdogCmd(ADC_TypeDef* ADCx, uint32_t ADC_AnalogWatchdog)
 451:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 25039              		.loc 1 451 0
 25040              		.cfi_startproc
 25041              		@ args = 0, pretend = 0, frame = 16
 25042              		@ frame_needed = 1, uses_anonymous_args = 0
 25043              		@ link register save eliminated.
 25044 0000 80B4     		push	{r7}
 25045              	.LCFI17:
 25046              		.cfi_def_cfa_offset 4
 25047 0002 85B0     		sub	sp, sp, #20
 25048              	.LCFI18:
 25049              		.cfi_def_cfa_offset 24
 25050 0004 00AF     		add	r7, sp, #0
 25051              		.cfi_offset 7, -4
 25052              	.LCFI19:
 25053              		.cfi_def_cfa_register 7
 25054 0006 7860     		str	r0, [r7, #4]
 25055 0008 3960     		str	r1, [r7, #0]
 452:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg = 0;
 25056              		.loc 1 452 0
 25057 000a 4FF00003 		mov	r3, #0
 25058 000e FB60     		str	r3, [r7, #12]
 453:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 454:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 455:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ANALOG_WATCHDOG(ADC_AnalogWatchdog));
 456:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 457:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the old register value */
 458:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg = ADCx->CR1;
 25059              		.loc 1 458 0
 25060 0010 7B68     		ldr	r3, [r7, #4]
 25061 0012 5B68     		ldr	r3, [r3, #4]
 25062 0014 FB60     		str	r3, [r7, #12]
 459:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 460:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear AWDEN, JAWDEN and AWDSGL bits */
 461:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg &= CR1_AWDMode_RESET;
 25063              		.loc 1 461 0
 25064 0016 FB68     		ldr	r3, [r7, #12]
 25065 0018 23F44003 		bic	r3, r3, #12582912
 25066 001c 23F40073 		bic	r3, r3, #512
 25067 0020 FB60     		str	r3, [r7, #12]
 462:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 463:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the analog watchdog enable mode */
 464:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg |= ADC_AnalogWatchdog;
 25068              		.loc 1 464 0
 25069 0022 FA68     		ldr	r2, [r7, #12]
 25070 0024 3B68     		ldr	r3, [r7, #0]
 25071 0026 42EA0303 		orr	r3, r2, r3
 25072 002a FB60     		str	r3, [r7, #12]
 465:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 466:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Store the new register value */
 467:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->CR1 = tmpreg;
 25073              		.loc 1 467 0
 25074 002c 7B68     		ldr	r3, [r7, #4]
 25075 002e FA68     		ldr	r2, [r7, #12]
 25076 0030 5A60     		str	r2, [r3, #4]
 468:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 25077              		.loc 1 468 0
 25078 0032 07F11407 		add	r7, r7, #20
 25079 0036 BD46     		mov	sp, r7
 25080 0038 80BC     		pop	{r7}
 25081 003a 7047     		bx	lr
 25082              		.cfi_endproc
 25083              	.LFE116:
 25085              		.section	.text.ADC_AnalogWatchdogThresholdsConfig,"ax",%progbits
 25086              		.align	2
 25087              		.global	ADC_AnalogWatchdogThresholdsConfig
 25088              		.thumb
 25089              		.thumb_func
 25091              	ADC_AnalogWatchdogThresholdsConfig:
 25092              	.LFB117:
 469:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 470:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 471:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Configures the high and low thresholds of the analog watchdog.
 472:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 473:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  HighThreshold: the ADC analog watchdog High threshold value.
 474:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter must be a 12-bit value.
 475:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  LowThreshold:  the ADC analog watchdog Low threshold value.
 476:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter must be a 12-bit value.
 477:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 478:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 479:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_AnalogWatchdogThresholdsConfig(ADC_TypeDef* ADCx, uint16_t HighThreshold,
 480:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                                         uint16_t LowThreshold)
 481:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 25093              		.loc 1 481 0
 25094              		.cfi_startproc
 25095              		@ args = 0, pretend = 0, frame = 8
 25096              		@ frame_needed = 1, uses_anonymous_args = 0
 25097              		@ link register save eliminated.
 25098 0000 80B4     		push	{r7}
 25099              	.LCFI20:
 25100              		.cfi_def_cfa_offset 4
 25101 0002 83B0     		sub	sp, sp, #12
 25102              	.LCFI21:
 25103              		.cfi_def_cfa_offset 16
 25104 0004 00AF     		add	r7, sp, #0
 25105              		.cfi_offset 7, -4
 25106              	.LCFI22:
 25107              		.cfi_def_cfa_register 7
 25108 0006 7860     		str	r0, [r7, #4]
 25109 0008 1346     		mov	r3, r2
 25110 000a 0A46     		mov	r2, r1	@ movhi
 25111 000c 7A80     		strh	r2, [r7, #2]	@ movhi
 25112 000e 3B80     		strh	r3, [r7, #0]	@ movhi
 482:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 483:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 484:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_THRESHOLD(HighThreshold));
 485:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_THRESHOLD(LowThreshold));
 486:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 487:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the ADCx high threshold */
 488:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->HTR = HighThreshold;
 25113              		.loc 1 488 0
 25114 0010 7A88     		ldrh	r2, [r7, #2]
 25115 0012 7B68     		ldr	r3, [r7, #4]
 25116 0014 5A62     		str	r2, [r3, #36]
 489:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 490:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the ADCx low threshold */
 491:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->LTR = LowThreshold;
 25117              		.loc 1 491 0
 25118 0016 3A88     		ldrh	r2, [r7, #0]
 25119 0018 7B68     		ldr	r3, [r7, #4]
 25120 001a 9A62     		str	r2, [r3, #40]
 492:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 25121              		.loc 1 492 0
 25122 001c 07F10C07 		add	r7, r7, #12
 25123 0020 BD46     		mov	sp, r7
 25124 0022 80BC     		pop	{r7}
 25125 0024 7047     		bx	lr
 25126              		.cfi_endproc
 25127              	.LFE117:
 25129 0026 00BF     		.section	.text.ADC_AnalogWatchdogSingleChannelConfig,"ax",%progbits
 25130              		.align	2
 25131              		.global	ADC_AnalogWatchdogSingleChannelConfig
 25132              		.thumb
 25133              		.thumb_func
 25135              	ADC_AnalogWatchdogSingleChannelConfig:
 25136              	.LFB118:
 493:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 494:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 495:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Configures the analog watchdog guarded single channel
 496:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 497:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_Channel: the ADC channel to configure for the analog watchdog. 
 498:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
 499:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_0: ADC Channel0 selected
 500:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_1: ADC Channel1 selected
 501:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_2: ADC Channel2 selected
 502:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_3: ADC Channel3 selected
 503:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_4: ADC Channel4 selected
 504:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_5: ADC Channel5 selected
 505:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_6: ADC Channel6 selected
 506:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_7: ADC Channel7 selected
 507:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_8: ADC Channel8 selected
 508:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_9: ADC Channel9 selected
 509:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_10: ADC Channel10 selected
 510:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_11: ADC Channel11 selected
 511:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_12: ADC Channel12 selected
 512:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_13: ADC Channel13 selected
 513:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_14: ADC Channel14 selected
 514:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_15: ADC Channel15 selected
 515:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_16: ADC Channel16 selected
 516:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_17: ADC Channel17 selected
 517:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_18: ADC Channel18 selected
 518:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 519:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 520:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_AnalogWatchdogSingleChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel)
 521:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 25137              		.loc 1 521 0
 25138              		.cfi_startproc
 25139              		@ args = 0, pretend = 0, frame = 16
 25140              		@ frame_needed = 1, uses_anonymous_args = 0
 25141              		@ link register save eliminated.
 25142 0000 80B4     		push	{r7}
 25143              	.LCFI23:
 25144              		.cfi_def_cfa_offset 4
 25145 0002 85B0     		sub	sp, sp, #20
 25146              	.LCFI24:
 25147              		.cfi_def_cfa_offset 24
 25148 0004 00AF     		add	r7, sp, #0
 25149              		.cfi_offset 7, -4
 25150              	.LCFI25:
 25151              		.cfi_def_cfa_register 7
 25152 0006 7860     		str	r0, [r7, #4]
 25153 0008 0B46     		mov	r3, r1
 25154 000a FB70     		strb	r3, [r7, #3]
 522:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg = 0;
 25155              		.loc 1 522 0
 25156 000c 4FF00003 		mov	r3, #0
 25157 0010 FB60     		str	r3, [r7, #12]
 523:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 524:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 525:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_CHANNEL(ADC_Channel));
 526:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 527:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the old register value */
 528:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg = ADCx->CR1;
 25158              		.loc 1 528 0
 25159 0012 7B68     		ldr	r3, [r7, #4]
 25160 0014 5B68     		ldr	r3, [r3, #4]
 25161 0016 FB60     		str	r3, [r7, #12]
 529:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 530:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear the Analog watchdog channel select bits */
 531:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg &= CR1_AWDCH_RESET;
 25162              		.loc 1 531 0
 25163 0018 FB68     		ldr	r3, [r7, #12]
 25164 001a 23F01F03 		bic	r3, r3, #31
 25165 001e FB60     		str	r3, [r7, #12]
 532:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 533:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the Analog watchdog channel */
 534:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg |= ADC_Channel;
 25166              		.loc 1 534 0
 25167 0020 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 25168 0022 FA68     		ldr	r2, [r7, #12]
 25169 0024 42EA0303 		orr	r3, r2, r3
 25170 0028 FB60     		str	r3, [r7, #12]
 535:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 536:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Store the new register value */
 537:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->CR1 = tmpreg;
 25171              		.loc 1 537 0
 25172 002a 7B68     		ldr	r3, [r7, #4]
 25173 002c FA68     		ldr	r2, [r7, #12]
 25174 002e 5A60     		str	r2, [r3, #4]
 538:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 25175              		.loc 1 538 0
 25176 0030 07F11407 		add	r7, r7, #20
 25177 0034 BD46     		mov	sp, r7
 25178 0036 80BC     		pop	{r7}
 25179 0038 7047     		bx	lr
 25180              		.cfi_endproc
 25181              	.LFE118:
 25183 003a 00BF     		.section	.text.ADC_TempSensorVrefintCmd,"ax",%progbits
 25184              		.align	2
 25185              		.global	ADC_TempSensorVrefintCmd
 25186              		.thumb
 25187              		.thumb_func
 25189              	ADC_TempSensorVrefintCmd:
 25190              	.LFB119:
 539:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 540:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @}
 541:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 542:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 543:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @defgroup ADC_Group3 Temperature Sensor, Vrefint (Voltage Reference internal) 
 544:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *            and VBAT (Voltage BATtery) management functions
 545:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *  @brief   Temperature Sensor, Vrefint and VBAT management functions 
 546:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *
 547:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @verbatim   
 548:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================
 549:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                Temperature Sensor, Vrefint and VBAT management functions
 550:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================  
 551:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 552:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   This section provides functions allowing to enable/ disable the internal 
 553:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   connections between the ADC and the Temperature Sensor, the Vrefint and the
 554:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Vbat sources.
 555:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      
 556:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   A typical configuration to get the Temperature sensor and Vrefint channels 
 557:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   voltages is done following these steps :
 558:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    1. Enable the internal connection of Temperature sensor and Vrefint sources 
 559:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       with the ADC channels using ADC_TempSensorVrefintCmd() function. 
 560:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    2. Select the ADC_Channel_TempSensor and/or ADC_Channel_Vrefint using 
 561:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       ADC_RegularChannelConfig() or  ADC_InjectedChannelConfig() functions 
 562:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    3. Get the voltage values, using ADC_GetConversionValue() or  
 563:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       ADC_GetInjectedConversionValue().
 564:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 565:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   A typical configuration to get the VBAT channel voltage is done following 
 566:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   these steps :
 567:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    1. Enable the internal connection of VBAT source with the ADC channel using 
 568:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       ADC_VBATCmd() function. 
 569:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    2. Select the ADC_Channel_Vbat using ADC_RegularChannelConfig() or  
 570:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       ADC_InjectedChannelConfig() functions 
 571:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    3. Get the voltage value, using ADC_GetConversionValue() or  
 572:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       ADC_GetInjectedConversionValue().
 573:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  
 574:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @endverbatim
 575:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
 576:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 577:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 578:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 579:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 580:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the temperature sensor and Vrefint channels.
 581:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the temperature sensor and Vrefint channels.
 582:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 583:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 584:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 585:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_TempSensorVrefintCmd(FunctionalState NewState)                
 586:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 25191              		.loc 1 586 0
 25192              		.cfi_startproc
 25193              		@ args = 0, pretend = 0, frame = 8
 25194              		@ frame_needed = 1, uses_anonymous_args = 0
 25195              		@ link register save eliminated.
 25196 0000 80B4     		push	{r7}
 25197              	.LCFI26:
 25198              		.cfi_def_cfa_offset 4
 25199 0002 83B0     		sub	sp, sp, #12
 25200              	.LCFI27:
 25201              		.cfi_def_cfa_offset 16
 25202 0004 00AF     		add	r7, sp, #0
 25203              		.cfi_offset 7, -4
 25204              	.LCFI28:
 25205              		.cfi_def_cfa_register 7
 25206 0006 0346     		mov	r3, r0
 25207 0008 FB71     		strb	r3, [r7, #7]
 587:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 588:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 589:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 25208              		.loc 1 589 0
 25209 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 25210 000c 002B     		cmp	r3, #0
 25211 000e 06D0     		beq	.L17
 590:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 591:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the temperature sensor and Vrefint channel*/
 592:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADC->CCR |= (uint32_t)ADC_CCR_TSVREFE;
 25212              		.loc 1 592 0
 25213 0010 084B     		ldr	r3, .L19
 25214 0012 084A     		ldr	r2, .L19
 25215 0014 5268     		ldr	r2, [r2, #4]
 25216 0016 42F40002 		orr	r2, r2, #8388608
 25217 001a 5A60     		str	r2, [r3, #4]
 25218 001c 05E0     		b	.L16
 25219              	.L17:
 593:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 594:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
 595:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 596:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the temperature sensor and Vrefint channel*/
 597:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADC->CCR &= (uint32_t)(~ADC_CCR_TSVREFE);
 25220              		.loc 1 597 0
 25221 001e 054B     		ldr	r3, .L19
 25222 0020 044A     		ldr	r2, .L19
 25223 0022 5268     		ldr	r2, [r2, #4]
 25224 0024 22F40002 		bic	r2, r2, #8388608
 25225 0028 5A60     		str	r2, [r3, #4]
 25226              	.L16:
 598:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 599:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 25227              		.loc 1 599 0
 25228 002a 07F10C07 		add	r7, r7, #12
 25229 002e BD46     		mov	sp, r7
 25230 0030 80BC     		pop	{r7}
 25231 0032 7047     		bx	lr
 25232              	.L20:
 25233              		.align	2
 25234              	.L19:
 25235 0034 00230140 		.word	1073816320
 25236              		.cfi_endproc
 25237              	.LFE119:
 25239              		.section	.text.ADC_VBATCmd,"ax",%progbits
 25240              		.align	2
 25241              		.global	ADC_VBATCmd
 25242              		.thumb
 25243              		.thumb_func
 25245              	ADC_VBATCmd:
 25246              	.LFB120:
 600:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 601:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 602:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the VBAT (Voltage Battery) channel.
 603:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the VBAT channel.
 604:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 605:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 606:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 607:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_VBATCmd(FunctionalState NewState)                             
 608:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 25247              		.loc 1 608 0
 25248              		.cfi_startproc
 25249              		@ args = 0, pretend = 0, frame = 8
 25250              		@ frame_needed = 1, uses_anonymous_args = 0
 25251              		@ link register save eliminated.
 25252 0000 80B4     		push	{r7}
 25253              	.LCFI29:
 25254              		.cfi_def_cfa_offset 4
 25255 0002 83B0     		sub	sp, sp, #12
 25256              	.LCFI30:
 25257              		.cfi_def_cfa_offset 16
 25258 0004 00AF     		add	r7, sp, #0
 25259              		.cfi_offset 7, -4
 25260              	.LCFI31:
 25261              		.cfi_def_cfa_register 7
 25262 0006 0346     		mov	r3, r0
 25263 0008 FB71     		strb	r3, [r7, #7]
 609:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 610:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 611:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 25264              		.loc 1 611 0
 25265 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 25266 000c 002B     		cmp	r3, #0
 25267 000e 06D0     		beq	.L22
 612:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 613:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the VBAT channel*/
 614:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADC->CCR |= (uint32_t)ADC_CCR_VBATE;
 25268              		.loc 1 614 0
 25269 0010 084B     		ldr	r3, .L24
 25270 0012 084A     		ldr	r2, .L24
 25271 0014 5268     		ldr	r2, [r2, #4]
 25272 0016 42F48002 		orr	r2, r2, #4194304
 25273 001a 5A60     		str	r2, [r3, #4]
 25274 001c 05E0     		b	.L21
 25275              	.L22:
 615:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 616:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
 617:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 618:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the VBAT channel*/
 619:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADC->CCR &= (uint32_t)(~ADC_CCR_VBATE);
 25276              		.loc 1 619 0
 25277 001e 054B     		ldr	r3, .L24
 25278 0020 044A     		ldr	r2, .L24
 25279 0022 5268     		ldr	r2, [r2, #4]
 25280 0024 22F48002 		bic	r2, r2, #4194304
 25281 0028 5A60     		str	r2, [r3, #4]
 25282              	.L21:
 620:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 621:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 25283              		.loc 1 621 0
 25284 002a 07F10C07 		add	r7, r7, #12
 25285 002e BD46     		mov	sp, r7
 25286 0030 80BC     		pop	{r7}
 25287 0032 7047     		bx	lr
 25288              	.L25:
 25289              		.align	2
 25290              	.L24:
 25291 0034 00230140 		.word	1073816320
 25292              		.cfi_endproc
 25293              	.LFE120:
 25295              		.section	.text.ADC_RegularChannelConfig,"ax",%progbits
 25296              		.align	2
 25297              		.global	ADC_RegularChannelConfig
 25298              		.thumb
 25299              		.thumb_func
 25301              	ADC_RegularChannelConfig:
 25302              	.LFB121:
 622:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 623:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 624:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @}
 625:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 626:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 627:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @defgroup ADC_Group4 Regular Channels Configuration functions
 628:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *  @brief   Regular Channels Configuration functions 
 629:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *
 630:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @verbatim   
 631:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================
 632:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                   Regular Channels Configuration functions
 633:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================  
 634:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 635:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   This section provides functions allowing to manage the ADC's regular channels,
 636:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   it is composed of 2 sub sections : 
 637:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 638:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   1. Configuration and management functions for regular channels: This subsection 
 639:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      provides functions allowing to configure the ADC regular channels :    
 640:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - Configure the rank in the regular group sequencer for each channel
 641:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - Configure the sampling time for each channel
 642:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - select the conversion Trigger for regular channels
 643:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - select the desired EOC event behavior configuration
 644:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - Activate the continuous Mode  (*)
 645:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - Activate the Discontinuous Mode 
 646:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      Please Note that the following features for regular channels are configurated
 647:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      using the ADC_Init() function : 
 648:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - scan mode activation 
 649:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - continuous mode activation (**) 
 650:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - External trigger source  
 651:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - External trigger edge 
 652:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - number of conversion in the regular channels group sequencer.
 653:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      
 654:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      @note (*) and (**) are performing the same configuration
 655:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      
 656:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   2. Get the conversion data: This subsection provides an important function in 
 657:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      the ADC peripheral since it returns the converted data of the current 
 658:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      regular channel. When the Conversion value is read, the EOC Flag is 
 659:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      automatically cleared.
 660:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      
 661:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      @note For multi ADC mode, the last ADC1, ADC2 and ADC3 regular conversions 
 662:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****            results data (in the selected multi mode) can be returned in the same 
 663:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****            time using ADC_GetMultiModeConversionValue() function. 
 664:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****        
 665:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 666:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @endverbatim
 667:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
 668:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 669:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 670:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Configures for the selected ADC regular channel its corresponding
 671:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         rank in the sequencer and its sample time.
 672:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 673:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_Channel: the ADC channel to configure. 
 674:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
 675:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_0: ADC Channel0 selected
 676:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_1: ADC Channel1 selected
 677:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_2: ADC Channel2 selected
 678:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_3: ADC Channel3 selected
 679:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_4: ADC Channel4 selected
 680:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_5: ADC Channel5 selected
 681:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_6: ADC Channel6 selected
 682:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_7: ADC Channel7 selected
 683:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_8: ADC Channel8 selected
 684:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_9: ADC Channel9 selected
 685:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_10: ADC Channel10 selected
 686:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_11: ADC Channel11 selected
 687:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_12: ADC Channel12 selected
 688:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_13: ADC Channel13 selected
 689:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_14: ADC Channel14 selected
 690:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_15: ADC Channel15 selected
 691:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_16: ADC Channel16 selected
 692:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_17: ADC Channel17 selected
 693:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_18: ADC Channel18 selected                       
 694:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  Rank: The rank in the regular group sequencer.
 695:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter must be between 1 to 16.
 696:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_SampleTime: The sample time value to be set for the selected channel. 
 697:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
 698:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_3Cycles: Sample time equal to 3 cycles
 699:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_15Cycles: Sample time equal to 15 cycles
 700:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_28Cycles: Sample time equal to 28 cycles
 701:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_56Cycles: Sample time equal to 56 cycles	
 702:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_84Cycles: Sample time equal to 84 cycles	
 703:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_112Cycles: Sample time equal to 112 cycles	
 704:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
 705:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
 706:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 707:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 708:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_Sam
 709:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 25303              		.loc 1 709 0
 25304              		.cfi_startproc
 25305              		@ args = 0, pretend = 0, frame = 16
 25306              		@ frame_needed = 1, uses_anonymous_args = 0
 25307              		@ link register save eliminated.
 25308 0000 80B4     		push	{r7}
 25309              	.LCFI32:
 25310              		.cfi_def_cfa_offset 4
 25311 0002 85B0     		sub	sp, sp, #20
 25312              	.LCFI33:
 25313              		.cfi_def_cfa_offset 24
 25314 0004 00AF     		add	r7, sp, #0
 25315              		.cfi_offset 7, -4
 25316              	.LCFI34:
 25317              		.cfi_def_cfa_register 7
 25318 0006 7860     		str	r0, [r7, #4]
 25319 0008 F970     		strb	r1, [r7, #3]
 25320 000a BA70     		strb	r2, [r7, #2]
 25321 000c 7B70     		strb	r3, [r7, #1]
 710:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg1 = 0, tmpreg2 = 0;
 25322              		.loc 1 710 0
 25323 000e 4FF00003 		mov	r3, #0
 25324 0012 FB60     		str	r3, [r7, #12]
 25325 0014 4FF00003 		mov	r3, #0
 25326 0018 BB60     		str	r3, [r7, #8]
 711:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 712:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 713:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_CHANNEL(ADC_Channel));
 714:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_REGULAR_RANK(Rank));
 715:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
 716:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 717:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
 718:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (ADC_Channel > ADC_Channel_9)
 25327              		.loc 1 718 0
 25328 001a FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 25329 001c 092B     		cmp	r3, #9
 25330 001e 29D9     		bls	.L27
 719:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 720:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Get the old register value */
 721:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SMPR1;
 25331              		.loc 1 721 0
 25332 0020 7B68     		ldr	r3, [r7, #4]
 25333 0022 DB68     		ldr	r3, [r3, #12]
 25334 0024 FB60     		str	r3, [r7, #12]
 722:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 723:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
 724:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 25335              		.loc 1 724 0
 25336 0026 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 25337 0028 1346     		mov	r3, r2
 25338 002a 4FEA4303 		lsl	r3, r3, #1
 25339 002e 9B18     		adds	r3, r3, r2
 25340 0030 A3F11E03 		sub	r3, r3, #30
 25341 0034 4FF00702 		mov	r2, #7
 25342 0038 02FA03F3 		lsl	r3, r2, r3
 25343 003c BB60     		str	r3, [r7, #8]
 725:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 726:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Clear the old sample time */
 727:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 25344              		.loc 1 727 0
 25345 003e BB68     		ldr	r3, [r7, #8]
 25346 0040 6FEA0303 		mvn	r3, r3
 25347 0044 FA68     		ldr	r2, [r7, #12]
 25348 0046 02EA0303 		and	r3, r2, r3
 25349 004a FB60     		str	r3, [r7, #12]
 728:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 729:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
 730:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 25350              		.loc 1 730 0
 25351 004c 7978     		ldrb	r1, [r7, #1]	@ zero_extendqisi2
 25352 004e FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 25353 0050 1346     		mov	r3, r2
 25354 0052 4FEA4303 		lsl	r3, r3, #1
 25355 0056 9B18     		adds	r3, r3, r2
 25356 0058 A3F11E03 		sub	r3, r3, #30
 25357 005c 01FA03F3 		lsl	r3, r1, r3
 25358 0060 BB60     		str	r3, [r7, #8]
 731:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 732:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Set the new sample time */
 733:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 25359              		.loc 1 733 0
 25360 0062 FA68     		ldr	r2, [r7, #12]
 25361 0064 BB68     		ldr	r3, [r7, #8]
 25362 0066 42EA0303 		orr	r3, r2, r3
 25363 006a FB60     		str	r3, [r7, #12]
 734:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 735:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Store the new register value */
 736:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->SMPR1 = tmpreg1;
 25364              		.loc 1 736 0
 25365 006c 7B68     		ldr	r3, [r7, #4]
 25366 006e FA68     		ldr	r2, [r7, #12]
 25367 0070 DA60     		str	r2, [r3, #12]
 25368 0072 24E0     		b	.L28
 25369              	.L27:
 737:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 738:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else /* ADC_Channel include in ADC_Channel_[0..9] */
 739:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 740:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Get the old register value */
 741:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SMPR2;
 25370              		.loc 1 741 0
 25371 0074 7B68     		ldr	r3, [r7, #4]
 25372 0076 1B69     		ldr	r3, [r3, #16]
 25373 0078 FB60     		str	r3, [r7, #12]
 742:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 743:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
 744:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 25374              		.loc 1 744 0
 25375 007a FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 25376 007c 1346     		mov	r3, r2
 25377 007e 4FEA4303 		lsl	r3, r3, #1
 25378 0082 9B18     		adds	r3, r3, r2
 25379 0084 4FF00702 		mov	r2, #7
 25380 0088 02FA03F3 		lsl	r3, r2, r3
 25381 008c BB60     		str	r3, [r7, #8]
 745:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 746:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Clear the old sample time */
 747:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 25382              		.loc 1 747 0
 25383 008e BB68     		ldr	r3, [r7, #8]
 25384 0090 6FEA0303 		mvn	r3, r3
 25385 0094 FA68     		ldr	r2, [r7, #12]
 25386 0096 02EA0303 		and	r3, r2, r3
 25387 009a FB60     		str	r3, [r7, #12]
 748:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 749:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
 750:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 25388              		.loc 1 750 0
 25389 009c 7978     		ldrb	r1, [r7, #1]	@ zero_extendqisi2
 25390 009e FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 25391 00a0 1346     		mov	r3, r2
 25392 00a2 4FEA4303 		lsl	r3, r3, #1
 25393 00a6 9B18     		adds	r3, r3, r2
 25394 00a8 01FA03F3 		lsl	r3, r1, r3
 25395 00ac BB60     		str	r3, [r7, #8]
 751:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 752:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Set the new sample time */
 753:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 25396              		.loc 1 753 0
 25397 00ae FA68     		ldr	r2, [r7, #12]
 25398 00b0 BB68     		ldr	r3, [r7, #8]
 25399 00b2 42EA0303 		orr	r3, r2, r3
 25400 00b6 FB60     		str	r3, [r7, #12]
 754:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 755:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Store the new register value */
 756:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->SMPR2 = tmpreg1;
 25401              		.loc 1 756 0
 25402 00b8 7B68     		ldr	r3, [r7, #4]
 25403 00ba FA68     		ldr	r2, [r7, #12]
 25404 00bc 1A61     		str	r2, [r3, #16]
 25405              	.L28:
 757:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 758:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* For Rank 1 to 6 */
 759:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (Rank < 7)
 25406              		.loc 1 759 0
 25407 00be BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 25408 00c0 062B     		cmp	r3, #6
 25409 00c2 29D8     		bhi	.L29
 760:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 761:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Get the old register value */
 762:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SQR3;
 25410              		.loc 1 762 0
 25411 00c4 7B68     		ldr	r3, [r7, #4]
 25412 00c6 5B6B     		ldr	r3, [r3, #52]
 25413 00c8 FB60     		str	r3, [r7, #12]
 763:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 764:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
 765:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 25414              		.loc 1 765 0
 25415 00ca BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 25416 00cc 03F1FF32 		add	r2, r3, #-1
 25417 00d0 1346     		mov	r3, r2
 25418 00d2 4FEA8303 		lsl	r3, r3, #2
 25419 00d6 9B18     		adds	r3, r3, r2
 25420 00d8 4FF01F02 		mov	r2, #31
 25421 00dc 02FA03F3 		lsl	r3, r2, r3
 25422 00e0 BB60     		str	r3, [r7, #8]
 766:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 767:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Clear the old SQx bits for the selected rank */
 768:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 25423              		.loc 1 768 0
 25424 00e2 BB68     		ldr	r3, [r7, #8]
 25425 00e4 6FEA0303 		mvn	r3, r3
 25426 00e8 FA68     		ldr	r2, [r7, #12]
 25427 00ea 02EA0303 		and	r3, r2, r3
 25428 00ee FB60     		str	r3, [r7, #12]
 769:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 770:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
 771:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 25429              		.loc 1 771 0
 25430 00f0 F978     		ldrb	r1, [r7, #3]	@ zero_extendqisi2
 25431 00f2 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 25432 00f4 03F1FF32 		add	r2, r3, #-1
 25433 00f8 1346     		mov	r3, r2
 25434 00fa 4FEA8303 		lsl	r3, r3, #2
 25435 00fe 9B18     		adds	r3, r3, r2
 25436 0100 01FA03F3 		lsl	r3, r1, r3
 25437 0104 BB60     		str	r3, [r7, #8]
 772:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 773:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Set the SQx bits for the selected rank */
 774:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 25438              		.loc 1 774 0
 25439 0106 FA68     		ldr	r2, [r7, #12]
 25440 0108 BB68     		ldr	r3, [r7, #8]
 25441 010a 42EA0303 		orr	r3, r2, r3
 25442 010e FB60     		str	r3, [r7, #12]
 775:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 776:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Store the new register value */
 777:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->SQR3 = tmpreg1;
 25443              		.loc 1 777 0
 25444 0110 7B68     		ldr	r3, [r7, #4]
 25445 0112 FA68     		ldr	r2, [r7, #12]
 25446 0114 5A63     		str	r2, [r3, #52]
 25447 0116 55E0     		b	.L26
 25448              	.L29:
 778:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 779:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* For Rank 7 to 12 */
 780:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else if (Rank < 13)
 25449              		.loc 1 780 0
 25450 0118 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 25451 011a 0C2B     		cmp	r3, #12
 25452 011c 29D8     		bhi	.L31
 781:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 782:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Get the old register value */
 783:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SQR2;
 25453              		.loc 1 783 0
 25454 011e 7B68     		ldr	r3, [r7, #4]
 25455 0120 1B6B     		ldr	r3, [r3, #48]
 25456 0122 FB60     		str	r3, [r7, #12]
 784:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 785:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
 786:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 25457              		.loc 1 786 0
 25458 0124 BA78     		ldrb	r2, [r7, #2]	@ zero_extendqisi2
 25459 0126 1346     		mov	r3, r2
 25460 0128 4FEA8303 		lsl	r3, r3, #2
 25461 012c 9B18     		adds	r3, r3, r2
 25462 012e A3F12303 		sub	r3, r3, #35
 25463 0132 4FF01F02 		mov	r2, #31
 25464 0136 02FA03F3 		lsl	r3, r2, r3
 25465 013a BB60     		str	r3, [r7, #8]
 787:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 788:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Clear the old SQx bits for the selected rank */
 789:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 25466              		.loc 1 789 0
 25467 013c BB68     		ldr	r3, [r7, #8]
 25468 013e 6FEA0303 		mvn	r3, r3
 25469 0142 FA68     		ldr	r2, [r7, #12]
 25470 0144 02EA0303 		and	r3, r2, r3
 25471 0148 FB60     		str	r3, [r7, #12]
 790:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 791:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
 792:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 25472              		.loc 1 792 0
 25473 014a F978     		ldrb	r1, [r7, #3]	@ zero_extendqisi2
 25474 014c BA78     		ldrb	r2, [r7, #2]	@ zero_extendqisi2
 25475 014e 1346     		mov	r3, r2
 25476 0150 4FEA8303 		lsl	r3, r3, #2
 25477 0154 9B18     		adds	r3, r3, r2
 25478 0156 A3F12303 		sub	r3, r3, #35
 25479 015a 01FA03F3 		lsl	r3, r1, r3
 25480 015e BB60     		str	r3, [r7, #8]
 793:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 794:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Set the SQx bits for the selected rank */
 795:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 25481              		.loc 1 795 0
 25482 0160 FA68     		ldr	r2, [r7, #12]
 25483 0162 BB68     		ldr	r3, [r7, #8]
 25484 0164 42EA0303 		orr	r3, r2, r3
 25485 0168 FB60     		str	r3, [r7, #12]
 796:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 797:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Store the new register value */
 798:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->SQR2 = tmpreg1;
 25486              		.loc 1 798 0
 25487 016a 7B68     		ldr	r3, [r7, #4]
 25488 016c FA68     		ldr	r2, [r7, #12]
 25489 016e 1A63     		str	r2, [r3, #48]
 25490 0170 28E0     		b	.L26
 25491              	.L31:
 799:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 800:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* For Rank 13 to 16 */
 801:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
 802:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 803:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Get the old register value */
 804:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SQR1;
 25492              		.loc 1 804 0
 25493 0172 7B68     		ldr	r3, [r7, #4]
 25494 0174 DB6A     		ldr	r3, [r3, #44]
 25495 0176 FB60     		str	r3, [r7, #12]
 805:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 806:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
 807:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 25496              		.loc 1 807 0
 25497 0178 BA78     		ldrb	r2, [r7, #2]	@ zero_extendqisi2
 25498 017a 1346     		mov	r3, r2
 25499 017c 4FEA8303 		lsl	r3, r3, #2
 25500 0180 9B18     		adds	r3, r3, r2
 25501 0182 A3F14103 		sub	r3, r3, #65
 25502 0186 4FF01F02 		mov	r2, #31
 25503 018a 02FA03F3 		lsl	r3, r2, r3
 25504 018e BB60     		str	r3, [r7, #8]
 808:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 809:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Clear the old SQx bits for the selected rank */
 810:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 25505              		.loc 1 810 0
 25506 0190 BB68     		ldr	r3, [r7, #8]
 25507 0192 6FEA0303 		mvn	r3, r3
 25508 0196 FA68     		ldr	r2, [r7, #12]
 25509 0198 02EA0303 		and	r3, r2, r3
 25510 019c FB60     		str	r3, [r7, #12]
 811:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 812:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
 813:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 25511              		.loc 1 813 0
 25512 019e F978     		ldrb	r1, [r7, #3]	@ zero_extendqisi2
 25513 01a0 BA78     		ldrb	r2, [r7, #2]	@ zero_extendqisi2
 25514 01a2 1346     		mov	r3, r2
 25515 01a4 4FEA8303 		lsl	r3, r3, #2
 25516 01a8 9B18     		adds	r3, r3, r2
 25517 01aa A3F14103 		sub	r3, r3, #65
 25518 01ae 01FA03F3 		lsl	r3, r1, r3
 25519 01b2 BB60     		str	r3, [r7, #8]
 814:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 815:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Set the SQx bits for the selected rank */
 816:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 25520              		.loc 1 816 0
 25521 01b4 FA68     		ldr	r2, [r7, #12]
 25522 01b6 BB68     		ldr	r3, [r7, #8]
 25523 01b8 42EA0303 		orr	r3, r2, r3
 25524 01bc FB60     		str	r3, [r7, #12]
 817:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 818:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Store the new register value */
 819:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->SQR1 = tmpreg1;
 25525              		.loc 1 819 0
 25526 01be 7B68     		ldr	r3, [r7, #4]
 25527 01c0 FA68     		ldr	r2, [r7, #12]
 25528 01c2 DA62     		str	r2, [r3, #44]
 25529              	.L26:
 820:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 821:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 25530              		.loc 1 821 0
 25531 01c4 07F11407 		add	r7, r7, #20
 25532 01c8 BD46     		mov	sp, r7
 25533 01ca 80BC     		pop	{r7}
 25534 01cc 7047     		bx	lr
 25535              		.cfi_endproc
 25536              	.LFE121:
 25538 01ce 00BF     		.section	.text.ADC_SoftwareStartConv,"ax",%progbits
 25539              		.align	2
 25540              		.global	ADC_SoftwareStartConv
 25541              		.thumb
 25542              		.thumb_func
 25544              	ADC_SoftwareStartConv:
 25545              	.LFB122:
 822:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 823:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 824:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables the selected ADC software start conversion of the regular channels.
 825:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 826:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 827:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 828:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_SoftwareStartConv(ADC_TypeDef* ADCx)
 829:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 25546              		.loc 1 829 0
 25547              		.cfi_startproc
 25548              		@ args = 0, pretend = 0, frame = 8
 25549              		@ frame_needed = 1, uses_anonymous_args = 0
 25550              		@ link register save eliminated.
 25551 0000 80B4     		push	{r7}
 25552              	.LCFI35:
 25553              		.cfi_def_cfa_offset 4
 25554 0002 83B0     		sub	sp, sp, #12
 25555              	.LCFI36:
 25556              		.cfi_def_cfa_offset 16
 25557 0004 00AF     		add	r7, sp, #0
 25558              		.cfi_offset 7, -4
 25559              	.LCFI37:
 25560              		.cfi_def_cfa_register 7
 25561 0006 7860     		str	r0, [r7, #4]
 830:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 831:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 832:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 833:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Enable the selected ADC conversion for regular group */
 834:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 25562              		.loc 1 834 0
 25563 0008 7B68     		ldr	r3, [r7, #4]
 25564 000a 9B68     		ldr	r3, [r3, #8]
 25565 000c 43F08042 		orr	r2, r3, #1073741824
 25566 0010 7B68     		ldr	r3, [r7, #4]
 25567 0012 9A60     		str	r2, [r3, #8]
 835:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 25568              		.loc 1 835 0
 25569 0014 07F10C07 		add	r7, r7, #12
 25570 0018 BD46     		mov	sp, r7
 25571 001a 80BC     		pop	{r7}
 25572 001c 7047     		bx	lr
 25573              		.cfi_endproc
 25574              	.LFE122:
 25576 001e 00BF     		.section	.text.ADC_GetSoftwareStartConvStatus,"ax",%progbits
 25577              		.align	2
 25578              		.global	ADC_GetSoftwareStartConvStatus
 25579              		.thumb
 25580              		.thumb_func
 25582              	ADC_GetSoftwareStartConvStatus:
 25583              	.LFB123:
 836:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 837:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 838:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Gets the selected ADC Software start regular conversion Status.
 839:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 840:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval The new state of ADC software start conversion (SET or RESET).
 841:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 842:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** FlagStatus ADC_GetSoftwareStartConvStatus(ADC_TypeDef* ADCx)
 843:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 25584              		.loc 1 843 0
 25585              		.cfi_startproc
 25586              		@ args = 0, pretend = 0, frame = 16
 25587              		@ frame_needed = 1, uses_anonymous_args = 0
 25588              		@ link register save eliminated.
 25589 0000 80B4     		push	{r7}
 25590              	.LCFI38:
 25591              		.cfi_def_cfa_offset 4
 25592 0002 85B0     		sub	sp, sp, #20
 25593              	.LCFI39:
 25594              		.cfi_def_cfa_offset 24
 25595 0004 00AF     		add	r7, sp, #0
 25596              		.cfi_offset 7, -4
 25597              	.LCFI40:
 25598              		.cfi_def_cfa_register 7
 25599 0006 7860     		str	r0, [r7, #4]
 844:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   FlagStatus bitstatus = RESET;
 25600              		.loc 1 844 0
 25601 0008 4FF00003 		mov	r3, #0
 25602 000c FB73     		strb	r3, [r7, #15]
 845:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 846:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 847:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 848:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the status of SWSTART bit */
 849:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if ((ADCx->CR2 & ADC_CR2_JSWSTART) != (uint32_t)RESET)
 25603              		.loc 1 849 0
 25604 000e 7B68     		ldr	r3, [r7, #4]
 25605 0010 9B68     		ldr	r3, [r3, #8]
 25606 0012 03F48003 		and	r3, r3, #4194304
 25607 0016 002B     		cmp	r3, #0
 25608 0018 03D0     		beq	.L34
 850:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 851:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* SWSTART bit is set */
 852:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     bitstatus = SET;
 25609              		.loc 1 852 0
 25610 001a 4FF00103 		mov	r3, #1
 25611 001e FB73     		strb	r3, [r7, #15]
 25612 0020 02E0     		b	.L35
 25613              	.L34:
 853:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 854:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
 855:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 856:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* SWSTART bit is reset */
 857:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     bitstatus = RESET;
 25614              		.loc 1 857 0
 25615 0022 4FF00003 		mov	r3, #0
 25616 0026 FB73     		strb	r3, [r7, #15]
 25617              	.L35:
 858:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 859:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 860:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Return the SWSTART bit status */
 861:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   return  bitstatus;
 25618              		.loc 1 861 0
 25619 0028 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 862:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 25620              		.loc 1 862 0
 25621 002a 1846     		mov	r0, r3
 25622 002c 07F11407 		add	r7, r7, #20
 25623 0030 BD46     		mov	sp, r7
 25624 0032 80BC     		pop	{r7}
 25625 0034 7047     		bx	lr
 25626              		.cfi_endproc
 25627              	.LFE123:
 25629 0036 00BF     		.section	.text.ADC_EOCOnEachRegularChannelCmd,"ax",%progbits
 25630              		.align	2
 25631              		.global	ADC_EOCOnEachRegularChannelCmd
 25632              		.thumb
 25633              		.thumb_func
 25635              	ADC_EOCOnEachRegularChannelCmd:
 25636              	.LFB124:
 863:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 864:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 865:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 866:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the EOC on each regular channel conversion
 867:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 868:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC EOC flag rising
 869:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 870:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 871:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 872:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_EOCOnEachRegularChannelCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 873:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 25637              		.loc 1 873 0
 25638              		.cfi_startproc
 25639              		@ args = 0, pretend = 0, frame = 8
 25640              		@ frame_needed = 1, uses_anonymous_args = 0
 25641              		@ link register save eliminated.
 25642 0000 80B4     		push	{r7}
 25643              	.LCFI41:
 25644              		.cfi_def_cfa_offset 4
 25645 0002 83B0     		sub	sp, sp, #12
 25646              	.LCFI42:
 25647              		.cfi_def_cfa_offset 16
 25648 0004 00AF     		add	r7, sp, #0
 25649              		.cfi_offset 7, -4
 25650              	.LCFI43:
 25651              		.cfi_def_cfa_register 7
 25652 0006 7860     		str	r0, [r7, #4]
 25653 0008 0B46     		mov	r3, r1
 25654 000a FB70     		strb	r3, [r7, #3]
 874:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 875:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 876:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 877:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 878:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 25655              		.loc 1 878 0
 25656 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 25657 000e 002B     		cmp	r3, #0
 25658 0010 06D0     		beq	.L37
 879:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 880:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the selected ADC EOC rising on each regular channel conversion */
 881:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 |= (uint32_t)ADC_CR2_EOCS;
 25659              		.loc 1 881 0
 25660 0012 7B68     		ldr	r3, [r7, #4]
 25661 0014 9B68     		ldr	r3, [r3, #8]
 25662 0016 43F48062 		orr	r2, r3, #1024
 25663 001a 7B68     		ldr	r3, [r7, #4]
 25664 001c 9A60     		str	r2, [r3, #8]
 25665 001e 05E0     		b	.L36
 25666              	.L37:
 882:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 883:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
 884:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 885:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC EOC rising on each regular channel conversion */
 886:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 &= (uint32_t)(~ADC_CR2_EOCS);
 25667              		.loc 1 886 0
 25668 0020 7B68     		ldr	r3, [r7, #4]
 25669 0022 9B68     		ldr	r3, [r3, #8]
 25670 0024 23F48062 		bic	r2, r3, #1024
 25671 0028 7B68     		ldr	r3, [r7, #4]
 25672 002a 9A60     		str	r2, [r3, #8]
 25673              	.L36:
 887:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 888:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 25674              		.loc 1 888 0
 25675 002c 07F10C07 		add	r7, r7, #12
 25676 0030 BD46     		mov	sp, r7
 25677 0032 80BC     		pop	{r7}
 25678 0034 7047     		bx	lr
 25679              		.cfi_endproc
 25680              	.LFE124:
 25682 0036 00BF     		.section	.text.ADC_ContinuousModeCmd,"ax",%progbits
 25683              		.align	2
 25684              		.global	ADC_ContinuousModeCmd
 25685              		.thumb
 25686              		.thumb_func
 25688              	ADC_ContinuousModeCmd:
 25689              	.LFB125:
 889:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 890:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 891:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the ADC continuous conversion mode 
 892:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 893:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC continuous conversion mode
 894:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 895:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 896:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 897:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_ContinuousModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 898:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 25690              		.loc 1 898 0
 25691              		.cfi_startproc
 25692              		@ args = 0, pretend = 0, frame = 8
 25693              		@ frame_needed = 1, uses_anonymous_args = 0
 25694              		@ link register save eliminated.
 25695 0000 80B4     		push	{r7}
 25696              	.LCFI44:
 25697              		.cfi_def_cfa_offset 4
 25698 0002 83B0     		sub	sp, sp, #12
 25699              	.LCFI45:
 25700              		.cfi_def_cfa_offset 16
 25701 0004 00AF     		add	r7, sp, #0
 25702              		.cfi_offset 7, -4
 25703              	.LCFI46:
 25704              		.cfi_def_cfa_register 7
 25705 0006 7860     		str	r0, [r7, #4]
 25706 0008 0B46     		mov	r3, r1
 25707 000a FB70     		strb	r3, [r7, #3]
 899:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 900:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 901:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 902:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 903:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 25708              		.loc 1 903 0
 25709 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 25710 000e 002B     		cmp	r3, #0
 25711 0010 06D0     		beq	.L40
 904:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 905:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the selected ADC continuous conversion mode */
 906:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 |= (uint32_t)ADC_CR2_CONT;
 25712              		.loc 1 906 0
 25713 0012 7B68     		ldr	r3, [r7, #4]
 25714 0014 9B68     		ldr	r3, [r3, #8]
 25715 0016 43F00202 		orr	r2, r3, #2
 25716 001a 7B68     		ldr	r3, [r7, #4]
 25717 001c 9A60     		str	r2, [r3, #8]
 25718 001e 05E0     		b	.L39
 25719              	.L40:
 907:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 908:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
 909:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 910:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC continuous conversion mode */
 911:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 &= (uint32_t)(~ADC_CR2_CONT);
 25720              		.loc 1 911 0
 25721 0020 7B68     		ldr	r3, [r7, #4]
 25722 0022 9B68     		ldr	r3, [r3, #8]
 25723 0024 23F00202 		bic	r2, r3, #2
 25724 0028 7B68     		ldr	r3, [r7, #4]
 25725 002a 9A60     		str	r2, [r3, #8]
 25726              	.L39:
 912:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 913:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 25727              		.loc 1 913 0
 25728 002c 07F10C07 		add	r7, r7, #12
 25729 0030 BD46     		mov	sp, r7
 25730 0032 80BC     		pop	{r7}
 25731 0034 7047     		bx	lr
 25732              		.cfi_endproc
 25733              	.LFE125:
 25735 0036 00BF     		.section	.text.ADC_DiscModeChannelCountConfig,"ax",%progbits
 25736              		.align	2
 25737              		.global	ADC_DiscModeChannelCountConfig
 25738              		.thumb
 25739              		.thumb_func
 25741              	ADC_DiscModeChannelCountConfig:
 25742              	.LFB126:
 914:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 915:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 916:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Configures the discontinuous mode for the selected ADC regular group 
 917:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         channel.
 918:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 919:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  Number: specifies the discontinuous mode regular channel count value.
 920:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This number must be between 1 and 8.
 921:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 922:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 923:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_DiscModeChannelCountConfig(ADC_TypeDef* ADCx, uint8_t Number)
 924:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 25743              		.loc 1 924 0
 25744              		.cfi_startproc
 25745              		@ args = 0, pretend = 0, frame = 16
 25746              		@ frame_needed = 1, uses_anonymous_args = 0
 25747              		@ link register save eliminated.
 25748 0000 80B4     		push	{r7}
 25749              	.LCFI47:
 25750              		.cfi_def_cfa_offset 4
 25751 0002 85B0     		sub	sp, sp, #20
 25752              	.LCFI48:
 25753              		.cfi_def_cfa_offset 24
 25754 0004 00AF     		add	r7, sp, #0
 25755              		.cfi_offset 7, -4
 25756              	.LCFI49:
 25757              		.cfi_def_cfa_register 7
 25758 0006 7860     		str	r0, [r7, #4]
 25759 0008 0B46     		mov	r3, r1
 25760 000a FB70     		strb	r3, [r7, #3]
 925:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg1 = 0;
 25761              		.loc 1 925 0
 25762 000c 4FF00003 		mov	r3, #0
 25763 0010 FB60     		str	r3, [r7, #12]
 926:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg2 = 0;
 25764              		.loc 1 926 0
 25765 0012 4FF00003 		mov	r3, #0
 25766 0016 BB60     		str	r3, [r7, #8]
 927:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 928:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 929:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 930:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_REGULAR_DISC_NUMBER(Number));
 931:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 932:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the old register value */
 933:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 = ADCx->CR1;
 25767              		.loc 1 933 0
 25768 0018 7B68     		ldr	r3, [r7, #4]
 25769 001a 5B68     		ldr	r3, [r3, #4]
 25770 001c FB60     		str	r3, [r7, #12]
 934:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 935:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear the old discontinuous mode channel count */
 936:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 &= CR1_DISCNUM_RESET;
 25771              		.loc 1 936 0
 25772 001e FB68     		ldr	r3, [r7, #12]
 25773 0020 23F46043 		bic	r3, r3, #57344
 25774 0024 FB60     		str	r3, [r7, #12]
 937:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 938:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the discontinuous mode channel count */
 939:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg2 = Number - 1;
 25775              		.loc 1 939 0
 25776 0026 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 25777 0028 03F1FF33 		add	r3, r3, #-1
 25778 002c BB60     		str	r3, [r7, #8]
 940:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= tmpreg2 << 13;
 25779              		.loc 1 940 0
 25780 002e BB68     		ldr	r3, [r7, #8]
 25781 0030 4FEA4333 		lsl	r3, r3, #13
 25782 0034 FA68     		ldr	r2, [r7, #12]
 25783 0036 42EA0303 		orr	r3, r2, r3
 25784 003a FB60     		str	r3, [r7, #12]
 941:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 942:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Store the new register value */
 943:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->CR1 = tmpreg1;
 25785              		.loc 1 943 0
 25786 003c 7B68     		ldr	r3, [r7, #4]
 25787 003e FA68     		ldr	r2, [r7, #12]
 25788 0040 5A60     		str	r2, [r3, #4]
 944:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 25789              		.loc 1 944 0
 25790 0042 07F11407 		add	r7, r7, #20
 25791 0046 BD46     		mov	sp, r7
 25792 0048 80BC     		pop	{r7}
 25793 004a 7047     		bx	lr
 25794              		.cfi_endproc
 25795              	.LFE126:
 25797              		.section	.text.ADC_DiscModeCmd,"ax",%progbits
 25798              		.align	2
 25799              		.global	ADC_DiscModeCmd
 25800              		.thumb
 25801              		.thumb_func
 25803              	ADC_DiscModeCmd:
 25804              	.LFB127:
 945:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 946:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 947:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the discontinuous mode on regular group channel 
 948:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         for the specified ADC
 949:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 950:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC discontinuous mode on 
 951:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         regular group channel.
 952:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 953:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 954:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 955:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_DiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 956:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 25805              		.loc 1 956 0
 25806              		.cfi_startproc
 25807              		@ args = 0, pretend = 0, frame = 8
 25808              		@ frame_needed = 1, uses_anonymous_args = 0
 25809              		@ link register save eliminated.
 25810 0000 80B4     		push	{r7}
 25811              	.LCFI50:
 25812              		.cfi_def_cfa_offset 4
 25813 0002 83B0     		sub	sp, sp, #12
 25814              	.LCFI51:
 25815              		.cfi_def_cfa_offset 16
 25816 0004 00AF     		add	r7, sp, #0
 25817              		.cfi_offset 7, -4
 25818              	.LCFI52:
 25819              		.cfi_def_cfa_register 7
 25820 0006 7860     		str	r0, [r7, #4]
 25821 0008 0B46     		mov	r3, r1
 25822 000a FB70     		strb	r3, [r7, #3]
 957:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 958:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 959:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 960:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 961:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 25823              		.loc 1 961 0
 25824 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 25825 000e 002B     		cmp	r3, #0
 25826 0010 06D0     		beq	.L44
 962:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 963:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the selected ADC regular discontinuous mode */
 964:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 25827              		.loc 1 964 0
 25828 0012 7B68     		ldr	r3, [r7, #4]
 25829 0014 5B68     		ldr	r3, [r3, #4]
 25830 0016 43F40062 		orr	r2, r3, #2048
 25831 001a 7B68     		ldr	r3, [r7, #4]
 25832 001c 5A60     		str	r2, [r3, #4]
 25833 001e 05E0     		b	.L43
 25834              	.L44:
 965:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 966:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
 967:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 968:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC regular discontinuous mode */
 969:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR1 &= (uint32_t)(~ADC_CR1_DISCEN);
 25835              		.loc 1 969 0
 25836 0020 7B68     		ldr	r3, [r7, #4]
 25837 0022 5B68     		ldr	r3, [r3, #4]
 25838 0024 23F40062 		bic	r2, r3, #2048
 25839 0028 7B68     		ldr	r3, [r7, #4]
 25840 002a 5A60     		str	r2, [r3, #4]
 25841              	.L43:
 970:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 971:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 25842              		.loc 1 971 0
 25843 002c 07F10C07 		add	r7, r7, #12
 25844 0030 BD46     		mov	sp, r7
 25845 0032 80BC     		pop	{r7}
 25846 0034 7047     		bx	lr
 25847              		.cfi_endproc
 25848              	.LFE127:
 25850 0036 00BF     		.section	.text.ADC_GetConversionValue,"ax",%progbits
 25851              		.align	2
 25852              		.global	ADC_GetConversionValue
 25853              		.thumb
 25854              		.thumb_func
 25856              	ADC_GetConversionValue:
 25857              	.LFB128:
 972:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 973:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 974:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Returns the last ADCx conversion result data for regular channel.
 975:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 976:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval The Data conversion value.
 977:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 978:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
 979:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 25858              		.loc 1 979 0
 25859              		.cfi_startproc
 25860              		@ args = 0, pretend = 0, frame = 8
 25861              		@ frame_needed = 1, uses_anonymous_args = 0
 25862              		@ link register save eliminated.
 25863 0000 80B4     		push	{r7}
 25864              	.LCFI53:
 25865              		.cfi_def_cfa_offset 4
 25866 0002 83B0     		sub	sp, sp, #12
 25867              	.LCFI54:
 25868              		.cfi_def_cfa_offset 16
 25869 0004 00AF     		add	r7, sp, #0
 25870              		.cfi_offset 7, -4
 25871              	.LCFI55:
 25872              		.cfi_def_cfa_register 7
 25873 0006 7860     		str	r0, [r7, #4]
 980:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 981:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 982:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 983:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Return the selected ADC conversion value */
 984:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   return (uint16_t) ADCx->DR;
 25874              		.loc 1 984 0
 25875 0008 7B68     		ldr	r3, [r7, #4]
 25876 000a DB6C     		ldr	r3, [r3, #76]
 25877 000c 9BB2     		uxth	r3, r3
 985:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 25878              		.loc 1 985 0
 25879 000e 1846     		mov	r0, r3
 25880 0010 07F10C07 		add	r7, r7, #12
 25881 0014 BD46     		mov	sp, r7
 25882 0016 80BC     		pop	{r7}
 25883 0018 7047     		bx	lr
 25884              		.cfi_endproc
 25885              	.LFE128:
 25887 001a 00BF     		.section	.text.ADC_GetMultiModeConversionValue,"ax",%progbits
 25888              		.align	2
 25889              		.global	ADC_GetMultiModeConversionValue
 25890              		.thumb
 25891              		.thumb_func
 25893              	ADC_GetMultiModeConversionValue:
 25894              	.LFB129:
 986:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 987:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 988:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Returns the last ADC1, ADC2 and ADC3 regular conversions results 
 989:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         data in the selected multi mode.
 990:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  None  
 991:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval The Data conversion value.
 992:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @note   In dual mode, the value returned by this function is as following
 993:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           Data[15:0] : these bits contain the regular data of ADC1.
 994:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           Data[31:16]: these bits contain the regular data of ADC2.
 995:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @note   In triple mode, the value returned by this function is as following
 996:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           Data[15:0] : these bits contain alternatively the regular data of ADC1, ADC3 and ADC2
 997:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           Data[31:16]: these bits contain alternatively the regular data of ADC2, ADC1 and ADC3
 998:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 999:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** uint32_t ADC_GetMultiModeConversionValue(void)
1000:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 25895              		.loc 1 1000 0
 25896              		.cfi_startproc
 25897              		@ args = 0, pretend = 0, frame = 0
 25898              		@ frame_needed = 1, uses_anonymous_args = 0
 25899              		@ link register save eliminated.
 25900 0000 80B4     		push	{r7}
 25901              	.LCFI56:
 25902              		.cfi_def_cfa_offset 4
 25903 0002 00AF     		add	r7, sp, #0
 25904              		.cfi_offset 7, -4
 25905              	.LCFI57:
 25906              		.cfi_def_cfa_register 7
1001:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Return the multi mode conversion value */
1002:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   return (*(__IO uint32_t *) CDR_ADDRESS);
 25907              		.loc 1 1002 0
 25908 0004 024B     		ldr	r3, .L48
 25909 0006 1B68     		ldr	r3, [r3, #0]
1003:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 25910              		.loc 1 1003 0
 25911 0008 1846     		mov	r0, r3
 25912 000a BD46     		mov	sp, r7
 25913 000c 80BC     		pop	{r7}
 25914 000e 7047     		bx	lr
 25915              	.L49:
 25916              		.align	2
 25917              	.L48:
 25918 0010 08230140 		.word	1073816328
 25919              		.cfi_endproc
 25920              	.LFE129:
 25922              		.section	.text.ADC_DMACmd,"ax",%progbits
 25923              		.align	2
 25924              		.global	ADC_DMACmd
 25925              		.thumb
 25926              		.thumb_func
 25928              	ADC_DMACmd:
 25929              	.LFB130:
1004:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1005:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @}
1006:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1007:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1008:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @defgroup ADC_Group5 Regular Channels DMA Configuration functions
1009:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *  @brief   Regular Channels DMA Configuration functions 
1010:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *
1011:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @verbatim   
1012:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================
1013:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                    Regular Channels DMA Configuration functions
1014:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================  
1015:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1016:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   This section provides functions allowing to configure the DMA for ADC regular 
1017:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   channels.
1018:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Since converted regular channel values are stored into a unique data register, 
1019:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   it is useful to use DMA for conversion of more than one regular channel. This 
1020:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   avoids the loss of the data already stored in the ADC Data register. 
1021:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1022:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   When the DMA mode is enabled (using the ADC_DMACmd() function), after each
1023:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   conversion of a regular channel, a DMA request is generated.
1024:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1025:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Depending on the "DMA disable selection for Independent ADC mode" 
1026:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   configuration (using the ADC_DMARequestAfterLastTransferCmd() function), 
1027:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   at the end of the last DMA transfer, two possibilities are allowed:
1028:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   - No new DMA request is issued to the DMA controller (feature DISABLED) 
1029:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   - Requests can continue to be generated (feature ENABLED).
1030:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1031:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Depending on the "DMA disable selection for multi ADC mode" configuration 
1032:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   (using the void ADC_MultiModeDMARequestAfterLastTransferCmd() function), 
1033:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   at the end of the last DMA transfer, two possibilities are allowed:
1034:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   - No new DMA request is issued to the DMA controller (feature DISABLED) 
1035:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   - Requests can continue to be generated (feature ENABLED).
1036:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1037:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @endverbatim
1038:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
1039:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1040:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1041:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  /**
1042:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the specified ADC DMA request.
1043:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1044:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC DMA transfer.
1045:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1046:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1047:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1048:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
1049:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 25930              		.loc 1 1049 0
 25931              		.cfi_startproc
 25932              		@ args = 0, pretend = 0, frame = 8
 25933              		@ frame_needed = 1, uses_anonymous_args = 0
 25934              		@ link register save eliminated.
 25935 0000 80B4     		push	{r7}
 25936              	.LCFI58:
 25937              		.cfi_def_cfa_offset 4
 25938 0002 83B0     		sub	sp, sp, #12
 25939              	.LCFI59:
 25940              		.cfi_def_cfa_offset 16
 25941 0004 00AF     		add	r7, sp, #0
 25942              		.cfi_offset 7, -4
 25943              	.LCFI60:
 25944              		.cfi_def_cfa_register 7
 25945 0006 7860     		str	r0, [r7, #4]
 25946 0008 0B46     		mov	r3, r1
 25947 000a FB70     		strb	r3, [r7, #3]
1050:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1051:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1052:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1053:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 25948              		.loc 1 1053 0
 25949 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 25950 000e 002B     		cmp	r3, #0
 25951 0010 06D0     		beq	.L51
1054:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1055:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the selected ADC DMA request */
1056:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
 25952              		.loc 1 1056 0
 25953 0012 7B68     		ldr	r3, [r7, #4]
 25954 0014 9B68     		ldr	r3, [r3, #8]
 25955 0016 43F48072 		orr	r2, r3, #256
 25956 001a 7B68     		ldr	r3, [r7, #4]
 25957 001c 9A60     		str	r2, [r3, #8]
 25958 001e 05E0     		b	.L50
 25959              	.L51:
1057:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1058:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
1059:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1060:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC DMA request */
1061:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
 25960              		.loc 1 1061 0
 25961 0020 7B68     		ldr	r3, [r7, #4]
 25962 0022 9B68     		ldr	r3, [r3, #8]
 25963 0024 23F48072 		bic	r2, r3, #256
 25964 0028 7B68     		ldr	r3, [r7, #4]
 25965 002a 9A60     		str	r2, [r3, #8]
 25966              	.L50:
1062:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1063:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 25967              		.loc 1 1063 0
 25968 002c 07F10C07 		add	r7, r7, #12
 25969 0030 BD46     		mov	sp, r7
 25970 0032 80BC     		pop	{r7}
 25971 0034 7047     		bx	lr
 25972              		.cfi_endproc
 25973              	.LFE130:
 25975 0036 00BF     		.section	.text.ADC_DMARequestAfterLastTransferCmd,"ax",%progbits
 25976              		.align	2
 25977              		.global	ADC_DMARequestAfterLastTransferCmd
 25978              		.thumb
 25979              		.thumb_func
 25981              	ADC_DMARequestAfterLastTransferCmd:
 25982              	.LFB131:
1064:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1065:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1066:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the ADC DMA request after last transfer (Single-ADC mode)  
1067:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1068:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC DMA request after last transfer.
1069:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1070:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1071:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1072:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_DMARequestAfterLastTransferCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
1073:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 25983              		.loc 1 1073 0
 25984              		.cfi_startproc
 25985              		@ args = 0, pretend = 0, frame = 8
 25986              		@ frame_needed = 1, uses_anonymous_args = 0
 25987              		@ link register save eliminated.
 25988 0000 80B4     		push	{r7}
 25989              	.LCFI61:
 25990              		.cfi_def_cfa_offset 4
 25991 0002 83B0     		sub	sp, sp, #12
 25992              	.LCFI62:
 25993              		.cfi_def_cfa_offset 16
 25994 0004 00AF     		add	r7, sp, #0
 25995              		.cfi_offset 7, -4
 25996              	.LCFI63:
 25997              		.cfi_def_cfa_register 7
 25998 0006 7860     		str	r0, [r7, #4]
 25999 0008 0B46     		mov	r3, r1
 26000 000a FB70     		strb	r3, [r7, #3]
1074:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1075:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1076:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1077:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 26001              		.loc 1 1077 0
 26002 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 26003 000e 002B     		cmp	r3, #0
 26004 0010 06D0     		beq	.L54
1078:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1079:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the selected ADC DMA request after last transfer */
1080:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 |= (uint32_t)ADC_CR2_DDS;
 26005              		.loc 1 1080 0
 26006 0012 7B68     		ldr	r3, [r7, #4]
 26007 0014 9B68     		ldr	r3, [r3, #8]
 26008 0016 43F40072 		orr	r2, r3, #512
 26009 001a 7B68     		ldr	r3, [r7, #4]
 26010 001c 9A60     		str	r2, [r3, #8]
 26011 001e 05E0     		b	.L53
 26012              	.L54:
1081:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1082:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
1083:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1084:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC DMA request after last transfer */
1085:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
 26013              		.loc 1 1085 0
 26014 0020 7B68     		ldr	r3, [r7, #4]
 26015 0022 9B68     		ldr	r3, [r3, #8]
 26016 0024 23F40072 		bic	r2, r3, #512
 26017 0028 7B68     		ldr	r3, [r7, #4]
 26018 002a 9A60     		str	r2, [r3, #8]
 26019              	.L53:
1086:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1087:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 26020              		.loc 1 1087 0
 26021 002c 07F10C07 		add	r7, r7, #12
 26022 0030 BD46     		mov	sp, r7
 26023 0032 80BC     		pop	{r7}
 26024 0034 7047     		bx	lr
 26025              		.cfi_endproc
 26026              	.LFE131:
 26028 0036 00BF     		.section	.text.ADC_MultiModeDMARequestAfterLastTransferCmd,"ax",%progbits
 26029              		.align	2
 26030              		.global	ADC_MultiModeDMARequestAfterLastTransferCmd
 26031              		.thumb
 26032              		.thumb_func
 26034              	ADC_MultiModeDMARequestAfterLastTransferCmd:
 26035              	.LFB132:
1088:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1089:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1090:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the ADC DMA request after last transfer in multi ADC mode       
1091:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC DMA request after last transfer.
1092:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1093:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @note   if Enabled, DMA requests are issued as long as data are converted and 
1094:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         DMA mode for multi ADC mode (selected using ADC_CommonInit() function 
1095:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         by ADC_CommonInitStruct.ADC_DMAAccessMode structure member) is 
1096:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          ADC_DMAAccessMode_1, ADC_DMAAccessMode_2 or ADC_DMAAccessMode_3.     
1097:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1098:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1099:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_MultiModeDMARequestAfterLastTransferCmd(FunctionalState NewState)
1100:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 26036              		.loc 1 1100 0
 26037              		.cfi_startproc
 26038              		@ args = 0, pretend = 0, frame = 8
 26039              		@ frame_needed = 1, uses_anonymous_args = 0
 26040              		@ link register save eliminated.
 26041 0000 80B4     		push	{r7}
 26042              	.LCFI64:
 26043              		.cfi_def_cfa_offset 4
 26044 0002 83B0     		sub	sp, sp, #12
 26045              	.LCFI65:
 26046              		.cfi_def_cfa_offset 16
 26047 0004 00AF     		add	r7, sp, #0
 26048              		.cfi_offset 7, -4
 26049              	.LCFI66:
 26050              		.cfi_def_cfa_register 7
 26051 0006 0346     		mov	r3, r0
 26052 0008 FB71     		strb	r3, [r7, #7]
1101:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1102:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1103:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 26053              		.loc 1 1103 0
 26054 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 26055 000c 002B     		cmp	r3, #0
 26056 000e 06D0     		beq	.L57
1104:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1105:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the selected ADC DMA request after last transfer */
1106:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADC->CCR |= (uint32_t)ADC_CCR_DDS;
 26057              		.loc 1 1106 0
 26058 0010 084B     		ldr	r3, .L59
 26059 0012 084A     		ldr	r2, .L59
 26060 0014 5268     		ldr	r2, [r2, #4]
 26061 0016 42F40052 		orr	r2, r2, #8192
 26062 001a 5A60     		str	r2, [r3, #4]
 26063 001c 05E0     		b	.L56
 26064              	.L57:
1107:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1108:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
1109:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1110:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC DMA request after last transfer */
1111:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADC->CCR &= (uint32_t)(~ADC_CCR_DDS);
 26065              		.loc 1 1111 0
 26066 001e 054B     		ldr	r3, .L59
 26067 0020 044A     		ldr	r2, .L59
 26068 0022 5268     		ldr	r2, [r2, #4]
 26069 0024 22F40052 		bic	r2, r2, #8192
 26070 0028 5A60     		str	r2, [r3, #4]
 26071              	.L56:
1112:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1113:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 26072              		.loc 1 1113 0
 26073 002a 07F10C07 		add	r7, r7, #12
 26074 002e BD46     		mov	sp, r7
 26075 0030 80BC     		pop	{r7}
 26076 0032 7047     		bx	lr
 26077              	.L60:
 26078              		.align	2
 26079              	.L59:
 26080 0034 00230140 		.word	1073816320
 26081              		.cfi_endproc
 26082              	.LFE132:
 26084              		.section	.text.ADC_InjectedChannelConfig,"ax",%progbits
 26085              		.align	2
 26086              		.global	ADC_InjectedChannelConfig
 26087              		.thumb
 26088              		.thumb_func
 26090              	ADC_InjectedChannelConfig:
 26091              	.LFB133:
1114:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1115:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @}
1116:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1117:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1118:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @defgroup ADC_Group6 Injected channels Configuration functions
1119:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *  @brief   Injected channels Configuration functions 
1120:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *
1121:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @verbatim   
1122:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================
1123:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                      Injected channels Configuration functions
1124:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================  
1125:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1126:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   This section provide functions allowing to configure the ADC Injected channels,
1127:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   it is composed of 2 sub sections : 
1128:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
1129:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   1. Configuration functions for Injected channels: This subsection provides 
1130:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      functions allowing to configure the ADC injected channels :    
1131:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     - Configure the rank in the injected group sequencer for each channel
1132:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     - Configure the sampling time for each channel    
1133:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     - Activate the Auto injected Mode  
1134:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     - Activate the Discontinuous Mode 
1135:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     - scan mode activation  
1136:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     - External/software trigger source   
1137:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     - External trigger edge 
1138:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     - injected channels sequencer.
1139:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
1140:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    2. Get the Specified Injected channel conversion data: This subsection 
1141:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       provides an important function in the ADC peripheral since it returns the 
1142:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       converted data of the specific injected channel.
1143:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1144:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @endverbatim
1145:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
1146:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */ 
1147:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1148:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Configures for the selected ADC injected channel its corresponding
1149:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         rank in the sequencer and its sample time.
1150:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1151:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_Channel: the ADC channel to configure. 
1152:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1153:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_0: ADC Channel0 selected
1154:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_1: ADC Channel1 selected
1155:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_2: ADC Channel2 selected
1156:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_3: ADC Channel3 selected
1157:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_4: ADC Channel4 selected
1158:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_5: ADC Channel5 selected
1159:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_6: ADC Channel6 selected
1160:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_7: ADC Channel7 selected
1161:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_8: ADC Channel8 selected
1162:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_9: ADC Channel9 selected
1163:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_10: ADC Channel10 selected
1164:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_11: ADC Channel11 selected
1165:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_12: ADC Channel12 selected
1166:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_13: ADC Channel13 selected
1167:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_14: ADC Channel14 selected
1168:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_15: ADC Channel15 selected
1169:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_16: ADC Channel16 selected
1170:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_17: ADC Channel17 selected
1171:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_18: ADC Channel18 selected                       
1172:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  Rank: The rank in the injected group sequencer. 
1173:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter must be between 1 to 4.
1174:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_SampleTime: The sample time value to be set for the selected channel. 
1175:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1176:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_3Cycles: Sample time equal to 3 cycles
1177:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_15Cycles: Sample time equal to 15 cycles
1178:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_28Cycles: Sample time equal to 28 cycles
1179:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_56Cycles: Sample time equal to 56 cycles	
1180:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_84Cycles: Sample time equal to 84 cycles	
1181:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_112Cycles: Sample time equal to 112 cycles	
1182:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
1183:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
1184:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1185:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1186:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_InjectedChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_Sa
1187:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 26092              		.loc 1 1187 0
 26093              		.cfi_startproc
 26094              		@ args = 0, pretend = 0, frame = 24
 26095              		@ frame_needed = 1, uses_anonymous_args = 0
 26096              		@ link register save eliminated.
 26097 0000 80B4     		push	{r7}
 26098              	.LCFI67:
 26099              		.cfi_def_cfa_offset 4
 26100 0002 87B0     		sub	sp, sp, #28
 26101              	.LCFI68:
 26102              		.cfi_def_cfa_offset 32
 26103 0004 00AF     		add	r7, sp, #0
 26104              		.cfi_offset 7, -4
 26105              	.LCFI69:
 26106              		.cfi_def_cfa_register 7
 26107 0006 7860     		str	r0, [r7, #4]
 26108 0008 F970     		strb	r1, [r7, #3]
 26109 000a BA70     		strb	r2, [r7, #2]
 26110 000c 7B70     		strb	r3, [r7, #1]
1188:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg1 = 0, tmpreg2 = 0, tmpreg3 = 0;
 26111              		.loc 1 1188 0
 26112 000e 4FF00003 		mov	r3, #0
 26113 0012 7B61     		str	r3, [r7, #20]
 26114 0014 4FF00003 		mov	r3, #0
 26115 0018 3B61     		str	r3, [r7, #16]
 26116 001a 4FF00003 		mov	r3, #0
 26117 001e FB60     		str	r3, [r7, #12]
1189:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1190:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1191:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_CHANNEL(ADC_Channel));
1192:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_INJECTED_RANK(Rank));
1193:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
1194:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
1195:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (ADC_Channel > ADC_Channel_9)
 26118              		.loc 1 1195 0
 26119 0020 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 26120 0022 092B     		cmp	r3, #9
 26121 0024 29D9     		bls	.L62
1196:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1197:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Get the old register value */
1198:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SMPR1;
 26122              		.loc 1 1198 0
 26123 0026 7B68     		ldr	r3, [r7, #4]
 26124 0028 DB68     		ldr	r3, [r3, #12]
 26125 002a 7B61     		str	r3, [r7, #20]
1199:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
1200:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = SMPR1_SMP_SET << (3*(ADC_Channel - 10));
 26126              		.loc 1 1200 0
 26127 002c FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 26128 002e 1346     		mov	r3, r2
 26129 0030 4FEA4303 		lsl	r3, r3, #1
 26130 0034 9B18     		adds	r3, r3, r2
 26131 0036 A3F11E03 		sub	r3, r3, #30
 26132 003a 4FF00702 		mov	r2, #7
 26133 003e 02FA03F3 		lsl	r3, r2, r3
 26134 0042 3B61     		str	r3, [r7, #16]
1201:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Clear the old sample time */
1202:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 26135              		.loc 1 1202 0
 26136 0044 3B69     		ldr	r3, [r7, #16]
 26137 0046 6FEA0303 		mvn	r3, r3
 26138 004a 7A69     		ldr	r2, [r7, #20]
 26139 004c 02EA0303 		and	r3, r2, r3
 26140 0050 7B61     		str	r3, [r7, #20]
1203:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
1204:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_SampleTime << (3*(ADC_Channel - 10));
 26141              		.loc 1 1204 0
 26142 0052 7978     		ldrb	r1, [r7, #1]	@ zero_extendqisi2
 26143 0054 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 26144 0056 1346     		mov	r3, r2
 26145 0058 4FEA4303 		lsl	r3, r3, #1
 26146 005c 9B18     		adds	r3, r3, r2
 26147 005e A3F11E03 		sub	r3, r3, #30
 26148 0062 01FA03F3 		lsl	r3, r1, r3
 26149 0066 3B61     		str	r3, [r7, #16]
1205:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Set the new sample time */
1206:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 26150              		.loc 1 1206 0
 26151 0068 7A69     		ldr	r2, [r7, #20]
 26152 006a 3B69     		ldr	r3, [r7, #16]
 26153 006c 42EA0303 		orr	r3, r2, r3
 26154 0070 7B61     		str	r3, [r7, #20]
1207:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Store the new register value */
1208:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->SMPR1 = tmpreg1;
 26155              		.loc 1 1208 0
 26156 0072 7B68     		ldr	r3, [r7, #4]
 26157 0074 7A69     		ldr	r2, [r7, #20]
 26158 0076 DA60     		str	r2, [r3, #12]
 26159 0078 24E0     		b	.L63
 26160              	.L62:
1209:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1210:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else /* ADC_Channel include in ADC_Channel_[0..9] */
1211:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1212:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Get the old register value */
1213:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SMPR2;
 26161              		.loc 1 1213 0
 26162 007a 7B68     		ldr	r3, [r7, #4]
 26163 007c 1B69     		ldr	r3, [r3, #16]
 26164 007e 7B61     		str	r3, [r7, #20]
1214:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
1215:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 26165              		.loc 1 1215 0
 26166 0080 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 26167 0082 1346     		mov	r3, r2
 26168 0084 4FEA4303 		lsl	r3, r3, #1
 26169 0088 9B18     		adds	r3, r3, r2
 26170 008a 4FF00702 		mov	r2, #7
 26171 008e 02FA03F3 		lsl	r3, r2, r3
 26172 0092 3B61     		str	r3, [r7, #16]
1216:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Clear the old sample time */
1217:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 26173              		.loc 1 1217 0
 26174 0094 3B69     		ldr	r3, [r7, #16]
 26175 0096 6FEA0303 		mvn	r3, r3
 26176 009a 7A69     		ldr	r2, [r7, #20]
 26177 009c 02EA0303 		and	r3, r2, r3
 26178 00a0 7B61     		str	r3, [r7, #20]
1218:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
1219:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 26179              		.loc 1 1219 0
 26180 00a2 7978     		ldrb	r1, [r7, #1]	@ zero_extendqisi2
 26181 00a4 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 26182 00a6 1346     		mov	r3, r2
 26183 00a8 4FEA4303 		lsl	r3, r3, #1
 26184 00ac 9B18     		adds	r3, r3, r2
 26185 00ae 01FA03F3 		lsl	r3, r1, r3
 26186 00b2 3B61     		str	r3, [r7, #16]
1220:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Set the new sample time */
1221:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 26187              		.loc 1 1221 0
 26188 00b4 7A69     		ldr	r2, [r7, #20]
 26189 00b6 3B69     		ldr	r3, [r7, #16]
 26190 00b8 42EA0303 		orr	r3, r2, r3
 26191 00bc 7B61     		str	r3, [r7, #20]
1222:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Store the new register value */
1223:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->SMPR2 = tmpreg1;
 26192              		.loc 1 1223 0
 26193 00be 7B68     		ldr	r3, [r7, #4]
 26194 00c0 7A69     		ldr	r2, [r7, #20]
 26195 00c2 1A61     		str	r2, [r3, #16]
 26196              	.L63:
1224:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1225:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Rank configuration */
1226:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the old register value */
1227:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 = ADCx->JSQR;
 26197              		.loc 1 1227 0
 26198 00c4 7B68     		ldr	r3, [r7, #4]
 26199 00c6 9B6B     		ldr	r3, [r3, #56]
 26200 00c8 7B61     		str	r3, [r7, #20]
1228:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get JL value: Number = JL+1 */
1229:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg3 =  (tmpreg1 & JSQR_JL_SET)>> 20;
 26201              		.loc 1 1229 0
 26202 00ca 7B69     		ldr	r3, [r7, #20]
 26203 00cc 03F44013 		and	r3, r3, #3145728
 26204 00d0 4FEA1353 		lsr	r3, r3, #20
 26205 00d4 FB60     		str	r3, [r7, #12]
1230:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Calculate the mask to clear: ((Rank-1)+(4-JL-1)) */
1231:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg2 = JSQR_JSQ_SET << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 26206              		.loc 1 1231 0
 26207 00d6 FB68     		ldr	r3, [r7, #12]
 26208 00d8 DBB2     		uxtb	r3, r3
 26209 00da 6FEA0303 		mvn	r3, r3
 26210 00de DAB2     		uxtb	r2, r3
 26211 00e0 BB78     		ldrb	r3, [r7, #2]
 26212 00e2 D318     		adds	r3, r2, r3
 26213 00e4 DBB2     		uxtb	r3, r3
 26214 00e6 03F10303 		add	r3, r3, #3
 26215 00ea DBB2     		uxtb	r3, r3
 26216 00ec 1A46     		mov	r2, r3
 26217 00ee 1346     		mov	r3, r2
 26218 00f0 4FEA8303 		lsl	r3, r3, #2
 26219 00f4 9B18     		adds	r3, r3, r2
 26220 00f6 4FF01F02 		mov	r2, #31
 26221 00fa 02FA03F3 		lsl	r3, r2, r3
 26222 00fe 3B61     		str	r3, [r7, #16]
1232:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear the old JSQx bits for the selected rank */
1233:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 &= ~tmpreg2;
 26223              		.loc 1 1233 0
 26224 0100 3B69     		ldr	r3, [r7, #16]
 26225 0102 6FEA0303 		mvn	r3, r3
 26226 0106 7A69     		ldr	r2, [r7, #20]
 26227 0108 02EA0303 		and	r3, r2, r3
 26228 010c 7B61     		str	r3, [r7, #20]
1234:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Calculate the mask to set: ((Rank-1)+(4-JL-1)) */
1235:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg2 = (uint32_t)ADC_Channel << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 26229              		.loc 1 1235 0
 26230 010e F978     		ldrb	r1, [r7, #3]	@ zero_extendqisi2
 26231 0110 FB68     		ldr	r3, [r7, #12]
 26232 0112 DBB2     		uxtb	r3, r3
 26233 0114 6FEA0303 		mvn	r3, r3
 26234 0118 DAB2     		uxtb	r2, r3
 26235 011a BB78     		ldrb	r3, [r7, #2]
 26236 011c D318     		adds	r3, r2, r3
 26237 011e DBB2     		uxtb	r3, r3
 26238 0120 03F10303 		add	r3, r3, #3
 26239 0124 DBB2     		uxtb	r3, r3
 26240 0126 1A46     		mov	r2, r3
 26241 0128 1346     		mov	r3, r2
 26242 012a 4FEA8303 		lsl	r3, r3, #2
 26243 012e 9B18     		adds	r3, r3, r2
 26244 0130 01FA03F3 		lsl	r3, r1, r3
 26245 0134 3B61     		str	r3, [r7, #16]
1236:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the JSQx bits for the selected rank */
1237:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= tmpreg2;
 26246              		.loc 1 1237 0
 26247 0136 7A69     		ldr	r2, [r7, #20]
 26248 0138 3B69     		ldr	r3, [r7, #16]
 26249 013a 42EA0303 		orr	r3, r2, r3
 26250 013e 7B61     		str	r3, [r7, #20]
1238:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Store the new register value */
1239:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->JSQR = tmpreg1;
 26251              		.loc 1 1239 0
 26252 0140 7B68     		ldr	r3, [r7, #4]
 26253 0142 7A69     		ldr	r2, [r7, #20]
 26254 0144 9A63     		str	r2, [r3, #56]
1240:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 26255              		.loc 1 1240 0
 26256 0146 07F11C07 		add	r7, r7, #28
 26257 014a BD46     		mov	sp, r7
 26258 014c 80BC     		pop	{r7}
 26259 014e 7047     		bx	lr
 26260              		.cfi_endproc
 26261              	.LFE133:
 26263              		.section	.text.ADC_InjectedSequencerLengthConfig,"ax",%progbits
 26264              		.align	2
 26265              		.global	ADC_InjectedSequencerLengthConfig
 26266              		.thumb
 26267              		.thumb_func
 26269              	ADC_InjectedSequencerLengthConfig:
 26270              	.LFB134:
1241:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1242:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1243:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Configures the sequencer length for injected channels
1244:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1245:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  Length: The sequencer length. 
1246:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter must be a number between 1 to 4.
1247:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1248:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1249:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_InjectedSequencerLengthConfig(ADC_TypeDef* ADCx, uint8_t Length)
1250:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 26271              		.loc 1 1250 0
 26272              		.cfi_startproc
 26273              		@ args = 0, pretend = 0, frame = 16
 26274              		@ frame_needed = 1, uses_anonymous_args = 0
 26275              		@ link register save eliminated.
 26276 0000 80B4     		push	{r7}
 26277              	.LCFI70:
 26278              		.cfi_def_cfa_offset 4
 26279 0002 85B0     		sub	sp, sp, #20
 26280              	.LCFI71:
 26281              		.cfi_def_cfa_offset 24
 26282 0004 00AF     		add	r7, sp, #0
 26283              		.cfi_offset 7, -4
 26284              	.LCFI72:
 26285              		.cfi_def_cfa_register 7
 26286 0006 7860     		str	r0, [r7, #4]
 26287 0008 0B46     		mov	r3, r1
 26288 000a FB70     		strb	r3, [r7, #3]
1251:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg1 = 0;
 26289              		.loc 1 1251 0
 26290 000c 4FF00003 		mov	r3, #0
 26291 0010 FB60     		str	r3, [r7, #12]
1252:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg2 = 0;
 26292              		.loc 1 1252 0
 26293 0012 4FF00003 		mov	r3, #0
 26294 0016 BB60     		str	r3, [r7, #8]
1253:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1254:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1255:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_INJECTED_LENGTH(Length));
1256:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1257:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the old register value */
1258:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 = ADCx->JSQR;
 26295              		.loc 1 1258 0
 26296 0018 7B68     		ldr	r3, [r7, #4]
 26297 001a 9B6B     		ldr	r3, [r3, #56]
 26298 001c FB60     		str	r3, [r7, #12]
1259:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1260:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear the old injected sequence length JL bits */
1261:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 &= JSQR_JL_RESET;
 26299              		.loc 1 1261 0
 26300 001e FB68     		ldr	r3, [r7, #12]
 26301 0020 23F44013 		bic	r3, r3, #3145728
 26302 0024 FB60     		str	r3, [r7, #12]
1262:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1263:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the injected sequence length JL bits */
1264:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg2 = Length - 1; 
 26303              		.loc 1 1264 0
 26304 0026 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 26305 0028 03F1FF33 		add	r3, r3, #-1
 26306 002c BB60     		str	r3, [r7, #8]
1265:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= tmpreg2 << 20;
 26307              		.loc 1 1265 0
 26308 002e BB68     		ldr	r3, [r7, #8]
 26309 0030 4FEA0353 		lsl	r3, r3, #20
 26310 0034 FA68     		ldr	r2, [r7, #12]
 26311 0036 42EA0303 		orr	r3, r2, r3
 26312 003a FB60     		str	r3, [r7, #12]
1266:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1267:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Store the new register value */
1268:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->JSQR = tmpreg1;
 26313              		.loc 1 1268 0
 26314 003c 7B68     		ldr	r3, [r7, #4]
 26315 003e FA68     		ldr	r2, [r7, #12]
 26316 0040 9A63     		str	r2, [r3, #56]
1269:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 26317              		.loc 1 1269 0
 26318 0042 07F11407 		add	r7, r7, #20
 26319 0046 BD46     		mov	sp, r7
 26320 0048 80BC     		pop	{r7}
 26321 004a 7047     		bx	lr
 26322              		.cfi_endproc
 26323              	.LFE134:
 26325              		.section	.text.ADC_SetInjectedOffset,"ax",%progbits
 26326              		.align	2
 26327              		.global	ADC_SetInjectedOffset
 26328              		.thumb
 26329              		.thumb_func
 26331              	ADC_SetInjectedOffset:
 26332              	.LFB135:
1270:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1271:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1272:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Set the injected channels conversion value offset
1273:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1274:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_InjectedChannel: the ADC injected channel to set its offset. 
1275:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1276:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_1: Injected Channel1 selected
1277:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_2: Injected Channel2 selected
1278:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_3: Injected Channel3 selected
1279:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_4: Injected Channel4 selected
1280:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  Offset: the offset value for the selected ADC injected channel
1281:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter must be a 12bit value.
1282:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1283:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1284:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_SetInjectedOffset(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel, uint16_t Offset)
1285:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 26333              		.loc 1 1285 0
 26334              		.cfi_startproc
 26335              		@ args = 0, pretend = 0, frame = 16
 26336              		@ frame_needed = 1, uses_anonymous_args = 0
 26337              		@ link register save eliminated.
 26338 0000 80B4     		push	{r7}
 26339              	.LCFI73:
 26340              		.cfi_def_cfa_offset 4
 26341 0002 85B0     		sub	sp, sp, #20
 26342              	.LCFI74:
 26343              		.cfi_def_cfa_offset 24
 26344 0004 00AF     		add	r7, sp, #0
 26345              		.cfi_offset 7, -4
 26346              	.LCFI75:
 26347              		.cfi_def_cfa_register 7
 26348 0006 7860     		str	r0, [r7, #4]
 26349 0008 1346     		mov	r3, r2
 26350 000a 0A46     		mov	r2, r1
 26351 000c FA70     		strb	r2, [r7, #3]
 26352 000e 3B80     		strh	r3, [r7, #0]	@ movhi
1286:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     __IO uint32_t tmp = 0;
 26353              		.loc 1 1286 0
 26354 0010 4FF00003 		mov	r3, #0
 26355 0014 FB60     		str	r3, [r7, #12]
1287:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1288:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1289:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
1290:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_OFFSET(Offset));
1291:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1292:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmp = (uint32_t)ADCx;
 26356              		.loc 1 1292 0
 26357 0016 7B68     		ldr	r3, [r7, #4]
 26358 0018 FB60     		str	r3, [r7, #12]
1293:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmp += ADC_InjectedChannel;
 26359              		.loc 1 1293 0
 26360 001a FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 26361 001c FB68     		ldr	r3, [r7, #12]
 26362 001e D318     		adds	r3, r2, r3
 26363 0020 FB60     		str	r3, [r7, #12]
1294:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1295:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the selected injected channel data offset */
1296:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *(__IO uint32_t *) tmp = (uint32_t)Offset;
 26364              		.loc 1 1296 0
 26365 0022 FB68     		ldr	r3, [r7, #12]
 26366 0024 3A88     		ldrh	r2, [r7, #0]
 26367 0026 1A60     		str	r2, [r3, #0]
1297:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 26368              		.loc 1 1297 0
 26369 0028 07F11407 		add	r7, r7, #20
 26370 002c BD46     		mov	sp, r7
 26371 002e 80BC     		pop	{r7}
 26372 0030 7047     		bx	lr
 26373              		.cfi_endproc
 26374              	.LFE135:
 26376 0032 00BF     		.section	.text.ADC_ExternalTrigInjectedConvConfig,"ax",%progbits
 26377              		.align	2
 26378              		.global	ADC_ExternalTrigInjectedConvConfig
 26379              		.thumb
 26380              		.thumb_func
 26382              	ADC_ExternalTrigInjectedConvConfig:
 26383              	.LFB136:
1298:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1299:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  /**
1300:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Configures the ADCx external trigger for injected channels conversion.
1301:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1302:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_ExternalTrigInjecConv: specifies the ADC trigger to start injected conversion.
1303:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:                    
1304:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T1_CC4: Timer1 capture compare4 selected 
1305:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T1_TRGO: Timer1 TRGO event selected 
1306:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T2_CC1: Timer2 capture compare1 selected 
1307:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T2_TRGO: Timer2 TRGO event selected 
1308:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T3_CC2: Timer3 capture compare2 selected 
1309:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T3_CC4: Timer3 capture compare4 selected 
1310:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T4_CC1: Timer4 capture compare1 selected             
1311:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T4_CC2: Timer4 capture compare2 selected 
1312:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T4_CC3: Timer4 capture compare3 selected             
1313:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T4_TRGO: Timer4 TRGO event selected 
1314:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T5_CC4: Timer5 capture compare4 selected             
1315:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T5_TRGO: Timer5 TRGO event selected                  
1316:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T8_CC2: Timer8 capture compare2 selected
1317:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T8_CC3: Timer8 capture compare3 selected             
1318:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T8_CC4: Timer8 capture compare4 selected 
1319:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_Ext_IT15: External interrupt line 15 event selected  
1320:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1321:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1322:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_ExternalTrigInjectedConvConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConv)
1323:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 26384              		.loc 1 1323 0
 26385              		.cfi_startproc
 26386              		@ args = 0, pretend = 0, frame = 16
 26387              		@ frame_needed = 1, uses_anonymous_args = 0
 26388              		@ link register save eliminated.
 26389 0000 80B4     		push	{r7}
 26390              	.LCFI76:
 26391              		.cfi_def_cfa_offset 4
 26392 0002 85B0     		sub	sp, sp, #20
 26393              	.LCFI77:
 26394              		.cfi_def_cfa_offset 24
 26395 0004 00AF     		add	r7, sp, #0
 26396              		.cfi_offset 7, -4
 26397              	.LCFI78:
 26398              		.cfi_def_cfa_register 7
 26399 0006 7860     		str	r0, [r7, #4]
 26400 0008 3960     		str	r1, [r7, #0]
1324:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg = 0;
 26401              		.loc 1 1324 0
 26402 000a 4FF00003 		mov	r3, #0
 26403 000e FB60     		str	r3, [r7, #12]
1325:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1326:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1327:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_EXT_INJEC_TRIG(ADC_ExternalTrigInjecConv));
1328:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1329:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the old register value */
1330:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg = ADCx->CR2;
 26404              		.loc 1 1330 0
 26405 0010 7B68     		ldr	r3, [r7, #4]
 26406 0012 9B68     		ldr	r3, [r3, #8]
 26407 0014 FB60     		str	r3, [r7, #12]
1331:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1332:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear the old external event selection for injected group */
1333:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg &= CR2_JEXTSEL_RESET;
 26408              		.loc 1 1333 0
 26409 0016 FB68     		ldr	r3, [r7, #12]
 26410 0018 23F47023 		bic	r3, r3, #983040
 26411 001c FB60     		str	r3, [r7, #12]
1334:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1335:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the external event selection for injected group */
1336:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg |= ADC_ExternalTrigInjecConv;
 26412              		.loc 1 1336 0
 26413 001e FA68     		ldr	r2, [r7, #12]
 26414 0020 3B68     		ldr	r3, [r7, #0]
 26415 0022 42EA0303 		orr	r3, r2, r3
 26416 0026 FB60     		str	r3, [r7, #12]
1337:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1338:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Store the new register value */
1339:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->CR2 = tmpreg;
 26417              		.loc 1 1339 0
 26418 0028 7B68     		ldr	r3, [r7, #4]
 26419 002a FA68     		ldr	r2, [r7, #12]
 26420 002c 9A60     		str	r2, [r3, #8]
1340:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 26421              		.loc 1 1340 0
 26422 002e 07F11407 		add	r7, r7, #20
 26423 0032 BD46     		mov	sp, r7
 26424 0034 80BC     		pop	{r7}
 26425 0036 7047     		bx	lr
 26426              		.cfi_endproc
 26427              	.LFE136:
 26429              		.section	.text.ADC_ExternalTrigInjectedConvEdgeConfig,"ax",%progbits
 26430              		.align	2
 26431              		.global	ADC_ExternalTrigInjectedConvEdgeConfig
 26432              		.thumb
 26433              		.thumb_func
 26435              	ADC_ExternalTrigInjectedConvEdgeConfig:
 26436              	.LFB137:
1341:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1342:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1343:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Configures the ADCx external trigger edge for injected channels conversion.
1344:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1345:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_ExternalTrigInjecConvEdge: specifies the ADC external trigger edge
1346:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         to start injected conversion. 
1347:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1348:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConvEdge_None: external trigger disabled for 
1349:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *                                                     injected conversion
1350:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConvEdge_Rising: detection on rising edge
1351:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConvEdge_Falling: detection on falling edge
1352:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConvEdge_RisingFalling: detection on both rising 
1353:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *                                                               and falling edge
1354:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1355:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1356:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_ExternalTrigInjectedConvEdgeConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConvEd
1357:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 26437              		.loc 1 1357 0
 26438              		.cfi_startproc
 26439              		@ args = 0, pretend = 0, frame = 16
 26440              		@ frame_needed = 1, uses_anonymous_args = 0
 26441              		@ link register save eliminated.
 26442 0000 80B4     		push	{r7}
 26443              	.LCFI79:
 26444              		.cfi_def_cfa_offset 4
 26445 0002 85B0     		sub	sp, sp, #20
 26446              	.LCFI80:
 26447              		.cfi_def_cfa_offset 24
 26448 0004 00AF     		add	r7, sp, #0
 26449              		.cfi_offset 7, -4
 26450              	.LCFI81:
 26451              		.cfi_def_cfa_register 7
 26452 0006 7860     		str	r0, [r7, #4]
 26453 0008 3960     		str	r1, [r7, #0]
1358:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg = 0;
 26454              		.loc 1 1358 0
 26455 000a 4FF00003 		mov	r3, #0
 26456 000e FB60     		str	r3, [r7, #12]
1359:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1360:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1361:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(ADC_ExternalTrigInjecConvEdge));
1362:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the old register value */
1363:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg = ADCx->CR2;
 26457              		.loc 1 1363 0
 26458 0010 7B68     		ldr	r3, [r7, #4]
 26459 0012 9B68     		ldr	r3, [r3, #8]
 26460 0014 FB60     		str	r3, [r7, #12]
1364:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear the old external trigger edge for injected group */
1365:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg &= CR2_JEXTEN_RESET;
 26461              		.loc 1 1365 0
 26462 0016 FB68     		ldr	r3, [r7, #12]
 26463 0018 23F44013 		bic	r3, r3, #3145728
 26464 001c FB60     		str	r3, [r7, #12]
1366:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the new external trigger edge for injected group */
1367:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg |= ADC_ExternalTrigInjecConvEdge;
 26465              		.loc 1 1367 0
 26466 001e FA68     		ldr	r2, [r7, #12]
 26467 0020 3B68     		ldr	r3, [r7, #0]
 26468 0022 42EA0303 		orr	r3, r2, r3
 26469 0026 FB60     		str	r3, [r7, #12]
1368:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Store the new register value */
1369:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->CR2 = tmpreg;
 26470              		.loc 1 1369 0
 26471 0028 7B68     		ldr	r3, [r7, #4]
 26472 002a FA68     		ldr	r2, [r7, #12]
 26473 002c 9A60     		str	r2, [r3, #8]
1370:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 26474              		.loc 1 1370 0
 26475 002e 07F11407 		add	r7, r7, #20
 26476 0032 BD46     		mov	sp, r7
 26477 0034 80BC     		pop	{r7}
 26478 0036 7047     		bx	lr
 26479              		.cfi_endproc
 26480              	.LFE137:
 26482              		.section	.text.ADC_SoftwareStartInjectedConv,"ax",%progbits
 26483              		.align	2
 26484              		.global	ADC_SoftwareStartInjectedConv
 26485              		.thumb
 26486              		.thumb_func
 26488              	ADC_SoftwareStartInjectedConv:
 26489              	.LFB138:
1371:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1372:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1373:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables the selected ADC software start conversion of the injected channels.
1374:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1375:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1376:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1377:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_SoftwareStartInjectedConv(ADC_TypeDef* ADCx)
1378:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 26490              		.loc 1 1378 0
 26491              		.cfi_startproc
 26492              		@ args = 0, pretend = 0, frame = 8
 26493              		@ frame_needed = 1, uses_anonymous_args = 0
 26494              		@ link register save eliminated.
 26495 0000 80B4     		push	{r7}
 26496              	.LCFI82:
 26497              		.cfi_def_cfa_offset 4
 26498 0002 83B0     		sub	sp, sp, #12
 26499              	.LCFI83:
 26500              		.cfi_def_cfa_offset 16
 26501 0004 00AF     		add	r7, sp, #0
 26502              		.cfi_offset 7, -4
 26503              	.LCFI84:
 26504              		.cfi_def_cfa_register 7
 26505 0006 7860     		str	r0, [r7, #4]
1379:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1380:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1381:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Enable the selected ADC conversion for injected group */
1382:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->CR2 |= (uint32_t)ADC_CR2_JSWSTART;
 26506              		.loc 1 1382 0
 26507 0008 7B68     		ldr	r3, [r7, #4]
 26508 000a 9B68     		ldr	r3, [r3, #8]
 26509 000c 43F48002 		orr	r2, r3, #4194304
 26510 0010 7B68     		ldr	r3, [r7, #4]
 26511 0012 9A60     		str	r2, [r3, #8]
1383:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 26512              		.loc 1 1383 0
 26513 0014 07F10C07 		add	r7, r7, #12
 26514 0018 BD46     		mov	sp, r7
 26515 001a 80BC     		pop	{r7}
 26516 001c 7047     		bx	lr
 26517              		.cfi_endproc
 26518              	.LFE138:
 26520 001e 00BF     		.section	.text.ADC_GetSoftwareStartInjectedConvCmdStatus,"ax",%progbits
 26521              		.align	2
 26522              		.global	ADC_GetSoftwareStartInjectedConvCmdStatus
 26523              		.thumb
 26524              		.thumb_func
 26526              	ADC_GetSoftwareStartInjectedConvCmdStatus:
 26527              	.LFB139:
1384:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1385:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1386:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Gets the selected ADC Software start injected conversion Status.
1387:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1388:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval The new state of ADC software start injected conversion (SET or RESET).
1389:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1390:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** FlagStatus ADC_GetSoftwareStartInjectedConvCmdStatus(ADC_TypeDef* ADCx)
1391:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 26528              		.loc 1 1391 0
 26529              		.cfi_startproc
 26530              		@ args = 0, pretend = 0, frame = 16
 26531              		@ frame_needed = 1, uses_anonymous_args = 0
 26532              		@ link register save eliminated.
 26533 0000 80B4     		push	{r7}
 26534              	.LCFI85:
 26535              		.cfi_def_cfa_offset 4
 26536 0002 85B0     		sub	sp, sp, #20
 26537              	.LCFI86:
 26538              		.cfi_def_cfa_offset 24
 26539 0004 00AF     		add	r7, sp, #0
 26540              		.cfi_offset 7, -4
 26541              	.LCFI87:
 26542              		.cfi_def_cfa_register 7
 26543 0006 7860     		str	r0, [r7, #4]
1392:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   FlagStatus bitstatus = RESET;
 26544              		.loc 1 1392 0
 26545 0008 4FF00003 		mov	r3, #0
 26546 000c FB73     		strb	r3, [r7, #15]
1393:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1394:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1395:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1396:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the status of JSWSTART bit */
1397:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if ((ADCx->CR2 & ADC_CR2_JSWSTART) != (uint32_t)RESET)
 26547              		.loc 1 1397 0
 26548 000e 7B68     		ldr	r3, [r7, #4]
 26549 0010 9B68     		ldr	r3, [r3, #8]
 26550 0012 03F48003 		and	r3, r3, #4194304
 26551 0016 002B     		cmp	r3, #0
 26552 0018 03D0     		beq	.L70
1398:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1399:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* JSWSTART bit is set */
1400:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     bitstatus = SET;
 26553              		.loc 1 1400 0
 26554 001a 4FF00103 		mov	r3, #1
 26555 001e FB73     		strb	r3, [r7, #15]
 26556 0020 02E0     		b	.L71
 26557              	.L70:
1401:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1402:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
1403:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1404:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* JSWSTART bit is reset */
1405:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     bitstatus = RESET;
 26558              		.loc 1 1405 0
 26559 0022 4FF00003 		mov	r3, #0
 26560 0026 FB73     		strb	r3, [r7, #15]
 26561              	.L71:
1406:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1407:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Return the JSWSTART bit status */
1408:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   return  bitstatus;
 26562              		.loc 1 1408 0
 26563 0028 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1409:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 26564              		.loc 1 1409 0
 26565 002a 1846     		mov	r0, r3
 26566 002c 07F11407 		add	r7, r7, #20
 26567 0030 BD46     		mov	sp, r7
 26568 0032 80BC     		pop	{r7}
 26569 0034 7047     		bx	lr
 26570              		.cfi_endproc
 26571              	.LFE139:
 26573 0036 00BF     		.section	.text.ADC_AutoInjectedConvCmd,"ax",%progbits
 26574              		.align	2
 26575              		.global	ADC_AutoInjectedConvCmd
 26576              		.thumb
 26577              		.thumb_func
 26579              	ADC_AutoInjectedConvCmd:
 26580              	.LFB140:
1410:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1411:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1412:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the selected ADC automatic injected group 
1413:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         conversion after regular one.
1414:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1415:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC auto injected conversion
1416:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1417:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1418:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1419:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_AutoInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
1420:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 26581              		.loc 1 1420 0
 26582              		.cfi_startproc
 26583              		@ args = 0, pretend = 0, frame = 8
 26584              		@ frame_needed = 1, uses_anonymous_args = 0
 26585              		@ link register save eliminated.
 26586 0000 80B4     		push	{r7}
 26587              	.LCFI88:
 26588              		.cfi_def_cfa_offset 4
 26589 0002 83B0     		sub	sp, sp, #12
 26590              	.LCFI89:
 26591              		.cfi_def_cfa_offset 16
 26592 0004 00AF     		add	r7, sp, #0
 26593              		.cfi_offset 7, -4
 26594              	.LCFI90:
 26595              		.cfi_def_cfa_register 7
 26596 0006 7860     		str	r0, [r7, #4]
 26597 0008 0B46     		mov	r3, r1
 26598 000a FB70     		strb	r3, [r7, #3]
1421:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1422:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1423:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1424:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 26599              		.loc 1 1424 0
 26600 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 26601 000e 002B     		cmp	r3, #0
 26602 0010 06D0     		beq	.L73
1425:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1426:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the selected ADC automatic injected group conversion */
1427:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR1 |= (uint32_t)ADC_CR1_JAUTO;
 26603              		.loc 1 1427 0
 26604 0012 7B68     		ldr	r3, [r7, #4]
 26605 0014 5B68     		ldr	r3, [r3, #4]
 26606 0016 43F48062 		orr	r2, r3, #1024
 26607 001a 7B68     		ldr	r3, [r7, #4]
 26608 001c 5A60     		str	r2, [r3, #4]
 26609 001e 05E0     		b	.L72
 26610              	.L73:
1428:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1429:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
1430:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1431:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC automatic injected group conversion */
1432:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR1 &= (uint32_t)(~ADC_CR1_JAUTO);
 26611              		.loc 1 1432 0
 26612 0020 7B68     		ldr	r3, [r7, #4]
 26613 0022 5B68     		ldr	r3, [r3, #4]
 26614 0024 23F48062 		bic	r2, r3, #1024
 26615 0028 7B68     		ldr	r3, [r7, #4]
 26616 002a 5A60     		str	r2, [r3, #4]
 26617              	.L72:
1433:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1434:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 26618              		.loc 1 1434 0
 26619 002c 07F10C07 		add	r7, r7, #12
 26620 0030 BD46     		mov	sp, r7
 26621 0032 80BC     		pop	{r7}
 26622 0034 7047     		bx	lr
 26623              		.cfi_endproc
 26624              	.LFE140:
 26626 0036 00BF     		.section	.text.ADC_InjectedDiscModeCmd,"ax",%progbits
 26627              		.align	2
 26628              		.global	ADC_InjectedDiscModeCmd
 26629              		.thumb
 26630              		.thumb_func
 26632              	ADC_InjectedDiscModeCmd:
 26633              	.LFB141:
1435:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1436:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1437:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the discontinuous mode for injected group 
1438:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         channel for the specified ADC
1439:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1440:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC discontinuous mode on injected
1441:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         group channel.
1442:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1443:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1444:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1445:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_InjectedDiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
1446:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 26634              		.loc 1 1446 0
 26635              		.cfi_startproc
 26636              		@ args = 0, pretend = 0, frame = 8
 26637              		@ frame_needed = 1, uses_anonymous_args = 0
 26638              		@ link register save eliminated.
 26639 0000 80B4     		push	{r7}
 26640              	.LCFI91:
 26641              		.cfi_def_cfa_offset 4
 26642 0002 83B0     		sub	sp, sp, #12
 26643              	.LCFI92:
 26644              		.cfi_def_cfa_offset 16
 26645 0004 00AF     		add	r7, sp, #0
 26646              		.cfi_offset 7, -4
 26647              	.LCFI93:
 26648              		.cfi_def_cfa_register 7
 26649 0006 7860     		str	r0, [r7, #4]
 26650 0008 0B46     		mov	r3, r1
 26651 000a FB70     		strb	r3, [r7, #3]
1447:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1448:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1449:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1450:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 26652              		.loc 1 1450 0
 26653 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 26654 000e 002B     		cmp	r3, #0
 26655 0010 06D0     		beq	.L76
1451:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1452:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the selected ADC injected discontinuous mode */
1453:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR1 |= (uint32_t)ADC_CR1_JDISCEN;
 26656              		.loc 1 1453 0
 26657 0012 7B68     		ldr	r3, [r7, #4]
 26658 0014 5B68     		ldr	r3, [r3, #4]
 26659 0016 43F48052 		orr	r2, r3, #4096
 26660 001a 7B68     		ldr	r3, [r7, #4]
 26661 001c 5A60     		str	r2, [r3, #4]
 26662 001e 05E0     		b	.L75
 26663              	.L76:
1454:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1455:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
1456:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1457:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC injected discontinuous mode */
1458:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR1 &= (uint32_t)(~ADC_CR1_JDISCEN);
 26664              		.loc 1 1458 0
 26665 0020 7B68     		ldr	r3, [r7, #4]
 26666 0022 5B68     		ldr	r3, [r3, #4]
 26667 0024 23F48052 		bic	r2, r3, #4096
 26668 0028 7B68     		ldr	r3, [r7, #4]
 26669 002a 5A60     		str	r2, [r3, #4]
 26670              	.L75:
1459:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1460:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 26671              		.loc 1 1460 0
 26672 002c 07F10C07 		add	r7, r7, #12
 26673 0030 BD46     		mov	sp, r7
 26674 0032 80BC     		pop	{r7}
 26675 0034 7047     		bx	lr
 26676              		.cfi_endproc
 26677              	.LFE141:
 26679 0036 00BF     		.section	.text.ADC_GetInjectedConversionValue,"ax",%progbits
 26680              		.align	2
 26681              		.global	ADC_GetInjectedConversionValue
 26682              		.thumb
 26683              		.thumb_func
 26685              	ADC_GetInjectedConversionValue:
 26686              	.LFB142:
1461:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1462:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1463:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Returns the ADC injected channel conversion result
1464:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1465:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_InjectedChannel: the converted ADC injected channel.
1466:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1467:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_1: Injected Channel1 selected
1468:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_2: Injected Channel2 selected
1469:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_3: Injected Channel3 selected
1470:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_4: Injected Channel4 selected
1471:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval The Data conversion value.
1472:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1473:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** uint16_t ADC_GetInjectedConversionValue(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel)
1474:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 26687              		.loc 1 1474 0
 26688              		.cfi_startproc
 26689              		@ args = 0, pretend = 0, frame = 16
 26690              		@ frame_needed = 1, uses_anonymous_args = 0
 26691              		@ link register save eliminated.
 26692 0000 80B4     		push	{r7}
 26693              	.LCFI94:
 26694              		.cfi_def_cfa_offset 4
 26695 0002 85B0     		sub	sp, sp, #20
 26696              	.LCFI95:
 26697              		.cfi_def_cfa_offset 24
 26698 0004 00AF     		add	r7, sp, #0
 26699              		.cfi_offset 7, -4
 26700              	.LCFI96:
 26701              		.cfi_def_cfa_register 7
 26702 0006 7860     		str	r0, [r7, #4]
 26703 0008 0B46     		mov	r3, r1
 26704 000a FB70     		strb	r3, [r7, #3]
1475:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   __IO uint32_t tmp = 0;
 26705              		.loc 1 1475 0
 26706 000c 4FF00003 		mov	r3, #0
 26707 0010 FB60     		str	r3, [r7, #12]
1476:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1477:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1478:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1479:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
1480:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1481:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmp = (uint32_t)ADCx;
 26708              		.loc 1 1481 0
 26709 0012 7B68     		ldr	r3, [r7, #4]
 26710 0014 FB60     		str	r3, [r7, #12]
1482:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmp += ADC_InjectedChannel + JDR_OFFSET;
 26711              		.loc 1 1482 0
 26712 0016 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 26713 0018 FB68     		ldr	r3, [r7, #12]
 26714 001a D318     		adds	r3, r2, r3
 26715 001c 03F12803 		add	r3, r3, #40
 26716 0020 FB60     		str	r3, [r7, #12]
1483:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1484:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Returns the selected injected channel conversion data value */
1485:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   return (uint16_t) (*(__IO uint32_t*)  tmp); 
 26717              		.loc 1 1485 0
 26718 0022 FB68     		ldr	r3, [r7, #12]
 26719 0024 1B68     		ldr	r3, [r3, #0]
 26720 0026 9BB2     		uxth	r3, r3
1486:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 26721              		.loc 1 1486 0
 26722 0028 1846     		mov	r0, r3
 26723 002a 07F11407 		add	r7, r7, #20
 26724 002e BD46     		mov	sp, r7
 26725 0030 80BC     		pop	{r7}
 26726 0032 7047     		bx	lr
 26727              		.cfi_endproc
 26728              	.LFE142:
 26730              		.section	.text.ADC_ITConfig,"ax",%progbits
 26731              		.align	2
 26732              		.global	ADC_ITConfig
 26733              		.thumb
 26734              		.thumb_func
 26736              	ADC_ITConfig:
 26737              	.LFB143:
1487:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1488:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @}
1489:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1490:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1491:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @defgroup ADC_Group7 Interrupts and flags management functions
1492:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *  @brief   Interrupts and flags management functions
1493:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *
1494:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @verbatim   
1495:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================
1496:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                    Interrupts and flags management functions
1497:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================  
1498:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1499:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   This section provides functions allowing to configure the ADC Interrupts and 
1500:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   to get the status and clear flags and Interrupts pending bits.
1501:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1502:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Each ADC provides 4 Interrupts sources and 6 Flags which can be divided into 
1503:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   3 groups:
1504:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1505:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   I. Flags and Interrupts for ADC regular channels
1506:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   =================================================
1507:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Flags :
1508:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ---------- 
1509:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      1. ADC_FLAG_OVR : Overrun detection when regular converted data are lost
1510:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1511:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      2. ADC_FLAG_EOC : Regular channel end of conversion ==> to indicate (depending 
1512:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****               on EOCS bit, managed by ADC_EOCOnEachRegularChannelCmd() ) the end of:
1513:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                ==> a regular CHANNEL conversion 
1514:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                ==> sequence of regular GROUP conversions .
1515:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1516:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      3. ADC_FLAG_STRT: Regular channel start ==> to indicate when regular CHANNEL 
1517:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****               conversion starts.
1518:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1519:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Interrupts :
1520:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ------------
1521:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      1. ADC_IT_OVR : specifies the interrupt source for Overrun detection event.  
1522:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      2. ADC_IT_EOC : specifies the interrupt source for Regular channel end of 
1523:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                      conversion event.
1524:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1525:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1526:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   II. Flags and Interrupts for ADC Injected channels
1527:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   =================================================
1528:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Flags :
1529:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ---------- 
1530:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      1. ADC_FLAG_JEOC : Injected channel end of conversion ==> to indicate at 
1531:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                the end of injected GROUP conversion  
1532:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****               
1533:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      2. ADC_FLAG_JSTRT: Injected channel start ==> to indicate hardware when 
1534:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                injected GROUP conversion starts.
1535:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1536:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Interrupts :
1537:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ------------
1538:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      1. ADC_IT_JEOC : specifies the interrupt source for Injected channel end of 
1539:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                       conversion event.     
1540:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1541:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   III. General Flags and Interrupts for the ADC
1542:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ================================================= 
1543:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Flags :
1544:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ---------- 
1545:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      1. ADC_FLAG_AWD: Analog watchdog ==> to indicate if the converted voltage 
1546:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****               crosses the programmed thresholds values.
1547:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****               
1548:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Interrupts :
1549:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ------------
1550:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      1. ADC_IT_AWD : specifies the interrupt source for Analog watchdog event. 
1551:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1552:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1553:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   The user should identify which mode will be used in his application to manage 
1554:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   the ADC controller events: Polling mode or Interrupt mode.
1555:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1556:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   In the Polling Mode it is advised to use the following functions:
1557:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       - ADC_GetFlagStatus() : to check if flags events occur. 
1558:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       - ADC_ClearFlag()     : to clear the flags events.
1559:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       
1560:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   In the Interrupt Mode it is advised to use the following functions:
1561:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      - ADC_ITConfig()          : to enable or disable the interrupt source.
1562:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      - ADC_GetITStatus()       : to check if Interrupt occurs.
1563:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      - ADC_ClearITPendingBit() : to clear the Interrupt pending Bit 
1564:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                                  (corresponding Flag). 
1565:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @endverbatim
1566:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
1567:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */ 
1568:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1569:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the specified ADC interrupts.
1570:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1571:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_IT: specifies the ADC interrupt sources to be enabled or disabled. 
1572:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1573:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_EOC: End of conversion interrupt mask
1574:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_AWD: Analog watchdog interrupt mask
1575:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
1576:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_OVR: Overrun interrupt enable                       
1577:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the specified ADC interrupts.
1578:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1579:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1580:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1581:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_ITConfig(ADC_TypeDef* ADCx, uint16_t ADC_IT, FunctionalState NewState)  
1582:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 26738              		.loc 1 1582 0
 26739              		.cfi_startproc
 26740              		@ args = 0, pretend = 0, frame = 16
 26741              		@ frame_needed = 1, uses_anonymous_args = 0
 26742              		@ link register save eliminated.
 26743 0000 80B4     		push	{r7}
 26744              	.LCFI97:
 26745              		.cfi_def_cfa_offset 4
 26746 0002 85B0     		sub	sp, sp, #20
 26747              	.LCFI98:
 26748              		.cfi_def_cfa_offset 24
 26749 0004 00AF     		add	r7, sp, #0
 26750              		.cfi_offset 7, -4
 26751              	.LCFI99:
 26752              		.cfi_def_cfa_register 7
 26753 0006 7860     		str	r0, [r7, #4]
 26754 0008 1346     		mov	r3, r2
 26755 000a 0A46     		mov	r2, r1	@ movhi
 26756 000c 7A80     		strh	r2, [r7, #2]	@ movhi
 26757 000e 7B70     		strb	r3, [r7, #1]
1583:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t itmask = 0;
 26758              		.loc 1 1583 0
 26759 0010 4FF00003 		mov	r3, #0
 26760 0014 FB60     		str	r3, [r7, #12]
1584:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1585:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1586:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1587:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_IT(ADC_IT)); 
1588:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1589:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the ADC IT index */
1590:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   itmask = (uint8_t)ADC_IT;
 26761              		.loc 1 1590 0
 26762 0016 7B88     		ldrh	r3, [r7, #2]	@ movhi
 26763 0018 DBB2     		uxtb	r3, r3
 26764 001a FB60     		str	r3, [r7, #12]
1591:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   itmask = (uint32_t)0x01 << itmask;    
 26765              		.loc 1 1591 0
 26766 001c FB68     		ldr	r3, [r7, #12]
 26767 001e 4FF00102 		mov	r2, #1
 26768 0022 02FA03F3 		lsl	r3, r2, r3
 26769 0026 FB60     		str	r3, [r7, #12]
1592:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1593:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 26770              		.loc 1 1593 0
 26771 0028 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 26772 002a 002B     		cmp	r3, #0
 26773 002c 06D0     		beq	.L80
1594:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1595:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the selected ADC interrupts */
1596:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR1 |= itmask;
 26774              		.loc 1 1596 0
 26775 002e 7B68     		ldr	r3, [r7, #4]
 26776 0030 5A68     		ldr	r2, [r3, #4]
 26777 0032 FB68     		ldr	r3, [r7, #12]
 26778 0034 1A43     		orrs	r2, r2, r3
 26779 0036 7B68     		ldr	r3, [r7, #4]
 26780 0038 5A60     		str	r2, [r3, #4]
 26781 003a 07E0     		b	.L79
 26782              	.L80:
1597:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1598:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
1599:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1600:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC interrupts */
1601:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR1 &= (~(uint32_t)itmask);
 26783              		.loc 1 1601 0
 26784 003c 7B68     		ldr	r3, [r7, #4]
 26785 003e 5A68     		ldr	r2, [r3, #4]
 26786 0040 FB68     		ldr	r3, [r7, #12]
 26787 0042 6FEA0303 		mvn	r3, r3
 26788 0046 1A40     		ands	r2, r2, r3
 26789 0048 7B68     		ldr	r3, [r7, #4]
 26790 004a 5A60     		str	r2, [r3, #4]
 26791              	.L79:
1602:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1603:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 26792              		.loc 1 1603 0
 26793 004c 07F11407 		add	r7, r7, #20
 26794 0050 BD46     		mov	sp, r7
 26795 0052 80BC     		pop	{r7}
 26796 0054 7047     		bx	lr
 26797              		.cfi_endproc
 26798              	.LFE143:
 26800 0056 00BF     		.section	.text.ADC_GetFlagStatus,"ax",%progbits
 26801              		.align	2
 26802              		.global	ADC_GetFlagStatus
 26803              		.thumb
 26804              		.thumb_func
 26806              	ADC_GetFlagStatus:
 26807              	.LFB144:
1604:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1605:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1606:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Checks whether the specified ADC flag is set or not.
1607:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1608:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_FLAG: specifies the flag to check. 
1609:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1610:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_AWD: Analog watchdog flag
1611:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_EOC: End of conversion flag
1612:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_JEOC: End of injected group conversion flag
1613:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_JSTRT: Start of injected group conversion flag
1614:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
1615:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_OVR: Overrun flag                                                 
1616:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval The new state of ADC_FLAG (SET or RESET).
1617:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1618:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
1619:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 26808              		.loc 1 1619 0
 26809              		.cfi_startproc
 26810              		@ args = 0, pretend = 0, frame = 16
 26811              		@ frame_needed = 1, uses_anonymous_args = 0
 26812              		@ link register save eliminated.
 26813 0000 80B4     		push	{r7}
 26814              	.LCFI100:
 26815              		.cfi_def_cfa_offset 4
 26816 0002 85B0     		sub	sp, sp, #20
 26817              	.LCFI101:
 26818              		.cfi_def_cfa_offset 24
 26819 0004 00AF     		add	r7, sp, #0
 26820              		.cfi_offset 7, -4
 26821              	.LCFI102:
 26822              		.cfi_def_cfa_register 7
 26823 0006 7860     		str	r0, [r7, #4]
 26824 0008 0B46     		mov	r3, r1
 26825 000a FB70     		strb	r3, [r7, #3]
1620:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   FlagStatus bitstatus = RESET;
 26826              		.loc 1 1620 0
 26827 000c 4FF00003 		mov	r3, #0
 26828 0010 FB73     		strb	r3, [r7, #15]
1621:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1622:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1623:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_GET_FLAG(ADC_FLAG));
1624:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1625:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the status of the specified ADC flag */
1626:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
 26829              		.loc 1 1626 0
 26830 0012 7B68     		ldr	r3, [r7, #4]
 26831 0014 1A68     		ldr	r2, [r3, #0]
 26832 0016 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 26833 0018 02EA0303 		and	r3, r2, r3
 26834 001c 002B     		cmp	r3, #0
 26835 001e 03D0     		beq	.L83
1627:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1628:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* ADC_FLAG is set */
1629:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     bitstatus = SET;
 26836              		.loc 1 1629 0
 26837 0020 4FF00103 		mov	r3, #1
 26838 0024 FB73     		strb	r3, [r7, #15]
 26839 0026 02E0     		b	.L84
 26840              	.L83:
1630:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1631:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
1632:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1633:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* ADC_FLAG is reset */
1634:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     bitstatus = RESET;
 26841              		.loc 1 1634 0
 26842 0028 4FF00003 		mov	r3, #0
 26843 002c FB73     		strb	r3, [r7, #15]
 26844              	.L84:
1635:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1636:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Return the ADC_FLAG status */
1637:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   return  bitstatus;
 26845              		.loc 1 1637 0
 26846 002e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1638:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 26847              		.loc 1 1638 0
 26848 0030 1846     		mov	r0, r3
 26849 0032 07F11407 		add	r7, r7, #20
 26850 0036 BD46     		mov	sp, r7
 26851 0038 80BC     		pop	{r7}
 26852 003a 7047     		bx	lr
 26853              		.cfi_endproc
 26854              	.LFE144:
 26856              		.section	.text.ADC_ClearFlag,"ax",%progbits
 26857              		.align	2
 26858              		.global	ADC_ClearFlag
 26859              		.thumb
 26860              		.thumb_func
 26862              	ADC_ClearFlag:
 26863              	.LFB145:
1639:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1640:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1641:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Clears the ADCx's pending flags.
1642:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1643:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_FLAG: specifies the flag to clear. 
1644:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be any combination of the following values:
1645:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_AWD: Analog watchdog flag
1646:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_EOC: End of conversion flag
1647:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_JEOC: End of injected group conversion flag
1648:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_JSTRT: Start of injected group conversion flag
1649:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
1650:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_OVR: Overrun flag                          
1651:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1652:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1653:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_ClearFlag(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
1654:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 26864              		.loc 1 1654 0
 26865              		.cfi_startproc
 26866              		@ args = 0, pretend = 0, frame = 8
 26867              		@ frame_needed = 1, uses_anonymous_args = 0
 26868              		@ link register save eliminated.
 26869 0000 80B4     		push	{r7}
 26870              	.LCFI103:
 26871              		.cfi_def_cfa_offset 4
 26872 0002 83B0     		sub	sp, sp, #12
 26873              	.LCFI104:
 26874              		.cfi_def_cfa_offset 16
 26875 0004 00AF     		add	r7, sp, #0
 26876              		.cfi_offset 7, -4
 26877              	.LCFI105:
 26878              		.cfi_def_cfa_register 7
 26879 0006 7860     		str	r0, [r7, #4]
 26880 0008 0B46     		mov	r3, r1
 26881 000a FB70     		strb	r3, [r7, #3]
1655:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1656:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1657:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_CLEAR_FLAG(ADC_FLAG));
1658:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1659:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear the selected ADC flags */
1660:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->SR = ~(uint32_t)ADC_FLAG;
 26882              		.loc 1 1660 0
 26883 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 26884 000e 6FEA0302 		mvn	r2, r3
 26885 0012 7B68     		ldr	r3, [r7, #4]
 26886 0014 1A60     		str	r2, [r3, #0]
1661:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 26887              		.loc 1 1661 0
 26888 0016 07F10C07 		add	r7, r7, #12
 26889 001a BD46     		mov	sp, r7
 26890 001c 80BC     		pop	{r7}
 26891 001e 7047     		bx	lr
 26892              		.cfi_endproc
 26893              	.LFE145:
 26895              		.section	.text.ADC_GetITStatus,"ax",%progbits
 26896              		.align	2
 26897              		.global	ADC_GetITStatus
 26898              		.thumb
 26899              		.thumb_func
 26901              	ADC_GetITStatus:
 26902              	.LFB146:
1662:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1663:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1664:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Checks whether the specified ADC interrupt has occurred or not.
1665:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx:   where x can be 1, 2 or 3 to select the ADC peripheral.
1666:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_IT: specifies the ADC interrupt source to check. 
1667:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1668:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_EOC: End of conversion interrupt mask
1669:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_AWD: Analog watchdog interrupt mask
1670:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
1671:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_OVR: Overrun interrupt mask                        
1672:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval The new state of ADC_IT (SET or RESET).
1673:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1674:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** ITStatus ADC_GetITStatus(ADC_TypeDef* ADCx, uint16_t ADC_IT)
1675:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 26903              		.loc 1 1675 0
 26904              		.cfi_startproc
 26905              		@ args = 0, pretend = 0, frame = 24
 26906              		@ frame_needed = 1, uses_anonymous_args = 0
 26907              		@ link register save eliminated.
 26908 0000 80B4     		push	{r7}
 26909              	.LCFI106:
 26910              		.cfi_def_cfa_offset 4
 26911 0002 87B0     		sub	sp, sp, #28
 26912              	.LCFI107:
 26913              		.cfi_def_cfa_offset 32
 26914 0004 00AF     		add	r7, sp, #0
 26915              		.cfi_offset 7, -4
 26916              	.LCFI108:
 26917              		.cfi_def_cfa_register 7
 26918 0006 7860     		str	r0, [r7, #4]
 26919 0008 0B46     		mov	r3, r1
 26920 000a 7B80     		strh	r3, [r7, #2]	@ movhi
1676:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ITStatus bitstatus = RESET;
 26921              		.loc 1 1676 0
 26922 000c 4FF00003 		mov	r3, #0
 26923 0010 FB75     		strb	r3, [r7, #23]
1677:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t itmask = 0, enablestatus = 0;
 26924              		.loc 1 1677 0
 26925 0012 4FF00003 		mov	r3, #0
 26926 0016 3B61     		str	r3, [r7, #16]
 26927 0018 4FF00003 		mov	r3, #0
 26928 001c FB60     		str	r3, [r7, #12]
1678:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1679:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1680:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1681:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_IT(ADC_IT));
1682:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1683:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the ADC IT index */
1684:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   itmask = ADC_IT >> 8;
 26929              		.loc 1 1684 0
 26930 001e 7B88     		ldrh	r3, [r7, #2]
 26931 0020 4FEA1323 		lsr	r3, r3, #8
 26932 0024 9BB2     		uxth	r3, r3
 26933 0026 3B61     		str	r3, [r7, #16]
1685:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1686:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the ADC_IT enable bit status */
1687:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   enablestatus = (ADCx->CR1 & ((uint32_t)0x01 << (uint8_t)ADC_IT)) ;
 26934              		.loc 1 1687 0
 26935 0028 7B68     		ldr	r3, [r7, #4]
 26936 002a 5A68     		ldr	r2, [r3, #4]
 26937 002c 7B88     		ldrh	r3, [r7, #2]	@ movhi
 26938 002e DBB2     		uxtb	r3, r3
 26939 0030 4FF00101 		mov	r1, #1
 26940 0034 01FA03F3 		lsl	r3, r1, r3
 26941 0038 02EA0303 		and	r3, r2, r3
 26942 003c FB60     		str	r3, [r7, #12]
1688:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1689:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the status of the specified ADC interrupt */
1690:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (((ADCx->SR & itmask) != (uint32_t)RESET) && enablestatus)
 26943              		.loc 1 1690 0
 26944 003e 7B68     		ldr	r3, [r7, #4]
 26945 0040 1A68     		ldr	r2, [r3, #0]
 26946 0042 3B69     		ldr	r3, [r7, #16]
 26947 0044 02EA0303 		and	r3, r2, r3
 26948 0048 002B     		cmp	r3, #0
 26949 004a 06D0     		beq	.L87
 26950              		.loc 1 1690 0 is_stmt 0 discriminator 1
 26951 004c FB68     		ldr	r3, [r7, #12]
 26952 004e 002B     		cmp	r3, #0
 26953 0050 03D0     		beq	.L87
1691:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1692:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* ADC_IT is set */
1693:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     bitstatus = SET;
 26954              		.loc 1 1693 0 is_stmt 1
 26955 0052 4FF00103 		mov	r3, #1
 26956 0056 FB75     		strb	r3, [r7, #23]
 26957 0058 02E0     		b	.L88
 26958              	.L87:
1694:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1695:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
1696:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1697:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* ADC_IT is reset */
1698:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     bitstatus = RESET;
 26959              		.loc 1 1698 0
 26960 005a 4FF00003 		mov	r3, #0
 26961 005e FB75     		strb	r3, [r7, #23]
 26962              	.L88:
1699:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1700:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Return the ADC_IT status */
1701:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   return  bitstatus;
 26963              		.loc 1 1701 0
 26964 0060 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1702:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 26965              		.loc 1 1702 0
 26966 0062 1846     		mov	r0, r3
 26967 0064 07F11C07 		add	r7, r7, #28
 26968 0068 BD46     		mov	sp, r7
 26969 006a 80BC     		pop	{r7}
 26970 006c 7047     		bx	lr
 26971              		.cfi_endproc
 26972              	.LFE146:
 26974 006e 00BF     		.section	.text.ADC_ClearITPendingBit,"ax",%progbits
 26975              		.align	2
 26976              		.global	ADC_ClearITPendingBit
 26977              		.thumb
 26978              		.thumb_func
 26980              	ADC_ClearITPendingBit:
 26981              	.LFB147:
1703:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1704:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1705:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Clears the ADCx's interrupt pending bits.
1706:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1707:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_IT: specifies the ADC interrupt pending bit to clear.
1708:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1709:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_EOC: End of conversion interrupt mask
1710:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_AWD: Analog watchdog interrupt mask
1711:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
1712:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_OVR: Overrun interrupt mask                         
1713:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1714:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1715:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_ClearITPendingBit(ADC_TypeDef* ADCx, uint16_t ADC_IT)
1716:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 26982              		.loc 1 1716 0
 26983              		.cfi_startproc
 26984              		@ args = 0, pretend = 0, frame = 16
 26985              		@ frame_needed = 1, uses_anonymous_args = 0
 26986              		@ link register save eliminated.
 26987 0000 80B4     		push	{r7}
 26988              	.LCFI109:
 26989              		.cfi_def_cfa_offset 4
 26990 0002 85B0     		sub	sp, sp, #20
 26991              	.LCFI110:
 26992              		.cfi_def_cfa_offset 24
 26993 0004 00AF     		add	r7, sp, #0
 26994              		.cfi_offset 7, -4
 26995              	.LCFI111:
 26996              		.cfi_def_cfa_register 7
 26997 0006 7860     		str	r0, [r7, #4]
 26998 0008 0B46     		mov	r3, r1
 26999 000a 7B80     		strh	r3, [r7, #2]	@ movhi
1717:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint8_t itmask = 0;
 27000              		.loc 1 1717 0
 27001 000c 4FF00003 		mov	r3, #0
 27002 0010 FB73     		strb	r3, [r7, #15]
1718:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1719:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1720:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_IT(ADC_IT)); 
1721:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the ADC IT index */
1722:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   itmask = (uint8_t)(ADC_IT >> 8);
 27003              		.loc 1 1722 0
 27004 0012 7B88     		ldrh	r3, [r7, #2]
 27005 0014 4FEA1323 		lsr	r3, r3, #8
 27006 0018 9BB2     		uxth	r3, r3
 27007 001a FB73     		strb	r3, [r7, #15]
1723:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear the selected ADC interrupt pending bits */
1724:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->SR = ~(uint32_t)itmask;
 27008              		.loc 1 1724 0
 27009 001c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 27010 001e 6FEA0302 		mvn	r2, r3
 27011 0022 7B68     		ldr	r3, [r7, #4]
 27012 0024 1A60     		str	r2, [r3, #0]
1725:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }                    
 27013              		.loc 1 1725 0
 27014 0026 07F11407 		add	r7, r7, #20
 27015 002a BD46     		mov	sp, r7
 27016 002c 80BC     		pop	{r7}
 27017 002e 7047     		bx	lr
 27018              		.cfi_endproc
 27019              	.LFE147:
 27021              		.text
 27022              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_adc.c
     /tmp/cc3AMO2Y.s:24635  .text.ADC_DeInit:00000000 $t
     /tmp/cc3AMO2Y.s:24640  .text.ADC_DeInit:00000000 ADC_DeInit
     /tmp/cc3AMO2Y.s:24668  .text.ADC_Init:00000000 $t
     /tmp/cc3AMO2Y.s:24673  .text.ADC_Init:00000000 ADC_Init
     /tmp/cc3AMO2Y.s:24792  .text.ADC_Init:000000c0 $d
     /tmp/cc3AMO2Y.s:24797  .text.ADC_StructInit:00000000 $t
     /tmp/cc3AMO2Y.s:24802  .text.ADC_StructInit:00000000 ADC_StructInit
     /tmp/cc3AMO2Y.s:24857  .text.ADC_CommonInit:00000000 $t
     /tmp/cc3AMO2Y.s:24862  .text.ADC_CommonInit:00000000 ADC_CommonInit
     /tmp/cc3AMO2Y.s:24925  .text.ADC_CommonInit:00000050 $d
     /tmp/cc3AMO2Y.s:24931  .text.ADC_CommonStructInit:00000000 $t
     /tmp/cc3AMO2Y.s:24936  .text.ADC_CommonStructInit:00000000 ADC_CommonStructInit
     /tmp/cc3AMO2Y.s:24979  .text.ADC_Cmd:00000000 $t
     /tmp/cc3AMO2Y.s:24984  .text.ADC_Cmd:00000000 ADC_Cmd
     /tmp/cc3AMO2Y.s:25032  .text.ADC_AnalogWatchdogCmd:00000000 $t
     /tmp/cc3AMO2Y.s:25037  .text.ADC_AnalogWatchdogCmd:00000000 ADC_AnalogWatchdogCmd
     /tmp/cc3AMO2Y.s:25086  .text.ADC_AnalogWatchdogThresholdsConfig:00000000 $t
     /tmp/cc3AMO2Y.s:25091  .text.ADC_AnalogWatchdogThresholdsConfig:00000000 ADC_AnalogWatchdogThresholdsConfig
     /tmp/cc3AMO2Y.s:25130  .text.ADC_AnalogWatchdogSingleChannelConfig:00000000 $t
     /tmp/cc3AMO2Y.s:25135  .text.ADC_AnalogWatchdogSingleChannelConfig:00000000 ADC_AnalogWatchdogSingleChannelConfig
     /tmp/cc3AMO2Y.s:25184  .text.ADC_TempSensorVrefintCmd:00000000 $t
     /tmp/cc3AMO2Y.s:25189  .text.ADC_TempSensorVrefintCmd:00000000 ADC_TempSensorVrefintCmd
     /tmp/cc3AMO2Y.s:25235  .text.ADC_TempSensorVrefintCmd:00000034 $d
     /tmp/cc3AMO2Y.s:25240  .text.ADC_VBATCmd:00000000 $t
     /tmp/cc3AMO2Y.s:25245  .text.ADC_VBATCmd:00000000 ADC_VBATCmd
     /tmp/cc3AMO2Y.s:25291  .text.ADC_VBATCmd:00000034 $d
     /tmp/cc3AMO2Y.s:25296  .text.ADC_RegularChannelConfig:00000000 $t
     /tmp/cc3AMO2Y.s:25301  .text.ADC_RegularChannelConfig:00000000 ADC_RegularChannelConfig
     /tmp/cc3AMO2Y.s:25539  .text.ADC_SoftwareStartConv:00000000 $t
     /tmp/cc3AMO2Y.s:25544  .text.ADC_SoftwareStartConv:00000000 ADC_SoftwareStartConv
     /tmp/cc3AMO2Y.s:25577  .text.ADC_GetSoftwareStartConvStatus:00000000 $t
     /tmp/cc3AMO2Y.s:25582  .text.ADC_GetSoftwareStartConvStatus:00000000 ADC_GetSoftwareStartConvStatus
     /tmp/cc3AMO2Y.s:25630  .text.ADC_EOCOnEachRegularChannelCmd:00000000 $t
     /tmp/cc3AMO2Y.s:25635  .text.ADC_EOCOnEachRegularChannelCmd:00000000 ADC_EOCOnEachRegularChannelCmd
     /tmp/cc3AMO2Y.s:25683  .text.ADC_ContinuousModeCmd:00000000 $t
     /tmp/cc3AMO2Y.s:25688  .text.ADC_ContinuousModeCmd:00000000 ADC_ContinuousModeCmd
     /tmp/cc3AMO2Y.s:25736  .text.ADC_DiscModeChannelCountConfig:00000000 $t
     /tmp/cc3AMO2Y.s:25741  .text.ADC_DiscModeChannelCountConfig:00000000 ADC_DiscModeChannelCountConfig
     /tmp/cc3AMO2Y.s:25798  .text.ADC_DiscModeCmd:00000000 $t
     /tmp/cc3AMO2Y.s:25803  .text.ADC_DiscModeCmd:00000000 ADC_DiscModeCmd
     /tmp/cc3AMO2Y.s:25851  .text.ADC_GetConversionValue:00000000 $t
     /tmp/cc3AMO2Y.s:25856  .text.ADC_GetConversionValue:00000000 ADC_GetConversionValue
     /tmp/cc3AMO2Y.s:25888  .text.ADC_GetMultiModeConversionValue:00000000 $t
     /tmp/cc3AMO2Y.s:25893  .text.ADC_GetMultiModeConversionValue:00000000 ADC_GetMultiModeConversionValue
     /tmp/cc3AMO2Y.s:25918  .text.ADC_GetMultiModeConversionValue:00000010 $d
     /tmp/cc3AMO2Y.s:25923  .text.ADC_DMACmd:00000000 $t
     /tmp/cc3AMO2Y.s:25928  .text.ADC_DMACmd:00000000 ADC_DMACmd
     /tmp/cc3AMO2Y.s:25976  .text.ADC_DMARequestAfterLastTransferCmd:00000000 $t
     /tmp/cc3AMO2Y.s:25981  .text.ADC_DMARequestAfterLastTransferCmd:00000000 ADC_DMARequestAfterLastTransferCmd
     /tmp/cc3AMO2Y.s:26029  .text.ADC_MultiModeDMARequestAfterLastTransferCmd:00000000 $t
     /tmp/cc3AMO2Y.s:26034  .text.ADC_MultiModeDMARequestAfterLastTransferCmd:00000000 ADC_MultiModeDMARequestAfterLastTransferCmd
     /tmp/cc3AMO2Y.s:26080  .text.ADC_MultiModeDMARequestAfterLastTransferCmd:00000034 $d
     /tmp/cc3AMO2Y.s:26085  .text.ADC_InjectedChannelConfig:00000000 $t
     /tmp/cc3AMO2Y.s:26090  .text.ADC_InjectedChannelConfig:00000000 ADC_InjectedChannelConfig
     /tmp/cc3AMO2Y.s:26264  .text.ADC_InjectedSequencerLengthConfig:00000000 $t
     /tmp/cc3AMO2Y.s:26269  .text.ADC_InjectedSequencerLengthConfig:00000000 ADC_InjectedSequencerLengthConfig
     /tmp/cc3AMO2Y.s:26326  .text.ADC_SetInjectedOffset:00000000 $t
     /tmp/cc3AMO2Y.s:26331  .text.ADC_SetInjectedOffset:00000000 ADC_SetInjectedOffset
     /tmp/cc3AMO2Y.s:26377  .text.ADC_ExternalTrigInjectedConvConfig:00000000 $t
     /tmp/cc3AMO2Y.s:26382  .text.ADC_ExternalTrigInjectedConvConfig:00000000 ADC_ExternalTrigInjectedConvConfig
     /tmp/cc3AMO2Y.s:26430  .text.ADC_ExternalTrigInjectedConvEdgeConfig:00000000 $t
     /tmp/cc3AMO2Y.s:26435  .text.ADC_ExternalTrigInjectedConvEdgeConfig:00000000 ADC_ExternalTrigInjectedConvEdgeConfig
     /tmp/cc3AMO2Y.s:26483  .text.ADC_SoftwareStartInjectedConv:00000000 $t
     /tmp/cc3AMO2Y.s:26488  .text.ADC_SoftwareStartInjectedConv:00000000 ADC_SoftwareStartInjectedConv
     /tmp/cc3AMO2Y.s:26521  .text.ADC_GetSoftwareStartInjectedConvCmdStatus:00000000 $t
     /tmp/cc3AMO2Y.s:26526  .text.ADC_GetSoftwareStartInjectedConvCmdStatus:00000000 ADC_GetSoftwareStartInjectedConvCmdStatus
     /tmp/cc3AMO2Y.s:26574  .text.ADC_AutoInjectedConvCmd:00000000 $t
     /tmp/cc3AMO2Y.s:26579  .text.ADC_AutoInjectedConvCmd:00000000 ADC_AutoInjectedConvCmd
     /tmp/cc3AMO2Y.s:26627  .text.ADC_InjectedDiscModeCmd:00000000 $t
     /tmp/cc3AMO2Y.s:26632  .text.ADC_InjectedDiscModeCmd:00000000 ADC_InjectedDiscModeCmd
     /tmp/cc3AMO2Y.s:26680  .text.ADC_GetInjectedConversionValue:00000000 $t
     /tmp/cc3AMO2Y.s:26685  .text.ADC_GetInjectedConversionValue:00000000 ADC_GetInjectedConversionValue
     /tmp/cc3AMO2Y.s:26731  .text.ADC_ITConfig:00000000 $t
     /tmp/cc3AMO2Y.s:26736  .text.ADC_ITConfig:00000000 ADC_ITConfig
     /tmp/cc3AMO2Y.s:26801  .text.ADC_GetFlagStatus:00000000 $t
     /tmp/cc3AMO2Y.s:26806  .text.ADC_GetFlagStatus:00000000 ADC_GetFlagStatus
     /tmp/cc3AMO2Y.s:26857  .text.ADC_ClearFlag:00000000 $t
     /tmp/cc3AMO2Y.s:26862  .text.ADC_ClearFlag:00000000 ADC_ClearFlag
     /tmp/cc3AMO2Y.s:26896  .text.ADC_GetITStatus:00000000 $t
     /tmp/cc3AMO2Y.s:26901  .text.ADC_GetITStatus:00000000 ADC_GetITStatus
     /tmp/cc3AMO2Y.s:26975  .text.ADC_ClearITPendingBit:00000000 $t
     /tmp/cc3AMO2Y.s:26980  .text.ADC_ClearITPendingBit:00000000 ADC_ClearITPendingBit
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
RCC_APB2PeriphResetCmd
