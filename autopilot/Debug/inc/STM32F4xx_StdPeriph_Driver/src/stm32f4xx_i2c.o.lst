   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 18, 4
  12              		.thumb
  13              		.file	"stm32f4xx_i2c.c"
  23              	.Ltext0:
  24              		.file 1 "../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c"
 24584              		.align	2
 24585              		.global	I2C_DeInit
 24586              		.thumb
 24587              		.thumb_func
 24589              	I2C_DeInit:
 24590              	.LFB110:
   1:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
   2:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   ******************************************************************************
   3:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @file    stm32f4xx_i2c.c
   4:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @author  MCD Application Team
   5:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @version V1.0.0
   6:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @date    30-September-2011
   7:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          functionalities of the Inter-integrated circuit (I2C)
   9:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *           - Initialization and Configuration
  10:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *           - Data transfers
  11:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *           - PEC management
  12:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *           - DMA transfers management
  13:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *           - Interrupts, events and flags management 
  14:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *           
  15:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *  @verbatim
  16:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *    
  17:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          ===================================================================
  18:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                                 How to use this driver
  19:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          ===================================================================
  20:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          1. Enable peripheral clock using RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2Cx, ENABLE)
  21:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *             function for I2C1, I2C2 or I2C3.
  22:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *
  23:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          2. Enable SDA, SCL  and SMBA (when used) GPIO clocks using 
  24:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *             RCC_AHBPeriphClockCmd() function. 
  25:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *
  26:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          3. Peripherals alternate function: 
  27:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                 - Connect the pin to the desired peripherals' Alternate 
  28:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                   Function (AF) using GPIO_PinAFConfig() function
  29:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                 - Configure the desired pin in alternate function by:
  30:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                   GPIO_InitStruct->GPIO_Mode = GPIO_Mode_AF
  31:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                 - Select the type, pull-up/pull-down and output speed via 
  32:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                   GPIO_PuPd, GPIO_OType and GPIO_Speed members
  33:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                 - Call GPIO_Init() function
  34:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                 Recommended configuration is Push-Pull, Pull-up, Open-Drain.
  35:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                 Add an external pull up if necessary (typically 4.7 KOhm).      
  36:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *        
  37:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          4. Program the Mode, duty cycle , Own address, Ack, Speed and Acknowledged
  38:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *             Address using the I2C_Init() function.
  39:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *
  40:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          5. Optionally you can enable/configure the following parameters without
  41:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *             re-initialization (i.e there is no need to call again I2C_Init() function):
  42:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *              - Enable the acknowledge feature using I2C_AcknowledgeConfig() function
  43:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *              - Enable the dual addressing mode using I2C_DualAddressCmd() function
  44:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *              - Enable the general call using the I2C_GeneralCallCmd() function
  45:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *              - Enable the clock stretching using I2C_StretchClockCmd() function
  46:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *              - Enable the fast mode duty cycle using the I2C_FastModeDutyCycleConfig()
  47:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                function.
  48:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *              - Configure the NACK position for Master Receiver mode in case of 
  49:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                2 bytes reception using the function I2C_NACKPositionConfig().  
  50:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *              - Enable the PEC Calculation using I2C_CalculatePEC() function
  51:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *              - For SMBus Mode: 
  52:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                   - Enable the Address Resolution Protocol (ARP) using I2C_ARPCmd() function
  53:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                   - Configure the SMBusAlert pin using I2C_SMBusAlertConfig() function
  54:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *
  55:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          6. Enable the NVIC and the corresponding interrupt using the function 
  56:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *             I2C_ITConfig() if you need to use interrupt mode. 
  57:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *
  58:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          7. When using the DMA mode 
  59:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                   - Configure the DMA using DMA_Init() function
  60:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                   - Active the needed channel Request using I2C_DMACmd() or
  61:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                     I2C_DMALastTransferCmd() function.
  62:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *              @note When using DMA mode, I2C interrupts may be used at the same time to
  63:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                    control the communication flow (Start/Stop/Ack... events and errors).
  64:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * 
  65:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          8. Enable the I2C using the I2C_Cmd() function.
  66:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * 
  67:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          9. Enable the DMA using the DMA_Cmd() function when using DMA mode in the 
  68:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *             transfers. 
  69:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *
  70:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *  @endverbatim
  71:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *  
  72:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   ******************************************************************************
  73:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @attention
  74:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *
  75:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  76:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  77:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  78:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  79:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  80:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  81:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *
  82:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  83:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   ******************************************************************************  
  84:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */ 
  85:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
  86:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /* Includes ------------------------------------------------------------------*/
  87:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** #include "stm32f4xx_i2c.h"
  88:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** #include "stm32f4xx_rcc.h"
  89:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
  90:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  91:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @{
  92:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
  93:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
  94:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /** @defgroup I2C 
  95:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief I2C driver modules
  96:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @{
  97:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */ 
  98:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
  99:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /* Private typedef -----------------------------------------------------------*/
 100:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /* Private define ------------------------------------------------------------*/
 101:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 102:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** #define CR1_CLEAR_MASK    ((uint16_t)0xFBF5)      /*<! I2C registers Masks */
 103:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** #define FLAG_MASK         ((uint32_t)0x00FFFFFF)  /*<! I2C FLAG mask */
 104:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** #define ITEN_MASK         ((uint32_t)0x07000000)  /*<! I2C Interrupt Enable mask */
 105:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 106:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /* Private macro -------------------------------------------------------------*/
 107:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /* Private variables ---------------------------------------------------------*/
 108:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /* Private function prototypes -----------------------------------------------*/
 109:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /* Private functions ---------------------------------------------------------*/
 110:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 111:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /** @defgroup I2C_Private_Functions
 112:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @{
 113:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 114:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 115:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /** @defgroup I2C_Group1 Initialization and Configuration functions
 116:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  *  @brief   Initialization and Configuration functions 
 117:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  *
 118:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** @verbatim   
 119:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================
 120:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                    Initialization and Configuration functions
 121:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================  
 122:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 123:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** @endverbatim
 124:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @{
 125:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 126:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 127:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 128:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Deinitialize the I2Cx peripheral registers to their default reset values.
 129:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 130:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 131:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 132:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_DeInit(I2C_TypeDef* I2Cx)
 133:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 24591              		.loc 1 133 0
 24592              		.cfi_startproc
 24593              		@ args = 0, pretend = 0, frame = 8
 24594              		@ frame_needed = 1, uses_anonymous_args = 0
 24595 0000 80B5     		push	{r7, lr}
 24596              	.LCFI0:
 24597              		.cfi_def_cfa_offset 8
 24598 0002 82B0     		sub	sp, sp, #8
 24599              	.LCFI1:
 24600              		.cfi_def_cfa_offset 16
 24601 0004 00AF     		add	r7, sp, #0
 24602              		.cfi_offset 14, -4
 24603              		.cfi_offset 7, -8
 24604              	.LCFI2:
 24605              		.cfi_def_cfa_register 7
 24606 0006 7860     		str	r0, [r7, #4]
 134:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 135:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 136:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 137:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (I2Cx == I2C1)
 24607              		.loc 1 137 0
 24608 0008 7A68     		ldr	r2, [r7, #4]
 24609 000a 1A4B     		ldr	r3, .L5
 24610 000c 9A42     		cmp	r2, r3
 24611 000e 0CD1     		bne	.L2
 138:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 139:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable I2C1 reset state */
 140:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 24612              		.loc 1 140 0
 24613 0010 4FF40010 		mov	r0, #2097152
 24614 0014 4FF00101 		mov	r1, #1
 24615 0018 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 141:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Release I2C1 from reset state */
 142:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
 24616              		.loc 1 142 0
 24617 001c 4FF40010 		mov	r0, #2097152
 24618 0020 4FF00001 		mov	r1, #0
 24619 0024 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 24620 0028 20E0     		b	.L1
 24621              	.L2:
 143:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 144:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else if (I2Cx == I2C2)
 24622              		.loc 1 144 0
 24623 002a 7A68     		ldr	r2, [r7, #4]
 24624 002c 124B     		ldr	r3, .L5+4
 24625 002e 9A42     		cmp	r2, r3
 24626 0030 0CD1     		bne	.L4
 145:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 146:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable I2C2 reset state */
 147:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 24627              		.loc 1 147 0
 24628 0032 4FF48000 		mov	r0, #4194304
 24629 0036 4FF00101 		mov	r1, #1
 24630 003a FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 148:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Release I2C2 from reset state */
 149:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
 24631              		.loc 1 149 0
 24632 003e 4FF48000 		mov	r0, #4194304
 24633 0042 4FF00001 		mov	r1, #0
 24634 0046 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 24635 004a 0FE0     		b	.L1
 24636              	.L4:
 150:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 151:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else 
 152:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 153:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     if (I2Cx == I2C3)
 24637              		.loc 1 153 0
 24638 004c 7A68     		ldr	r2, [r7, #4]
 24639 004e 0B4B     		ldr	r3, .L5+8
 24640 0050 9A42     		cmp	r2, r3
 24641 0052 0BD1     		bne	.L1
 154:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     {
 155:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       /* Enable I2C3 reset state */
 156:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
 24642              		.loc 1 156 0
 24643 0054 4FF40000 		mov	r0, #8388608
 24644 0058 4FF00101 		mov	r1, #1
 24645 005c FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 157:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       /* Release I2C3 from reset state */
 158:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
 24646              		.loc 1 158 0
 24647 0060 4FF40000 		mov	r0, #8388608
 24648 0064 4FF00001 		mov	r1, #0
 24649 0068 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 24650              	.L1:
 159:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     }
 160:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 161:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 24651              		.loc 1 161 0
 24652 006c 07F10807 		add	r7, r7, #8
 24653 0070 BD46     		mov	sp, r7
 24654 0072 80BD     		pop	{r7, pc}
 24655              	.L6:
 24656              		.align	2
 24657              	.L5:
 24658 0074 00540040 		.word	1073763328
 24659 0078 00580040 		.word	1073764352
 24660 007c 005C0040 		.word	1073765376
 24661              		.cfi_endproc
 24662              	.LFE110:
 24664              		.section	.text.I2C_Init,"ax",%progbits
 24665              		.align	2
 24666              		.global	I2C_Init
 24667              		.thumb
 24668              		.thumb_func
 24670              	I2C_Init:
 24671              	.LFB111:
 162:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 163:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 164:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Initializes the I2Cx peripheral according to the specified 
 165:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         parameters in the I2C_InitStruct.
 166:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *           
 167:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency 
 168:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         (I2C peripheral input clock) must be a multiple of 10 MHz.  
 169:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *           
 170:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 171:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
 172:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         the configuration information for the specified I2C peripheral.
 173:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 174:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 175:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
 176:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 24672              		.loc 1 176 0
 24673              		.cfi_startproc
 24674              		@ args = 0, pretend = 0, frame = 40
 24675              		@ frame_needed = 1, uses_anonymous_args = 0
 24676 0000 80B5     		push	{r7, lr}
 24677              	.LCFI3:
 24678              		.cfi_def_cfa_offset 8
 24679 0002 8AB0     		sub	sp, sp, #40
 24680              	.LCFI4:
 24681              		.cfi_def_cfa_offset 48
 24682 0004 00AF     		add	r7, sp, #0
 24683              		.cfi_offset 14, -4
 24684              		.cfi_offset 7, -8
 24685              	.LCFI5:
 24686              		.cfi_def_cfa_register 7
 24687 0006 7860     		str	r0, [r7, #4]
 24688 0008 3960     		str	r1, [r7, #0]
 177:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint16_t tmpreg = 0, freqrange = 0;
 24689              		.loc 1 177 0
 24690 000a 4FF00003 		mov	r3, #0
 24691 000e FB84     		strh	r3, [r7, #38]	@ movhi
 24692 0010 4FF00003 		mov	r3, #0
 24693 0014 7B84     		strh	r3, [r7, #34]	@ movhi
 178:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint16_t result = 0x04;
 24694              		.loc 1 178 0
 24695 0016 4FF00403 		mov	r3, #4
 24696 001a BB84     		strh	r3, [r7, #36]	@ movhi
 179:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint32_t pclk1 = 8000000;
 24697              		.loc 1 179 0
 24698 001c 604B     		ldr	r3, .L14
 24699 001e FB61     		str	r3, [r7, #28]
 180:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   RCC_ClocksTypeDef  rcc_clocks;
 181:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 182:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 183:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_CLOCK_SPEED(I2C_InitStruct->I2C_ClockSpeed));
 184:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_MODE(I2C_InitStruct->I2C_Mode));
 185:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_DUTY_CYCLE(I2C_InitStruct->I2C_DutyCycle));
 186:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_OWN_ADDRESS1(I2C_InitStruct->I2C_OwnAddress1));
 187:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
 188:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));
 189:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 190:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /*---------------------------- I2Cx CR2 Configuration ------------------------*/
 191:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get the I2Cx CR2 value */
 192:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg = I2Cx->CR2;
 24700              		.loc 1 192 0
 24701 0020 7B68     		ldr	r3, [r7, #4]
 24702 0022 9B88     		ldrh	r3, [r3, #4]	@ movhi
 24703 0024 FB84     		strh	r3, [r7, #38]	@ movhi
 193:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Clear frequency FREQ[5:0] bits */
 194:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 24704              		.loc 1 194 0
 24705 0026 FB8C     		ldrh	r3, [r7, #38]	@ movhi
 24706 0028 23F03F03 		bic	r3, r3, #63
 24707 002c FB84     		strh	r3, [r7, #38]	@ movhi
 195:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get pclk1 frequency value */
 196:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   RCC_GetClocksFreq(&rcc_clocks);
 24708              		.loc 1 196 0
 24709 002e 07F10C03 		add	r3, r7, #12
 24710 0032 1846     		mov	r0, r3
 24711 0034 FFF7FEFF 		bl	RCC_GetClocksFreq
 197:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   pclk1 = rcc_clocks.PCLK1_Frequency;
 24712              		.loc 1 197 0
 24713 0038 7B69     		ldr	r3, [r7, #20]
 24714 003a FB61     		str	r3, [r7, #28]
 198:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Set frequency bits depending on pclk1 value */
 199:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   freqrange = (uint16_t)(pclk1 / 1000000);
 24715              		.loc 1 199 0
 24716 003c FA69     		ldr	r2, [r7, #28]
 24717 003e 594B     		ldr	r3, .L14+4
 24718 0040 A3FB0213 		umull	r1, r3, r3, r2
 24719 0044 4FEA9343 		lsr	r3, r3, #18
 24720 0048 7B84     		strh	r3, [r7, #34]	@ movhi
 200:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg |= freqrange;
 24721              		.loc 1 200 0
 24722 004a FA8C     		ldrh	r2, [r7, #38]	@ movhi
 24723 004c 7B8C     		ldrh	r3, [r7, #34]	@ movhi
 24724 004e 42EA0303 		orr	r3, r2, r3
 24725 0052 FB84     		strh	r3, [r7, #38]	@ movhi
 201:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Write to I2Cx CR2 */
 202:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->CR2 = tmpreg;
 24726              		.loc 1 202 0
 24727 0054 7B68     		ldr	r3, [r7, #4]
 24728 0056 FA8C     		ldrh	r2, [r7, #38]	@ movhi
 24729 0058 9A80     		strh	r2, [r3, #4]	@ movhi
 203:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 204:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /*---------------------------- I2Cx CCR Configuration ------------------------*/
 205:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Disable the selected I2C peripheral to configure TRISE */
 206:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 24730              		.loc 1 206 0
 24731 005a 7B68     		ldr	r3, [r7, #4]
 24732 005c 1B88     		ldrh	r3, [r3, #0]	@ movhi
 24733 005e 9BB2     		uxth	r3, r3
 24734 0060 23F00103 		bic	r3, r3, #1
 24735 0064 9AB2     		uxth	r2, r3
 24736 0066 7B68     		ldr	r3, [r7, #4]
 24737 0068 1A80     		strh	r2, [r3, #0]	@ movhi
 207:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Reset tmpreg value */
 208:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Clear F/S, DUTY and CCR[11:0] bits */
 209:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg = 0;
 24738              		.loc 1 209 0
 24739 006a 4FF00003 		mov	r3, #0
 24740 006e FB84     		strh	r3, [r7, #38]	@ movhi
 210:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 211:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Configure speed in standard mode */
 212:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 24741              		.loc 1 212 0
 24742 0070 3B68     		ldr	r3, [r7, #0]
 24743 0072 1A68     		ldr	r2, [r3, #0]
 24744 0074 4C4B     		ldr	r3, .L14+8
 24745 0076 9A42     		cmp	r2, r3
 24746 0078 19D8     		bhi	.L8
 213:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 214:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Standard mode speed calculate */
 215:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 24747              		.loc 1 215 0
 24748 007a 3B68     		ldr	r3, [r7, #0]
 24749 007c 1B68     		ldr	r3, [r3, #0]
 24750 007e 4FEA4303 		lsl	r3, r3, #1
 24751 0082 FA69     		ldr	r2, [r7, #28]
 24752 0084 B2FBF3F3 		udiv	r3, r2, r3
 24753 0088 BB84     		strh	r3, [r7, #36]	@ movhi
 216:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Test if CCR value is under 0x4*/
 217:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     if (result < 0x04)
 24754              		.loc 1 217 0
 24755 008a BB8C     		ldrh	r3, [r7, #36]
 24756 008c 032B     		cmp	r3, #3
 24757 008e 02D8     		bhi	.L9
 218:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     {
 219:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       /* Set minimum allowed value */
 220:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       result = 0x04;  
 24758              		.loc 1 220 0
 24759 0090 4FF00403 		mov	r3, #4
 24760 0094 BB84     		strh	r3, [r7, #36]	@ movhi
 24761              	.L9:
 221:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     }
 222:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Set speed value for standard mode */
 223:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     tmpreg |= result;	  
 24762              		.loc 1 223 0
 24763 0096 FA8C     		ldrh	r2, [r7, #38]	@ movhi
 24764 0098 BB8C     		ldrh	r3, [r7, #36]	@ movhi
 24765 009a 42EA0303 		orr	r3, r2, r3
 24766 009e FB84     		strh	r3, [r7, #38]	@ movhi
 224:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Set Maximum Rise Time for standard mode */
 225:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->TRISE = freqrange + 1; 
 24767              		.loc 1 225 0
 24768 00a0 7B8C     		ldrh	r3, [r7, #34]	@ movhi
 24769 00a2 03F10103 		add	r3, r3, #1
 24770 00a6 9AB2     		uxth	r2, r3
 24771 00a8 7B68     		ldr	r3, [r7, #4]
 24772 00aa 1A84     		strh	r2, [r3, #32]	@ movhi
 24773 00ac 49E0     		b	.L10
 24774              	.L8:
 226:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 227:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Configure speed in fast mode */
 228:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
 229:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****      input clock) must be a multiple of 10 MHz */
 230:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
 231:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 232:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 24775              		.loc 1 232 0
 24776 00ae 3B68     		ldr	r3, [r7, #0]
 24777 00b0 DA88     		ldrh	r2, [r3, #6]
 24778 00b2 4BF6FF73 		movw	r3, #49151
 24779 00b6 9A42     		cmp	r2, r3
 24780 00b8 0AD1     		bne	.L11
 233:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     {
 234:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       /* Fast mode speed calculate: Tlow/Thigh = 2 */
 235:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 24781              		.loc 1 235 0
 24782 00ba 3B68     		ldr	r3, [r7, #0]
 24783 00bc 1A68     		ldr	r2, [r3, #0]
 24784 00be 1346     		mov	r3, r2
 24785 00c0 4FEA4303 		lsl	r3, r3, #1
 24786 00c4 9B18     		adds	r3, r3, r2
 24787 00c6 FA69     		ldr	r2, [r7, #28]
 24788 00c8 B2FBF3F3 		udiv	r3, r2, r3
 24789 00cc BB84     		strh	r3, [r7, #36]	@ movhi
 24790 00ce 10E0     		b	.L12
 24791              	.L11:
 236:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     }
 237:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
 238:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     {
 239:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
 240:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 24792              		.loc 1 240 0
 24793 00d0 3B68     		ldr	r3, [r7, #0]
 24794 00d2 1A68     		ldr	r2, [r3, #0]
 24795 00d4 1346     		mov	r3, r2
 24796 00d6 4FEA8303 		lsl	r3, r3, #2
 24797 00da 9B18     		adds	r3, r3, r2
 24798 00dc 4FEA8302 		lsl	r2, r3, #2
 24799 00e0 9B18     		adds	r3, r3, r2
 24800 00e2 FA69     		ldr	r2, [r7, #28]
 24801 00e4 B2FBF3F3 		udiv	r3, r2, r3
 24802 00e8 BB84     		strh	r3, [r7, #36]	@ movhi
 241:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       /* Set DUTY bit */
 242:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       result |= I2C_DutyCycle_16_9;
 24803              		.loc 1 242 0
 24804 00ea BB8C     		ldrh	r3, [r7, #36]	@ movhi
 24805 00ec 43F48043 		orr	r3, r3, #16384
 24806 00f0 BB84     		strh	r3, [r7, #36]	@ movhi
 24807              	.L12:
 243:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     }
 244:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 245:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Test if CCR value is under 0x1*/
 246:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     if ((result & I2C_CCR_CCR) == 0)
 24808              		.loc 1 246 0
 24809 00f2 BB8C     		ldrh	r3, [r7, #36]
 24810 00f4 4FEA0353 		lsl	r3, r3, #20
 24811 00f8 4FEA1353 		lsr	r3, r3, #20
 24812 00fc 002B     		cmp	r3, #0
 24813 00fe 03D1     		bne	.L13
 247:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     {
 248:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       /* Set minimum allowed value */
 249:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       result |= (uint16_t)0x0001;  
 24814              		.loc 1 249 0
 24815 0100 BB8C     		ldrh	r3, [r7, #36]	@ movhi
 24816 0102 43F00103 		orr	r3, r3, #1
 24817 0106 BB84     		strh	r3, [r7, #36]	@ movhi
 24818              	.L13:
 250:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     }
 251:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Set speed value and set F/S bit for fast mode */
 252:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 24819              		.loc 1 252 0
 24820 0108 BA8C     		ldrh	r2, [r7, #36]	@ movhi
 24821 010a FB8C     		ldrh	r3, [r7, #38]	@ movhi
 24822 010c 42EA0303 		orr	r3, r2, r3
 24823 0110 9BB2     		uxth	r3, r3
 24824 0112 6FEA4343 		mvn	r3, r3, lsl #17
 24825 0116 6FEA5343 		mvn	r3, r3, lsr #17
 24826 011a FB84     		strh	r3, [r7, #38]	@ movhi
 253:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Set Maximum Rise Time for fast mode */
 254:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 24827              		.loc 1 254 0
 24828 011c 7B8C     		ldrh	r3, [r7, #34]
 24829 011e 4FF49672 		mov	r2, #300
 24830 0122 02FB03F3 		mul	r3, r2, r3
 24831 0126 214A     		ldr	r2, .L14+12
 24832 0128 82FB0312 		smull	r1, r2, r2, r3
 24833 012c 4FEAA212 		asr	r2, r2, #6
 24834 0130 4FEAE373 		asr	r3, r3, #31
 24835 0134 D31A     		subs	r3, r2, r3
 24836 0136 9BB2     		uxth	r3, r3
 24837 0138 03F10103 		add	r3, r3, #1
 24838 013c 9AB2     		uxth	r2, r3
 24839 013e 7B68     		ldr	r3, [r7, #4]
 24840 0140 1A84     		strh	r2, [r3, #32]	@ movhi
 24841              	.L10:
 255:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 256:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 257:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Write to I2Cx CCR */
 258:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->CCR = tmpreg;
 24842              		.loc 1 258 0
 24843 0142 7B68     		ldr	r3, [r7, #4]
 24844 0144 FA8C     		ldrh	r2, [r7, #38]	@ movhi
 24845 0146 9A83     		strh	r2, [r3, #28]	@ movhi
 259:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Enable the selected I2C peripheral */
 260:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->CR1 |= I2C_CR1_PE;
 24846              		.loc 1 260 0
 24847 0148 7B68     		ldr	r3, [r7, #4]
 24848 014a 1B88     		ldrh	r3, [r3, #0]	@ movhi
 24849 014c 9BB2     		uxth	r3, r3
 24850 014e 43F00103 		orr	r3, r3, #1
 24851 0152 9AB2     		uxth	r2, r3
 24852 0154 7B68     		ldr	r3, [r7, #4]
 24853 0156 1A80     		strh	r2, [r3, #0]	@ movhi
 261:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 262:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /*---------------------------- I2Cx CR1 Configuration ------------------------*/
 263:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get the I2Cx CR1 value */
 264:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg = I2Cx->CR1;
 24854              		.loc 1 264 0
 24855 0158 7B68     		ldr	r3, [r7, #4]
 24856 015a 1B88     		ldrh	r3, [r3, #0]	@ movhi
 24857 015c FB84     		strh	r3, [r7, #38]	@ movhi
 265:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Clear ACK, SMBTYPE and  SMBUS bits */
 266:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg &= CR1_CLEAR_MASK;
 24858              		.loc 1 266 0
 24859 015e FB8C     		ldrh	r3, [r7, #38]	@ movhi
 24860 0160 23F48063 		bic	r3, r3, #1024
 24861 0164 23F00A03 		bic	r3, r3, #10
 24862 0168 FB84     		strh	r3, [r7, #38]	@ movhi
 267:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Configure I2Cx: mode and acknowledgement */
 268:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
 269:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Set ACK bit according to I2C_Ack value */
 270:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 24863              		.loc 1 270 0
 24864 016a 3B68     		ldr	r3, [r7, #0]
 24865 016c 9A88     		ldrh	r2, [r3, #4]
 24866 016e 3B68     		ldr	r3, [r7, #0]
 24867 0170 5B89     		ldrh	r3, [r3, #10]
 24868 0172 42EA0303 		orr	r3, r2, r3
 24869 0176 9AB2     		uxth	r2, r3
 24870 0178 FB8C     		ldrh	r3, [r7, #38]	@ movhi
 24871 017a 42EA0303 		orr	r3, r2, r3
 24872 017e FB84     		strh	r3, [r7, #38]	@ movhi
 271:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Write to I2Cx CR1 */
 272:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->CR1 = tmpreg;
 24873              		.loc 1 272 0
 24874 0180 7B68     		ldr	r3, [r7, #4]
 24875 0182 FA8C     		ldrh	r2, [r7, #38]	@ movhi
 24876 0184 1A80     		strh	r2, [r3, #0]	@ movhi
 273:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 274:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /*---------------------------- I2Cx OAR1 Configuration -----------------------*/
 275:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Set I2Cx Own Address1 and acknowledged address */
 276:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 24877              		.loc 1 276 0
 24878 0186 3B68     		ldr	r3, [r7, #0]
 24879 0188 9A89     		ldrh	r2, [r3, #12]
 24880 018a 3B68     		ldr	r3, [r7, #0]
 24881 018c 1B89     		ldrh	r3, [r3, #8]
 24882 018e 42EA0303 		orr	r3, r2, r3
 24883 0192 9AB2     		uxth	r2, r3
 24884 0194 7B68     		ldr	r3, [r7, #4]
 24885 0196 1A81     		strh	r2, [r3, #8]	@ movhi
 277:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 24886              		.loc 1 277 0
 24887 0198 07F12807 		add	r7, r7, #40
 24888 019c BD46     		mov	sp, r7
 24889 019e 80BD     		pop	{r7, pc}
 24890              	.L15:
 24891              		.align	2
 24892              	.L14:
 24893 01a0 00127A00 		.word	8000000
 24894 01a4 83DE1B43 		.word	1125899907
 24895 01a8 A0860100 		.word	100000
 24896 01ac D34D6210 		.word	274877907
 24897              		.cfi_endproc
 24898              	.LFE111:
 24900              		.section	.text.I2C_StructInit,"ax",%progbits
 24901              		.align	2
 24902              		.global	I2C_StructInit
 24903              		.thumb
 24904              		.thumb_func
 24906              	I2C_StructInit:
 24907              	.LFB112:
 278:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 279:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 280:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Fills each I2C_InitStruct member with its default value.
 281:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_InitStruct: pointer to an I2C_InitTypeDef structure which will be initialized.
 282:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 283:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 284:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
 285:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 24908              		.loc 1 285 0
 24909              		.cfi_startproc
 24910              		@ args = 0, pretend = 0, frame = 8
 24911              		@ frame_needed = 1, uses_anonymous_args = 0
 24912              		@ link register save eliminated.
 24913 0000 80B4     		push	{r7}
 24914              	.LCFI6:
 24915              		.cfi_def_cfa_offset 4
 24916 0002 83B0     		sub	sp, sp, #12
 24917              	.LCFI7:
 24918              		.cfi_def_cfa_offset 16
 24919 0004 00AF     		add	r7, sp, #0
 24920              		.cfi_offset 7, -4
 24921              	.LCFI8:
 24922              		.cfi_def_cfa_register 7
 24923 0006 7860     		str	r0, [r7, #4]
 286:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /*---------------- Reset I2C init structure parameters values ----------------*/
 287:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* initialize the I2C_ClockSpeed member */
 288:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2C_InitStruct->I2C_ClockSpeed = 5000;
 24924              		.loc 1 288 0
 24925 0008 7B68     		ldr	r3, [r7, #4]
 24926 000a 41F28832 		movw	r2, #5000
 24927 000e 1A60     		str	r2, [r3, #0]
 289:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Initialize the I2C_Mode member */
 290:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
 24928              		.loc 1 290 0
 24929 0010 7B68     		ldr	r3, [r7, #4]
 24930 0012 4FF00002 		mov	r2, #0
 24931 0016 9A80     		strh	r2, [r3, #4]	@ movhi
 291:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Initialize the I2C_DutyCycle member */
 292:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
 24932              		.loc 1 292 0
 24933 0018 7B68     		ldr	r3, [r7, #4]
 24934 001a 4BF6FF72 		movw	r2, #49151
 24935 001e DA80     		strh	r2, [r3, #6]	@ movhi
 293:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Initialize the I2C_OwnAddress1 member */
 294:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2C_InitStruct->I2C_OwnAddress1 = 0;
 24936              		.loc 1 294 0
 24937 0020 7B68     		ldr	r3, [r7, #4]
 24938 0022 4FF00002 		mov	r2, #0
 24939 0026 1A81     		strh	r2, [r3, #8]	@ movhi
 295:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Initialize the I2C_Ack member */
 296:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
 24940              		.loc 1 296 0
 24941 0028 7B68     		ldr	r3, [r7, #4]
 24942 002a 4FF00002 		mov	r2, #0
 24943 002e 5A81     		strh	r2, [r3, #10]	@ movhi
 297:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Initialize the I2C_AcknowledgedAddress member */
 298:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 24944              		.loc 1 298 0
 24945 0030 7B68     		ldr	r3, [r7, #4]
 24946 0032 4FF48042 		mov	r2, #16384
 24947 0036 9A81     		strh	r2, [r3, #12]	@ movhi
 299:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 24948              		.loc 1 299 0
 24949 0038 07F10C07 		add	r7, r7, #12
 24950 003c BD46     		mov	sp, r7
 24951 003e 80BC     		pop	{r7}
 24952 0040 7047     		bx	lr
 24953              		.cfi_endproc
 24954              	.LFE112:
 24956 0042 00BF     		.section	.text.I2C_Cmd,"ax",%progbits
 24957              		.align	2
 24958              		.global	I2C_Cmd
 24959              		.thumb
 24960              		.thumb_func
 24962              	I2C_Cmd:
 24963              	.LFB113:
 300:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 301:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 302:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C peripheral.
 303:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 304:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2Cx peripheral. 
 305:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 306:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 307:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 308:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 309:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 24964              		.loc 1 309 0
 24965              		.cfi_startproc
 24966              		@ args = 0, pretend = 0, frame = 8
 24967              		@ frame_needed = 1, uses_anonymous_args = 0
 24968              		@ link register save eliminated.
 24969 0000 80B4     		push	{r7}
 24970              	.LCFI9:
 24971              		.cfi_def_cfa_offset 4
 24972 0002 83B0     		sub	sp, sp, #12
 24973              	.LCFI10:
 24974              		.cfi_def_cfa_offset 16
 24975 0004 00AF     		add	r7, sp, #0
 24976              		.cfi_offset 7, -4
 24977              	.LCFI11:
 24978              		.cfi_def_cfa_register 7
 24979 0006 7860     		str	r0, [r7, #4]
 24980 0008 0B46     		mov	r3, r1
 24981 000a FB70     		strb	r3, [r7, #3]
 310:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 311:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 312:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 313:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 24982              		.loc 1 313 0
 24983 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 24984 000e 002B     		cmp	r3, #0
 24985 0010 08D0     		beq	.L18
 314:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 315:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable the selected I2C peripheral */
 316:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_PE;
 24986              		.loc 1 316 0
 24987 0012 7B68     		ldr	r3, [r7, #4]
 24988 0014 1B88     		ldrh	r3, [r3, #0]	@ movhi
 24989 0016 9BB2     		uxth	r3, r3
 24990 0018 43F00103 		orr	r3, r3, #1
 24991 001c 9AB2     		uxth	r2, r3
 24992 001e 7B68     		ldr	r3, [r7, #4]
 24993 0020 1A80     		strh	r2, [r3, #0]	@ movhi
 24994 0022 07E0     		b	.L17
 24995              	.L18:
 317:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 318:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 319:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 320:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable the selected I2C peripheral */
 321:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 24996              		.loc 1 321 0
 24997 0024 7B68     		ldr	r3, [r7, #4]
 24998 0026 1B88     		ldrh	r3, [r3, #0]	@ movhi
 24999 0028 9BB2     		uxth	r3, r3
 25000 002a 23F00103 		bic	r3, r3, #1
 25001 002e 9AB2     		uxth	r2, r3
 25002 0030 7B68     		ldr	r3, [r7, #4]
 25003 0032 1A80     		strh	r2, [r3, #0]	@ movhi
 25004              	.L17:
 322:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 323:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 25005              		.loc 1 323 0
 25006 0034 07F10C07 		add	r7, r7, #12
 25007 0038 BD46     		mov	sp, r7
 25008 003a 80BC     		pop	{r7}
 25009 003c 7047     		bx	lr
 25010              		.cfi_endproc
 25011              	.LFE113:
 25013 003e 00BF     		.section	.text.I2C_GenerateSTART,"ax",%progbits
 25014              		.align	2
 25015              		.global	I2C_GenerateSTART
 25016              		.thumb
 25017              		.thumb_func
 25019              	I2C_GenerateSTART:
 25020              	.LFB114:
 324:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 325:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 326:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Generates I2Cx communication START condition.
 327:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 328:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C START condition generation.
 329:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 330:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None.
 331:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 332:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
 333:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 25021              		.loc 1 333 0
 25022              		.cfi_startproc
 25023              		@ args = 0, pretend = 0, frame = 8
 25024              		@ frame_needed = 1, uses_anonymous_args = 0
 25025              		@ link register save eliminated.
 25026 0000 80B4     		push	{r7}
 25027              	.LCFI12:
 25028              		.cfi_def_cfa_offset 4
 25029 0002 83B0     		sub	sp, sp, #12
 25030              	.LCFI13:
 25031              		.cfi_def_cfa_offset 16
 25032 0004 00AF     		add	r7, sp, #0
 25033              		.cfi_offset 7, -4
 25034              	.LCFI14:
 25035              		.cfi_def_cfa_register 7
 25036 0006 7860     		str	r0, [r7, #4]
 25037 0008 0B46     		mov	r3, r1
 25038 000a FB70     		strb	r3, [r7, #3]
 334:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 335:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 336:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 337:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 25039              		.loc 1 337 0
 25040 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 25041 000e 002B     		cmp	r3, #0
 25042 0010 08D0     		beq	.L21
 338:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 339:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Generate a START condition */
 340:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_START;
 25043              		.loc 1 340 0
 25044 0012 7B68     		ldr	r3, [r7, #4]
 25045 0014 1B88     		ldrh	r3, [r3, #0]	@ movhi
 25046 0016 9BB2     		uxth	r3, r3
 25047 0018 43F48073 		orr	r3, r3, #256
 25048 001c 9AB2     		uxth	r2, r3
 25049 001e 7B68     		ldr	r3, [r7, #4]
 25050 0020 1A80     		strh	r2, [r3, #0]	@ movhi
 25051 0022 07E0     		b	.L20
 25052              	.L21:
 341:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 342:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 343:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 344:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable the START condition generation */
 345:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
 25053              		.loc 1 345 0
 25054 0024 7B68     		ldr	r3, [r7, #4]
 25055 0026 1B88     		ldrh	r3, [r3, #0]	@ movhi
 25056 0028 9BB2     		uxth	r3, r3
 25057 002a 23F48073 		bic	r3, r3, #256
 25058 002e 9AB2     		uxth	r2, r3
 25059 0030 7B68     		ldr	r3, [r7, #4]
 25060 0032 1A80     		strh	r2, [r3, #0]	@ movhi
 25061              	.L20:
 346:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 347:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 25062              		.loc 1 347 0
 25063 0034 07F10C07 		add	r7, r7, #12
 25064 0038 BD46     		mov	sp, r7
 25065 003a 80BC     		pop	{r7}
 25066 003c 7047     		bx	lr
 25067              		.cfi_endproc
 25068              	.LFE114:
 25070 003e 00BF     		.section	.text.I2C_GenerateSTOP,"ax",%progbits
 25071              		.align	2
 25072              		.global	I2C_GenerateSTOP
 25073              		.thumb
 25074              		.thumb_func
 25076              	I2C_GenerateSTOP:
 25077              	.LFB115:
 348:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 349:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 350:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Generates I2Cx communication STOP condition.
 351:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 352:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C STOP condition generation.
 353:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 354:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None.
 355:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 356:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
 357:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 25078              		.loc 1 357 0
 25079              		.cfi_startproc
 25080              		@ args = 0, pretend = 0, frame = 8
 25081              		@ frame_needed = 1, uses_anonymous_args = 0
 25082              		@ link register save eliminated.
 25083 0000 80B4     		push	{r7}
 25084              	.LCFI15:
 25085              		.cfi_def_cfa_offset 4
 25086 0002 83B0     		sub	sp, sp, #12
 25087              	.LCFI16:
 25088              		.cfi_def_cfa_offset 16
 25089 0004 00AF     		add	r7, sp, #0
 25090              		.cfi_offset 7, -4
 25091              	.LCFI17:
 25092              		.cfi_def_cfa_register 7
 25093 0006 7860     		str	r0, [r7, #4]
 25094 0008 0B46     		mov	r3, r1
 25095 000a FB70     		strb	r3, [r7, #3]
 358:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 359:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 360:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 361:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 25096              		.loc 1 361 0
 25097 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 25098 000e 002B     		cmp	r3, #0
 25099 0010 08D0     		beq	.L24
 362:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 363:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Generate a STOP condition */
 364:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_STOP;
 25100              		.loc 1 364 0
 25101 0012 7B68     		ldr	r3, [r7, #4]
 25102 0014 1B88     		ldrh	r3, [r3, #0]	@ movhi
 25103 0016 9BB2     		uxth	r3, r3
 25104 0018 43F40073 		orr	r3, r3, #512
 25105 001c 9AB2     		uxth	r2, r3
 25106 001e 7B68     		ldr	r3, [r7, #4]
 25107 0020 1A80     		strh	r2, [r3, #0]	@ movhi
 25108 0022 07E0     		b	.L23
 25109              	.L24:
 365:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 366:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 367:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 368:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable the STOP condition generation */
 369:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 25110              		.loc 1 369 0
 25111 0024 7B68     		ldr	r3, [r7, #4]
 25112 0026 1B88     		ldrh	r3, [r3, #0]	@ movhi
 25113 0028 9BB2     		uxth	r3, r3
 25114 002a 23F40073 		bic	r3, r3, #512
 25115 002e 9AB2     		uxth	r2, r3
 25116 0030 7B68     		ldr	r3, [r7, #4]
 25117 0032 1A80     		strh	r2, [r3, #0]	@ movhi
 25118              	.L23:
 370:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 371:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 25119              		.loc 1 371 0
 25120 0034 07F10C07 		add	r7, r7, #12
 25121 0038 BD46     		mov	sp, r7
 25122 003a 80BC     		pop	{r7}
 25123 003c 7047     		bx	lr
 25124              		.cfi_endproc
 25125              	.LFE115:
 25127 003e 00BF     		.section	.text.I2C_Send7bitAddress,"ax",%progbits
 25128              		.align	2
 25129              		.global	I2C_Send7bitAddress
 25130              		.thumb
 25131              		.thumb_func
 25133              	I2C_Send7bitAddress:
 25134              	.LFB116:
 372:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 373:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 374:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Transmits the address byte to select the slave device.
 375:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 376:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  Address: specifies the slave address which will be transmitted
 377:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_Direction: specifies whether the I2C device will be a Transmitter
 378:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         or a Receiver. 
 379:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values
 380:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Direction_Transmitter: Transmitter mode
 381:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Direction_Receiver: Receiver mode
 382:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None.
 383:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 384:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
 385:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 25135              		.loc 1 385 0
 25136              		.cfi_startproc
 25137              		@ args = 0, pretend = 0, frame = 8
 25138              		@ frame_needed = 1, uses_anonymous_args = 0
 25139              		@ link register save eliminated.
 25140 0000 80B4     		push	{r7}
 25141              	.LCFI18:
 25142              		.cfi_def_cfa_offset 4
 25143 0002 83B0     		sub	sp, sp, #12
 25144              	.LCFI19:
 25145              		.cfi_def_cfa_offset 16
 25146 0004 00AF     		add	r7, sp, #0
 25147              		.cfi_offset 7, -4
 25148              	.LCFI20:
 25149              		.cfi_def_cfa_register 7
 25150 0006 7860     		str	r0, [r7, #4]
 25151 0008 1346     		mov	r3, r2
 25152 000a 0A46     		mov	r2, r1
 25153 000c FA70     		strb	r2, [r7, #3]
 25154 000e BB70     		strb	r3, [r7, #2]
 386:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 387:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 388:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_DIRECTION(I2C_Direction));
 389:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Test on the direction to set/reset the read/write bit */
 390:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (I2C_Direction != I2C_Direction_Transmitter)
 25155              		.loc 1 390 0
 25156 0010 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 25157 0012 002B     		cmp	r3, #0
 25158 0014 04D0     		beq	.L27
 391:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 392:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Set the address bit0 for read */
 393:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     Address |= I2C_OAR1_ADD0;
 25159              		.loc 1 393 0
 25160 0016 FB78     		ldrb	r3, [r7, #3]
 25161 0018 43F00103 		orr	r3, r3, #1
 25162 001c FB70     		strb	r3, [r7, #3]
 25163 001e 03E0     		b	.L28
 25164              	.L27:
 394:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 395:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 396:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 397:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Reset the address bit0 for write */
 398:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
 25165              		.loc 1 398 0
 25166 0020 FB78     		ldrb	r3, [r7, #3]
 25167 0022 23F00103 		bic	r3, r3, #1
 25168 0026 FB70     		strb	r3, [r7, #3]
 25169              	.L28:
 399:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 400:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Send the address */
 401:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->DR = Address;
 25170              		.loc 1 401 0
 25171 0028 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 25172 002a 9AB2     		uxth	r2, r3
 25173 002c 7B68     		ldr	r3, [r7, #4]
 25174 002e 1A82     		strh	r2, [r3, #16]	@ movhi
 402:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 25175              		.loc 1 402 0
 25176 0030 07F10C07 		add	r7, r7, #12
 25177 0034 BD46     		mov	sp, r7
 25178 0036 80BC     		pop	{r7}
 25179 0038 7047     		bx	lr
 25180              		.cfi_endproc
 25181              	.LFE116:
 25183 003a 00BF     		.section	.text.I2C_AcknowledgeConfig,"ax",%progbits
 25184              		.align	2
 25185              		.global	I2C_AcknowledgeConfig
 25186              		.thumb
 25187              		.thumb_func
 25189              	I2C_AcknowledgeConfig:
 25190              	.LFB117:
 403:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 404:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 405:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C acknowledge feature.
 406:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 407:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C Acknowledgement.
 408:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 409:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None.
 410:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 411:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
 412:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 25191              		.loc 1 412 0
 25192              		.cfi_startproc
 25193              		@ args = 0, pretend = 0, frame = 8
 25194              		@ frame_needed = 1, uses_anonymous_args = 0
 25195              		@ link register save eliminated.
 25196 0000 80B4     		push	{r7}
 25197              	.LCFI21:
 25198              		.cfi_def_cfa_offset 4
 25199 0002 83B0     		sub	sp, sp, #12
 25200              	.LCFI22:
 25201              		.cfi_def_cfa_offset 16
 25202 0004 00AF     		add	r7, sp, #0
 25203              		.cfi_offset 7, -4
 25204              	.LCFI23:
 25205              		.cfi_def_cfa_register 7
 25206 0006 7860     		str	r0, [r7, #4]
 25207 0008 0B46     		mov	r3, r1
 25208 000a FB70     		strb	r3, [r7, #3]
 413:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 414:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 415:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 416:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 25209              		.loc 1 416 0
 25210 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 25211 000e 002B     		cmp	r3, #0
 25212 0010 08D0     		beq	.L30
 417:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 418:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable the acknowledgement */
 419:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_ACK;
 25213              		.loc 1 419 0
 25214 0012 7B68     		ldr	r3, [r7, #4]
 25215 0014 1B88     		ldrh	r3, [r3, #0]	@ movhi
 25216 0016 9BB2     		uxth	r3, r3
 25217 0018 43F48063 		orr	r3, r3, #1024
 25218 001c 9AB2     		uxth	r2, r3
 25219 001e 7B68     		ldr	r3, [r7, #4]
 25220 0020 1A80     		strh	r2, [r3, #0]	@ movhi
 25221 0022 07E0     		b	.L29
 25222              	.L30:
 420:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 421:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 422:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 423:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable the acknowledgement */
 424:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
 25223              		.loc 1 424 0
 25224 0024 7B68     		ldr	r3, [r7, #4]
 25225 0026 1B88     		ldrh	r3, [r3, #0]	@ movhi
 25226 0028 9BB2     		uxth	r3, r3
 25227 002a 23F48063 		bic	r3, r3, #1024
 25228 002e 9AB2     		uxth	r2, r3
 25229 0030 7B68     		ldr	r3, [r7, #4]
 25230 0032 1A80     		strh	r2, [r3, #0]	@ movhi
 25231              	.L29:
 425:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 426:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 25232              		.loc 1 426 0
 25233 0034 07F10C07 		add	r7, r7, #12
 25234 0038 BD46     		mov	sp, r7
 25235 003a 80BC     		pop	{r7}
 25236 003c 7047     		bx	lr
 25237              		.cfi_endproc
 25238              	.LFE117:
 25240 003e 00BF     		.section	.text.I2C_OwnAddress2Config,"ax",%progbits
 25241              		.align	2
 25242              		.global	I2C_OwnAddress2Config
 25243              		.thumb
 25244              		.thumb_func
 25246              	I2C_OwnAddress2Config:
 25247              	.LFB118:
 427:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 428:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 429:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Configures the specified I2C own address2.
 430:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 431:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  Address: specifies the 7bit I2C own address2.
 432:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None.
 433:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 434:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_OwnAddress2Config(I2C_TypeDef* I2Cx, uint8_t Address)
 435:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 25248              		.loc 1 435 0
 25249              		.cfi_startproc
 25250              		@ args = 0, pretend = 0, frame = 16
 25251              		@ frame_needed = 1, uses_anonymous_args = 0
 25252              		@ link register save eliminated.
 25253 0000 80B4     		push	{r7}
 25254              	.LCFI24:
 25255              		.cfi_def_cfa_offset 4
 25256 0002 85B0     		sub	sp, sp, #20
 25257              	.LCFI25:
 25258              		.cfi_def_cfa_offset 24
 25259 0004 00AF     		add	r7, sp, #0
 25260              		.cfi_offset 7, -4
 25261              	.LCFI26:
 25262              		.cfi_def_cfa_register 7
 25263 0006 7860     		str	r0, [r7, #4]
 25264 0008 0B46     		mov	r3, r1
 25265 000a FB70     		strb	r3, [r7, #3]
 436:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint16_t tmpreg = 0;
 25266              		.loc 1 436 0
 25267 000c 4FF00003 		mov	r3, #0
 25268 0010 FB81     		strh	r3, [r7, #14]	@ movhi
 437:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 438:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 439:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 440:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 441:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get the old register value */
 442:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg = I2Cx->OAR2;
 25269              		.loc 1 442 0
 25270 0012 7B68     		ldr	r3, [r7, #4]
 25271 0014 9B89     		ldrh	r3, [r3, #12]	@ movhi
 25272 0016 FB81     		strh	r3, [r7, #14]	@ movhi
 443:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 444:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Reset I2Cx Own address2 bit [7:1] */
 445:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg &= (uint16_t)~((uint16_t)I2C_OAR2_ADD2);
 25273              		.loc 1 445 0
 25274 0018 FB89     		ldrh	r3, [r7, #14]	@ movhi
 25275 001a 23F0FE03 		bic	r3, r3, #254
 25276 001e FB81     		strh	r3, [r7, #14]	@ movhi
 446:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 447:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Set I2Cx Own address2 */
 448:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg |= (uint16_t)((uint16_t)Address & (uint16_t)0x00FE);
 25277              		.loc 1 448 0
 25278 0020 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 25279 0022 9BB2     		uxth	r3, r3
 25280 0024 03F0FE03 		and	r3, r3, #254
 25281 0028 9AB2     		uxth	r2, r3
 25282 002a FB89     		ldrh	r3, [r7, #14]
 25283 002c 42EA0303 		orr	r3, r2, r3
 25284 0030 9BB2     		uxth	r3, r3
 25285 0032 FB81     		strh	r3, [r7, #14]	@ movhi
 449:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 450:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Store the new register value */
 451:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->OAR2 = tmpreg;
 25286              		.loc 1 451 0
 25287 0034 7B68     		ldr	r3, [r7, #4]
 25288 0036 FA89     		ldrh	r2, [r7, #14]	@ movhi
 25289 0038 9A81     		strh	r2, [r3, #12]	@ movhi
 452:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 25290              		.loc 1 452 0
 25291 003a 07F11407 		add	r7, r7, #20
 25292 003e BD46     		mov	sp, r7
 25293 0040 80BC     		pop	{r7}
 25294 0042 7047     		bx	lr
 25295              		.cfi_endproc
 25296              	.LFE118:
 25298              		.section	.text.I2C_DualAddressCmd,"ax",%progbits
 25299              		.align	2
 25300              		.global	I2C_DualAddressCmd
 25301              		.thumb
 25302              		.thumb_func
 25304              	I2C_DualAddressCmd:
 25305              	.LFB119:
 453:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 454:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 455:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C dual addressing mode.
 456:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 457:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C dual addressing mode.
 458:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 459:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 460:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 461:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_DualAddressCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 462:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 25306              		.loc 1 462 0
 25307              		.cfi_startproc
 25308              		@ args = 0, pretend = 0, frame = 8
 25309              		@ frame_needed = 1, uses_anonymous_args = 0
 25310              		@ link register save eliminated.
 25311 0000 80B4     		push	{r7}
 25312              	.LCFI27:
 25313              		.cfi_def_cfa_offset 4
 25314 0002 83B0     		sub	sp, sp, #12
 25315              	.LCFI28:
 25316              		.cfi_def_cfa_offset 16
 25317 0004 00AF     		add	r7, sp, #0
 25318              		.cfi_offset 7, -4
 25319              	.LCFI29:
 25320              		.cfi_def_cfa_register 7
 25321 0006 7860     		str	r0, [r7, #4]
 25322 0008 0B46     		mov	r3, r1
 25323 000a FB70     		strb	r3, [r7, #3]
 463:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 464:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 465:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 466:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 25324              		.loc 1 466 0
 25325 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 25326 000e 002B     		cmp	r3, #0
 25327 0010 08D0     		beq	.L34
 467:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 468:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable dual addressing mode */
 469:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->OAR2 |= I2C_OAR2_ENDUAL;
 25328              		.loc 1 469 0
 25329 0012 7B68     		ldr	r3, [r7, #4]
 25330 0014 9B89     		ldrh	r3, [r3, #12]	@ movhi
 25331 0016 9BB2     		uxth	r3, r3
 25332 0018 43F00103 		orr	r3, r3, #1
 25333 001c 9AB2     		uxth	r2, r3
 25334 001e 7B68     		ldr	r3, [r7, #4]
 25335 0020 9A81     		strh	r2, [r3, #12]	@ movhi
 25336 0022 07E0     		b	.L33
 25337              	.L34:
 470:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 471:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 472:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 473:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable dual addressing mode */
 474:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->OAR2 &= (uint16_t)~((uint16_t)I2C_OAR2_ENDUAL);
 25338              		.loc 1 474 0
 25339 0024 7B68     		ldr	r3, [r7, #4]
 25340 0026 9B89     		ldrh	r3, [r3, #12]	@ movhi
 25341 0028 9BB2     		uxth	r3, r3
 25342 002a 23F00103 		bic	r3, r3, #1
 25343 002e 9AB2     		uxth	r2, r3
 25344 0030 7B68     		ldr	r3, [r7, #4]
 25345 0032 9A81     		strh	r2, [r3, #12]	@ movhi
 25346              	.L33:
 475:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 476:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 25347              		.loc 1 476 0
 25348 0034 07F10C07 		add	r7, r7, #12
 25349 0038 BD46     		mov	sp, r7
 25350 003a 80BC     		pop	{r7}
 25351 003c 7047     		bx	lr
 25352              		.cfi_endproc
 25353              	.LFE119:
 25355 003e 00BF     		.section	.text.I2C_GeneralCallCmd,"ax",%progbits
 25356              		.align	2
 25357              		.global	I2C_GeneralCallCmd
 25358              		.thumb
 25359              		.thumb_func
 25361              	I2C_GeneralCallCmd:
 25362              	.LFB120:
 477:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 478:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 479:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C general call feature.
 480:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 481:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C General call.
 482:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 483:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 484:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 485:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_GeneralCallCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 486:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 25363              		.loc 1 486 0
 25364              		.cfi_startproc
 25365              		@ args = 0, pretend = 0, frame = 8
 25366              		@ frame_needed = 1, uses_anonymous_args = 0
 25367              		@ link register save eliminated.
 25368 0000 80B4     		push	{r7}
 25369              	.LCFI30:
 25370              		.cfi_def_cfa_offset 4
 25371 0002 83B0     		sub	sp, sp, #12
 25372              	.LCFI31:
 25373              		.cfi_def_cfa_offset 16
 25374 0004 00AF     		add	r7, sp, #0
 25375              		.cfi_offset 7, -4
 25376              	.LCFI32:
 25377              		.cfi_def_cfa_register 7
 25378 0006 7860     		str	r0, [r7, #4]
 25379 0008 0B46     		mov	r3, r1
 25380 000a FB70     		strb	r3, [r7, #3]
 487:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 488:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 489:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 490:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 25381              		.loc 1 490 0
 25382 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 25383 000e 002B     		cmp	r3, #0
 25384 0010 08D0     		beq	.L37
 491:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 492:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable generall call */
 493:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_ENGC;
 25385              		.loc 1 493 0
 25386 0012 7B68     		ldr	r3, [r7, #4]
 25387 0014 1B88     		ldrh	r3, [r3, #0]	@ movhi
 25388 0016 9BB2     		uxth	r3, r3
 25389 0018 43F04003 		orr	r3, r3, #64
 25390 001c 9AB2     		uxth	r2, r3
 25391 001e 7B68     		ldr	r3, [r7, #4]
 25392 0020 1A80     		strh	r2, [r3, #0]	@ movhi
 25393 0022 07E0     		b	.L36
 25394              	.L37:
 494:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 495:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 496:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 497:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable generall call */
 498:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENGC);
 25395              		.loc 1 498 0
 25396 0024 7B68     		ldr	r3, [r7, #4]
 25397 0026 1B88     		ldrh	r3, [r3, #0]	@ movhi
 25398 0028 9BB2     		uxth	r3, r3
 25399 002a 23F04003 		bic	r3, r3, #64
 25400 002e 9AB2     		uxth	r2, r3
 25401 0030 7B68     		ldr	r3, [r7, #4]
 25402 0032 1A80     		strh	r2, [r3, #0]	@ movhi
 25403              	.L36:
 499:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 500:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 25404              		.loc 1 500 0
 25405 0034 07F10C07 		add	r7, r7, #12
 25406 0038 BD46     		mov	sp, r7
 25407 003a 80BC     		pop	{r7}
 25408 003c 7047     		bx	lr
 25409              		.cfi_endproc
 25410              	.LFE120:
 25412 003e 00BF     		.section	.text.I2C_SoftwareResetCmd,"ax",%progbits
 25413              		.align	2
 25414              		.global	I2C_SoftwareResetCmd
 25415              		.thumb
 25416              		.thumb_func
 25418              	I2C_SoftwareResetCmd:
 25419              	.LFB121:
 501:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 502:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 503:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C software reset.
 504:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   When software reset is enabled, the I2C IOs are released (this can
 505:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         be useful to recover from bus errors).  
 506:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 507:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C software reset.
 508:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 509:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 510:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 511:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_SoftwareResetCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 512:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 25420              		.loc 1 512 0
 25421              		.cfi_startproc
 25422              		@ args = 0, pretend = 0, frame = 8
 25423              		@ frame_needed = 1, uses_anonymous_args = 0
 25424              		@ link register save eliminated.
 25425 0000 80B4     		push	{r7}
 25426              	.LCFI33:
 25427              		.cfi_def_cfa_offset 4
 25428 0002 83B0     		sub	sp, sp, #12
 25429              	.LCFI34:
 25430              		.cfi_def_cfa_offset 16
 25431 0004 00AF     		add	r7, sp, #0
 25432              		.cfi_offset 7, -4
 25433              	.LCFI35:
 25434              		.cfi_def_cfa_register 7
 25435 0006 7860     		str	r0, [r7, #4]
 25436 0008 0B46     		mov	r3, r1
 25437 000a FB70     		strb	r3, [r7, #3]
 513:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 514:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 515:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 516:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 25438              		.loc 1 516 0
 25439 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 25440 000e 002B     		cmp	r3, #0
 25441 0010 0AD0     		beq	.L40
 517:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 518:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Peripheral under reset */
 519:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_SWRST;
 25442              		.loc 1 519 0
 25443 0012 7B68     		ldr	r3, [r7, #4]
 25444 0014 1B88     		ldrh	r3, [r3, #0]	@ movhi
 25445 0016 9BB2     		uxth	r3, r3
 25446 0018 6FEA4343 		mvn	r3, r3, lsl #17
 25447 001c 6FEA5343 		mvn	r3, r3, lsr #17
 25448 0020 9AB2     		uxth	r2, r3
 25449 0022 7B68     		ldr	r3, [r7, #4]
 25450 0024 1A80     		strh	r2, [r3, #0]	@ movhi
 25451 0026 09E0     		b	.L39
 25452              	.L40:
 520:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 521:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 522:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 523:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Peripheral not under reset */
 524:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_SWRST);
 25453              		.loc 1 524 0
 25454 0028 7B68     		ldr	r3, [r7, #4]
 25455 002a 1B88     		ldrh	r3, [r3, #0]	@ movhi
 25456 002c 9BB2     		uxth	r3, r3
 25457 002e 4FEA4343 		lsl	r3, r3, #17
 25458 0032 4FEA5343 		lsr	r3, r3, #17
 25459 0036 9AB2     		uxth	r2, r3
 25460 0038 7B68     		ldr	r3, [r7, #4]
 25461 003a 1A80     		strh	r2, [r3, #0]	@ movhi
 25462              	.L39:
 525:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 526:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 25463              		.loc 1 526 0
 25464 003c 07F10C07 		add	r7, r7, #12
 25465 0040 BD46     		mov	sp, r7
 25466 0042 80BC     		pop	{r7}
 25467 0044 7047     		bx	lr
 25468              		.cfi_endproc
 25469              	.LFE121:
 25471 0046 00BF     		.section	.text.I2C_StretchClockCmd,"ax",%progbits
 25472              		.align	2
 25473              		.global	I2C_StretchClockCmd
 25474              		.thumb
 25475              		.thumb_func
 25477              	I2C_StretchClockCmd:
 25478              	.LFB122:
 527:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 528:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 529:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C Clock stretching.
 530:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 531:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2Cx Clock stretching.
 532:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 533:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 534:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 535:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_StretchClockCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 536:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 25479              		.loc 1 536 0
 25480              		.cfi_startproc
 25481              		@ args = 0, pretend = 0, frame = 8
 25482              		@ frame_needed = 1, uses_anonymous_args = 0
 25483              		@ link register save eliminated.
 25484 0000 80B4     		push	{r7}
 25485              	.LCFI36:
 25486              		.cfi_def_cfa_offset 4
 25487 0002 83B0     		sub	sp, sp, #12
 25488              	.LCFI37:
 25489              		.cfi_def_cfa_offset 16
 25490 0004 00AF     		add	r7, sp, #0
 25491              		.cfi_offset 7, -4
 25492              	.LCFI38:
 25493              		.cfi_def_cfa_register 7
 25494 0006 7860     		str	r0, [r7, #4]
 25495 0008 0B46     		mov	r3, r1
 25496 000a FB70     		strb	r3, [r7, #3]
 537:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 538:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 539:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 540:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState == DISABLE)
 25497              		.loc 1 540 0
 25498 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 25499 000e 002B     		cmp	r3, #0
 25500 0010 08D1     		bne	.L43
 541:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 542:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable the selected I2C Clock stretching */
 543:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
 25501              		.loc 1 543 0
 25502 0012 7B68     		ldr	r3, [r7, #4]
 25503 0014 1B88     		ldrh	r3, [r3, #0]	@ movhi
 25504 0016 9BB2     		uxth	r3, r3
 25505 0018 43F08003 		orr	r3, r3, #128
 25506 001c 9AB2     		uxth	r2, r3
 25507 001e 7B68     		ldr	r3, [r7, #4]
 25508 0020 1A80     		strh	r2, [r3, #0]	@ movhi
 25509 0022 07E0     		b	.L42
 25510              	.L43:
 544:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 545:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 546:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 547:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable the selected I2C Clock stretching */
 548:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_NOSTRETCH);
 25511              		.loc 1 548 0
 25512 0024 7B68     		ldr	r3, [r7, #4]
 25513 0026 1B88     		ldrh	r3, [r3, #0]	@ movhi
 25514 0028 9BB2     		uxth	r3, r3
 25515 002a 23F08003 		bic	r3, r3, #128
 25516 002e 9AB2     		uxth	r2, r3
 25517 0030 7B68     		ldr	r3, [r7, #4]
 25518 0032 1A80     		strh	r2, [r3, #0]	@ movhi
 25519              	.L42:
 549:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 550:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 25520              		.loc 1 550 0
 25521 0034 07F10C07 		add	r7, r7, #12
 25522 0038 BD46     		mov	sp, r7
 25523 003a 80BC     		pop	{r7}
 25524 003c 7047     		bx	lr
 25525              		.cfi_endproc
 25526              	.LFE122:
 25528 003e 00BF     		.section	.text.I2C_FastModeDutyCycleConfig,"ax",%progbits
 25529              		.align	2
 25530              		.global	I2C_FastModeDutyCycleConfig
 25531              		.thumb
 25532              		.thumb_func
 25534              	I2C_FastModeDutyCycleConfig:
 25535              	.LFB123:
 551:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 552:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 553:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Selects the specified I2C fast mode duty cycle.
 554:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 555:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_DutyCycle: specifies the fast mode duty cycle.
 556:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values:
 557:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_DutyCycle_2: I2C fast mode Tlow/Thigh = 2
 558:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_DutyCycle_16_9: I2C fast mode Tlow/Thigh = 16/9
 559:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 560:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 561:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_FastModeDutyCycleConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DutyCycle)
 562:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 25536              		.loc 1 562 0
 25537              		.cfi_startproc
 25538              		@ args = 0, pretend = 0, frame = 8
 25539              		@ frame_needed = 1, uses_anonymous_args = 0
 25540              		@ link register save eliminated.
 25541 0000 80B4     		push	{r7}
 25542              	.LCFI39:
 25543              		.cfi_def_cfa_offset 4
 25544 0002 83B0     		sub	sp, sp, #12
 25545              	.LCFI40:
 25546              		.cfi_def_cfa_offset 16
 25547 0004 00AF     		add	r7, sp, #0
 25548              		.cfi_offset 7, -4
 25549              	.LCFI41:
 25550              		.cfi_def_cfa_register 7
 25551 0006 7860     		str	r0, [r7, #4]
 25552 0008 0B46     		mov	r3, r1
 25553 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 563:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 564:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 565:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_DUTY_CYCLE(I2C_DutyCycle));
 566:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (I2C_DutyCycle != I2C_DutyCycle_16_9)
 25554              		.loc 1 566 0
 25555 000c 7B88     		ldrh	r3, [r7, #2]
 25556 000e B3F5804F 		cmp	r3, #16384
 25557 0012 08D0     		beq	.L46
 567:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 568:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* I2C fast mode Tlow/Thigh=2 */
 569:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CCR &= I2C_DutyCycle_2;
 25558              		.loc 1 569 0
 25559 0014 7B68     		ldr	r3, [r7, #4]
 25560 0016 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 25561 0018 9BB2     		uxth	r3, r3
 25562 001a 23F48043 		bic	r3, r3, #16384
 25563 001e 9AB2     		uxth	r2, r3
 25564 0020 7B68     		ldr	r3, [r7, #4]
 25565 0022 9A83     		strh	r2, [r3, #28]	@ movhi
 25566 0024 07E0     		b	.L45
 25567              	.L46:
 570:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 571:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 572:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 573:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* I2C fast mode Tlow/Thigh=16/9 */
 574:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CCR |= I2C_DutyCycle_16_9;
 25568              		.loc 1 574 0
 25569 0026 7B68     		ldr	r3, [r7, #4]
 25570 0028 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 25571 002a 9BB2     		uxth	r3, r3
 25572 002c 43F48043 		orr	r3, r3, #16384
 25573 0030 9AB2     		uxth	r2, r3
 25574 0032 7B68     		ldr	r3, [r7, #4]
 25575 0034 9A83     		strh	r2, [r3, #28]	@ movhi
 25576              	.L45:
 575:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 576:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 25577              		.loc 1 576 0
 25578 0036 07F10C07 		add	r7, r7, #12
 25579 003a BD46     		mov	sp, r7
 25580 003c 80BC     		pop	{r7}
 25581 003e 7047     		bx	lr
 25582              		.cfi_endproc
 25583              	.LFE123:
 25585              		.section	.text.I2C_NACKPositionConfig,"ax",%progbits
 25586              		.align	2
 25587              		.global	I2C_NACKPositionConfig
 25588              		.thumb
 25589              		.thumb_func
 25591              	I2C_NACKPositionConfig:
 25592              	.LFB124:
 577:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 578:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 579:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Selects the specified I2C NACK position in master receiver mode.
 580:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   This function is useful in I2C Master Receiver mode when the number
 581:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         of data to be received is equal to 2. In this case, this function 
 582:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         should be called (with parameter I2C_NACKPosition_Next) before data 
 583:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         reception starts,as described in the 2-byte reception procedure 
 584:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         recommended in Reference Manual in Section: Master receiver.                
 585:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 586:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_NACKPosition: specifies the NACK position. 
 587:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values:
 588:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_NACKPosition_Next: indicates that the next byte will be the last
 589:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                                        received byte.  
 590:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_NACKPosition_Current: indicates that current byte is the last 
 591:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                                           received byte.
 592:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            
 593:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note    This function configures the same bit (POS) as I2C_PECPositionConfig() 
 594:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          but is intended to be used in I2C mode while I2C_PECPositionConfig() 
 595:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          is intended to used in SMBUS mode. 
 596:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            
 597:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 598:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 599:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_NACKPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_NACKPosition)
 600:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 25593              		.loc 1 600 0
 25594              		.cfi_startproc
 25595              		@ args = 0, pretend = 0, frame = 8
 25596              		@ frame_needed = 1, uses_anonymous_args = 0
 25597              		@ link register save eliminated.
 25598 0000 80B4     		push	{r7}
 25599              	.LCFI42:
 25600              		.cfi_def_cfa_offset 4
 25601 0002 83B0     		sub	sp, sp, #12
 25602              	.LCFI43:
 25603              		.cfi_def_cfa_offset 16
 25604 0004 00AF     		add	r7, sp, #0
 25605              		.cfi_offset 7, -4
 25606              	.LCFI44:
 25607              		.cfi_def_cfa_register 7
 25608 0006 7860     		str	r0, [r7, #4]
 25609 0008 0B46     		mov	r3, r1
 25610 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 601:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 602:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 603:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_NACK_POSITION(I2C_NACKPosition));
 604:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   
 605:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the input parameter */
 606:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (I2C_NACKPosition == I2C_NACKPosition_Next)
 25611              		.loc 1 606 0
 25612 000c 7B88     		ldrh	r3, [r7, #2]
 25613 000e B3F5006F 		cmp	r3, #2048
 25614 0012 08D1     		bne	.L49
 607:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 608:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Next byte in shift register is the last received byte */
 609:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_NACKPosition_Next;
 25615              		.loc 1 609 0
 25616 0014 7B68     		ldr	r3, [r7, #4]
 25617 0016 1B88     		ldrh	r3, [r3, #0]	@ movhi
 25618 0018 9BB2     		uxth	r3, r3
 25619 001a 43F40063 		orr	r3, r3, #2048
 25620 001e 9AB2     		uxth	r2, r3
 25621 0020 7B68     		ldr	r3, [r7, #4]
 25622 0022 1A80     		strh	r2, [r3, #0]	@ movhi
 25623 0024 07E0     		b	.L48
 25624              	.L49:
 610:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 611:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 612:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 613:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Current byte in shift register is the last received byte */
 614:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= I2C_NACKPosition_Current;
 25625              		.loc 1 614 0
 25626 0026 7B68     		ldr	r3, [r7, #4]
 25627 0028 1B88     		ldrh	r3, [r3, #0]	@ movhi
 25628 002a 9BB2     		uxth	r3, r3
 25629 002c 23F40063 		bic	r3, r3, #2048
 25630 0030 9AB2     		uxth	r2, r3
 25631 0032 7B68     		ldr	r3, [r7, #4]
 25632 0034 1A80     		strh	r2, [r3, #0]	@ movhi
 25633              	.L48:
 615:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 616:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 25634              		.loc 1 616 0
 25635 0036 07F10C07 		add	r7, r7, #12
 25636 003a BD46     		mov	sp, r7
 25637 003c 80BC     		pop	{r7}
 25638 003e 7047     		bx	lr
 25639              		.cfi_endproc
 25640              	.LFE124:
 25642              		.section	.text.I2C_SMBusAlertConfig,"ax",%progbits
 25643              		.align	2
 25644              		.global	I2C_SMBusAlertConfig
 25645              		.thumb
 25646              		.thumb_func
 25648              	I2C_SMBusAlertConfig:
 25649              	.LFB125:
 617:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 618:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 619:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Drives the SMBusAlert pin high or low for the specified I2C.
 620:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 621:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_SMBusAlert: specifies SMBAlert pin level. 
 622:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values:
 623:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_SMBusAlert_Low: SMBAlert pin driven low
 624:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_SMBusAlert_High: SMBAlert pin driven high
 625:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 626:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 627:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_SMBusAlertConfig(I2C_TypeDef* I2Cx, uint16_t I2C_SMBusAlert)
 628:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 25650              		.loc 1 628 0
 25651              		.cfi_startproc
 25652              		@ args = 0, pretend = 0, frame = 8
 25653              		@ frame_needed = 1, uses_anonymous_args = 0
 25654              		@ link register save eliminated.
 25655 0000 80B4     		push	{r7}
 25656              	.LCFI45:
 25657              		.cfi_def_cfa_offset 4
 25658 0002 83B0     		sub	sp, sp, #12
 25659              	.LCFI46:
 25660              		.cfi_def_cfa_offset 16
 25661 0004 00AF     		add	r7, sp, #0
 25662              		.cfi_offset 7, -4
 25663              	.LCFI47:
 25664              		.cfi_def_cfa_register 7
 25665 0006 7860     		str	r0, [r7, #4]
 25666 0008 0B46     		mov	r3, r1
 25667 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 629:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 630:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 631:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
 632:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
 25668              		.loc 1 632 0
 25669 000c 7B88     		ldrh	r3, [r7, #2]
 25670 000e B3F5005F 		cmp	r3, #8192
 25671 0012 08D1     		bne	.L52
 633:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 634:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Drive the SMBusAlert pin Low */
 635:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_SMBusAlert_Low;
 25672              		.loc 1 635 0
 25673 0014 7B68     		ldr	r3, [r7, #4]
 25674 0016 1B88     		ldrh	r3, [r3, #0]	@ movhi
 25675 0018 9BB2     		uxth	r3, r3
 25676 001a 43F40053 		orr	r3, r3, #8192
 25677 001e 9AB2     		uxth	r2, r3
 25678 0020 7B68     		ldr	r3, [r7, #4]
 25679 0022 1A80     		strh	r2, [r3, #0]	@ movhi
 25680 0024 07E0     		b	.L51
 25681              	.L52:
 636:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 637:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 638:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 639:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Drive the SMBusAlert pin High  */
 640:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= I2C_SMBusAlert_High;
 25682              		.loc 1 640 0
 25683 0026 7B68     		ldr	r3, [r7, #4]
 25684 0028 1B88     		ldrh	r3, [r3, #0]	@ movhi
 25685 002a 9BB2     		uxth	r3, r3
 25686 002c 23F40053 		bic	r3, r3, #8192
 25687 0030 9AB2     		uxth	r2, r3
 25688 0032 7B68     		ldr	r3, [r7, #4]
 25689 0034 1A80     		strh	r2, [r3, #0]	@ movhi
 25690              	.L51:
 641:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 642:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 25691              		.loc 1 642 0
 25692 0036 07F10C07 		add	r7, r7, #12
 25693 003a BD46     		mov	sp, r7
 25694 003c 80BC     		pop	{r7}
 25695 003e 7047     		bx	lr
 25696              		.cfi_endproc
 25697              	.LFE125:
 25699              		.section	.text.I2C_ARPCmd,"ax",%progbits
 25700              		.align	2
 25701              		.global	I2C_ARPCmd
 25702              		.thumb
 25703              		.thumb_func
 25705              	I2C_ARPCmd:
 25706              	.LFB126:
 643:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 644:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 645:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C ARP.
 646:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 647:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2Cx ARP. 
 648:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 649:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 650:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 651:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_ARPCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 652:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 25707              		.loc 1 652 0
 25708              		.cfi_startproc
 25709              		@ args = 0, pretend = 0, frame = 8
 25710              		@ frame_needed = 1, uses_anonymous_args = 0
 25711              		@ link register save eliminated.
 25712 0000 80B4     		push	{r7}
 25713              	.LCFI48:
 25714              		.cfi_def_cfa_offset 4
 25715 0002 83B0     		sub	sp, sp, #12
 25716              	.LCFI49:
 25717              		.cfi_def_cfa_offset 16
 25718 0004 00AF     		add	r7, sp, #0
 25719              		.cfi_offset 7, -4
 25720              	.LCFI50:
 25721              		.cfi_def_cfa_register 7
 25722 0006 7860     		str	r0, [r7, #4]
 25723 0008 0B46     		mov	r3, r1
 25724 000a FB70     		strb	r3, [r7, #3]
 653:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 654:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 655:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 656:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 25725              		.loc 1 656 0
 25726 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 25727 000e 002B     		cmp	r3, #0
 25728 0010 08D0     		beq	.L55
 657:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 658:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable the selected I2C ARP */
 659:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_ENARP;
 25729              		.loc 1 659 0
 25730 0012 7B68     		ldr	r3, [r7, #4]
 25731 0014 1B88     		ldrh	r3, [r3, #0]	@ movhi
 25732 0016 9BB2     		uxth	r3, r3
 25733 0018 43F01003 		orr	r3, r3, #16
 25734 001c 9AB2     		uxth	r2, r3
 25735 001e 7B68     		ldr	r3, [r7, #4]
 25736 0020 1A80     		strh	r2, [r3, #0]	@ movhi
 25737 0022 07E0     		b	.L54
 25738              	.L55:
 660:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 661:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 662:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 663:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable the selected I2C ARP */
 664:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENARP);
 25739              		.loc 1 664 0
 25740 0024 7B68     		ldr	r3, [r7, #4]
 25741 0026 1B88     		ldrh	r3, [r3, #0]	@ movhi
 25742 0028 9BB2     		uxth	r3, r3
 25743 002a 23F01003 		bic	r3, r3, #16
 25744 002e 9AB2     		uxth	r2, r3
 25745 0030 7B68     		ldr	r3, [r7, #4]
 25746 0032 1A80     		strh	r2, [r3, #0]	@ movhi
 25747              	.L54:
 665:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 666:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 25748              		.loc 1 666 0
 25749 0034 07F10C07 		add	r7, r7, #12
 25750 0038 BD46     		mov	sp, r7
 25751 003a 80BC     		pop	{r7}
 25752 003c 7047     		bx	lr
 25753              		.cfi_endproc
 25754              	.LFE126:
 25756 003e 00BF     		.section	.text.I2C_SendData,"ax",%progbits
 25757              		.align	2
 25758              		.global	I2C_SendData
 25759              		.thumb
 25760              		.thumb_func
 25762              	I2C_SendData:
 25763              	.LFB127:
 667:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 668:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @}
 669:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 670:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 671:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /** @defgroup I2C_Group2 Data transfers functions
 672:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  *  @brief   Data transfers functions 
 673:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  *
 674:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** @verbatim   
 675:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================
 676:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                         Data transfers functions
 677:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================  
 678:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 679:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** @endverbatim
 680:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @{
 681:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 682:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 683:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 684:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Sends a data byte through the I2Cx peripheral.
 685:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 686:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  Data: Byte to be transmitted..
 687:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 688:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 689:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
 690:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 25764              		.loc 1 690 0
 25765              		.cfi_startproc
 25766              		@ args = 0, pretend = 0, frame = 8
 25767              		@ frame_needed = 1, uses_anonymous_args = 0
 25768              		@ link register save eliminated.
 25769 0000 80B4     		push	{r7}
 25770              	.LCFI51:
 25771              		.cfi_def_cfa_offset 4
 25772 0002 83B0     		sub	sp, sp, #12
 25773              	.LCFI52:
 25774              		.cfi_def_cfa_offset 16
 25775 0004 00AF     		add	r7, sp, #0
 25776              		.cfi_offset 7, -4
 25777              	.LCFI53:
 25778              		.cfi_def_cfa_register 7
 25779 0006 7860     		str	r0, [r7, #4]
 25780 0008 0B46     		mov	r3, r1
 25781 000a FB70     		strb	r3, [r7, #3]
 691:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 692:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 693:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Write in the DR register the data to be sent */
 694:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->DR = Data;
 25782              		.loc 1 694 0
 25783 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 25784 000e 9AB2     		uxth	r2, r3
 25785 0010 7B68     		ldr	r3, [r7, #4]
 25786 0012 1A82     		strh	r2, [r3, #16]	@ movhi
 695:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 25787              		.loc 1 695 0
 25788 0014 07F10C07 		add	r7, r7, #12
 25789 0018 BD46     		mov	sp, r7
 25790 001a 80BC     		pop	{r7}
 25791 001c 7047     		bx	lr
 25792              		.cfi_endproc
 25793              	.LFE127:
 25795 001e 00BF     		.section	.text.I2C_ReceiveData,"ax",%progbits
 25796              		.align	2
 25797              		.global	I2C_ReceiveData
 25798              		.thumb
 25799              		.thumb_func
 25801              	I2C_ReceiveData:
 25802              	.LFB128:
 696:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 697:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 698:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Returns the most recent received data by the I2Cx peripheral.
 699:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 700:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval The value of the received data.
 701:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 702:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
 703:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 25803              		.loc 1 703 0
 25804              		.cfi_startproc
 25805              		@ args = 0, pretend = 0, frame = 8
 25806              		@ frame_needed = 1, uses_anonymous_args = 0
 25807              		@ link register save eliminated.
 25808 0000 80B4     		push	{r7}
 25809              	.LCFI54:
 25810              		.cfi_def_cfa_offset 4
 25811 0002 83B0     		sub	sp, sp, #12
 25812              	.LCFI55:
 25813              		.cfi_def_cfa_offset 16
 25814 0004 00AF     		add	r7, sp, #0
 25815              		.cfi_offset 7, -4
 25816              	.LCFI56:
 25817              		.cfi_def_cfa_register 7
 25818 0006 7860     		str	r0, [r7, #4]
 704:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 705:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 706:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Return the data in the DR register */
 707:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   return (uint8_t)I2Cx->DR;
 25819              		.loc 1 707 0
 25820 0008 7B68     		ldr	r3, [r7, #4]
 25821 000a 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 25822 000c 9BB2     		uxth	r3, r3
 25823 000e DBB2     		uxtb	r3, r3
 708:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 25824              		.loc 1 708 0
 25825 0010 1846     		mov	r0, r3
 25826 0012 07F10C07 		add	r7, r7, #12
 25827 0016 BD46     		mov	sp, r7
 25828 0018 80BC     		pop	{r7}
 25829 001a 7047     		bx	lr
 25830              		.cfi_endproc
 25831              	.LFE128:
 25833              		.section	.text.I2C_TransmitPEC,"ax",%progbits
 25834              		.align	2
 25835              		.global	I2C_TransmitPEC
 25836              		.thumb
 25837              		.thumb_func
 25839              	I2C_TransmitPEC:
 25840              	.LFB129:
 709:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 710:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 711:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @}
 712:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 713:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 714:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /** @defgroup I2C_Group3 PEC management functions
 715:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  *  @brief   PEC management functions 
 716:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  *
 717:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** @verbatim   
 718:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================
 719:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                          PEC management functions
 720:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================  
 721:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 722:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** @endverbatim
 723:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @{
 724:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 725:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 726:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 727:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C PEC transfer.
 728:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 729:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C PEC transmission.
 730:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 731:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 732:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 733:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_TransmitPEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
 734:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 25841              		.loc 1 734 0
 25842              		.cfi_startproc
 25843              		@ args = 0, pretend = 0, frame = 8
 25844              		@ frame_needed = 1, uses_anonymous_args = 0
 25845              		@ link register save eliminated.
 25846 0000 80B4     		push	{r7}
 25847              	.LCFI57:
 25848              		.cfi_def_cfa_offset 4
 25849 0002 83B0     		sub	sp, sp, #12
 25850              	.LCFI58:
 25851              		.cfi_def_cfa_offset 16
 25852 0004 00AF     		add	r7, sp, #0
 25853              		.cfi_offset 7, -4
 25854              	.LCFI59:
 25855              		.cfi_def_cfa_register 7
 25856 0006 7860     		str	r0, [r7, #4]
 25857 0008 0B46     		mov	r3, r1
 25858 000a FB70     		strb	r3, [r7, #3]
 735:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 736:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 737:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 738:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 25859              		.loc 1 738 0
 25860 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 25861 000e 002B     		cmp	r3, #0
 25862 0010 08D0     		beq	.L60
 739:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 740:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable the selected I2C PEC transmission */
 741:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_PEC;
 25863              		.loc 1 741 0
 25864 0012 7B68     		ldr	r3, [r7, #4]
 25865 0014 1B88     		ldrh	r3, [r3, #0]	@ movhi
 25866 0016 9BB2     		uxth	r3, r3
 25867 0018 43F48053 		orr	r3, r3, #4096
 25868 001c 9AB2     		uxth	r2, r3
 25869 001e 7B68     		ldr	r3, [r7, #4]
 25870 0020 1A80     		strh	r2, [r3, #0]	@ movhi
 25871 0022 07E0     		b	.L59
 25872              	.L60:
 742:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 743:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 744:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 745:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable the selected I2C PEC transmission */
 746:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PEC);
 25873              		.loc 1 746 0
 25874 0024 7B68     		ldr	r3, [r7, #4]
 25875 0026 1B88     		ldrh	r3, [r3, #0]	@ movhi
 25876 0028 9BB2     		uxth	r3, r3
 25877 002a 23F48053 		bic	r3, r3, #4096
 25878 002e 9AB2     		uxth	r2, r3
 25879 0030 7B68     		ldr	r3, [r7, #4]
 25880 0032 1A80     		strh	r2, [r3, #0]	@ movhi
 25881              	.L59:
 747:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 748:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 25882              		.loc 1 748 0
 25883 0034 07F10C07 		add	r7, r7, #12
 25884 0038 BD46     		mov	sp, r7
 25885 003a 80BC     		pop	{r7}
 25886 003c 7047     		bx	lr
 25887              		.cfi_endproc
 25888              	.LFE129:
 25890 003e 00BF     		.section	.text.I2C_PECPositionConfig,"ax",%progbits
 25891              		.align	2
 25892              		.global	I2C_PECPositionConfig
 25893              		.thumb
 25894              		.thumb_func
 25896              	I2C_PECPositionConfig:
 25897              	.LFB130:
 749:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 750:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 751:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Selects the specified I2C PEC position.
 752:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 753:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_PECPosition: specifies the PEC position. 
 754:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values:
 755:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_PECPosition_Next: indicates that the next byte is PEC
 756:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_PECPosition_Current: indicates that current byte is PEC
 757:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *       
 758:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note    This function configures the same bit (POS) as I2C_NACKPositionConfig()
 759:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          but is intended to be used in SMBUS mode while I2C_NACKPositionConfig() 
 760:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          is intended to used in I2C mode.
 761:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                
 762:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 763:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 764:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_PECPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_PECPosition)
 765:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 25898              		.loc 1 765 0
 25899              		.cfi_startproc
 25900              		@ args = 0, pretend = 0, frame = 8
 25901              		@ frame_needed = 1, uses_anonymous_args = 0
 25902              		@ link register save eliminated.
 25903 0000 80B4     		push	{r7}
 25904              	.LCFI60:
 25905              		.cfi_def_cfa_offset 4
 25906 0002 83B0     		sub	sp, sp, #12
 25907              	.LCFI61:
 25908              		.cfi_def_cfa_offset 16
 25909 0004 00AF     		add	r7, sp, #0
 25910              		.cfi_offset 7, -4
 25911              	.LCFI62:
 25912              		.cfi_def_cfa_register 7
 25913 0006 7860     		str	r0, [r7, #4]
 25914 0008 0B46     		mov	r3, r1
 25915 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 766:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 767:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 768:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
 769:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (I2C_PECPosition == I2C_PECPosition_Next)
 25916              		.loc 1 769 0
 25917 000c 7B88     		ldrh	r3, [r7, #2]
 25918 000e B3F5006F 		cmp	r3, #2048
 25919 0012 08D1     		bne	.L63
 770:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 771:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Next byte in shift register is PEC */
 772:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_PECPosition_Next;
 25920              		.loc 1 772 0
 25921 0014 7B68     		ldr	r3, [r7, #4]
 25922 0016 1B88     		ldrh	r3, [r3, #0]	@ movhi
 25923 0018 9BB2     		uxth	r3, r3
 25924 001a 43F40063 		orr	r3, r3, #2048
 25925 001e 9AB2     		uxth	r2, r3
 25926 0020 7B68     		ldr	r3, [r7, #4]
 25927 0022 1A80     		strh	r2, [r3, #0]	@ movhi
 25928 0024 07E0     		b	.L62
 25929              	.L63:
 773:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 774:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 775:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 776:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Current byte in shift register is PEC */
 777:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= I2C_PECPosition_Current;
 25930              		.loc 1 777 0
 25931 0026 7B68     		ldr	r3, [r7, #4]
 25932 0028 1B88     		ldrh	r3, [r3, #0]	@ movhi
 25933 002a 9BB2     		uxth	r3, r3
 25934 002c 23F40063 		bic	r3, r3, #2048
 25935 0030 9AB2     		uxth	r2, r3
 25936 0032 7B68     		ldr	r3, [r7, #4]
 25937 0034 1A80     		strh	r2, [r3, #0]	@ movhi
 25938              	.L62:
 778:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 779:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 25939              		.loc 1 779 0
 25940 0036 07F10C07 		add	r7, r7, #12
 25941 003a BD46     		mov	sp, r7
 25942 003c 80BC     		pop	{r7}
 25943 003e 7047     		bx	lr
 25944              		.cfi_endproc
 25945              	.LFE130:
 25947              		.section	.text.I2C_CalculatePEC,"ax",%progbits
 25948              		.align	2
 25949              		.global	I2C_CalculatePEC
 25950              		.thumb
 25951              		.thumb_func
 25953              	I2C_CalculatePEC:
 25954              	.LFB131:
 780:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 781:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 782:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the PEC value calculation of the transferred bytes.
 783:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 784:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2Cx PEC value calculation.
 785:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 786:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 787:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 788:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_CalculatePEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
 789:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 25955              		.loc 1 789 0
 25956              		.cfi_startproc
 25957              		@ args = 0, pretend = 0, frame = 8
 25958              		@ frame_needed = 1, uses_anonymous_args = 0
 25959              		@ link register save eliminated.
 25960 0000 80B4     		push	{r7}
 25961              	.LCFI63:
 25962              		.cfi_def_cfa_offset 4
 25963 0002 83B0     		sub	sp, sp, #12
 25964              	.LCFI64:
 25965              		.cfi_def_cfa_offset 16
 25966 0004 00AF     		add	r7, sp, #0
 25967              		.cfi_offset 7, -4
 25968              	.LCFI65:
 25969              		.cfi_def_cfa_register 7
 25970 0006 7860     		str	r0, [r7, #4]
 25971 0008 0B46     		mov	r3, r1
 25972 000a FB70     		strb	r3, [r7, #3]
 790:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 791:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 792:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 793:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 25973              		.loc 1 793 0
 25974 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 25975 000e 002B     		cmp	r3, #0
 25976 0010 08D0     		beq	.L66
 794:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 795:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable the selected I2C PEC calculation */
 796:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_ENPEC;
 25977              		.loc 1 796 0
 25978 0012 7B68     		ldr	r3, [r7, #4]
 25979 0014 1B88     		ldrh	r3, [r3, #0]	@ movhi
 25980 0016 9BB2     		uxth	r3, r3
 25981 0018 43F02003 		orr	r3, r3, #32
 25982 001c 9AB2     		uxth	r2, r3
 25983 001e 7B68     		ldr	r3, [r7, #4]
 25984 0020 1A80     		strh	r2, [r3, #0]	@ movhi
 25985 0022 07E0     		b	.L65
 25986              	.L66:
 797:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 798:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 799:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 800:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable the selected I2C PEC calculation */
 801:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENPEC);
 25987              		.loc 1 801 0
 25988 0024 7B68     		ldr	r3, [r7, #4]
 25989 0026 1B88     		ldrh	r3, [r3, #0]	@ movhi
 25990 0028 9BB2     		uxth	r3, r3
 25991 002a 23F02003 		bic	r3, r3, #32
 25992 002e 9AB2     		uxth	r2, r3
 25993 0030 7B68     		ldr	r3, [r7, #4]
 25994 0032 1A80     		strh	r2, [r3, #0]	@ movhi
 25995              	.L65:
 802:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 803:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 25996              		.loc 1 803 0
 25997 0034 07F10C07 		add	r7, r7, #12
 25998 0038 BD46     		mov	sp, r7
 25999 003a 80BC     		pop	{r7}
 26000 003c 7047     		bx	lr
 26001              		.cfi_endproc
 26002              	.LFE131:
 26004 003e 00BF     		.section	.text.I2C_GetPEC,"ax",%progbits
 26005              		.align	2
 26006              		.global	I2C_GetPEC
 26007              		.thumb
 26008              		.thumb_func
 26010              	I2C_GetPEC:
 26011              	.LFB132:
 804:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 805:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 806:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Returns the PEC value for the specified I2C.
 807:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 808:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval The PEC value.
 809:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 810:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** uint8_t I2C_GetPEC(I2C_TypeDef* I2Cx)
 811:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 26012              		.loc 1 811 0
 26013              		.cfi_startproc
 26014              		@ args = 0, pretend = 0, frame = 8
 26015              		@ frame_needed = 1, uses_anonymous_args = 0
 26016              		@ link register save eliminated.
 26017 0000 80B4     		push	{r7}
 26018              	.LCFI66:
 26019              		.cfi_def_cfa_offset 4
 26020 0002 83B0     		sub	sp, sp, #12
 26021              	.LCFI67:
 26022              		.cfi_def_cfa_offset 16
 26023 0004 00AF     		add	r7, sp, #0
 26024              		.cfi_offset 7, -4
 26025              	.LCFI68:
 26026              		.cfi_def_cfa_register 7
 26027 0006 7860     		str	r0, [r7, #4]
 812:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 813:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 814:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Return the selected I2C PEC value */
 815:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   return ((I2Cx->SR2) >> 8);
 26028              		.loc 1 815 0
 26029 0008 7B68     		ldr	r3, [r7, #4]
 26030 000a 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 26031 000c 9BB2     		uxth	r3, r3
 26032 000e 4FEA1323 		lsr	r3, r3, #8
 26033 0012 9BB2     		uxth	r3, r3
 26034 0014 DBB2     		uxtb	r3, r3
 816:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 26035              		.loc 1 816 0
 26036 0016 1846     		mov	r0, r3
 26037 0018 07F10C07 		add	r7, r7, #12
 26038 001c BD46     		mov	sp, r7
 26039 001e 80BC     		pop	{r7}
 26040 0020 7047     		bx	lr
 26041              		.cfi_endproc
 26042              	.LFE132:
 26044 0022 00BF     		.section	.text.I2C_DMACmd,"ax",%progbits
 26045              		.align	2
 26046              		.global	I2C_DMACmd
 26047              		.thumb
 26048              		.thumb_func
 26050              	I2C_DMACmd:
 26051              	.LFB133:
 817:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 818:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 819:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @}
 820:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 821:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 822:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /** @defgroup I2C_Group4 DMA transfers management functions
 823:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  *  @brief   DMA transfers management functions 
 824:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  *
 825:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** @verbatim   
 826:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================
 827:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                          DMA transfers management functions
 828:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================  
 829:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   This section provides functions allowing to configure the I2C DMA channels 
 830:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   requests.
 831:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   
 832:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** @endverbatim
 833:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @{
 834:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 835:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 836:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 837:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C DMA requests.
 838:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 839:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C DMA transfer.
 840:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 841:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 842:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 843:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_DMACmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 844:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 26052              		.loc 1 844 0
 26053              		.cfi_startproc
 26054              		@ args = 0, pretend = 0, frame = 8
 26055              		@ frame_needed = 1, uses_anonymous_args = 0
 26056              		@ link register save eliminated.
 26057 0000 80B4     		push	{r7}
 26058              	.LCFI69:
 26059              		.cfi_def_cfa_offset 4
 26060 0002 83B0     		sub	sp, sp, #12
 26061              	.LCFI70:
 26062              		.cfi_def_cfa_offset 16
 26063 0004 00AF     		add	r7, sp, #0
 26064              		.cfi_offset 7, -4
 26065              	.LCFI71:
 26066              		.cfi_def_cfa_register 7
 26067 0006 7860     		str	r0, [r7, #4]
 26068 0008 0B46     		mov	r3, r1
 26069 000a FB70     		strb	r3, [r7, #3]
 845:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 846:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 847:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 848:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 26070              		.loc 1 848 0
 26071 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 26072 000e 002B     		cmp	r3, #0
 26073 0010 08D0     		beq	.L70
 849:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 850:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable the selected I2C DMA requests */
 851:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR2 |= I2C_CR2_DMAEN;
 26074              		.loc 1 851 0
 26075 0012 7B68     		ldr	r3, [r7, #4]
 26076 0014 9B88     		ldrh	r3, [r3, #4]	@ movhi
 26077 0016 9BB2     		uxth	r3, r3
 26078 0018 43F40063 		orr	r3, r3, #2048
 26079 001c 9AB2     		uxth	r2, r3
 26080 001e 7B68     		ldr	r3, [r7, #4]
 26081 0020 9A80     		strh	r2, [r3, #4]	@ movhi
 26082 0022 07E0     		b	.L69
 26083              	.L70:
 852:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 853:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 854:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 855:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable the selected I2C DMA requests */
 856:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_DMAEN);
 26084              		.loc 1 856 0
 26085 0024 7B68     		ldr	r3, [r7, #4]
 26086 0026 9B88     		ldrh	r3, [r3, #4]	@ movhi
 26087 0028 9BB2     		uxth	r3, r3
 26088 002a 23F40063 		bic	r3, r3, #2048
 26089 002e 9AB2     		uxth	r2, r3
 26090 0030 7B68     		ldr	r3, [r7, #4]
 26091 0032 9A80     		strh	r2, [r3, #4]	@ movhi
 26092              	.L69:
 857:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 858:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 26093              		.loc 1 858 0
 26094 0034 07F10C07 		add	r7, r7, #12
 26095 0038 BD46     		mov	sp, r7
 26096 003a 80BC     		pop	{r7}
 26097 003c 7047     		bx	lr
 26098              		.cfi_endproc
 26099              	.LFE133:
 26101 003e 00BF     		.section	.text.I2C_DMALastTransferCmd,"ax",%progbits
 26102              		.align	2
 26103              		.global	I2C_DMALastTransferCmd
 26104              		.thumb
 26105              		.thumb_func
 26107              	I2C_DMALastTransferCmd:
 26108              	.LFB134:
 859:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 860:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 861:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Specifies that the next DMA transfer is the last one.
 862:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 863:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C DMA last transfer.
 864:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 865:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 866:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 867:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_DMALastTransferCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 868:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 26109              		.loc 1 868 0
 26110              		.cfi_startproc
 26111              		@ args = 0, pretend = 0, frame = 8
 26112              		@ frame_needed = 1, uses_anonymous_args = 0
 26113              		@ link register save eliminated.
 26114 0000 80B4     		push	{r7}
 26115              	.LCFI72:
 26116              		.cfi_def_cfa_offset 4
 26117 0002 83B0     		sub	sp, sp, #12
 26118              	.LCFI73:
 26119              		.cfi_def_cfa_offset 16
 26120 0004 00AF     		add	r7, sp, #0
 26121              		.cfi_offset 7, -4
 26122              	.LCFI74:
 26123              		.cfi_def_cfa_register 7
 26124 0006 7860     		str	r0, [r7, #4]
 26125 0008 0B46     		mov	r3, r1
 26126 000a FB70     		strb	r3, [r7, #3]
 869:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 870:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 871:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 872:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 26127              		.loc 1 872 0
 26128 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 26129 000e 002B     		cmp	r3, #0
 26130 0010 08D0     		beq	.L73
 873:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 874:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Next DMA transfer is the last transfer */
 875:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR2 |= I2C_CR2_LAST;
 26131              		.loc 1 875 0
 26132 0012 7B68     		ldr	r3, [r7, #4]
 26133 0014 9B88     		ldrh	r3, [r3, #4]	@ movhi
 26134 0016 9BB2     		uxth	r3, r3
 26135 0018 43F48053 		orr	r3, r3, #4096
 26136 001c 9AB2     		uxth	r2, r3
 26137 001e 7B68     		ldr	r3, [r7, #4]
 26138 0020 9A80     		strh	r2, [r3, #4]	@ movhi
 26139 0022 07E0     		b	.L72
 26140              	.L73:
 876:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 877:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 878:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 879:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Next DMA transfer is not the last transfer */
 880:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_LAST);
 26141              		.loc 1 880 0
 26142 0024 7B68     		ldr	r3, [r7, #4]
 26143 0026 9B88     		ldrh	r3, [r3, #4]	@ movhi
 26144 0028 9BB2     		uxth	r3, r3
 26145 002a 23F48053 		bic	r3, r3, #4096
 26146 002e 9AB2     		uxth	r2, r3
 26147 0030 7B68     		ldr	r3, [r7, #4]
 26148 0032 9A80     		strh	r2, [r3, #4]	@ movhi
 26149              	.L72:
 881:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 882:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 26150              		.loc 1 882 0
 26151 0034 07F10C07 		add	r7, r7, #12
 26152 0038 BD46     		mov	sp, r7
 26153 003a 80BC     		pop	{r7}
 26154 003c 7047     		bx	lr
 26155              		.cfi_endproc
 26156              	.LFE134:
 26158 003e 00BF     		.section	.text.I2C_ReadRegister,"ax",%progbits
 26159              		.align	2
 26160              		.global	I2C_ReadRegister
 26161              		.thumb
 26162              		.thumb_func
 26164              	I2C_ReadRegister:
 26165              	.LFB135:
 883:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 884:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 885:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @}
 886:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 887:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 888:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /** @defgroup I2C_Group5 Interrupts events and flags management functions
 889:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  *  @brief   Interrupts, events and flags management functions
 890:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  *
 891:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** @verbatim   
 892:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================
 893:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                 Interrupts, events and flags management functions
 894:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================  
 895:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   This section provides functions allowing to configure the I2C Interrupts 
 896:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   sources and check or clear the flags or pending bits status.
 897:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   The user should identify which mode will be used in his application to manage 
 898:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   the communication: Polling mode, Interrupt mode or DMA mode. 
 899:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 900:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================
 901:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                           I2C State Monitoring Functions                    
 902:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================   
 903:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   This I2C driver provides three different ways for I2C state monitoring
 904:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   depending on the application requirements and constraints:
 905:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****          
 906:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****    
 907:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****      1. Basic state monitoring (Using I2C_CheckEvent() function)
 908:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****      -----------------------------------------------------------
 909:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****         It compares the status registers (SR1 and SR2) content to a given event
 910:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****         (can be the combination of one or more flags).
 911:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****         It returns SUCCESS if the current status includes the given flags 
 912:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****         and returns ERROR if one or more flags are missing in the current status.
 913:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 914:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****           - When to use
 915:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - This function is suitable for most applications as well as for startup 
 916:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                activity since the events are fully described in the product reference 
 917:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                manual (RM0090).
 918:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - It is also suitable for users who need to define their own events.
 919:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 920:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****           - Limitations
 921:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - If an error occurs (ie. error flags are set besides to the monitored 
 922:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                flags), the I2C_CheckEvent() function may return SUCCESS despite 
 923:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                the communication hold or corrupted real state. 
 924:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                In this case, it is advised to use error interrupts to monitor 
 925:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                the error events and handle them in the interrupt IRQ handler.
 926:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****          
 927:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****      @note 
 928:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****          For error management, it is advised to use the following functions:
 929:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****            - I2C_ITConfig() to configure and enable the error interrupts (I2C_IT_ERR).
 930:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****            - I2Cx_ER_IRQHandler() which is called when the error interrupt occurs.
 931:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              Where x is the peripheral instance (I2C1, I2C2 ...)
 932:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****            - I2C_GetFlagStatus() or I2C_GetITStatus()  to be called into the 
 933:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              I2Cx_ER_IRQHandler() function in order to determine which error occurred.
 934:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****            - I2C_ClearFlag() or I2C_ClearITPendingBit() and/or I2C_SoftwareResetCmd() 
 935:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              and/or I2C_GenerateStop() in order to clear the error flag and source 
 936:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              and return to correct  communication status.
 937:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              
 938:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  
 939:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****      2. Advanced state monitoring (Using the function I2C_GetLastEvent())
 940:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****      -------------------------------------------------------------------- 
 941:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****         Using the function I2C_GetLastEvent() which returns the image of both status 
 942:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****         registers in a single word (uint32_t) (Status Register 2 value is shifted left 
 943:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****         by 16 bits and concatenated to Status Register 1).
 944:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 945:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****           - When to use
 946:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - This function is suitable for the same applications above but it 
 947:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                allows to overcome the mentioned limitation of I2C_GetFlagStatus() 
 948:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                function.
 949:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - The returned value could be compared to events already defined in 
 950:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                the library (stm32f4xx_i2c.h) or to custom values defined by user.
 951:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                This function is suitable when multiple flags are monitored at the 
 952:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                same time.
 953:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - At the opposite of I2C_CheckEvent() function, this function allows 
 954:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                user to choose when an event is accepted (when all events flags are 
 955:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                set and no other flags are set or just when the needed flags are set 
 956:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                like I2C_CheckEvent() function.
 957:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 958:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****           - Limitations
 959:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - User may need to define his own events.
 960:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - Same remark concerning the error management is applicable for this 
 961:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                function if user decides to check only regular communication flags 
 962:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                (and ignores error flags).
 963:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       
 964:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  
 965:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****      3. Flag-based state monitoring (Using the function I2C_GetFlagStatus())
 966:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****      -----------------------------------------------------------------------
 967:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****      
 968:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       Using the function I2C_GetFlagStatus() which simply returns the status of 
 969:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       one single flag (ie. I2C_FLAG_RXNE ...). 
 970:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 971:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****           - When to use
 972:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - This function could be used for specific applications or in debug 
 973:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                phase.
 974:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - It is suitable when only one flag checking is needed (most I2C 
 975:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                events are monitored through multiple flags).
 976:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****           - Limitations: 
 977:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - When calling this function, the Status register is accessed. 
 978:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                Some flags are cleared when the status register is accessed. 
 979:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                So checking the status of one Flag, may clear other ones.
 980:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - Function may need to be called twice or more in order to monitor 
 981:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                one single event.
 982:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  
 983:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****    For detailed description of Events, please refer to section I2C_Events in 
 984:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****    stm32f4xx_i2c.h file.
 985:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****        
 986:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** @endverbatim
 987:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @{
 988:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 989:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****    
 990:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 991:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Reads the specified I2C register and returns its value.
 992:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_Register: specifies the register to read.
 993:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values:
 994:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_CR1:  CR1 register.
 995:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_CR2:   CR2 register.
 996:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_OAR1:  OAR1 register.
 997:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_OAR2:  OAR2 register.
 998:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_DR:    DR register.
 999:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_SR1:   SR1 register.
1000:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_SR2:   SR2 register.
1001:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_CCR:   CCR register.
1002:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_TRISE: TRISE register.
1003:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval The value of the read register.
1004:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
1005:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** uint16_t I2C_ReadRegister(I2C_TypeDef* I2Cx, uint8_t I2C_Register)
1006:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 26166              		.loc 1 1006 0
 26167              		.cfi_startproc
 26168              		@ args = 0, pretend = 0, frame = 16
 26169              		@ frame_needed = 1, uses_anonymous_args = 0
 26170              		@ link register save eliminated.
 26171 0000 80B4     		push	{r7}
 26172              	.LCFI75:
 26173              		.cfi_def_cfa_offset 4
 26174 0002 85B0     		sub	sp, sp, #20
 26175              	.LCFI76:
 26176              		.cfi_def_cfa_offset 24
 26177 0004 00AF     		add	r7, sp, #0
 26178              		.cfi_offset 7, -4
 26179              	.LCFI77:
 26180              		.cfi_def_cfa_register 7
 26181 0006 7860     		str	r0, [r7, #4]
 26182 0008 0B46     		mov	r3, r1
 26183 000a FB70     		strb	r3, [r7, #3]
1007:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   __IO uint32_t tmp = 0;
 26184              		.loc 1 1007 0
 26185 000c 4FF00003 		mov	r3, #0
 26186 0010 FB60     		str	r3, [r7, #12]
1008:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1009:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
1010:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1011:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_REGISTER(I2C_Register));
1012:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1013:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmp = (uint32_t) I2Cx;
 26187              		.loc 1 1013 0
 26188 0012 7B68     		ldr	r3, [r7, #4]
 26189 0014 FB60     		str	r3, [r7, #12]
1014:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmp += I2C_Register;
 26190              		.loc 1 1014 0
 26191 0016 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 26192 0018 FB68     		ldr	r3, [r7, #12]
 26193 001a D318     		adds	r3, r2, r3
 26194 001c FB60     		str	r3, [r7, #12]
1015:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1016:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Return the selected register value */
1017:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   return (*(__IO uint16_t *) tmp);
 26195              		.loc 1 1017 0
 26196 001e FB68     		ldr	r3, [r7, #12]
 26197 0020 1B88     		ldrh	r3, [r3, #0]	@ movhi
 26198 0022 9BB2     		uxth	r3, r3
1018:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 26199              		.loc 1 1018 0
 26200 0024 1846     		mov	r0, r3
 26201 0026 07F11407 		add	r7, r7, #20
 26202 002a BD46     		mov	sp, r7
 26203 002c 80BC     		pop	{r7}
 26204 002e 7047     		bx	lr
 26205              		.cfi_endproc
 26206              	.LFE135:
 26208              		.section	.text.I2C_ITConfig,"ax",%progbits
 26209              		.align	2
 26210              		.global	I2C_ITConfig
 26211              		.thumb
 26212              		.thumb_func
 26214              	I2C_ITConfig:
 26215              	.LFB136:
1019:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1020:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
1021:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C interrupts.
1022:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
1023:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_IT: specifies the I2C interrupts sources to be enabled or disabled. 
1024:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be any combination of the following values:
1025:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_BUF: Buffer interrupt mask
1026:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_EVT: Event interrupt mask
1027:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_ERR: Error interrupt mask
1028:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the specified I2C interrupts.
1029:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
1030:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
1031:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
1032:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_ITConfig(I2C_TypeDef* I2Cx, uint16_t I2C_IT, FunctionalState NewState)
1033:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 26216              		.loc 1 1033 0
 26217              		.cfi_startproc
 26218              		@ args = 0, pretend = 0, frame = 8
 26219              		@ frame_needed = 1, uses_anonymous_args = 0
 26220              		@ link register save eliminated.
 26221 0000 80B4     		push	{r7}
 26222              	.LCFI78:
 26223              		.cfi_def_cfa_offset 4
 26224 0002 83B0     		sub	sp, sp, #12
 26225              	.LCFI79:
 26226              		.cfi_def_cfa_offset 16
 26227 0004 00AF     		add	r7, sp, #0
 26228              		.cfi_offset 7, -4
 26229              	.LCFI80:
 26230              		.cfi_def_cfa_register 7
 26231 0006 7860     		str	r0, [r7, #4]
 26232 0008 1346     		mov	r3, r2
 26233 000a 0A46     		mov	r2, r1	@ movhi
 26234 000c 7A80     		strh	r2, [r7, #2]	@ movhi
 26235 000e 7B70     		strb	r3, [r7, #1]
1034:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
1035:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1036:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1037:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_CONFIG_IT(I2C_IT));
1038:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   
1039:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 26236              		.loc 1 1039 0
 26237 0010 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 26238 0012 002B     		cmp	r3, #0
 26239 0014 09D0     		beq	.L77
1040:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
1041:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable the selected I2C interrupts */
1042:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR2 |= I2C_IT;
 26240              		.loc 1 1042 0
 26241 0016 7B68     		ldr	r3, [r7, #4]
 26242 0018 9B88     		ldrh	r3, [r3, #4]	@ movhi
 26243 001a 9AB2     		uxth	r2, r3
 26244 001c 7B88     		ldrh	r3, [r7, #2]	@ movhi
 26245 001e 42EA0303 		orr	r3, r2, r3
 26246 0022 9AB2     		uxth	r2, r3
 26247 0024 7B68     		ldr	r3, [r7, #4]
 26248 0026 9A80     		strh	r2, [r3, #4]	@ movhi
 26249 0028 0BE0     		b	.L76
 26250              	.L77:
1043:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
1044:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
1045:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
1046:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable the selected I2C interrupts */
1047:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR2 &= (uint16_t)~I2C_IT;
 26251              		.loc 1 1047 0
 26252 002a 7B68     		ldr	r3, [r7, #4]
 26253 002c 9B88     		ldrh	r3, [r3, #4]	@ movhi
 26254 002e 9AB2     		uxth	r2, r3
 26255 0030 7B88     		ldrh	r3, [r7, #2]	@ movhi
 26256 0032 6FEA0303 		mvn	r3, r3
 26257 0036 9BB2     		uxth	r3, r3
 26258 0038 02EA0303 		and	r3, r2, r3
 26259 003c 9AB2     		uxth	r2, r3
 26260 003e 7B68     		ldr	r3, [r7, #4]
 26261 0040 9A80     		strh	r2, [r3, #4]	@ movhi
 26262              	.L76:
1048:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
1049:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 26263              		.loc 1 1049 0
 26264 0042 07F10C07 		add	r7, r7, #12
 26265 0046 BD46     		mov	sp, r7
 26266 0048 80BC     		pop	{r7}
 26267 004a 7047     		bx	lr
 26268              		.cfi_endproc
 26269              	.LFE136:
 26271              		.section	.text.I2C_CheckEvent,"ax",%progbits
 26272              		.align	2
 26273              		.global	I2C_CheckEvent
 26274              		.thumb
 26275              		.thumb_func
 26277              	I2C_CheckEvent:
 26278              	.LFB137:
1050:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1051:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /*
1052:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================
1053:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                           1. Basic state monitoring                    
1054:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================  
1055:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  */
1056:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1057:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
1058:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Checks whether the last I2Cx Event is equal to the one passed
1059:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         as parameter.
1060:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
1061:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_EVENT: specifies the event to be checked. 
1062:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values:
1063:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_TRANSMITTER_ADDRESS_MATCHED: EV1
1064:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_RECEIVER_ADDRESS_MATCHED: EV1
1065:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_TRANSMITTER_SECONDADDRESS_MATCHED: EV1
1066:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_RECEIVER_SECONDADDRESS_MATCHED: EV1
1067:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_GENERALCALLADDRESS_MATCHED: EV1
1068:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_BYTE_RECEIVED: EV2
1069:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg (I2C_EVENT_SLAVE_BYTE_RECEIVED | I2C_FLAG_DUALF): EV2
1070:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg (I2C_EVENT_SLAVE_BYTE_RECEIVED | I2C_FLAG_GENCALL): EV2
1071:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_BYTE_TRANSMITTED: EV3
1072:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg (I2C_EVENT_SLAVE_BYTE_TRANSMITTED | I2C_FLAG_DUALF): EV3
1073:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg (I2C_EVENT_SLAVE_BYTE_TRANSMITTED | I2C_FLAG_GENCALL): EV3
1074:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_ACK_FAILURE: EV3_2
1075:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_STOP_DETECTED: EV4
1076:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_MASTER_MODE_SELECT: EV5
1077:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED: EV6     
1078:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED: EV6
1079:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_MASTER_BYTE_RECEIVED: EV7
1080:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_MASTER_BYTE_TRANSMITTING: EV8
1081:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_MASTER_BYTE_TRANSMITTED: EV8_2
1082:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_MASTER_MODE_ADDRESS10: EV9
1083:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *     
1084:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   For detailed description of Events, please refer to section I2C_Events
1085:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         in stm32f4xx_i2c.h file.
1086:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *    
1087:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval An ErrorStatus enumeration value:
1088:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *           - SUCCESS: Last event is equal to the I2C_EVENT
1089:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *           - ERROR: Last event is different from the I2C_EVENT
1090:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
1091:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
1092:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 26279              		.loc 1 1092 0
 26280              		.cfi_startproc
 26281              		@ args = 0, pretend = 0, frame = 24
 26282              		@ frame_needed = 1, uses_anonymous_args = 0
 26283              		@ link register save eliminated.
 26284 0000 80B4     		push	{r7}
 26285              	.LCFI81:
 26286              		.cfi_def_cfa_offset 4
 26287 0002 87B0     		sub	sp, sp, #28
 26288              	.LCFI82:
 26289              		.cfi_def_cfa_offset 32
 26290 0004 00AF     		add	r7, sp, #0
 26291              		.cfi_offset 7, -4
 26292              	.LCFI83:
 26293              		.cfi_def_cfa_register 7
 26294 0006 7860     		str	r0, [r7, #4]
 26295 0008 3960     		str	r1, [r7, #0]
1093:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint32_t lastevent = 0;
 26296              		.loc 1 1093 0
 26297 000a 4FF00003 		mov	r3, #0
 26298 000e 3B61     		str	r3, [r7, #16]
1094:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint32_t flag1 = 0, flag2 = 0;
 26299              		.loc 1 1094 0
 26300 0010 4FF00003 		mov	r3, #0
 26301 0014 FB60     		str	r3, [r7, #12]
 26302 0016 4FF00003 		mov	r3, #0
 26303 001a BB60     		str	r3, [r7, #8]
1095:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   ErrorStatus status = ERROR;
 26304              		.loc 1 1095 0
 26305 001c 4FF00003 		mov	r3, #0
 26306 0020 FB75     		strb	r3, [r7, #23]
1096:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1097:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
1098:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1099:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_EVENT(I2C_EVENT));
1100:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1101:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Read the I2Cx status register */
1102:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   flag1 = I2Cx->SR1;
 26307              		.loc 1 1102 0
 26308 0022 7B68     		ldr	r3, [r7, #4]
 26309 0024 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 26310 0026 9BB2     		uxth	r3, r3
 26311 0028 FB60     		str	r3, [r7, #12]
1103:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   flag2 = I2Cx->SR2;
 26312              		.loc 1 1103 0
 26313 002a 7B68     		ldr	r3, [r7, #4]
 26314 002c 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 26315 002e 9BB2     		uxth	r3, r3
 26316 0030 BB60     		str	r3, [r7, #8]
1104:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   flag2 = flag2 << 16;
 26317              		.loc 1 1104 0
 26318 0032 BB68     		ldr	r3, [r7, #8]
 26319 0034 4FEA0343 		lsl	r3, r3, #16
 26320 0038 BB60     		str	r3, [r7, #8]
1105:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1106:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get the last event value from I2C status register */
1107:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   lastevent = (flag1 | flag2) & FLAG_MASK;
 26321              		.loc 1 1107 0
 26322 003a FA68     		ldr	r2, [r7, #12]
 26323 003c BB68     		ldr	r3, [r7, #8]
 26324 003e 42EA0303 		orr	r3, r2, r3
 26325 0042 23F07F43 		bic	r3, r3, #-16777216
 26326 0046 3B61     		str	r3, [r7, #16]
1108:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1109:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check whether the last event contains the I2C_EVENT */
1110:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if ((lastevent & I2C_EVENT) == I2C_EVENT)
 26327              		.loc 1 1110 0
 26328 0048 3A69     		ldr	r2, [r7, #16]
 26329 004a 3B68     		ldr	r3, [r7, #0]
 26330 004c 1A40     		ands	r2, r2, r3
 26331 004e 3B68     		ldr	r3, [r7, #0]
 26332 0050 9A42     		cmp	r2, r3
 26333 0052 03D1     		bne	.L80
1111:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
1112:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* SUCCESS: last event is equal to I2C_EVENT */
1113:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     status = SUCCESS;
 26334              		.loc 1 1113 0
 26335 0054 4FF00103 		mov	r3, #1
 26336 0058 FB75     		strb	r3, [r7, #23]
 26337 005a 02E0     		b	.L81
 26338              	.L80:
1114:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
1115:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
1116:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
1117:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* ERROR: last event is different from I2C_EVENT */
1118:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     status = ERROR;
 26339              		.loc 1 1118 0
 26340 005c 4FF00003 		mov	r3, #0
 26341 0060 FB75     		strb	r3, [r7, #23]
 26342              	.L81:
1119:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
1120:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Return status */
1121:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   return status;
 26343              		.loc 1 1121 0
 26344 0062 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1122:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 26345              		.loc 1 1122 0
 26346 0064 1846     		mov	r0, r3
 26347 0066 07F11C07 		add	r7, r7, #28
 26348 006a BD46     		mov	sp, r7
 26349 006c 80BC     		pop	{r7}
 26350 006e 7047     		bx	lr
 26351              		.cfi_endproc
 26352              	.LFE137:
 26354              		.section	.text.I2C_GetLastEvent,"ax",%progbits
 26355              		.align	2
 26356              		.global	I2C_GetLastEvent
 26357              		.thumb
 26358              		.thumb_func
 26360              	I2C_GetLastEvent:
 26361              	.LFB138:
1123:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1124:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /*
1125:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================
1126:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                           2. Advanced state monitoring                   
1127:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================  
1128:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  */
1129:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1130:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
1131:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Returns the last I2Cx Event.
1132:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
1133:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *     
1134:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   For detailed description of Events, please refer to section I2C_Events
1135:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         in stm32f4xx_i2c.h file.
1136:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *    
1137:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval The last event
1138:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
1139:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** uint32_t I2C_GetLastEvent(I2C_TypeDef* I2Cx)
1140:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 26362              		.loc 1 1140 0
 26363              		.cfi_startproc
 26364              		@ args = 0, pretend = 0, frame = 24
 26365              		@ frame_needed = 1, uses_anonymous_args = 0
 26366              		@ link register save eliminated.
 26367 0000 80B4     		push	{r7}
 26368              	.LCFI84:
 26369              		.cfi_def_cfa_offset 4
 26370 0002 87B0     		sub	sp, sp, #28
 26371              	.LCFI85:
 26372              		.cfi_def_cfa_offset 32
 26373 0004 00AF     		add	r7, sp, #0
 26374              		.cfi_offset 7, -4
 26375              	.LCFI86:
 26376              		.cfi_def_cfa_register 7
 26377 0006 7860     		str	r0, [r7, #4]
1141:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint32_t lastevent = 0;
 26378              		.loc 1 1141 0
 26379 0008 4FF00003 		mov	r3, #0
 26380 000c 7B61     		str	r3, [r7, #20]
1142:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint32_t flag1 = 0, flag2 = 0;
 26381              		.loc 1 1142 0
 26382 000e 4FF00003 		mov	r3, #0
 26383 0012 3B61     		str	r3, [r7, #16]
 26384 0014 4FF00003 		mov	r3, #0
 26385 0018 FB60     		str	r3, [r7, #12]
1143:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1144:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
1145:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1146:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1147:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Read the I2Cx status register */
1148:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   flag1 = I2Cx->SR1;
 26386              		.loc 1 1148 0
 26387 001a 7B68     		ldr	r3, [r7, #4]
 26388 001c 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 26389 001e 9BB2     		uxth	r3, r3
 26390 0020 3B61     		str	r3, [r7, #16]
1149:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   flag2 = I2Cx->SR2;
 26391              		.loc 1 1149 0
 26392 0022 7B68     		ldr	r3, [r7, #4]
 26393 0024 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 26394 0026 9BB2     		uxth	r3, r3
 26395 0028 FB60     		str	r3, [r7, #12]
1150:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   flag2 = flag2 << 16;
 26396              		.loc 1 1150 0
 26397 002a FB68     		ldr	r3, [r7, #12]
 26398 002c 4FEA0343 		lsl	r3, r3, #16
 26399 0030 FB60     		str	r3, [r7, #12]
1151:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1152:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get the last event value from I2C status register */
1153:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   lastevent = (flag1 | flag2) & FLAG_MASK;
 26400              		.loc 1 1153 0
 26401 0032 3A69     		ldr	r2, [r7, #16]
 26402 0034 FB68     		ldr	r3, [r7, #12]
 26403 0036 42EA0303 		orr	r3, r2, r3
 26404 003a 23F07F43 		bic	r3, r3, #-16777216
 26405 003e 7B61     		str	r3, [r7, #20]
1154:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1155:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Return status */
1156:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   return lastevent;
 26406              		.loc 1 1156 0
 26407 0040 7B69     		ldr	r3, [r7, #20]
1157:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 26408              		.loc 1 1157 0
 26409 0042 1846     		mov	r0, r3
 26410 0044 07F11C07 		add	r7, r7, #28
 26411 0048 BD46     		mov	sp, r7
 26412 004a 80BC     		pop	{r7}
 26413 004c 7047     		bx	lr
 26414              		.cfi_endproc
 26415              	.LFE138:
 26417 004e 00BF     		.section	.text.I2C_GetFlagStatus,"ax",%progbits
 26418              		.align	2
 26419              		.global	I2C_GetFlagStatus
 26420              		.thumb
 26421              		.thumb_func
 26423              	I2C_GetFlagStatus:
 26424              	.LFB139:
1158:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1159:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /*
1160:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================
1161:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                           3. Flag-based state monitoring                   
1162:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================  
1163:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  */
1164:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1165:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
1166:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Checks whether the specified I2C flag is set or not.
1167:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
1168:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_FLAG: specifies the flag to check. 
1169:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values:
1170:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_DUALF: Dual flag (Slave mode)
1171:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_SMBHOST: SMBus host header (Slave mode)
1172:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_SMBDEFAULT: SMBus default header (Slave mode)
1173:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_GENCALL: General call header flag (Slave mode)
1174:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_TRA: Transmitter/Receiver flag
1175:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_BUSY: Bus busy flag
1176:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_MSL: Master/Slave flag
1177:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_SMBALERT: SMBus Alert flag
1178:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_TIMEOUT: Timeout or Tlow error flag
1179:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_PECERR: PEC error in reception flag
1180:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_OVR: Overrun/Underrun flag (Slave mode)
1181:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_AF: Acknowledge failure flag
1182:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_ARLO: Arbitration lost flag (Master mode)
1183:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_BERR: Bus error flag
1184:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_TXE: Data register empty flag (Transmitter)
1185:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_RXNE: Data register not empty (Receiver) flag
1186:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_STOPF: Stop detection flag (Slave mode)
1187:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_ADD10: 10-bit header sent flag (Master mode)
1188:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_BTF: Byte transfer finished flag
1189:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_ADDR: Address sent flag (Master mode) "ADSL"
1190:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                                Address matched flag (Slave mode)"ENDAD"
1191:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
1192:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval The new state of I2C_FLAG (SET or RESET).
1193:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
1194:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
1195:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 26425              		.loc 1 1195 0
 26426              		.cfi_startproc
 26427              		@ args = 0, pretend = 0, frame = 24
 26428              		@ frame_needed = 1, uses_anonymous_args = 0
 26429              		@ link register save eliminated.
 26430 0000 80B4     		push	{r7}
 26431              	.LCFI87:
 26432              		.cfi_def_cfa_offset 4
 26433 0002 87B0     		sub	sp, sp, #28
 26434              	.LCFI88:
 26435              		.cfi_def_cfa_offset 32
 26436 0004 00AF     		add	r7, sp, #0
 26437              		.cfi_offset 7, -4
 26438              	.LCFI89:
 26439              		.cfi_def_cfa_register 7
 26440 0006 7860     		str	r0, [r7, #4]
 26441 0008 3960     		str	r1, [r7, #0]
1196:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   FlagStatus bitstatus = RESET;
 26442              		.loc 1 1196 0
 26443 000a 4FF00003 		mov	r3, #0
 26444 000e FB75     		strb	r3, [r7, #23]
1197:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   __IO uint32_t i2creg = 0, i2cxbase = 0;
 26445              		.loc 1 1197 0
 26446 0010 4FF00003 		mov	r3, #0
 26447 0014 3B61     		str	r3, [r7, #16]
 26448 0016 4FF00003 		mov	r3, #0
 26449 001a FB60     		str	r3, [r7, #12]
1198:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1199:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
1200:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1201:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_GET_FLAG(I2C_FLAG));
1202:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1203:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get the I2Cx peripheral base address */
1204:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   i2cxbase = (uint32_t)I2Cx;
 26450              		.loc 1 1204 0
 26451 001c 7B68     		ldr	r3, [r7, #4]
 26452 001e FB60     		str	r3, [r7, #12]
1205:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   
1206:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Read flag register index */
1207:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   i2creg = I2C_FLAG >> 28;
 26453              		.loc 1 1207 0
 26454 0020 3B68     		ldr	r3, [r7, #0]
 26455 0022 4FEA1373 		lsr	r3, r3, #28
 26456 0026 3B61     		str	r3, [r7, #16]
1208:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   
1209:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get bit[23:0] of the flag */
1210:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2C_FLAG &= FLAG_MASK;
 26457              		.loc 1 1210 0
 26458 0028 3B68     		ldr	r3, [r7, #0]
 26459 002a 23F07F43 		bic	r3, r3, #-16777216
 26460 002e 3B60     		str	r3, [r7, #0]
1211:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   
1212:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if(i2creg != 0)
 26461              		.loc 1 1212 0
 26462 0030 3B69     		ldr	r3, [r7, #16]
 26463 0032 002B     		cmp	r3, #0
 26464 0034 04D0     		beq	.L84
1213:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
1214:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Get the I2Cx SR1 register address */
1215:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     i2cxbase += 0x14;
 26465              		.loc 1 1215 0
 26466 0036 FB68     		ldr	r3, [r7, #12]
 26467 0038 03F11403 		add	r3, r3, #20
 26468 003c FB60     		str	r3, [r7, #12]
 26469 003e 07E0     		b	.L85
 26470              	.L84:
1216:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
1217:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
1218:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
1219:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Flag in I2Cx SR2 Register */
1220:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 26471              		.loc 1 1220 0
 26472 0040 3B68     		ldr	r3, [r7, #0]
 26473 0042 4FEA1343 		lsr	r3, r3, #16
 26474 0046 3B60     		str	r3, [r7, #0]
1221:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Get the I2Cx SR2 register address */
1222:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     i2cxbase += 0x18;
 26475              		.loc 1 1222 0
 26476 0048 FB68     		ldr	r3, [r7, #12]
 26477 004a 03F11803 		add	r3, r3, #24
 26478 004e FB60     		str	r3, [r7, #12]
 26479              	.L85:
1223:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
1224:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   
1225:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 26480              		.loc 1 1225 0
 26481 0050 FB68     		ldr	r3, [r7, #12]
 26482 0052 1A68     		ldr	r2, [r3, #0]
 26483 0054 3B68     		ldr	r3, [r7, #0]
 26484 0056 02EA0303 		and	r3, r2, r3
 26485 005a 002B     		cmp	r3, #0
 26486 005c 03D0     		beq	.L86
1226:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
1227:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* I2C_FLAG is set */
1228:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     bitstatus = SET;
 26487              		.loc 1 1228 0
 26488 005e 4FF00103 		mov	r3, #1
 26489 0062 FB75     		strb	r3, [r7, #23]
 26490 0064 02E0     		b	.L87
 26491              	.L86:
1229:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
1230:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
1231:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
1232:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* I2C_FLAG is reset */
1233:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     bitstatus = RESET;
 26492              		.loc 1 1233 0
 26493 0066 4FF00003 		mov	r3, #0
 26494 006a FB75     		strb	r3, [r7, #23]
 26495              	.L87:
1234:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
1235:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   
1236:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Return the I2C_FLAG status */
1237:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   return  bitstatus;
 26496              		.loc 1 1237 0
 26497 006c FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1238:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 26498              		.loc 1 1238 0
 26499 006e 1846     		mov	r0, r3
 26500 0070 07F11C07 		add	r7, r7, #28
 26501 0074 BD46     		mov	sp, r7
 26502 0076 80BC     		pop	{r7}
 26503 0078 7047     		bx	lr
 26504              		.cfi_endproc
 26505              	.LFE139:
 26507 007a 00BF     		.section	.text.I2C_ClearFlag,"ax",%progbits
 26508              		.align	2
 26509              		.global	I2C_ClearFlag
 26510              		.thumb
 26511              		.thumb_func
 26513              	I2C_ClearFlag:
 26514              	.LFB140:
1239:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1240:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
1241:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Clears the I2Cx's pending flags.
1242:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
1243:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_FLAG: specifies the flag to clear. 
1244:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be any combination of the following values:
1245:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_SMBALERT: SMBus Alert flag
1246:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_TIMEOUT: Timeout or Tlow error flag
1247:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_PECERR: PEC error in reception flag
1248:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_OVR: Overrun/Underrun flag (Slave mode)
1249:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_AF: Acknowledge failure flag
1250:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_ARLO: Arbitration lost flag (Master mode)
1251:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_BERR: Bus error flag
1252:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *   
1253:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   STOPF (STOP detection) is cleared by software sequence: a read operation 
1254:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          to I2C_SR1 register (I2C_GetFlagStatus()) followed by a write operation 
1255:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          to I2C_CR1 register (I2C_Cmd() to re-enable the I2C peripheral).
1256:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   ADD10 (10-bit header sent) is cleared by software sequence: a read 
1257:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          operation to I2C_SR1 (I2C_GetFlagStatus()) followed by writing the 
1258:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          second byte of the address in DR register.
1259:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   BTF (Byte Transfer Finished) is cleared by software sequence: a read 
1260:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          operation to I2C_SR1 register (I2C_GetFlagStatus()) followed by a 
1261:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          read/write to I2C_DR register (I2C_SendData()).
1262:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   ADDR (Address sent) is cleared by software sequence: a read operation to 
1263:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          I2C_SR1 register (I2C_GetFlagStatus()) followed by a read operation to 
1264:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          I2C_SR2 register ((void)(I2Cx->SR2)).
1265:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   SB (Start Bit) is cleared software sequence: a read operation to I2C_SR1
1266:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          register (I2C_GetFlagStatus()) followed by a write operation to I2C_DR
1267:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          register (I2C_SendData()).
1268:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *  
1269:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
1270:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
1271:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_ClearFlag(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
1272:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 26515              		.loc 1 1272 0
 26516              		.cfi_startproc
 26517              		@ args = 0, pretend = 0, frame = 16
 26518              		@ frame_needed = 1, uses_anonymous_args = 0
 26519              		@ link register save eliminated.
 26520 0000 80B4     		push	{r7}
 26521              	.LCFI90:
 26522              		.cfi_def_cfa_offset 4
 26523 0002 85B0     		sub	sp, sp, #20
 26524              	.LCFI91:
 26525              		.cfi_def_cfa_offset 24
 26526 0004 00AF     		add	r7, sp, #0
 26527              		.cfi_offset 7, -4
 26528              	.LCFI92:
 26529              		.cfi_def_cfa_register 7
 26530 0006 7860     		str	r0, [r7, #4]
 26531 0008 3960     		str	r1, [r7, #0]
1273:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint32_t flagpos = 0;
 26532              		.loc 1 1273 0
 26533 000a 4FF00003 		mov	r3, #0
 26534 000e FB60     		str	r3, [r7, #12]
1274:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
1275:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1276:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));
1277:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get the I2C flag position */
1278:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   flagpos = I2C_FLAG & FLAG_MASK;
 26535              		.loc 1 1278 0
 26536 0010 3B68     		ldr	r3, [r7, #0]
 26537 0012 23F07F43 		bic	r3, r3, #-16777216
 26538 0016 FB60     		str	r3, [r7, #12]
1279:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Clear the selected I2C flag */
1280:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->SR1 = (uint16_t)~flagpos;
 26539              		.loc 1 1280 0
 26540 0018 FB68     		ldr	r3, [r7, #12]
 26541 001a 9BB2     		uxth	r3, r3
 26542 001c 6FEA0303 		mvn	r3, r3
 26543 0020 9AB2     		uxth	r2, r3
 26544 0022 7B68     		ldr	r3, [r7, #4]
 26545 0024 9A82     		strh	r2, [r3, #20]	@ movhi
1281:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 26546              		.loc 1 1281 0
 26547 0026 07F11407 		add	r7, r7, #20
 26548 002a BD46     		mov	sp, r7
 26549 002c 80BC     		pop	{r7}
 26550 002e 7047     		bx	lr
 26551              		.cfi_endproc
 26552              	.LFE140:
 26554              		.section	.text.I2C_GetITStatus,"ax",%progbits
 26555              		.align	2
 26556              		.global	I2C_GetITStatus
 26557              		.thumb
 26558              		.thumb_func
 26560              	I2C_GetITStatus:
 26561              	.LFB141:
1282:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1283:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
1284:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Checks whether the specified I2C interrupt has occurred or not.
1285:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
1286:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_IT: specifies the interrupt source to check. 
1287:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values:
1288:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_SMBALERT: SMBus Alert flag
1289:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_TIMEOUT: Timeout or Tlow error flag
1290:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_PECERR: PEC error in reception flag
1291:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_OVR: Overrun/Underrun flag (Slave mode)
1292:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_AF: Acknowledge failure flag
1293:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_ARLO: Arbitration lost flag (Master mode)
1294:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_BERR: Bus error flag
1295:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_TXE: Data register empty flag (Transmitter)
1296:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_RXNE: Data register not empty (Receiver) flag
1297:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_STOPF: Stop detection flag (Slave mode)
1298:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_ADD10: 10-bit header sent flag (Master mode)
1299:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_BTF: Byte transfer finished flag
1300:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_ADDR: Address sent flag (Master mode) "ADSL"
1301:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                              Address matched flag (Slave mode)"ENDAD"
1302:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_SB: Start bit flag (Master mode)
1303:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval The new state of I2C_IT (SET or RESET).
1304:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
1305:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** ITStatus I2C_GetITStatus(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
1306:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 26562              		.loc 1 1306 0
 26563              		.cfi_startproc
 26564              		@ args = 0, pretend = 0, frame = 16
 26565              		@ frame_needed = 1, uses_anonymous_args = 0
 26566              		@ link register save eliminated.
 26567 0000 80B4     		push	{r7}
 26568              	.LCFI93:
 26569              		.cfi_def_cfa_offset 4
 26570 0002 85B0     		sub	sp, sp, #20
 26571              	.LCFI94:
 26572              		.cfi_def_cfa_offset 24
 26573 0004 00AF     		add	r7, sp, #0
 26574              		.cfi_offset 7, -4
 26575              	.LCFI95:
 26576              		.cfi_def_cfa_register 7
 26577 0006 7860     		str	r0, [r7, #4]
 26578 0008 3960     		str	r1, [r7, #0]
1307:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   ITStatus bitstatus = RESET;
 26579              		.loc 1 1307 0
 26580 000a 4FF00003 		mov	r3, #0
 26581 000e FB73     		strb	r3, [r7, #15]
1308:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint32_t enablestatus = 0;
 26582              		.loc 1 1308 0
 26583 0010 4FF00003 		mov	r3, #0
 26584 0014 BB60     		str	r3, [r7, #8]
1309:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1310:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
1311:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1312:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_GET_IT(I2C_IT));
1313:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1314:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check if the interrupt source is enabled or not */
1315:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 26585              		.loc 1 1315 0
 26586 0016 3B68     		ldr	r3, [r7, #0]
 26587 0018 03F0E063 		and	r3, r3, #117440512
 26588 001c 4FEA1342 		lsr	r2, r3, #16
 26589 0020 7B68     		ldr	r3, [r7, #4]
 26590 0022 9B88     		ldrh	r3, [r3, #4]	@ movhi
 26591 0024 9BB2     		uxth	r3, r3
 26592 0026 02EA0303 		and	r3, r2, r3
 26593 002a BB60     		str	r3, [r7, #8]
1316:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   
1317:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get bit[23:0] of the flag */
1318:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2C_IT &= FLAG_MASK;
 26594              		.loc 1 1318 0
 26595 002c 3B68     		ldr	r3, [r7, #0]
 26596 002e 23F07F43 		bic	r3, r3, #-16777216
 26597 0032 3B60     		str	r3, [r7, #0]
1319:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1320:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the status of the specified I2C flag */
1321:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 26598              		.loc 1 1321 0
 26599 0034 7B68     		ldr	r3, [r7, #4]
 26600 0036 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 26601 0038 9BB2     		uxth	r3, r3
 26602 003a 1A46     		mov	r2, r3
 26603 003c 3B68     		ldr	r3, [r7, #0]
 26604 003e 02EA0303 		and	r3, r2, r3
 26605 0042 002B     		cmp	r3, #0
 26606 0044 06D0     		beq	.L90
 26607              		.loc 1 1321 0 is_stmt 0 discriminator 1
 26608 0046 BB68     		ldr	r3, [r7, #8]
 26609 0048 002B     		cmp	r3, #0
 26610 004a 03D0     		beq	.L90
1322:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
1323:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* I2C_IT is set */
1324:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     bitstatus = SET;
 26611              		.loc 1 1324 0 is_stmt 1
 26612 004c 4FF00103 		mov	r3, #1
 26613 0050 FB73     		strb	r3, [r7, #15]
 26614 0052 02E0     		b	.L91
 26615              	.L90:
1325:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
1326:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
1327:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
1328:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* I2C_IT is reset */
1329:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     bitstatus = RESET;
 26616              		.loc 1 1329 0
 26617 0054 4FF00003 		mov	r3, #0
 26618 0058 FB73     		strb	r3, [r7, #15]
 26619              	.L91:
1330:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
1331:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Return the I2C_IT status */
1332:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   return  bitstatus;
 26620              		.loc 1 1332 0
 26621 005a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1333:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 26622              		.loc 1 1333 0
 26623 005c 1846     		mov	r0, r3
 26624 005e 07F11407 		add	r7, r7, #20
 26625 0062 BD46     		mov	sp, r7
 26626 0064 80BC     		pop	{r7}
 26627 0066 7047     		bx	lr
 26628              		.cfi_endproc
 26629              	.LFE141:
 26631              		.section	.text.I2C_ClearITPendingBit,"ax",%progbits
 26632              		.align	2
 26633              		.global	I2C_ClearITPendingBit
 26634              		.thumb
 26635              		.thumb_func
 26637              	I2C_ClearITPendingBit:
 26638              	.LFB142:
1334:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1335:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
1336:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Clears the I2Cx's interrupt pending bits.
1337:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
1338:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_IT: specifies the interrupt pending bit to clear. 
1339:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be any combination of the following values:
1340:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_SMBALERT: SMBus Alert interrupt
1341:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_TIMEOUT: Timeout or Tlow error interrupt
1342:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_PECERR: PEC error in reception  interrupt
1343:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_OVR: Overrun/Underrun interrupt (Slave mode)
1344:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_AF: Acknowledge failure interrupt
1345:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_ARLO: Arbitration lost interrupt (Master mode)
1346:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_BERR: Bus error interrupt
1347:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * 
1348:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   STOPF (STOP detection) is cleared by software sequence: a read operation 
1349:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          to I2C_SR1 register (I2C_GetITStatus()) followed by a write operation to 
1350:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          I2C_CR1 register (I2C_Cmd() to re-enable the I2C peripheral).
1351:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   ADD10 (10-bit header sent) is cleared by software sequence: a read 
1352:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          operation to I2C_SR1 (I2C_GetITStatus()) followed by writing the second 
1353:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          byte of the address in I2C_DR register.
1354:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   BTF (Byte Transfer Finished) is cleared by software sequence: a read 
1355:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          operation to I2C_SR1 register (I2C_GetITStatus()) followed by a 
1356:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          read/write to I2C_DR register (I2C_SendData()).
1357:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   ADDR (Address sent) is cleared by software sequence: a read operation to 
1358:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          I2C_SR1 register (I2C_GetITStatus()) followed by a read operation to 
1359:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          I2C_SR2 register ((void)(I2Cx->SR2)).
1360:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   SB (Start Bit) is cleared by software sequence: a read operation to 
1361:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          I2C_SR1 register (I2C_GetITStatus()) followed by a write operation to 
1362:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          I2C_DR register (I2C_SendData()).
1363:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
1364:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
1365:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_ClearITPendingBit(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
1366:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 26639              		.loc 1 1366 0
 26640              		.cfi_startproc
 26641              		@ args = 0, pretend = 0, frame = 16
 26642              		@ frame_needed = 1, uses_anonymous_args = 0
 26643              		@ link register save eliminated.
 26644 0000 80B4     		push	{r7}
 26645              	.LCFI96:
 26646              		.cfi_def_cfa_offset 4
 26647 0002 85B0     		sub	sp, sp, #20
 26648              	.LCFI97:
 26649              		.cfi_def_cfa_offset 24
 26650 0004 00AF     		add	r7, sp, #0
 26651              		.cfi_offset 7, -4
 26652              	.LCFI98:
 26653              		.cfi_def_cfa_register 7
 26654 0006 7860     		str	r0, [r7, #4]
 26655 0008 3960     		str	r1, [r7, #0]
1367:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint32_t flagpos = 0;
 26656              		.loc 1 1367 0
 26657 000a 4FF00003 		mov	r3, #0
 26658 000e FB60     		str	r3, [r7, #12]
1368:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
1369:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1370:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_CLEAR_IT(I2C_IT));
1371:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1372:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get the I2C flag position */
1373:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   flagpos = I2C_IT & FLAG_MASK;
 26659              		.loc 1 1373 0
 26660 0010 3B68     		ldr	r3, [r7, #0]
 26661 0012 23F07F43 		bic	r3, r3, #-16777216
 26662 0016 FB60     		str	r3, [r7, #12]
1374:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1375:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Clear the selected I2C flag */
1376:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->SR1 = (uint16_t)~flagpos;
 26663              		.loc 1 1376 0
 26664 0018 FB68     		ldr	r3, [r7, #12]
 26665 001a 9BB2     		uxth	r3, r3
 26666 001c 6FEA0303 		mvn	r3, r3
 26667 0020 9AB2     		uxth	r2, r3
 26668 0022 7B68     		ldr	r3, [r7, #4]
 26669 0024 9A82     		strh	r2, [r3, #20]	@ movhi
1377:../inc/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 26670              		.loc 1 1377 0
 26671 0026 07F11407 		add	r7, r7, #20
 26672 002a BD46     		mov	sp, r7
 26673 002c 80BC     		pop	{r7}
 26674 002e 7047     		bx	lr
 26675              		.cfi_endproc
 26676              	.LFE142:
 26678              		.text
 26679              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_i2c.c
     /tmp/ccfYNa4E.s:24584  .text.I2C_DeInit:00000000 $t
     /tmp/ccfYNa4E.s:24589  .text.I2C_DeInit:00000000 I2C_DeInit
     /tmp/ccfYNa4E.s:24658  .text.I2C_DeInit:00000074 $d
     /tmp/ccfYNa4E.s:24665  .text.I2C_Init:00000000 $t
     /tmp/ccfYNa4E.s:24670  .text.I2C_Init:00000000 I2C_Init
     /tmp/ccfYNa4E.s:24893  .text.I2C_Init:000001a0 $d
     /tmp/ccfYNa4E.s:24901  .text.I2C_StructInit:00000000 $t
     /tmp/ccfYNa4E.s:24906  .text.I2C_StructInit:00000000 I2C_StructInit
     /tmp/ccfYNa4E.s:24957  .text.I2C_Cmd:00000000 $t
     /tmp/ccfYNa4E.s:24962  .text.I2C_Cmd:00000000 I2C_Cmd
     /tmp/ccfYNa4E.s:25014  .text.I2C_GenerateSTART:00000000 $t
     /tmp/ccfYNa4E.s:25019  .text.I2C_GenerateSTART:00000000 I2C_GenerateSTART
     /tmp/ccfYNa4E.s:25071  .text.I2C_GenerateSTOP:00000000 $t
     /tmp/ccfYNa4E.s:25076  .text.I2C_GenerateSTOP:00000000 I2C_GenerateSTOP
     /tmp/ccfYNa4E.s:25128  .text.I2C_Send7bitAddress:00000000 $t
     /tmp/ccfYNa4E.s:25133  .text.I2C_Send7bitAddress:00000000 I2C_Send7bitAddress
     /tmp/ccfYNa4E.s:25184  .text.I2C_AcknowledgeConfig:00000000 $t
     /tmp/ccfYNa4E.s:25189  .text.I2C_AcknowledgeConfig:00000000 I2C_AcknowledgeConfig
     /tmp/ccfYNa4E.s:25241  .text.I2C_OwnAddress2Config:00000000 $t
     /tmp/ccfYNa4E.s:25246  .text.I2C_OwnAddress2Config:00000000 I2C_OwnAddress2Config
     /tmp/ccfYNa4E.s:25299  .text.I2C_DualAddressCmd:00000000 $t
     /tmp/ccfYNa4E.s:25304  .text.I2C_DualAddressCmd:00000000 I2C_DualAddressCmd
     /tmp/ccfYNa4E.s:25356  .text.I2C_GeneralCallCmd:00000000 $t
     /tmp/ccfYNa4E.s:25361  .text.I2C_GeneralCallCmd:00000000 I2C_GeneralCallCmd
     /tmp/ccfYNa4E.s:25413  .text.I2C_SoftwareResetCmd:00000000 $t
     /tmp/ccfYNa4E.s:25418  .text.I2C_SoftwareResetCmd:00000000 I2C_SoftwareResetCmd
     /tmp/ccfYNa4E.s:25472  .text.I2C_StretchClockCmd:00000000 $t
     /tmp/ccfYNa4E.s:25477  .text.I2C_StretchClockCmd:00000000 I2C_StretchClockCmd
     /tmp/ccfYNa4E.s:25529  .text.I2C_FastModeDutyCycleConfig:00000000 $t
     /tmp/ccfYNa4E.s:25534  .text.I2C_FastModeDutyCycleConfig:00000000 I2C_FastModeDutyCycleConfig
     /tmp/ccfYNa4E.s:25586  .text.I2C_NACKPositionConfig:00000000 $t
     /tmp/ccfYNa4E.s:25591  .text.I2C_NACKPositionConfig:00000000 I2C_NACKPositionConfig
     /tmp/ccfYNa4E.s:25643  .text.I2C_SMBusAlertConfig:00000000 $t
     /tmp/ccfYNa4E.s:25648  .text.I2C_SMBusAlertConfig:00000000 I2C_SMBusAlertConfig
     /tmp/ccfYNa4E.s:25700  .text.I2C_ARPCmd:00000000 $t
     /tmp/ccfYNa4E.s:25705  .text.I2C_ARPCmd:00000000 I2C_ARPCmd
     /tmp/ccfYNa4E.s:25757  .text.I2C_SendData:00000000 $t
     /tmp/ccfYNa4E.s:25762  .text.I2C_SendData:00000000 I2C_SendData
     /tmp/ccfYNa4E.s:25796  .text.I2C_ReceiveData:00000000 $t
     /tmp/ccfYNa4E.s:25801  .text.I2C_ReceiveData:00000000 I2C_ReceiveData
     /tmp/ccfYNa4E.s:25834  .text.I2C_TransmitPEC:00000000 $t
     /tmp/ccfYNa4E.s:25839  .text.I2C_TransmitPEC:00000000 I2C_TransmitPEC
     /tmp/ccfYNa4E.s:25891  .text.I2C_PECPositionConfig:00000000 $t
     /tmp/ccfYNa4E.s:25896  .text.I2C_PECPositionConfig:00000000 I2C_PECPositionConfig
     /tmp/ccfYNa4E.s:25948  .text.I2C_CalculatePEC:00000000 $t
     /tmp/ccfYNa4E.s:25953  .text.I2C_CalculatePEC:00000000 I2C_CalculatePEC
     /tmp/ccfYNa4E.s:26005  .text.I2C_GetPEC:00000000 $t
     /tmp/ccfYNa4E.s:26010  .text.I2C_GetPEC:00000000 I2C_GetPEC
     /tmp/ccfYNa4E.s:26045  .text.I2C_DMACmd:00000000 $t
     /tmp/ccfYNa4E.s:26050  .text.I2C_DMACmd:00000000 I2C_DMACmd
     /tmp/ccfYNa4E.s:26102  .text.I2C_DMALastTransferCmd:00000000 $t
     /tmp/ccfYNa4E.s:26107  .text.I2C_DMALastTransferCmd:00000000 I2C_DMALastTransferCmd
     /tmp/ccfYNa4E.s:26159  .text.I2C_ReadRegister:00000000 $t
     /tmp/ccfYNa4E.s:26164  .text.I2C_ReadRegister:00000000 I2C_ReadRegister
     /tmp/ccfYNa4E.s:26209  .text.I2C_ITConfig:00000000 $t
     /tmp/ccfYNa4E.s:26214  .text.I2C_ITConfig:00000000 I2C_ITConfig
     /tmp/ccfYNa4E.s:26272  .text.I2C_CheckEvent:00000000 $t
     /tmp/ccfYNa4E.s:26277  .text.I2C_CheckEvent:00000000 I2C_CheckEvent
     /tmp/ccfYNa4E.s:26355  .text.I2C_GetLastEvent:00000000 $t
     /tmp/ccfYNa4E.s:26360  .text.I2C_GetLastEvent:00000000 I2C_GetLastEvent
     /tmp/ccfYNa4E.s:26418  .text.I2C_GetFlagStatus:00000000 $t
     /tmp/ccfYNa4E.s:26423  .text.I2C_GetFlagStatus:00000000 I2C_GetFlagStatus
     /tmp/ccfYNa4E.s:26508  .text.I2C_ClearFlag:00000000 $t
     /tmp/ccfYNa4E.s:26513  .text.I2C_ClearFlag:00000000 I2C_ClearFlag
     /tmp/ccfYNa4E.s:26555  .text.I2C_GetITStatus:00000000 $t
     /tmp/ccfYNa4E.s:26560  .text.I2C_GetITStatus:00000000 I2C_GetITStatus
     /tmp/ccfYNa4E.s:26632  .text.I2C_ClearITPendingBit:00000000 $t
     /tmp/ccfYNa4E.s:26637  .text.I2C_ClearITPendingBit:00000000 I2C_ClearITPendingBit
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
RCC_APB1PeriphResetCmd
RCC_GetClocksFreq
